
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011148  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080112d8  080112d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011704  08011704  0001308c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011704  08011704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801170c  0801170c  0001308c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801170c  0801170c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011714  08011714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08011718  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001308c  2**0
                  CONTENTS
 10 .bss          00005634  2000008c  2000008c  0001308c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200056c0  200056c0  0001308c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001308c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e915  00000000  00000000  000130bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006751  00000000  00000000  000419d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021e0  00000000  00000000  00048128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a43  00000000  00000000  0004a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029323  00000000  00000000  0004bd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028062  00000000  00000000  0007506e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e768c  00000000  00000000  0009d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018475c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000999c  00000000  00000000  001847a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0018e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080112c0 	.word	0x080112c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	080112c0 	.word	0x080112c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_ZN3SCSC1Ev>:
 */

#include <stddef.h>
#include "SCS.h"

SCS::SCS()
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	4a07      	ldr	r2, [pc, #28]	@ (80005d4 <_ZN3SCSC1Ev+0x28>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
{
	Level = 1; // All commands except broadcast commands return responses
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2201      	movs	r2, #1
 80005be:	711a      	strb	r2, [r3, #4]
	Error = 0;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	719a      	strb	r2, [r3, #6]
}
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	080113e4 	.word	0x080113e4

080005d8 <_ZN3SCS8Host2SCSEPhS0_t>:
}

// Split a 16-bit number into two 8-bit numbers
// DataL is the low bit, DataH is the high bit
void SCS::Host2SCS(u8 *DataL, u8* DataH, u16 Data)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	807b      	strh	r3, [r7, #2]
	if(End){
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d00a      	beq.n	8000604 <_ZN3SCS8Host2SCSEPhS0_t+0x2c>
		*DataL = (Data>>8);
 80005ee:	887b      	ldrh	r3, [r7, #2]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	701a      	strb	r2, [r3, #0]
		*DataH = (Data&0xff);
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	701a      	strb	r2, [r3, #0]
	}else{
		*DataH = (Data>>8);
		*DataL = (Data&0xff);
	}
}
 8000602:	e009      	b.n	8000618 <_ZN3SCS8Host2SCSEPhS0_t+0x40>
		*DataH = (Data>>8);
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	701a      	strb	r2, [r3, #0]
		*DataL = (Data&0xff);
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	701a      	strb	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <_ZN3SCS8SCS2HostEhh>:

// 8-bit numbers are combined into a 16-bit number
// DataL is the low bit, DataH is the high bit
u16 SCS::SCS2Host(u8 DataL, u8 DataH)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
 8000630:	4613      	mov	r3, r2
 8000632:	70bb      	strb	r3, [r7, #2]
	u16 Data;
	if(End){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	795b      	ldrb	r3, [r3, #5]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00a      	beq.n	8000652 <_ZN3SCS8SCS2HostEhh+0x2e>
		Data = DataL;
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	81fb      	strh	r3, [r7, #14]
		Data<<=8;
 8000640:	89fb      	ldrh	r3, [r7, #14]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	81fb      	strh	r3, [r7, #14]
		Data |= DataH;
 8000646:	78bb      	ldrb	r3, [r7, #2]
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4313      	orrs	r3, r2
 800064e:	81fb      	strh	r3, [r7, #14]
 8000650:	e009      	b.n	8000666 <_ZN3SCS8SCS2HostEhh+0x42>
	}else{
		Data = DataH;
 8000652:	78bb      	ldrb	r3, [r7, #2]
 8000654:	81fb      	strh	r3, [r7, #14]
		Data<<=8;
 8000656:	89fb      	ldrh	r3, [r7, #14]
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	81fb      	strh	r3, [r7, #14]
		Data |= DataL;
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	b29a      	uxth	r2, r3
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	4313      	orrs	r3, r2
 8000664:	81fb      	strh	r3, [r7, #14]
	}
	return Data;
 8000666:	89fb      	ldrh	r3, [r7, #14]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <_ZN3SCS8writeBufEhhPhhh>:

void SCS::writeBuf(u8 ID, u8 MemAddr, u8 *nDat, u8 nLen, u8 Fun)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	72fb      	strb	r3, [r7, #11]
 8000682:	4613      	mov	r3, r2
 8000684:	72bb      	strb	r3, [r7, #10]
	u8 msgLen = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	77fb      	strb	r3, [r7, #31]
	u8 bBuf[6];
	u8 CheckSum = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	77bb      	strb	r3, [r7, #30]
	bBuf[0] = 0xff;
 800068e:	23ff      	movs	r3, #255	@ 0xff
 8000690:	753b      	strb	r3, [r7, #20]
	bBuf[1] = 0xff;
 8000692:	23ff      	movs	r3, #255	@ 0xff
 8000694:	757b      	strb	r3, [r7, #21]
	bBuf[2] = ID;
 8000696:	7afb      	ldrb	r3, [r7, #11]
 8000698:	75bb      	strb	r3, [r7, #22]
	bBuf[4] = Fun;
 800069a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800069e:	763b      	strb	r3, [r7, #24]
	if(nDat){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d013      	beq.n	80006ce <_ZN3SCS8writeBufEhhPhhh+0x5a>
		msgLen += nLen + 1;
 80006a6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	4413      	add	r3, r2
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	3301      	adds	r3, #1
 80006b2:	77fb      	strb	r3, [r7, #31]
		bBuf[3] = msgLen;
 80006b4:	7ffb      	ldrb	r3, [r7, #31]
 80006b6:	75fb      	strb	r3, [r7, #23]
		bBuf[5] = MemAddr;
 80006b8:	7abb      	ldrb	r3, [r7, #10]
 80006ba:	767b      	strb	r3, [r7, #25]
		writeSCS(bBuf, 6);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f107 0114 	add.w	r1, r7, #20
 80006c6:	2206      	movs	r2, #6
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	4798      	blx	r3
 80006cc:	e009      	b.n	80006e2 <_ZN3SCS8writeBufEhhPhhh+0x6e>
		
	}else{
		bBuf[3] = msgLen;
 80006ce:	7ffb      	ldrb	r3, [r7, #31]
 80006d0:	75fb      	strb	r3, [r7, #23]
		writeSCS(bBuf, 5);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f107 0114 	add.w	r1, r7, #20
 80006dc:	2205      	movs	r2, #5
 80006de:	68f8      	ldr	r0, [r7, #12]
 80006e0:	4798      	blx	r3
	}
	CheckSum = ID + msgLen + Fun + MemAddr;
 80006e2:	7afa      	ldrb	r2, [r7, #11]
 80006e4:	7ffb      	ldrb	r3, [r7, #31]
 80006e6:	4413      	add	r3, r2
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80006ee:	4413      	add	r3, r2
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	7abb      	ldrb	r3, [r7, #10]
 80006f4:	4413      	add	r3, r2
 80006f6:	77bb      	strb	r3, [r7, #30]
	u8 i = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	777b      	strb	r3, [r7, #29]
	if(nDat){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d019      	beq.n	8000736 <_ZN3SCS8writeBufEhhPhhh+0xc2>
		for(i=0; i<nLen; i++){
 8000702:	2300      	movs	r3, #0
 8000704:	777b      	strb	r3, [r7, #29]
 8000706:	e009      	b.n	800071c <_ZN3SCS8writeBufEhhPhhh+0xa8>
			CheckSum += nDat[i];
 8000708:	7f7b      	ldrb	r3, [r7, #29]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	7fbb      	ldrb	r3, [r7, #30]
 8000712:	4413      	add	r3, r2
 8000714:	77bb      	strb	r3, [r7, #30]
		for(i=0; i<nLen; i++){
 8000716:	7f7b      	ldrb	r3, [r7, #29]
 8000718:	3301      	adds	r3, #1
 800071a:	777b      	strb	r3, [r7, #29]
 800071c:	7f7a      	ldrb	r2, [r7, #29]
 800071e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000722:	429a      	cmp	r2, r3
 8000724:	d3f0      	bcc.n	8000708 <_ZN3SCS8writeBufEhhPhhh+0x94>
		}
		writeSCS(nDat, nLen);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	68f8      	ldr	r0, [r7, #12]
 8000734:	4798      	blx	r3
	}
	writeSCS(~CheckSum);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3308      	adds	r3, #8
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	7fba      	ldrb	r2, [r7, #30]
 8000740:	43d2      	mvns	r2, r2
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	4611      	mov	r1, r2
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	4798      	blx	r3
}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <_ZN3SCS8genWriteEhhPhh>:

// Normal write command
// Servo ID, MemAddr memory table address, write data, write length
int SCS::genWrite(u8 ID, u8 MemAddr, u8 *nDat, u8 nLen)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af02      	add	r7, sp, #8
 8000758:	60f8      	str	r0, [r7, #12]
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	72fb      	strb	r3, [r7, #11]
 8000760:	4613      	mov	r3, r2
 8000762:	72bb      	strb	r3, [r7, #10]
	rFlushSCS();
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	330c      	adds	r3, #12
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	4798      	blx	r3
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 8000770:	7aba      	ldrb	r2, [r7, #10]
 8000772:	7af9      	ldrb	r1, [r7, #11]
 8000774:	2303      	movs	r3, #3
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	7e3b      	ldrb	r3, [r7, #24]
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff ff78 	bl	8000674 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3310      	adds	r3, #16
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	4798      	blx	r3
	return Ack(ID);
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	4619      	mov	r1, r3
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	f000 fa1f 	bl	8000bd8 <_ZN3SCS3AckEh>
 800079a:	4603      	mov	r3, r0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <_ZN3SCS8regWriteEhhPhh>:

// Asynchronous write command
// Servo ID, MemAddr memory table address, write data, write length
int SCS::regWrite(u8 ID, u8 MemAddr, u8 *nDat, u8 nLen)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	460b      	mov	r3, r1
 80007b0:	72fb      	strb	r3, [r7, #11]
 80007b2:	4613      	mov	r3, r2
 80007b4:	72bb      	strb	r3, [r7, #10]
	rFlushSCS();
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	330c      	adds	r3, #12
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	4798      	blx	r3
	writeBuf(ID, MemAddr, nDat, nLen, INST_REG_WRITE);
 80007c2:	7aba      	ldrb	r2, [r7, #10]
 80007c4:	7af9      	ldrb	r1, [r7, #11]
 80007c6:	2304      	movs	r3, #4
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	7e3b      	ldrb	r3, [r7, #24]
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f7ff ff4f 	bl	8000674 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3310      	adds	r3, #16
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	4798      	blx	r3
	return Ack(ID);
 80007e2:	7afb      	ldrb	r3, [r7, #11]
 80007e4:	4619      	mov	r1, r3
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f000 f9f6 	bl	8000bd8 <_ZN3SCS3AckEh>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_ZN3SCS14RegWriteActionEh>:

// Asynchronous write execution command
// Servo ID
int SCS::RegWriteAction(u8 ID)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b084      	sub	sp, #16
 80007fa:	af02      	add	r7, sp, #8
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	460b      	mov	r3, r1
 8000800:	70fb      	strb	r3, [r7, #3]
	rFlushSCS();
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	330c      	adds	r3, #12
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	4798      	blx	r3
	writeBuf(ID, 0, NULL, 0, INST_REG_ACTION);
 800080e:	78f9      	ldrb	r1, [r7, #3]
 8000810:	2305      	movs	r3, #5
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	2300      	movs	r3, #0
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2300      	movs	r3, #0
 800081a:	2200      	movs	r2, #0
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff29 	bl	8000674 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3310      	adds	r3, #16
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	4798      	blx	r3
	return Ack(ID);
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	4619      	mov	r1, r3
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 f9d0 	bl	8000bd8 <_ZN3SCS3AckEh>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <_ZN3SCS9syncWriteEPhhhS0_h>:

// Synchronous write command
// Servo ID[] array, IDN array length, MemAddr memory table address, write data, write length
void SCS::syncWrite(u8 ID[], u8 IDN, u8 MemAddr, u8 *nDat, u8 nLen)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b088      	sub	sp, #32
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	4611      	mov	r1, r2
 800084e:	461a      	mov	r2, r3
 8000850:	460b      	mov	r3, r1
 8000852:	71fb      	strb	r3, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	71bb      	strb	r3, [r7, #6]
	rFlushSCS();
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	330c      	adds	r3, #12
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	4798      	blx	r3
	u8 mesLen = ((nLen+1)*IDN+4);
 8000864:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000868:	3301      	adds	r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	79fa      	ldrb	r2, [r7, #7]
 800086e:	fb12 f303 	smulbb	r3, r2, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	3304      	adds	r3, #4
 8000876:	773b      	strb	r3, [r7, #28]
	u8 Sum = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	77fb      	strb	r3, [r7, #31]
	u8 bBuf[7];
	bBuf[0] = 0xff;
 800087c:	23ff      	movs	r3, #255	@ 0xff
 800087e:	753b      	strb	r3, [r7, #20]
	bBuf[1] = 0xff;
 8000880:	23ff      	movs	r3, #255	@ 0xff
 8000882:	757b      	strb	r3, [r7, #21]
	bBuf[2] = 0xfe;
 8000884:	23fe      	movs	r3, #254	@ 0xfe
 8000886:	75bb      	strb	r3, [r7, #22]
	bBuf[3] = mesLen;
 8000888:	7f3b      	ldrb	r3, [r7, #28]
 800088a:	75fb      	strb	r3, [r7, #23]
	bBuf[4] = INST_SYNC_WRITE;
 800088c:	2383      	movs	r3, #131	@ 0x83
 800088e:	763b      	strb	r3, [r7, #24]
	bBuf[5] = MemAddr;
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	767b      	strb	r3, [r7, #25]
	bBuf[6] = nLen;
 8000894:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000898:	76bb      	strb	r3, [r7, #26]
	writeSCS(bBuf, 7);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f107 0114 	add.w	r1, r7, #20
 80008a4:	2207      	movs	r2, #7
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	4798      	blx	r3

	Sum = 0xfe + mesLen + INST_SYNC_WRITE + MemAddr + nLen;
 80008aa:	7f3a      	ldrb	r2, [r7, #28]
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	4413      	add	r3, r2
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008b6:	4413      	add	r3, r2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	3b7f      	subs	r3, #127	@ 0x7f
 80008bc:	77fb      	strb	r3, [r7, #31]
	u8 i, j;
	for(i=0; i<IDN; i++){
 80008be:	2300      	movs	r3, #0
 80008c0:	77bb      	strb	r3, [r7, #30]
 80008c2:	e03c      	b.n	800093e <_ZN3SCS9syncWriteEPhhhS0_h+0xfc>
		writeSCS(ID[i]);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3308      	adds	r3, #8
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	7fba      	ldrb	r2, [r7, #30]
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	440a      	add	r2, r1
 80008d2:	7812      	ldrb	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	4798      	blx	r3
		writeSCS(nDat+i*nLen, nLen);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	7fba      	ldrb	r2, [r7, #30]
 80008e2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80008e6:	fb01 f202 	mul.w	r2, r1, r2
 80008ea:	4611      	mov	r1, r2
 80008ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008ee:	4411      	add	r1, r2
 80008f0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	4798      	blx	r3
		Sum += ID[i];
 80008f8:	7fbb      	ldrb	r3, [r7, #30]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	4413      	add	r3, r2
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	7ffb      	ldrb	r3, [r7, #31]
 8000902:	4413      	add	r3, r2
 8000904:	77fb      	strb	r3, [r7, #31]
		for(j=0; j<nLen; j++){
 8000906:	2300      	movs	r3, #0
 8000908:	777b      	strb	r3, [r7, #29]
 800090a:	e010      	b.n	800092e <_ZN3SCS9syncWriteEPhhhS0_h+0xec>
			Sum += nDat[i*nLen+j];
 800090c:	7fbb      	ldrb	r3, [r7, #30]
 800090e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000912:	fb03 f202 	mul.w	r2, r3, r2
 8000916:	7f7b      	ldrb	r3, [r7, #29]
 8000918:	4413      	add	r3, r2
 800091a:	461a      	mov	r2, r3
 800091c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800091e:	4413      	add	r3, r2
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	7ffb      	ldrb	r3, [r7, #31]
 8000924:	4413      	add	r3, r2
 8000926:	77fb      	strb	r3, [r7, #31]
		for(j=0; j<nLen; j++){
 8000928:	7f7b      	ldrb	r3, [r7, #29]
 800092a:	3301      	adds	r3, #1
 800092c:	777b      	strb	r3, [r7, #29]
 800092e:	7f7a      	ldrb	r2, [r7, #29]
 8000930:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000934:	429a      	cmp	r2, r3
 8000936:	d3e9      	bcc.n	800090c <_ZN3SCS9syncWriteEPhhhS0_h+0xca>
	for(i=0; i<IDN; i++){
 8000938:	7fbb      	ldrb	r3, [r7, #30]
 800093a:	3301      	adds	r3, #1
 800093c:	77bb      	strb	r3, [r7, #30]
 800093e:	7fba      	ldrb	r2, [r7, #30]
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	429a      	cmp	r2, r3
 8000944:	d3be      	bcc.n	80008c4 <_ZN3SCS9syncWriteEPhhhS0_h+0x82>
		}
	}
	writeSCS(~Sum);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3308      	adds	r3, #8
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	7ffa      	ldrb	r2, [r7, #31]
 8000950:	43d2      	mvns	r2, r2
 8000952:	b2d2      	uxtb	r2, r2
 8000954:	4611      	mov	r1, r2
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	4798      	blx	r3
	wFlushSCS();
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3310      	adds	r3, #16
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	4798      	blx	r3
}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_ZN3SCS9writeByteEhhh>:

int SCS::writeByte(u8 ID, u8 MemAddr, u8 bDat)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af02      	add	r7, sp, #8
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4603      	mov	r3, r0
 800097e:	70fb      	strb	r3, [r7, #3]
 8000980:	460b      	mov	r3, r1
 8000982:	70bb      	strb	r3, [r7, #2]
 8000984:	4613      	mov	r3, r2
 8000986:	707b      	strb	r3, [r7, #1]
	rFlushSCS();
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	330c      	adds	r3, #12
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	4798      	blx	r3
	writeBuf(ID, MemAddr, &bDat, 1, INST_WRITE);
 8000994:	1c7b      	adds	r3, r7, #1
 8000996:	78ba      	ldrb	r2, [r7, #2]
 8000998:	78f9      	ldrb	r1, [r7, #3]
 800099a:	2003      	movs	r0, #3
 800099c:	9001      	str	r0, [sp, #4]
 800099e:	2001      	movs	r0, #1
 80009a0:	9000      	str	r0, [sp, #0]
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fe66 	bl	8000674 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3310      	adds	r3, #16
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	4798      	blx	r3
	return Ack(ID);
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f90d 	bl	8000bd8 <_ZN3SCS3AckEh>
 80009be:	4603      	mov	r3, r0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_ZN3SCS4ReadEhhPhh>:
}

// Read command
// Servo ID, MemAddr memory table address, return data nData, data length nLen
int SCS::Read(u8 ID, u8 MemAddr, u8 *nData, u8 nLen)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b08b      	sub	sp, #44	@ 0x2c
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	72fb      	strb	r3, [r7, #11]
 80009d6:	4613      	mov	r3, r2
 80009d8:	72bb      	strb	r3, [r7, #10]
	rFlushSCS();
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	330c      	adds	r3, #12
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	4798      	blx	r3
	writeBuf(ID, MemAddr, &nLen, 1, INST_READ);
 80009e6:	7aba      	ldrb	r2, [r7, #10]
 80009e8:	7af9      	ldrb	r1, [r7, #11]
 80009ea:	2302      	movs	r3, #2
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	2301      	movs	r3, #1
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff fe3c 	bl	8000674 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3310      	adds	r3, #16
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	4798      	blx	r3
	if(!checkHead()){
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f000 f8b2 	bl	8000b72 <_ZN3SCS9checkHeadEv>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <_ZN3SCS4ReadEhhPhh+0x5a>
		return 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e061      	b.n	8000ae6 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	u8 bBuf[4];
	Error = 0;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2200      	movs	r2, #0
 8000a26:	719a      	strb	r2, [r3, #6]
	if(readSCS(bBuf, 3)!=3){
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f107 0114 	add.w	r1, r7, #20
 8000a34:	2203      	movs	r2, #3
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	4798      	blx	r3
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <_ZN3SCS4ReadEhhPhh+0x86>
		return 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e04b      	b.n	8000ae6 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	int Size = readSCS(nData, nLen);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3304      	adds	r3, #4
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	4798      	blx	r3
 8000a60:	61b8      	str	r0, [r7, #24]
	if(Size!=nLen){
 8000a62:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a66:	461a      	mov	r2, r3
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d001      	beq.n	8000a72 <_ZN3SCS4ReadEhhPhh+0xaa>
		return 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e039      	b.n	8000ae6 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	if(readSCS(bBuf+3, 1)!=1){
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3304      	adds	r3, #4
 8000a78:	681c      	ldr	r4, [r3, #0]
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	3303      	adds	r3, #3
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	47a0      	blx	r4
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <_ZN3SCS4ReadEhhPhh+0xd4>
		return 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e024      	b.n	8000ae6 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	u8 calSum = bBuf[0]+bBuf[1]+bBuf[2];
 8000a9c:	7d3a      	ldrb	r2, [r7, #20]
 8000a9e:	7d7b      	ldrb	r3, [r7, #21]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	7dbb      	ldrb	r3, [r7, #22]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	77fb      	strb	r3, [r7, #31]
	u8 i;
	for(i=0; i<Size; i++){
 8000aaa:	2300      	movs	r3, #0
 8000aac:	77bb      	strb	r3, [r7, #30]
 8000aae:	e009      	b.n	8000ac4 <_ZN3SCS4ReadEhhPhh+0xfc>
		calSum += nData[i];
 8000ab0:	7fbb      	ldrb	r3, [r7, #30]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	7ffb      	ldrb	r3, [r7, #31]
 8000aba:	4413      	add	r3, r2
 8000abc:	77fb      	strb	r3, [r7, #31]
	for(i=0; i<Size; i++){
 8000abe:	7fbb      	ldrb	r3, [r7, #30]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	77bb      	strb	r3, [r7, #30]
 8000ac4:	7fbb      	ldrb	r3, [r7, #30]
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dcf1      	bgt.n	8000ab0 <_ZN3SCS4ReadEhhPhh+0xe8>
	}
	calSum = ~calSum;
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	77fb      	strb	r3, [r7, #31]
	if(calSum!=bBuf[3]){
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	7ffa      	ldrb	r2, [r7, #31]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d001      	beq.n	8000ade <_ZN3SCS4ReadEhhPhh+0x116>
		return 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e003      	b.n	8000ae6 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	Error = bBuf[2];
 8000ade:	7dba      	ldrb	r2, [r7, #22]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	719a      	strb	r2, [r3, #6]
	return Size;
 8000ae4:	69bb      	ldr	r3, [r7, #24]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	@ 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd90      	pop	{r4, r7, pc}

08000aee <_ZN3SCS8readByteEhh>:

// Read 1 byte, return -1 if timeout
int SCS::readByte(u8 ID, u8 MemAddr)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af02      	add	r7, sp, #8
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	70fb      	strb	r3, [r7, #3]
 8000afa:	4613      	mov	r3, r2
 8000afc:	70bb      	strb	r3, [r7, #2]
	u8 bDat;
	int Size = Read(ID, MemAddr, &bDat, 1);
 8000afe:	f107 030b 	add.w	r3, r7, #11
 8000b02:	78ba      	ldrb	r2, [r7, #2]
 8000b04:	78f9      	ldrb	r1, [r7, #3]
 8000b06:	2001      	movs	r0, #1
 8000b08:	9000      	str	r0, [sp, #0]
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ff5c 	bl	80009c8 <_ZN3SCS4ReadEhhPhh>
 8000b10:	60f8      	str	r0, [r7, #12]
	if(Size!=1){
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d002      	beq.n	8000b1e <_ZN3SCS8readByteEhh+0x30>
		return -1;
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b1c:	e000      	b.n	8000b20 <_ZN3SCS8readByteEhh+0x32>
	}else{
		return bDat;
 8000b1e:	7afb      	ldrb	r3, [r7, #11]
	}
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_ZN3SCS8readWordEhh>:

// Read 2 bytes, return -1 if timeout
int SCS::readWord(u8 ID, u8 MemAddr)
{	
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
 8000b34:	4613      	mov	r3, r2
 8000b36:	70bb      	strb	r3, [r7, #2]
	u8 nDat[2];
	int Size;
	u16 wDat;
	Size = Read(ID, MemAddr, nDat, 2);
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	78ba      	ldrb	r2, [r7, #2]
 8000b3e:	78f9      	ldrb	r1, [r7, #3]
 8000b40:	2002      	movs	r0, #2
 8000b42:	9000      	str	r0, [sp, #0]
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff3f 	bl	80009c8 <_ZN3SCS4ReadEhhPhh>
 8000b4a:	60f8      	str	r0, [r7, #12]
	if(Size!=2)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d002      	beq.n	8000b58 <_ZN3SCS8readWordEhh+0x30>
		return -1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b56:	e008      	b.n	8000b6a <_ZN3SCS8readWordEhh+0x42>
	wDat = SCS2Host(nDat[0], nDat[1]);
 8000b58:	7a3b      	ldrb	r3, [r7, #8]
 8000b5a:	7a7a      	ldrb	r2, [r7, #9]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fd60 	bl	8000624 <_ZN3SCS8SCS2HostEhh>
 8000b64:	4603      	mov	r3, r0
 8000b66:	817b      	strh	r3, [r7, #10]
	return wDat;
 8000b68:	897b      	ldrh	r3, [r7, #10]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_ZN3SCS9checkHeadEv>:
	Error = bBuf[2];
	return bBuf[0];
}

int SCS::checkHead()
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	u8 bDat;
	u8 bBuf[2] = {0, 0};
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	81bb      	strh	r3, [r7, #12]
	u8 Cnt = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	73fb      	strb	r3, [r7, #15]
	while(1){
		if(!readSCS(&bDat, 1)){
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3304      	adds	r3, #4
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f107 010e 	add.w	r1, r7, #14
 8000b8e:	2201      	movs	r2, #1
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	4798      	blx	r3
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <_ZN3SCS9checkHeadEv+0x36>
			return 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e013      	b.n	8000bd0 <_ZN3SCS9checkHeadEv+0x5e>
		}
		bBuf[1] = bBuf[0];
 8000ba8:	7b3b      	ldrb	r3, [r7, #12]
 8000baa:	737b      	strb	r3, [r7, #13]
		bBuf[0] = bDat;
 8000bac:	7bbb      	ldrb	r3, [r7, #14]
 8000bae:	733b      	strb	r3, [r7, #12]
		if(bBuf[0]==0xff && bBuf[1]==0xff){
 8000bb0:	7b3b      	ldrb	r3, [r7, #12]
 8000bb2:	2bff      	cmp	r3, #255	@ 0xff
 8000bb4:	d102      	bne.n	8000bbc <_ZN3SCS9checkHeadEv+0x4a>
 8000bb6:	7b7b      	ldrb	r3, [r7, #13]
 8000bb8:	2bff      	cmp	r3, #255	@ 0xff
 8000bba:	d007      	beq.n	8000bcc <_ZN3SCS9checkHeadEv+0x5a>
			break;
		}
		Cnt++;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
		if(Cnt>10){
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	2b0a      	cmp	r3, #10
 8000bc6:	d9dc      	bls.n	8000b82 <_ZN3SCS9checkHeadEv+0x10>
			return 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e001      	b.n	8000bd0 <_ZN3SCS9checkHeadEv+0x5e>
			break;
 8000bcc:	bf00      	nop
		}
	}
	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_ZN3SCS3AckEh>:

int	SCS::Ack(u8 ID)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
	Error = 0;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	719a      	strb	r2, [r3, #6]
	if(ID!=0xfe && Level){
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bee:	d040      	beq.n	8000c72 <_ZN3SCS3AckEh+0x9a>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d03c      	beq.n	8000c72 <_ZN3SCS3AckEh+0x9a>
		if(!checkHead()){
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffba 	bl	8000b72 <_ZN3SCS9checkHeadEv>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bf0c      	ite	eq
 8000c04:	2301      	moveq	r3, #1
 8000c06:	2300      	movne	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <_ZN3SCS3AckEh+0x3a>
			return 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e030      	b.n	8000c74 <_ZN3SCS3AckEh+0x9c>
		}
		u8 bBuf[4];
		if(readSCS(bBuf, 4)!=4){
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3304      	adds	r3, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f107 0108 	add.w	r1, r7, #8
 8000c1e:	2204      	movs	r2, #4
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	4798      	blx	r3
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf14      	ite	ne
 8000c2a:	2301      	movne	r3, #1
 8000c2c:	2300      	moveq	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <_ZN3SCS3AckEh+0x60>
			return 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	e01d      	b.n	8000c74 <_ZN3SCS3AckEh+0x9c>
		}
		if(bBuf[0]!=ID){
 8000c38:	7a3b      	ldrb	r3, [r7, #8]
 8000c3a:	78fa      	ldrb	r2, [r7, #3]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d001      	beq.n	8000c44 <_ZN3SCS3AckEh+0x6c>
			return 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e017      	b.n	8000c74 <_ZN3SCS3AckEh+0x9c>
		}
		if(bBuf[1]!=2){
 8000c44:	7a7b      	ldrb	r3, [r7, #9]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d001      	beq.n	8000c4e <_ZN3SCS3AckEh+0x76>
			return 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e012      	b.n	8000c74 <_ZN3SCS3AckEh+0x9c>
		}
		u8 calSum = ~(bBuf[0]+bBuf[1]+bBuf[2]);
 8000c4e:	7a3a      	ldrb	r2, [r7, #8]
 8000c50:	7a7b      	ldrb	r3, [r7, #9]
 8000c52:	4413      	add	r3, r2
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	7abb      	ldrb	r3, [r7, #10]
 8000c58:	4413      	add	r3, r2
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	73fb      	strb	r3, [r7, #15]
		if(calSum!=bBuf[3]){
 8000c60:	7afb      	ldrb	r3, [r7, #11]
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d001      	beq.n	8000c6c <_ZN3SCS3AckEh+0x94>
			return 0;			
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e003      	b.n	8000c74 <_ZN3SCS3AckEh+0x9c>
		}
		Error = bBuf[2];
 8000c6c:	7aba      	ldrb	r2, [r7, #10]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	719a      	strb	r2, [r3, #6]
	}
	return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_ZN8SCSerial6getErrEv>:
public:
	unsigned long int IOTimeOut; // Input and output timeout
	UART_HandleTypeDef *pUart; // Serial port pointer
	int Err;
public:
	virtual int getErr(){  return Err;  }
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_ZN5SCSCLC1Ev>:
 * FIT SCSCL series serial servo application layer program
 */

#include "SCSCL.h"

SCSCL::SCSCL()
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fbb2 	bl	8001408 <_ZN8SCSerialC1Ev>
 8000ca4:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <_ZN5SCSCLC1Ev+0x28>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	601a      	str	r2, [r3, #0]
{
	End = 1;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2201      	movs	r2, #1
 8000cae:	715a      	strb	r2, [r3, #5]
}
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	08011400 	.word	0x08011400

08000cc0 <_ZN5SCSCL8WritePosEhttt>:
SCSCL::SCSCL(u8 End, u8 Level):SCSerial(End, Level)
{
}

int SCSCL::WritePos(u8 ID, u16 Position, u16 Time, u16 Speed)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4611      	mov	r1, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4603      	mov	r3, r0
 8000cd0:	72fb      	strb	r3, [r7, #11]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	813b      	strh	r3, [r7, #8]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	80fb      	strh	r3, [r7, #6]
	u8 bBuf[6];
	Host2SCS(bBuf+0, bBuf+1, Position);
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f107 0210 	add.w	r2, r7, #16
 8000ce0:	3201      	adds	r2, #1
 8000ce2:	893b      	ldrh	r3, [r7, #8]
 8000ce4:	f107 0110 	add.w	r1, r7, #16
 8000ce8:	f7ff fc76 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+2, bBuf+3, Time);
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f107 0110 	add.w	r1, r7, #16
 8000cf2:	3102      	adds	r1, #2
 8000cf4:	f107 0210 	add.w	r2, r7, #16
 8000cf8:	3203      	adds	r2, #3
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	f7ff fc6c 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+4, bBuf+5, Speed);
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f107 0110 	add.w	r1, r7, #16
 8000d06:	3104      	adds	r1, #4
 8000d08:	f107 0210 	add.w	r2, r7, #16
 8000d0c:	3205      	adds	r2, #5
 8000d0e:	8c3b      	ldrh	r3, [r7, #32]
 8000d10:	f7ff fc62 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	
	return genWrite(ID, SCSCL_GOAL_POSITION_L, bBuf, 6);
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	7af9      	ldrb	r1, [r7, #11]
 8000d1c:	2206      	movs	r2, #6
 8000d1e:	9200      	str	r2, [sp, #0]
 8000d20:	222a      	movs	r2, #42	@ 0x2a
 8000d22:	f7ff fd16 	bl	8000752 <_ZN3SCS8genWriteEhhPhh>
 8000d26:	4603      	mov	r3, r0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_ZN5SCSCL10WritePosExEhsth>:

int SCSCL::WritePosEx(u8 ID, s16 Position, u16 Speed, u8 ACC)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	4608      	mov	r0, r1
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4603      	mov	r3, r0
 8000d40:	72fb      	strb	r3, [r7, #11]
 8000d42:	460b      	mov	r3, r1
 8000d44:	813b      	strh	r3, [r7, #8]
 8000d46:	4613      	mov	r3, r2
 8000d48:	80fb      	strh	r3, [r7, #6]
	ACC = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 3020 	strb.w	r3, [r7, #32]
	u16 Time = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	82fb      	strh	r3, [r7, #22]
	u8 bBuf[6];
	Host2SCS(bBuf+0, bBuf+1, Position);
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f107 0210 	add.w	r2, r7, #16
 8000d5a:	3201      	adds	r2, #1
 8000d5c:	893b      	ldrh	r3, [r7, #8]
 8000d5e:	f107 0110 	add.w	r1, r7, #16
 8000d62:	f7ff fc39 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+2, bBuf+3, Time);
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f107 0110 	add.w	r1, r7, #16
 8000d6c:	3102      	adds	r1, #2
 8000d6e:	f107 0210 	add.w	r2, r7, #16
 8000d72:	3203      	adds	r2, #3
 8000d74:	8afb      	ldrh	r3, [r7, #22]
 8000d76:	f7ff fc2f 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+4, bBuf+5, Speed);
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f107 0110 	add.w	r1, r7, #16
 8000d80:	3104      	adds	r1, #4
 8000d82:	f107 0210 	add.w	r2, r7, #16
 8000d86:	3205      	adds	r2, #5
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	f7ff fc25 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	
	return genWrite(ID, SCSCL_GOAL_POSITION_L, bBuf, 6);
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	7af9      	ldrb	r1, [r7, #11]
 8000d96:	2206      	movs	r2, #6
 8000d98:	9200      	str	r2, [sp, #0]
 8000d9a:	222a      	movs	r2, #42	@ 0x2a
 8000d9c:	f7ff fcd9 	bl	8000752 <_ZN3SCS8genWriteEhhPhh>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_ZN5SCSCL11RegWritePosEhttt>:

int SCSCL::RegWritePos(u8 ID, u16 Position, u16 Time, u16 Speed)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b088      	sub	sp, #32
 8000dae:	af02      	add	r7, sp, #8
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	4608      	mov	r0, r1
 8000db4:	4611      	mov	r1, r2
 8000db6:	461a      	mov	r2, r3
 8000db8:	4603      	mov	r3, r0
 8000dba:	72fb      	strb	r3, [r7, #11]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	813b      	strh	r3, [r7, #8]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	80fb      	strh	r3, [r7, #6]
	u8 bBuf[6];
	Host2SCS(bBuf+0, bBuf+1, Position);
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f107 0210 	add.w	r2, r7, #16
 8000dca:	3201      	adds	r2, #1
 8000dcc:	893b      	ldrh	r3, [r7, #8]
 8000dce:	f107 0110 	add.w	r1, r7, #16
 8000dd2:	f7ff fc01 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+2, bBuf+3, Time);
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f107 0110 	add.w	r1, r7, #16
 8000ddc:	3102      	adds	r1, #2
 8000dde:	f107 0210 	add.w	r2, r7, #16
 8000de2:	3203      	adds	r2, #3
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	f7ff fbf7 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+4, bBuf+5, Speed);
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f107 0110 	add.w	r1, r7, #16
 8000df0:	3104      	adds	r1, #4
 8000df2:	f107 0210 	add.w	r2, r7, #16
 8000df6:	3205      	adds	r2, #5
 8000df8:	8c3b      	ldrh	r3, [r7, #32]
 8000dfa:	f7ff fbed 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	
	return regWrite(ID, SCSCL_GOAL_POSITION_L, bBuf, 6);
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	7af9      	ldrb	r1, [r7, #11]
 8000e06:	2206      	movs	r2, #6
 8000e08:	9200      	str	r2, [sp, #0]
 8000e0a:	222a      	movs	r2, #42	@ 0x2a
 8000e0c:	f7ff fcca 	bl	80007a4 <_ZN3SCS8regWriteEhhPhh>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_ZN5SCSCL14CalibrationOfsEh>:

int SCSCL::CalibrationOfs(u8 ID){
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	70fb      	strb	r3, [r7, #3]
	return -1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_ZN5SCSCL12SyncWritePosEPhhPtS1_S1_>:

void SCSCL::SyncWritePos(u8 ID[], u8 IDN, u16 Position[], u16 Time[], u16 Speed[])
{
 8000e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e3a:	b08b      	sub	sp, #44	@ 0x2c
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	71fb      	strb	r3, [r7, #7]
        Host2SCS(offbuf+i*6+0, offbuf+i*6+1, Position[i]);
        Host2SCS(offbuf+i*6+2, offbuf+i*6+3, T);
        Host2SCS(offbuf+i*6+4, offbuf+i*6+5, V);
    }
    syncWrite(ID, IDN, SCSCL_GOAL_POSITION_L, offbuf, 6);
}
 8000e48:	466b      	mov	r3, sp
 8000e4a:	461e      	mov	r6, r3
    u8 offbuf[6*IDN];
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4619      	mov	r1, r3
 8000e58:	1e4b      	subs	r3, r1, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	2300      	movs	r3, #0
 8000e60:	4690      	mov	r8, r2
 8000e62:	4699      	mov	r9, r3
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e78:	460a      	mov	r2, r1
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	4614      	mov	r4, r2
 8000e7e:	461d      	mov	r5, r3
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	00eb      	lsls	r3, r5, #3
 8000e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e8e:	00e2      	lsls	r2, r4, #3
 8000e90:	460b      	mov	r3, r1
 8000e92:	3307      	adds	r3, #7
 8000e94:	08db      	lsrs	r3, r3, #3
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	ebad 0d03 	sub.w	sp, sp, r3
 8000e9c:	ab02      	add	r3, sp, #8
 8000e9e:	3300      	adds	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
    for(u8 i = 0; i<IDN; i++){
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	77fb      	strb	r3, [r7, #31]
 8000ea6:	e05b      	b.n	8000f60 <_ZN5SCSCL12SyncWritePosEPhhPtS1_S1_+0x12a>
		if(Time){
 8000ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d006      	beq.n	8000ebc <_ZN5SCSCL12SyncWritePosEPhhPtS1_S1_+0x86>
			T = Time[i];
 8000eae:	7ffb      	ldrb	r3, [r7, #31]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000eb4:	4413      	add	r3, r2
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	83bb      	strh	r3, [r7, #28]
 8000eba:	e001      	b.n	8000ec0 <_ZN5SCSCL12SyncWritePosEPhhPtS1_S1_+0x8a>
			T = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	83bb      	strh	r3, [r7, #28]
		if(Speed){
 8000ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d006      	beq.n	8000ed4 <_ZN5SCSCL12SyncWritePosEPhhPtS1_S1_+0x9e>
			V = Speed[i];
 8000ec6:	7ffb      	ldrb	r3, [r7, #31]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ecc:	4413      	add	r3, r2
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	837b      	strh	r3, [r7, #26]
 8000ed2:	e001      	b.n	8000ed8 <_ZN5SCSCL12SyncWritePosEPhhPtS1_S1_+0xa2>
			V = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	837b      	strh	r3, [r7, #26]
        Host2SCS(offbuf+i*6+0, offbuf+i*6+1, Position[i]);
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	7ffa      	ldrb	r2, [r7, #31]
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1899      	adds	r1, r3, r2
 8000eea:	7ffa      	ldrb	r2, [r7, #31]
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	18d4      	adds	r4, r2, r3
 8000efa:	7ffb      	ldrb	r3, [r7, #31]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	4622      	mov	r2, r4
 8000f06:	f7ff fb67 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
        Host2SCS(offbuf+i*6+2, offbuf+i*6+3, T);
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	7ffa      	ldrb	r2, [r7, #31]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	3302      	adds	r3, #2
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	18d1      	adds	r1, r2, r3
 8000f1c:	7ffa      	ldrb	r2, [r7, #31]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	3303      	adds	r3, #3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	441a      	add	r2, r3
 8000f2c:	8bbb      	ldrh	r3, [r7, #28]
 8000f2e:	f7ff fb53 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
        Host2SCS(offbuf+i*6+4, offbuf+i*6+5, V);
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	7ffa      	ldrb	r2, [r7, #31]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	3304      	adds	r3, #4
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	18d1      	adds	r1, r2, r3
 8000f44:	7ffa      	ldrb	r2, [r7, #31]
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	3305      	adds	r3, #5
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	441a      	add	r2, r3
 8000f54:	8b7b      	ldrh	r3, [r7, #26]
 8000f56:	f7ff fb3f 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
    for(u8 i = 0; i<IDN; i++){
 8000f5a:	7ffb      	ldrb	r3, [r7, #31]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	77fb      	strb	r3, [r7, #31]
 8000f60:	7ffa      	ldrb	r2, [r7, #31]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d39f      	bcc.n	8000ea8 <_ZN5SCSCL12SyncWritePosEPhhPtS1_S1_+0x72>
    syncWrite(ID, IDN, SCSCL_GOAL_POSITION_L, offbuf, 6);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	232a      	movs	r3, #42	@ 0x2a
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	f7ff fc63 	bl	8000842 <_ZN3SCS9syncWriteEPhhhS0_h>
 8000f7c:	46b5      	mov	sp, r6
}
 8000f7e:	bf00      	nop
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f88 <_ZN5SCSCL7PWMModeEh>:

int SCSCL::PWMMode(u8 ID)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	u8 bBuf[4];
	bBuf[0] = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	733b      	strb	r3, [r7, #12]
	bBuf[1] = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	737b      	strb	r3, [r7, #13]
	bBuf[2] = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73bb      	strb	r3, [r7, #14]
	bBuf[3] = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
	return genWrite(ID, SCSCL_MIN_ANGLE_LIMIT_L, bBuf, 4);	
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	78f9      	ldrb	r1, [r7, #3]
 8000fac:	2204      	movs	r2, #4
 8000fae:	9200      	str	r2, [sp, #0]
 8000fb0:	2209      	movs	r2, #9
 8000fb2:	f7ff fbce 	bl	8000752 <_ZN3SCS8genWriteEhhPhh>
 8000fb6:	4603      	mov	r3, r0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN5SCSCL8WritePWMEhs>:

int SCSCL::WritePWM(u8 ID, s16 pwmOut)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	803b      	strh	r3, [r7, #0]
	if(pwmOut<0){
 8000fd0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	da07      	bge.n	8000fe8 <_ZN5SCSCL8WritePWMEhs+0x28>
		pwmOut = -pwmOut;
 8000fd8:	883b      	ldrh	r3, [r7, #0]
 8000fda:	425b      	negs	r3, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	803b      	strh	r3, [r7, #0]
		pwmOut |= (1<<10);
 8000fe0:	883b      	ldrh	r3, [r7, #0]
 8000fe2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fe6:	803b      	strh	r3, [r7, #0]
	}
	u8 bBuf[2];
	Host2SCS(bBuf+0, bBuf+1, pwmOut);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f107 020c 	add.w	r2, r7, #12
 8000fee:	3201      	adds	r2, #1
 8000ff0:	883b      	ldrh	r3, [r7, #0]
 8000ff2:	f107 010c 	add.w	r1, r7, #12
 8000ff6:	f7ff faef 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	
	return genWrite(ID, SCSCL_GOAL_TIME_L, bBuf, 2);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	78f9      	ldrb	r1, [r7, #3]
 8001002:	2202      	movs	r2, #2
 8001004:	9200      	str	r2, [sp, #0]
 8001006:	222c      	movs	r2, #44	@ 0x2c
 8001008:	f7ff fba3 	bl	8000752 <_ZN3SCS8genWriteEhhPhh>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_ZN5SCSCL12EnableTorqueEhh>:

int SCSCL::EnableTorque(u8 ID, u8 Enable)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
 8001022:	4613      	mov	r3, r2
 8001024:	70bb      	strb	r3, [r7, #2]
	return writeByte(ID, SCSCL_TORQUE_ENABLE, Enable);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	78f9      	ldrb	r1, [r7, #3]
 800102c:	2228      	movs	r2, #40	@ 0x28
 800102e:	f7ff fc9e 	bl	800096e <_ZN3SCS9writeByteEhhh>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <_ZN5SCSCL11unLockEpromEh>:

int SCSCL::unLockEprom(u8 ID)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SCSCL_LOCK, 0);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	78f9      	ldrb	r1, [r7, #3]
 800104c:	2300      	movs	r3, #0
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	f7ff fc8d 	bl	800096e <_ZN3SCS9writeByteEhhh>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_ZN5SCSCL9LockEpromEh>:

int SCSCL::LockEprom(u8 ID)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SCSCL_LOCK, 1);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	78f9      	ldrb	r1, [r7, #3]
 800106e:	2301      	movs	r3, #1
 8001070:	2230      	movs	r2, #48	@ 0x30
 8001072:	f7ff fc7c 	bl	800096e <_ZN3SCS9writeByteEhhh>
 8001076:	4603      	mov	r3, r0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZN5SCSCL8FeedBackEi>:

int SCSCL::FeedBack(int ID)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	int nLen = Read(ID, SCSCL_PRESENT_POSITION_L, Mem, sizeof(Mem));
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2d9      	uxtb	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	331c      	adds	r3, #28
 8001094:	220f      	movs	r2, #15
 8001096:	9200      	str	r2, [sp, #0]
 8001098:	2238      	movs	r2, #56	@ 0x38
 800109a:	f7ff fc95 	bl	80009c8 <_ZN3SCS4ReadEhhPhh>
 800109e:	60f8      	str	r0, [r7, #12]
	if(nLen!=sizeof(Mem)){
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	d005      	beq.n	80010b2 <_ZN5SCSCL8FeedBackEi+0x32>
		Err = 1;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	619a      	str	r2, [r3, #24]
		return -1;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010b0:	e003      	b.n	80010ba <_ZN5SCSCL8FeedBackEi+0x3a>
	}
	Err = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
	return nLen;
 80010b8:	68fb      	ldr	r3, [r7, #12]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_ZN5SCSCL7ReadPosEi>:
	
int SCSCL::ReadPos(int ID)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
	int Pos = -1;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d0:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010d8:	d10c      	bne.n	80010f4 <_ZN5SCSCL7ReadPosEi+0x32>
		Pos = Mem[SCSCL_PRESENT_POSITION_L-SCSCL_PRESENT_POSITION_L];
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7f1b      	ldrb	r3, [r3, #28]
 80010de:	60fb      	str	r3, [r7, #12]
		Pos <<= 8;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	60fb      	str	r3, [r7, #12]
		Pos |= Mem[SCSCL_PRESENT_POSITION_H-SCSCL_PRESENT_POSITION_L];
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7f5b      	ldrb	r3, [r3, #29]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	e011      	b.n	8001118 <_ZN5SCSCL7ReadPosEi+0x56>
	}else{
		Err = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
		Pos = readWord(ID, SCSCL_PRESENT_POSITION_L);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	b2d1      	uxtb	r1, r2
 8001100:	2238      	movs	r2, #56	@ 0x38
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fd10 	bl	8000b28 <_ZN3SCS8readWordEhh>
 8001108:	60f8      	str	r0, [r7, #12]
		if(Pos==-1){
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001110:	d102      	bne.n	8001118 <_ZN5SCSCL7ReadPosEi+0x56>
			Err = 1;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	619a      	str	r2, [r3, #24]
		}
	}
	return Pos;
 8001118:	68fb      	ldr	r3, [r7, #12]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_ZN5SCSCL9ReadSpeedEi>:

int SCSCL::ReadSpeed(int ID)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
	int Speed = -1;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001130:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001138:	d10c      	bne.n	8001154 <_ZN5SCSCL9ReadSpeedEi+0x32>
		Speed = Mem[SCSCL_PRESENT_SPEED_L-SCSCL_PRESENT_POSITION_L];
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7f9b      	ldrb	r3, [r3, #30]
 800113e:	60fb      	str	r3, [r7, #12]
		Speed <<= 8;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	60fb      	str	r3, [r7, #12]
		Speed |= Mem[SCSCL_PRESENT_SPEED_H-SCSCL_PRESENT_POSITION_L];
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7fdb      	ldrb	r3, [r3, #31]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e014      	b.n	800117e <_ZN5SCSCL9ReadSpeedEi+0x5c>
	}else{
		Err = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
		Speed = readWord(ID, SCSCL_PRESENT_SPEED_L);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	b2d1      	uxtb	r1, r2
 8001160:	223a      	movs	r2, #58	@ 0x3a
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fce0 	bl	8000b28 <_ZN3SCS8readWordEhh>
 8001168:	60f8      	str	r0, [r7, #12]
		if(Speed==-1){
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001170:	d105      	bne.n	800117e <_ZN5SCSCL9ReadSpeedEi+0x5c>
			Err = 1;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	619a      	str	r2, [r3, #24]
			return -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800117c:	e00e      	b.n	800119c <_ZN5SCSCL9ReadSpeedEi+0x7a>
		}
	}
	if(!Err && (Speed&(1<<15))){
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <_ZN5SCSCL9ReadSpeedEi+0x78>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <_ZN5SCSCL9ReadSpeedEi+0x78>
		Speed = -(Speed&~(1<<15));
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001196:	425b      	negs	r3, r3
 8001198:	60fb      	str	r3, [r7, #12]
	}	
	return Speed;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_ZN5SCSCL8ReadLoadEi>:

int SCSCL::ReadLoad(int ID)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	int Load = -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011b2:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011ba:	d10e      	bne.n	80011da <_ZN5SCSCL8ReadLoadEi+0x36>
		Load = Mem[SCSCL_PRESENT_LOAD_L-SCSCL_PRESENT_POSITION_L];
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c2:	60fb      	str	r3, [r7, #12]
		Load <<= 8;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	60fb      	str	r3, [r7, #12]
		Load |= Mem[SCSCL_PRESENT_LOAD_H-SCSCL_PRESENT_POSITION_L];
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e011      	b.n	80011fe <_ZN5SCSCL8ReadLoadEi+0x5a>
	}else{
		Err = 0;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
		Load = readWord(ID, SCSCL_PRESENT_LOAD_L);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	b2d1      	uxtb	r1, r2
 80011e6:	223c      	movs	r2, #60	@ 0x3c
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fc9d 	bl	8000b28 <_ZN3SCS8readWordEhh>
 80011ee:	60f8      	str	r0, [r7, #12]
		if(Load==-1){
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011f6:	d102      	bne.n	80011fe <_ZN5SCSCL8ReadLoadEi+0x5a>
			Err = 1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	619a      	str	r2, [r3, #24]
		}
	}
	if(!Err && (Load&(1<<10))){
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <_ZN5SCSCL8ReadLoadEi+0x76>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <_ZN5SCSCL8ReadLoadEi+0x76>
		Load = -(Load&~(1<<10));
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001216:	425b      	negs	r3, r3
 8001218:	60fb      	str	r3, [r7, #12]
	}	
	return Load;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN5SCSCL11ReadVoltageEi>:

int SCSCL::ReadVoltage(int ID)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	int Voltage = -1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001232:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800123a:	d104      	bne.n	8001246 <_ZN5SCSCL11ReadVoltageEi+0x22>
		Voltage = Mem[SCSCL_PRESENT_VOLTAGE-SCSCL_PRESENT_POSITION_L];	
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e011      	b.n	800126a <_ZN5SCSCL11ReadVoltageEi+0x46>
	}else{
		Err = 0;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
		Voltage = readByte(ID, SCSCL_PRESENT_VOLTAGE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	b2d1      	uxtb	r1, r2
 8001252:	223e      	movs	r2, #62	@ 0x3e
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fc4a 	bl	8000aee <_ZN3SCS8readByteEhh>
 800125a:	60f8      	str	r0, [r7, #12]
		if(Voltage==-1){
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001262:	d102      	bne.n	800126a <_ZN5SCSCL11ReadVoltageEi+0x46>
			Err = 1;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	619a      	str	r2, [r3, #24]
		}
	}
	return Voltage;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_ZN5SCSCL10ReadTemperEi>:

int SCSCL::ReadTemper(int ID)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	int Temper = -1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001282:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800128a:	d104      	bne.n	8001296 <_ZN5SCSCL10ReadTemperEi+0x22>
		Temper = Mem[SCSCL_PRESENT_TEMPERATURE-SCSCL_PRESENT_POSITION_L];	
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e011      	b.n	80012ba <_ZN5SCSCL10ReadTemperEi+0x46>
	}else{
		Err = 0;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
		Temper = readByte(ID, SCSCL_PRESENT_TEMPERATURE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	b2d1      	uxtb	r1, r2
 80012a2:	223f      	movs	r2, #63	@ 0x3f
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fc22 	bl	8000aee <_ZN3SCS8readByteEhh>
 80012aa:	60f8      	str	r0, [r7, #12]
		if(Temper==-1){
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012b2:	d102      	bne.n	80012ba <_ZN5SCSCL10ReadTemperEi+0x46>
			Err = 1;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	619a      	str	r2, [r3, #24]
		}
	}
	return Temper;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZN5SCSCL8ReadMoveEi>:

int SCSCL::ReadMove(int ID)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	int Move = -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012d2:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012da:	d104      	bne.n	80012e6 <_ZN5SCSCL8ReadMoveEi+0x22>
		Move = Mem[SCSCL_MOVING-SCSCL_PRESENT_POSITION_L];	
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	e011      	b.n	800130a <_ZN5SCSCL8ReadMoveEi+0x46>
	}else{
		Err = 0;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
		Move = readByte(ID, SCSCL_MOVING);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	b2d1      	uxtb	r1, r2
 80012f2:	2242      	movs	r2, #66	@ 0x42
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fbfa 	bl	8000aee <_ZN3SCS8readByteEhh>
 80012fa:	60f8      	str	r0, [r7, #12]
		if(Move==-1){
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001302:	d102      	bne.n	800130a <_ZN5SCSCL8ReadMoveEi+0x46>
			Err = 1;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	619a      	str	r2, [r3, #24]
		}
	}
	return Move;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_ZN5SCSCL8ReadModeEi>:

int SCSCL::ReadMode(int ID)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	int ValueRead = -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001322:	60fb      	str	r3, [r7, #12]
	ValueRead = readWord(ID, SCSCL_MIN_ANGLE_LIMIT_L);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	b2d1      	uxtb	r1, r2
 800132a:	2209      	movs	r2, #9
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fbfb 	bl	8000b28 <_ZN3SCS8readWordEhh>
 8001332:	60f8      	str	r0, [r7, #12]
	if(ValueRead == 0){
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <_ZN5SCSCL8ReadModeEi+0x2a>
		return 3;
 800133a:	2303      	movs	r3, #3
 800133c:	e005      	b.n	800134a <_ZN5SCSCL8ReadModeEi+0x36>
	}
	else if(ValueRead > 0){
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	dd01      	ble.n	8001348 <_ZN5SCSCL8ReadModeEi+0x34>
		return 0;
 8001344:	2300      	movs	r3, #0
 8001346:	e000      	b.n	800134a <_ZN5SCSCL8ReadModeEi+0x36>
	// 	Mode = readByte(ID, SMS_STS_MODE);
	// 	if(Mode==-1){
	// 		Err = 1;
	// 	}
	// }
	return ValueRead;
 8001348:	68fb      	ldr	r3, [r7, #12]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <_ZN5SCSCL13ReadInfoValueEii>:

int SCSCL::ReadInfoValue(int ID, int AddInput)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
	int ValueRead = -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001362:	617b      	str	r3, [r7, #20]
	ValueRead = readWord(ID, AddInput);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	b2d1      	uxtb	r1, r2
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fbda 	bl	8000b28 <_ZN3SCS8readWordEhh>
 8001374:	6178      	str	r0, [r7, #20]
	return ValueRead;
 8001376:	697b      	ldr	r3, [r7, #20]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN5SCSCL11ReadCurrentEi>:

int SCSCL::ReadCurrent(int ID)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	int Current = -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800138e:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001396:	d10e      	bne.n	80013b6 <_ZN5SCSCL11ReadCurrentEi+0x36>
		Current = Mem[SCSCL_PRESENT_CURRENT_L-SCSCL_PRESENT_POSITION_L];
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800139e:	60fb      	str	r3, [r7, #12]
		Current <<= 8;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	60fb      	str	r3, [r7, #12]
		Current |= Mem[SCSCL_PRESENT_CURRENT_H-SCSCL_PRESENT_POSITION_L];
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	e014      	b.n	80013e0 <_ZN5SCSCL11ReadCurrentEi+0x60>
	}else{
		Err = 0;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
		Current = readWord(ID, SCSCL_PRESENT_CURRENT_L);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	b2d1      	uxtb	r1, r2
 80013c2:	2245      	movs	r2, #69	@ 0x45
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fbaf 	bl	8000b28 <_ZN3SCS8readWordEhh>
 80013ca:	60f8      	str	r0, [r7, #12]
		if(Current==-1){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013d2:	d105      	bne.n	80013e0 <_ZN5SCSCL11ReadCurrentEi+0x60>
			Err = 1;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	619a      	str	r2, [r3, #24]
			return -1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013de:	e00e      	b.n	80013fe <_ZN5SCSCL11ReadCurrentEi+0x7e>
		}
	}
	if(!Err && (Current&(1<<15))){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <_ZN5SCSCL11ReadCurrentEi+0x7c>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <_ZN5SCSCL11ReadCurrentEi+0x7c>
		Current = -(Current&~(1<<15));
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80013f8:	425b      	negs	r3, r3
 80013fa:	60fb      	str	r3, [r7, #12]
	}	
	return Current;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <_ZN8SCSerialC1Ev>:
#include "SCSerial.h"

SCSerial::SCSerial(): SCS()
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8ca 	bl	80005ac <_ZN3SCSC1Ev>
 8001418:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <_ZN8SCSerialC1Ev+0x2c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
{
	IOTimeOut = 100;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2264      	movs	r2, #100	@ 0x64
 8001422:	611a      	str	r2, [r3, #16]
	pUart = nullptr;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
}
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	08011470 	.word	0x08011470

08001438 <_ZN8SCSerial5beginEP20__UART_HandleTypeDef>:
	IOTimeOut = 100;
	pUart = nullptr;
}

void SCSerial::begin(UART_HandleTypeDef *huart)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	pUart = huart;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	615a      	str	r2, [r3, #20]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_ZN8SCSerial7readSCSEPhi>:

int SCSerial::readSCS(unsigned char *nDat, int nLen)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
	uint32_t startTick = HAL_GetTick();
 8001460:	f001 fdc0 	bl	8002fe4 <HAL_GetTick>
 8001464:	61b8      	str	r0, [r7, #24]
	int received = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]

	while ((HAL_GetTick() - startTick) < IOTimeOut) {
 800146a:	e01e      	b.n	80014aa <_ZN8SCSerial7readSCSEPhi+0x56>
		uint8_t byte;
		if (HAL_UART_Receive(pUart, &byte, 1, 1) == HAL_OK) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6958      	ldr	r0, [r3, #20]
 8001470:	f107 0117 	add.w	r1, r7, #23
 8001474:	2301      	movs	r3, #1
 8001476:	2201      	movs	r2, #1
 8001478:	f006 faa7 	bl	80079ca <HAL_UART_Receive>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00e      	beq.n	80014aa <_ZN8SCSerial7readSCSEPhi+0x56>
			if (nDat) nDat[received] = byte;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <_ZN8SCSerial7readSCSEPhi+0x48>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	4413      	add	r3, r2
 8001498:	7dfa      	ldrb	r2, [r7, #23]
 800149a:	701a      	strb	r2, [r3, #0]
			received++;
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	3301      	adds	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
			if (received >= nLen) break;
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	da0e      	bge.n	80014c8 <_ZN8SCSerial7readSCSEPhi+0x74>
	while ((HAL_GetTick() - startTick) < IOTimeOut) {
 80014aa:	f001 fd9b 	bl	8002fe4 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	1ad2      	subs	r2, r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	bf34      	ite	cc
 80014bc:	2301      	movcc	r3, #1
 80014be:	2300      	movcs	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1d2      	bne.n	800146c <_ZN8SCSerial7readSCSEPhi+0x18>
 80014c6:	e000      	b.n	80014ca <_ZN8SCSerial7readSCSEPhi+0x76>
			if (received >= nLen) break;
 80014c8:	bf00      	nop
		}
	}

	return received;
 80014ca:	69fb      	ldr	r3, [r7, #28]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_ZN8SCSerial8writeSCSEPhi>:

int SCSerial::writeSCS(unsigned char *nDat, int nLen)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	if (pUart == nullptr || nDat == nullptr) return 0;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <_ZN8SCSerial8writeSCSEPhi+0x1a>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <_ZN8SCSerial8writeSCSEPhi+0x1e>
 80014ee:	2300      	movs	r3, #0
 80014f0:	e009      	b.n	8001506 <_ZN8SCSerial8writeSCSEPhi+0x32>
	HAL_UART_Transmit(pUart, nDat, nLen, HAL_MAX_DELAY);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6958      	ldr	r0, [r3, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	f006 f9d8 	bl	80078b4 <HAL_UART_Transmit>
	return nLen;
 8001504:	687b      	ldr	r3, [r7, #4]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZN8SCSerial8writeSCSEh>:

int SCSerial::writeSCS(unsigned char bDat)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	70fb      	strb	r3, [r7, #3]
	if (pUart == nullptr) return 0;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <_ZN8SCSerial8writeSCSEh+0x18>
 8001522:	2300      	movs	r3, #0
 8001524:	e00e      	b.n	8001544 <_ZN8SCSerial8writeSCSEh+0x36>
	return HAL_UART_Transmit(pUart, &bDat, 1, HAL_MAX_DELAY) == HAL_OK ? 1 : 0;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6958      	ldr	r0, [r3, #20]
 800152a:	1cf9      	adds	r1, r7, #3
 800152c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001530:	2201      	movs	r2, #1
 8001532:	f006 f9bf 	bl	80078b4 <HAL_UART_Transmit>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <_ZN8SCSerial8writeSCSEh+0x32>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <_ZN8SCSerial8writeSCSEh+0x34>
 8001540:	2300      	movs	r3, #0
 8001542:	bf00      	nop
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZN8SCSerial9rFlushSCSEv>:

void SCSerial::rFlushSCS()
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(pUart); // 수신 버퍼 플러시
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_ZN8SCSerial9wFlushSCSEv>:

void SCSerial::wFlushSCS()
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	// STM32 HAL은 전송 대기 없음
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001582:	f001 fcf9 	bl	8002f78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001586:	f000 f92b 	bl	80017e0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800158a:	f000 fbc5 	bl	8001d18 <_ZL12MX_GPIO_Initv>
	MX_I2C1_Init();
 800158e:	f000 f9a7 	bl	80018e0 <_ZL12MX_I2C1_Initv>
	MX_TIM3_Init();
 8001592:	f000 fa37 	bl	8001a04 <_ZL12MX_TIM3_Initv>
	MX_TIM2_Init();
 8001596:	f000 f9d7 	bl	8001948 <_ZL12MX_TIM2_Initv>
	MX_TIM4_Init();
 800159a:	f000 fa91 	bl	8001ac0 <_ZL12MX_TIM4_Initv>
	MX_UART4_Init();
 800159e:	f000 fb2f 	bl	8001c00 <_ZL13MX_UART4_Initv>
	MX_UART5_Init();
 80015a2:	f000 fb5d 	bl	8001c60 <_ZL13MX_UART5_Initv>
	MX_USART2_UART_Init();
 80015a6:	f000 fb89 	bl	8001cbc <_ZL19MX_USART2_UART_Initv>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80015aa:	f000 f98d 	bl	80018c8 <_ZL12MX_NVIC_Initv>
	/* USER CODE BEGIN 2 */
	emegencyEventGroup = xEventGroupCreate();
 80015ae:	f00b f980 	bl	800c8b2 <xEventGroupCreate>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001734 <main+0x1b8>)
 80015b6:	6013      	str	r3, [r2, #0]
	motorStart();
 80015b8:	f000 fd8c 	bl	80020d4 <_Z10motorStartv>
	motorShutdown();
 80015bc:	f000 fd98 	bl	80020f0 <_Z13motorShutdownv>
	setMotorMode(BACKWARD);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f000 fcb7 	bl	8001f34 <_Z12setMotorMode9DriveMode>
	osDelay(3000);
 80015c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015ca:	f00a ff79 	bl	800c4c0 <osDelay>
	startEncoder(&htim3);
 80015ce:	485a      	ldr	r0, [pc, #360]	@ (8001738 <main+0x1bc>)
 80015d0:	f000 fda0 	bl	8002114 <_Z12startEncoderP17TIM_HandleTypeDef>
	startEncoder(&htim2);
 80015d4:	4859      	ldr	r0, [pc, #356]	@ (800173c <main+0x1c0>)
 80015d6:	f000 fd9d 	bl	8002114 <_Z12startEncoderP17TIM_HandleTypeDef>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80015da:	4b57      	ldr	r3, [pc, #348]	@ (8001738 <main+0x1bc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80015e2:	4b56      	ldr	r3, [pc, #344]	@ (800173c <main+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24

	left_encoder_prev_count = __HAL_TIM_GET_COUNTER(&htim3);
 80015ea:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <main+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <main+0x1c4>)
 80015f4:	801a      	strh	r2, [r3, #0]
	left_encoder_total_count = 0;
 80015f6:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <main+0x1c8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

	right_encoder_prev_count = __HAL_TIM_GET_COUNTER(&htim2);
 80015fc:	4b4f      	ldr	r3, [pc, #316]	@ (800173c <main+0x1c0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b50      	ldr	r3, [pc, #320]	@ (8001748 <main+0x1cc>)
 8001606:	801a      	strh	r2, [r3, #0]
	right_encoder_total_count = 0;
 8001608:	4b50      	ldr	r3, [pc, #320]	@ (800174c <main+0x1d0>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
	int8_t target_distance_cm = 100;
 800160e:	2364      	movs	r3, #100	@ 0x64
 8001610:	75fb      	strb	r3, [r7, #23]
	int8_t PPR = 11;
 8001612:	230b      	movs	r3, #11
 8001614:	75bb      	strb	r3, [r7, #22]
	int8_t GEAR_RATIO = 30;
 8001616:	231e      	movs	r3, #30
 8001618:	757b      	strb	r3, [r7, #21]
	float WHEEL_CIRCUMFERENCE_CM = 2 * 3.1415 * 3.5;
 800161a:	4b4d      	ldr	r3, [pc, #308]	@ (8001750 <main+0x1d4>)
 800161c:	613b      	str	r3, [r7, #16]
	HAL_UART_Receive_IT(&huart5, &rx_data, 1);
 800161e:	2201      	movs	r2, #1
 8001620:	494c      	ldr	r1, [pc, #304]	@ (8001754 <main+0x1d8>)
 8001622:	484d      	ldr	r0, [pc, #308]	@ (8001758 <main+0x1dc>)
 8001624:	f006 fa68 	bl	8007af8 <HAL_UART_Receive_IT>
	servo.begin(&huart4);
 8001628:	494c      	ldr	r1, [pc, #304]	@ (800175c <main+0x1e0>)
 800162a:	484d      	ldr	r0, [pc, #308]	@ (8001760 <main+0x1e4>)
 800162c:	f7ff ff04 	bl	8001438 <_ZN8SCSerial5beginEP20__UART_HandleTypeDef>
	osDelay(20);
 8001630:	2014      	movs	r0, #20
 8001632:	f00a ff45 	bl	800c4c0 <osDelay>
	u8 idList[2] = { 1, 2 };                 // 서보 ID 배열
 8001636:	f240 2301 	movw	r3, #513	@ 0x201
 800163a:	81bb      	strh	r3, [r7, #12]
	u16 posList[2] = { 7, 7 };           // 목표 위치 배열
 800163c:	4b49      	ldr	r3, [pc, #292]	@ (8001764 <main+0x1e8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60bb      	str	r3, [r7, #8]
	u16 timeList[2] = { 0, 0 };              // 이동 시간
 8001642:	2300      	movs	r3, #0
 8001644:	80bb      	strh	r3, [r7, #4]
 8001646:	2300      	movs	r3, #0
 8001648:	80fb      	strh	r3, [r7, #6]
	u16 speedList[2] = { 100, 100 };         // 이동 속도
 800164a:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <main+0x1ec>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	603b      	str	r3, [r7, #0]
	servo.SyncWritePos(idList, 2, posList, timeList, speedList);
 8001650:	f107 0208 	add.w	r2, r7, #8
 8001654:	f107 010c 	add.w	r1, r7, #12
 8001658:	463b      	mov	r3, r7
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	2202      	movs	r2, #2
 8001664:	483e      	ldr	r0, [pc, #248]	@ (8001760 <main+0x1e4>)
 8001666:	f7ff fbe6 	bl	8000e36 <_ZN5SCSCL12SyncWritePosEPhhPtS1_S1_>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800166a:	f00a fe4d 	bl	800c308 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	MotorSpeedQueue = xQueueCreate(64, sizeof(CommandMessage));
 800166e:	2200      	movs	r2, #0
 8001670:	2120      	movs	r1, #32
 8001672:	2040      	movs	r0, #64	@ 0x40
 8001674:	f00b fc8d 	bl	800cf92 <xQueueGenericCreate>
 8001678:	4603      	mov	r3, r0
 800167a:	4a3c      	ldr	r2, [pc, #240]	@ (800176c <main+0x1f0>)
 800167c:	6013      	str	r3, [r2, #0]
	ServoQueue = xQueueCreate(64, sizeof(CommandMessage));
 800167e:	2200      	movs	r2, #0
 8001680:	2120      	movs	r1, #32
 8001682:	2040      	movs	r0, #64	@ 0x40
 8001684:	f00b fc85 	bl	800cf92 <xQueueGenericCreate>
 8001688:	4603      	mov	r3, r0
 800168a:	4a39      	ldr	r2, [pc, #228]	@ (8001770 <main+0x1f4>)
 800168c:	6013      	str	r3, [r2, #0]
	StepperQueue = xQueueCreate(64, sizeof(CommandMessage));
 800168e:	2200      	movs	r2, #0
 8001690:	2120      	movs	r1, #32
 8001692:	2040      	movs	r0, #64	@ 0x40
 8001694:	f00b fc7d 	bl	800cf92 <xQueueGenericCreate>
 8001698:	4603      	mov	r3, r0
 800169a:	4a36      	ldr	r2, [pc, #216]	@ (8001774 <main+0x1f8>)
 800169c:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800169e:	4a36      	ldr	r2, [pc, #216]	@ (8001778 <main+0x1fc>)
 80016a0:	2100      	movs	r1, #0
 80016a2:	4836      	ldr	r0, [pc, #216]	@ (800177c <main+0x200>)
 80016a4:	f00a fe7a 	bl	800c39c <osThreadNew>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a35      	ldr	r2, [pc, #212]	@ (8001780 <main+0x204>)
 80016ac:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of CommTask */
	CommTaskHandle = osThreadNew(vCommTask, NULL, &CommTask_attributes);
 80016ae:	4a35      	ldr	r2, [pc, #212]	@ (8001784 <main+0x208>)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4835      	ldr	r0, [pc, #212]	@ (8001788 <main+0x20c>)
 80016b4:	f00a fe72 	bl	800c39c <osThreadNew>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a34      	ldr	r2, [pc, #208]	@ (800178c <main+0x210>)
 80016bc:	6013      	str	r3, [r2, #0]

	/* creation of NavigationTask */
	NavigationTaskHandle = osThreadNew(vNavigationTask, NULL,
 80016be:	4a34      	ldr	r2, [pc, #208]	@ (8001790 <main+0x214>)
 80016c0:	2100      	movs	r1, #0
 80016c2:	4834      	ldr	r0, [pc, #208]	@ (8001794 <main+0x218>)
 80016c4:	f00a fe6a 	bl	800c39c <osThreadNew>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a33      	ldr	r2, [pc, #204]	@ (8001798 <main+0x21c>)
 80016cc:	6013      	str	r3, [r2, #0]
			&NavigationTask_attributes);

	/* creation of IntakeTask */
	IntakeTaskHandle = osThreadNew(vIntakeTask, NULL, &IntakeTask_attributes);
 80016ce:	4a33      	ldr	r2, [pc, #204]	@ (800179c <main+0x220>)
 80016d0:	2100      	movs	r1, #0
 80016d2:	4833      	ldr	r0, [pc, #204]	@ (80017a0 <main+0x224>)
 80016d4:	f00a fe62 	bl	800c39c <osThreadNew>
 80016d8:	4603      	mov	r3, r0
 80016da:	4a32      	ldr	r2, [pc, #200]	@ (80017a4 <main+0x228>)
 80016dc:	6013      	str	r3, [r2, #0]

	/* creation of TrashBinMonitor */
	TrashBinMonitorHandle = osThreadNew(vTrashBinMonitorTask, NULL,
 80016de:	4a32      	ldr	r2, [pc, #200]	@ (80017a8 <main+0x22c>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4832      	ldr	r0, [pc, #200]	@ (80017ac <main+0x230>)
 80016e4:	f00a fe5a 	bl	800c39c <osThreadNew>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a31      	ldr	r2, [pc, #196]	@ (80017b0 <main+0x234>)
 80016ec:	6013      	str	r3, [r2, #0]
			&TrashBinMonitor_attributes);

	/* creation of LiftControlTask */
	LiftControlTaskHandle = osThreadNew(vLiftControlTask, NULL,
 80016ee:	4a31      	ldr	r2, [pc, #196]	@ (80017b4 <main+0x238>)
 80016f0:	2100      	movs	r1, #0
 80016f2:	4831      	ldr	r0, [pc, #196]	@ (80017b8 <main+0x23c>)
 80016f4:	f00a fe52 	bl	800c39c <osThreadNew>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a30      	ldr	r2, [pc, #192]	@ (80017bc <main+0x240>)
 80016fc:	6013      	str	r3, [r2, #0]
			&LiftControlTask_attributes);

	/* creation of SystemMonitorTa */
	SystemMonitorTaHandle = osThreadNew(vSystemMonitorTask, NULL,
 80016fe:	4a30      	ldr	r2, [pc, #192]	@ (80017c0 <main+0x244>)
 8001700:	2100      	movs	r1, #0
 8001702:	4830      	ldr	r0, [pc, #192]	@ (80017c4 <main+0x248>)
 8001704:	f00a fe4a 	bl	800c39c <osThreadNew>
 8001708:	4603      	mov	r3, r0
 800170a:	4a2f      	ldr	r2, [pc, #188]	@ (80017c8 <main+0x24c>)
 800170c:	6013      	str	r3, [r2, #0]
			&SystemMonitorTa_attributes);

	/* creation of EmergencyTask */
	EmergencyTaskHandle = osThreadNew(vEmergencyTask, NULL,
 800170e:	4a2f      	ldr	r2, [pc, #188]	@ (80017cc <main+0x250>)
 8001710:	2100      	movs	r1, #0
 8001712:	482f      	ldr	r0, [pc, #188]	@ (80017d0 <main+0x254>)
 8001714:	f00a fe42 	bl	800c39c <osThreadNew>
 8001718:	4603      	mov	r3, r0
 800171a:	4a2e      	ldr	r2, [pc, #184]	@ (80017d4 <main+0x258>)
 800171c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Create the event(s) */
	/* creation of Emergency */
	EmergencyHandle = osEventFlagsNew(&Emergency_attributes);
 800171e:	482e      	ldr	r0, [pc, #184]	@ (80017d8 <main+0x25c>)
 8001720:	f00a fee9 	bl	800c4f6 <osEventFlagsNew>
 8001724:	4603      	mov	r3, r0
 8001726:	4a2d      	ldr	r2, [pc, #180]	@ (80017dc <main+0x260>)
 8001728:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800172a:	f00a fe11 	bl	800c350 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800172e:	bf00      	nop
 8001730:	e7fd      	b.n	800172e <main+0x1b2>
 8001732:	bf00      	nop
 8001734:	200002d0 	.word	0x200002d0
 8001738:	20000144 	.word	0x20000144
 800173c:	200000fc 	.word	0x200000fc
 8001740:	20000340 	.word	0x20000340
 8001744:	20000344 	.word	0x20000344
 8001748:	20000348 	.word	0x20000348
 800174c:	2000034c 	.word	0x2000034c
 8001750:	41afec8b 	.word	0x41afec8b
 8001754:	200002d4 	.word	0x200002d4
 8001758:	2000021c 	.word	0x2000021c
 800175c:	200001d4 	.word	0x200001d4
 8001760:	20000308 	.word	0x20000308
 8001764:	08011358 	.word	0x08011358
 8001768:	0801135c 	.word	0x0801135c
 800176c:	200002fc 	.word	0x200002fc
 8001770:	20000300 	.word	0x20000300
 8001774:	20000304 	.word	0x20000304
 8001778:	08011488 	.word	0x08011488
 800177c:	08002439 	.word	0x08002439
 8001780:	200002ac 	.word	0x200002ac
 8001784:	080114ac 	.word	0x080114ac
 8001788:	0800244f 	.word	0x0800244f
 800178c:	200002b0 	.word	0x200002b0
 8001790:	080114d0 	.word	0x080114d0
 8001794:	08002461 	.word	0x08002461
 8001798:	200002b4 	.word	0x200002b4
 800179c:	080114f4 	.word	0x080114f4
 80017a0:	080024c9 	.word	0x080024c9
 80017a4:	200002b8 	.word	0x200002b8
 80017a8:	08011518 	.word	0x08011518
 80017ac:	08002589 	.word	0x08002589
 80017b0:	200002bc 	.word	0x200002bc
 80017b4:	0801153c 	.word	0x0801153c
 80017b8:	080025e1 	.word	0x080025e1
 80017bc:	200002c0 	.word	0x200002c0
 80017c0:	08011560 	.word	0x08011560
 80017c4:	08002695 	.word	0x08002695
 80017c8:	200002c4 	.word	0x200002c4
 80017cc:	08011584 	.word	0x08011584
 80017d0:	08002761 	.word	0x08002761
 80017d4:	200002c8 	.word	0x200002c8
 80017d8:	080115a8 	.word	0x080115a8
 80017dc:	200002cc 	.word	0x200002cc

080017e0 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b094      	sub	sp, #80	@ 0x50
 80017e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	2230      	movs	r2, #48	@ 0x30
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00e fdc9 	bl	8010386 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <_Z18SystemClock_Configv+0xe0>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	4a2c      	ldr	r2, [pc, #176]	@ (80018c0 <_Z18SystemClock_Configv+0xe0>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	@ 0x40
 8001814:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <_Z18SystemClock_Configv+0xe0>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <_Z18SystemClock_Configv+0xe4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a26      	ldr	r2, [pc, #152]	@ (80018c4 <_Z18SystemClock_Configv+0xe4>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <_Z18SystemClock_Configv+0xe4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001840:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001846:	2302      	movs	r3, #2
 8001848:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800184e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001850:	2308      	movs	r3, #8
 8001852:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001854:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001858:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185a:	2302      	movs	r3, #2
 800185c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800185e:	2307      	movs	r3, #7
 8001860:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	4618      	mov	r0, r3
 8001868:	f004 f9a6 	bl	8005bb8 <HAL_RCC_OscConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <_Z18SystemClock_Configv+0xa0>
		Error_Handler();
 800187c:	f000 ff98 	bl	80027b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001880:	230f      	movs	r3, #15
 8001882:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001884:	2302      	movs	r3, #2
 8001886:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800188c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001890:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001896:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2105      	movs	r1, #5
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fc02 	bl	80060a8 <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <_Z18SystemClock_Configv+0xd8>
		Error_Handler();
 80018b4:	f000 ff7c 	bl	80027b0 <Error_Handler>
	}
}
 80018b8:	bf00      	nop
 80018ba:	3750      	adds	r7, #80	@ 0x50
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40007000 	.word	0x40007000

080018c8 <_ZL12MX_NVIC_Initv>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	/* UART5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2105      	movs	r1, #5
 80018d0:	2035      	movs	r0, #53	@ 0x35
 80018d2:	f001 fc6f 	bl	80031b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART5_IRQn);
 80018d6:	2035      	movs	r0, #53	@ 0x35
 80018d8:	f001 fc88 	bl	80031ec <HAL_NVIC_EnableIRQ>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 80018e6:	4a16      	ldr	r2, [pc, #88]	@ (8001940 <_ZL12MX_I2C1_Initv+0x60>)
 80018e8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80018ea:	4b14      	ldr	r3, [pc, #80]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 80018ec:	4a15      	ldr	r2, [pc, #84]	@ (8001944 <_ZL12MX_I2C1_Initv+0x64>)
 80018ee:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 80018fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001902:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800191c:	4807      	ldr	r0, [pc, #28]	@ (800193c <_ZL12MX_I2C1_Initv+0x5c>)
 800191e:	f004 f807 	bl	8005930 <HAL_I2C_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf14      	ite	ne
 8001928:	2301      	movne	r3, #1
 800192a:	2300      	moveq	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 8001932:	f000 ff3d 	bl	80027b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200000a8 	.word	0x200000a8
 8001940:	40005400 	.word	0x40005400
 8001944:	000186a0 	.word	0x000186a0

08001948 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	@ 0x30
 800194c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	2224      	movs	r2, #36	@ 0x24
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f00e fd15 	bl	8010386 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
	/*
	 * Polarity가 Rising => 1체배 하지만 채널 두개를 사용 하므로 2체배
	 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001964:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <_ZL12MX_TIM2_Initv+0xb8>)
 8001966:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800196c:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <_ZL12MX_TIM2_Initv+0xb8>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001972:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <_ZL12MX_TIM2_Initv+0xb8>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001978:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <_ZL12MX_TIM2_Initv+0xb8>)
 800197a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800197e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <_ZL12MX_TIM2_Initv+0xb8>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <_ZL12MX_TIM2_Initv+0xb8>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800198c:	2301      	movs	r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001994:	2301      	movs	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019a4:	2301      	movs	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	4619      	mov	r1, r3
 80019b6:	4812      	ldr	r0, [pc, #72]	@ (8001a00 <_ZL12MX_TIM2_Initv+0xb8>)
 80019b8:	f004 ffaa 	bl	8006910 <HAL_TIM_Encoder_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bf14      	ite	ne
 80019c2:	2301      	movne	r3, #1
 80019c4:	2300      	moveq	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <_ZL12MX_TIM2_Initv+0x88>
		Error_Handler();
 80019cc:	f000 fef0 	bl	80027b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	4808      	ldr	r0, [pc, #32]	@ (8001a00 <_ZL12MX_TIM2_Initv+0xb8>)
 80019de:	f005 fe89 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 80019e2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <_ZL12MX_TIM2_Initv+0xae>
		Error_Handler();
 80019f2:	f000 fedd 	bl	80027b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3730      	adds	r7, #48	@ 0x30
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200000fc 	.word	0x200000fc

08001a04 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	@ 0x30
 8001a08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2224      	movs	r2, #36	@ 0x24
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f00e fcb7 	bl	8010386 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001a20:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a22:	4a26      	ldr	r2, [pc, #152]	@ (8001abc <_ZL12MX_TIM3_Initv+0xb8>)
 8001a24:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001a26:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	@ (8001ab8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001a32:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a38:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4811      	ldr	r0, [pc, #68]	@ (8001ab8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a72:	f004 ff4d 	bl	8006910 <HAL_TIM_Encoder_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf14      	ite	ne
 8001a7c:	2301      	movne	r3, #1
 8001a7e:	2300      	moveq	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <_ZL12MX_TIM3_Initv+0x86>
		Error_Handler();
 8001a86:	f000 fe93 	bl	80027b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4808      	ldr	r0, [pc, #32]	@ (8001ab8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001a98:	f005 fe2c 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9c:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <_ZL12MX_TIM3_Initv+0xac>
		Error_Handler();
 8001aac:	f000 fe80 	bl	80027b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	@ 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000144 	.word	0x20000144
 8001abc:	40000400 	.word	0x40000400

08001ac0 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	@ 0x38
 8001ac4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ac6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001af0:	4b41      	ldr	r3, [pc, #260]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001af2:	4a42      	ldr	r2, [pc, #264]	@ (8001bfc <_ZL12MX_TIM4_Initv+0x13c>)
 8001af4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84 - 1;
 8001af6:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001af8:	2253      	movs	r2, #83	@ 0x53
 8001afa:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000;
 8001b02:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001b04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b08:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b10:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001b16:	4838      	ldr	r0, [pc, #224]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001b18:	f004 fd18 	bl	800654c <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <_ZL12MX_TIM4_Initv+0x70>
		Error_Handler();
 8001b2c:	f000 fe40 	bl	80027b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	482e      	ldr	r0, [pc, #184]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001b3e:	f005 f9cd 	bl	8006edc <HAL_TIM_ConfigClockSource>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf14      	ite	ne
 8001b48:	2301      	movne	r3, #1
 8001b4a:	2300      	moveq	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <_ZL12MX_TIM4_Initv+0x96>
		Error_Handler();
 8001b52:	f000 fe2d 	bl	80027b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001b56:	4828      	ldr	r0, [pc, #160]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001b58:	f004 fdb8 	bl	80066cc <HAL_TIM_PWM_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <_ZL12MX_TIM4_Initv+0xb0>
		Error_Handler();
 8001b6c:	f000 fe20 	bl	80027b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001b78:	f107 0320 	add.w	r3, r7, #32
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	481e      	ldr	r0, [pc, #120]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001b80:	f005 fdb8 	bl	80076f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b84:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <_ZL12MX_TIM4_Initv+0xd8>
		Error_Handler();
 8001b94:	f000 fe0c 	bl	80027b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b98:	2360      	movs	r3, #96	@ 0x60
 8001b9a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2204      	movs	r2, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4812      	ldr	r0, [pc, #72]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001bb0:	f005 f8d2 	bl	8006d58 <HAL_TIM_PWM_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <_ZL12MX_TIM4_Initv+0x108>
		Error_Handler();
 8001bc4:	f000 fdf4 	bl	80027b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2208      	movs	r2, #8
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480a      	ldr	r0, [pc, #40]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001bd0:	f005 f8c2 	bl	8006d58 <HAL_TIM_PWM_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <_ZL12MX_TIM4_Initv+0x128>
		Error_Handler();
 8001be4:	f000 fde4 	bl	80027b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001be8:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <_ZL12MX_TIM4_Initv+0x138>)
 8001bea:	f000 ff29 	bl	8002a40 <HAL_TIM_MspPostInit>

}
 8001bee:	bf00      	nop
 8001bf0:	3738      	adds	r7, #56	@ 0x38
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000018c 	.word	0x2000018c
 8001bfc:	40000800 	.word	0x40000800

08001c00 <_ZL13MX_UART4_Initv>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <_ZL13MX_UART4_Initv+0x54>)
 8001c06:	4a14      	ldr	r2, [pc, #80]	@ (8001c58 <_ZL13MX_UART4_Initv+0x58>)
 8001c08:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 1000000;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <_ZL13MX_UART4_Initv+0x54>)
 8001c0c:	4a13      	ldr	r2, [pc, #76]	@ (8001c5c <_ZL13MX_UART4_Initv+0x5c>)
 8001c0e:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c10:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <_ZL13MX_UART4_Initv+0x54>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <_ZL13MX_UART4_Initv+0x54>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <_ZL13MX_UART4_Initv+0x54>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <_ZL13MX_UART4_Initv+0x54>)
 8001c24:	220c      	movs	r2, #12
 8001c26:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <_ZL13MX_UART4_Initv+0x54>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <_ZL13MX_UART4_Initv+0x54>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001c34:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <_ZL13MX_UART4_Initv+0x54>)
 8001c36:	f005 fded 	bl	8007814 <HAL_UART_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <_ZL13MX_UART4_Initv+0x4e>
		Error_Handler();
 8001c4a:	f000 fdb1 	bl	80027b0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200001d4 	.word	0x200001d4
 8001c58:	40004c00 	.word	0x40004c00
 8001c5c:	000f4240 	.word	0x000f4240

08001c60 <_ZL13MX_UART5_Initv>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <_ZL13MX_UART5_Initv+0x54>)
 8001c66:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <_ZL13MX_UART5_Initv+0x58>)
 8001c68:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <_ZL13MX_UART5_Initv+0x54>)
 8001c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c70:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <_ZL13MX_UART5_Initv+0x54>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <_ZL13MX_UART5_Initv+0x54>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <_ZL13MX_UART5_Initv+0x54>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <_ZL13MX_UART5_Initv+0x54>)
 8001c86:	220c      	movs	r2, #12
 8001c88:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <_ZL13MX_UART5_Initv+0x54>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <_ZL13MX_UART5_Initv+0x54>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001c96:	4807      	ldr	r0, [pc, #28]	@ (8001cb4 <_ZL13MX_UART5_Initv+0x54>)
 8001c98:	f005 fdbc 	bl	8007814 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <_ZL13MX_UART5_Initv+0x50>
		Error_Handler();
 8001cac:	f000 fd80 	bl	80027b0 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2000021c 	.word	0x2000021c
 8001cb8:	40005000 	.word	0x40005000

08001cbc <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cc2:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001cc4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ccc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001cf2:	4807      	ldr	r0, [pc, #28]	@ (8001d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001cf4:	f005 fd8e 	bl	8007814 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf14      	ite	ne
 8001cfe:	2301      	movne	r3, #1
 8001d00:	2300      	moveq	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8001d08:	f000 fd52 	bl	80027b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000264 	.word	0x20000264
 8001d14:	40004400 	.word	0x40004400

08001d18 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	@ 0x30
 8001d1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	4b7a      	ldr	r3, [pc, #488]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a79      	ldr	r2, [pc, #484]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b77      	ldr	r3, [pc, #476]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	4b73      	ldr	r3, [pc, #460]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a72      	ldr	r2, [pc, #456]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b70      	ldr	r3, [pc, #448]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a6b      	ldr	r2, [pc, #428]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b69      	ldr	r3, [pc, #420]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b65      	ldr	r3, [pc, #404]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a64      	ldr	r2, [pc, #400]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b62      	ldr	r3, [pc, #392]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a5d      	ldr	r2, [pc, #372]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b5b      	ldr	r3, [pc, #364]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b57      	ldr	r3, [pc, #348]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a56      	ldr	r2, [pc, #344]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b54      	ldr	r3, [pc, #336]	@ (8001f1c <_ZL12MX_GPIO_Initv+0x204>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2108      	movs	r1, #8
 8001dda:	4851      	ldr	r0, [pc, #324]	@ (8001f20 <_ZL12MX_GPIO_Initv+0x208>)
 8001ddc:	f001 fc5a 	bl	8003694 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001de0:	2201      	movs	r2, #1
 8001de2:	2101      	movs	r1, #1
 8001de4:	484f      	ldr	r0, [pc, #316]	@ (8001f24 <_ZL12MX_GPIO_Initv+0x20c>)
 8001de6:	f001 fc55 	bl	8003694 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001dea:	2200      	movs	r2, #0
 8001dec:	f642 7110 	movw	r1, #12048	@ 0x2f10
 8001df0:	484d      	ldr	r0, [pc, #308]	@ (8001f28 <_ZL12MX_GPIO_Initv+0x210>)
 8001df2:	f001 fc4f 	bl	8003694 <HAL_GPIO_WritePin>
			Left_Motor_IN1_Pin | Left_Motor_IN2_Pin | Right_Motor_IN1_Pin
					| Right_Motor_IN2_Pin | LD3_Orange_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001df6:	2308      	movs	r3, #8
 8001df8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4844      	ldr	r0, [pc, #272]	@ (8001f20 <_ZL12MX_GPIO_Initv+0x208>)
 8001e0e:	f001 fa8d 	bl	800332c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	483e      	ldr	r0, [pc, #248]	@ (8001f24 <_ZL12MX_GPIO_Initv+0x20c>)
 8001e2a:	f001 fa7f 	bl	800332c <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e3e:	2305      	movs	r3, #5
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4619      	mov	r1, r3
 8001e48:	4836      	ldr	r0, [pc, #216]	@ (8001f24 <_ZL12MX_GPIO_Initv+0x20c>)
 8001e4a:	f001 fa6f 	bl	800332c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e52:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001e56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4832      	ldr	r0, [pc, #200]	@ (8001f2c <_ZL12MX_GPIO_Initv+0x214>)
 8001e64:	f001 fa62 	bl	800332c <HAL_GPIO_Init>

	/*Configure GPIO pins : BOOT1_Pin Trashbin_State_pin_Pin External_Emegency_BTN_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin | Trashbin_State_pin_Pin
 8001e68:	f24c 0304 	movw	r3, #49156	@ 0xc004
 8001e6c:	61fb      	str	r3, [r7, #28]
			| External_Emegency_BTN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	482c      	ldr	r0, [pc, #176]	@ (8001f30 <_ZL12MX_GPIO_Initv+0x218>)
 8001e7e:	f001 fa55 	bl	800332c <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e94:	2305      	movs	r3, #5
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4824      	ldr	r0, [pc, #144]	@ (8001f30 <_ZL12MX_GPIO_Initv+0x218>)
 8001ea0:	f001 fa44 	bl	800332c <HAL_GPIO_Init>

	/*Configure GPIO pins : Left_Motor_IN1_Pin Left_Motor_IN2_Pin Right_Motor_IN1_Pin Right_Motor_IN2_Pin
	 LD3_Orange_Pin Audio_RST_Pin */
	GPIO_InitStruct.Pin = Left_Motor_IN1_Pin | Left_Motor_IN2_Pin
 8001ea4:	f642 7310 	movw	r3, #12048	@ 0x2f10
 8001ea8:	61fb      	str	r3, [r7, #28]
			| Right_Motor_IN1_Pin | Right_Motor_IN2_Pin | LD3_Orange_Pin
			| Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481a      	ldr	r0, [pc, #104]	@ (8001f28 <_ZL12MX_GPIO_Initv+0x210>)
 8001ebe:	f001 fa35 	bl	800332c <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_MCK_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8001ec2:	2380      	movs	r3, #128	@ 0x80
 8001ec4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4811      	ldr	r0, [pc, #68]	@ (8001f24 <_ZL12MX_GPIO_Initv+0x20c>)
 8001ede:	f001 fa25 	bl	800332c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <_ZL12MX_GPIO_Initv+0x210>)
 8001ef6:	f001 fa19 	bl	800332c <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001efe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001f02:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <_ZL12MX_GPIO_Initv+0x208>)
 8001f10:	f001 fa0c 	bl	800332c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001f14:	bf00      	nop
 8001f16:	3730      	adds	r7, #48	@ 0x30
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40020400 	.word	0x40020400

08001f34 <_Z12setMotorMode9DriveMode>:

/* USER CODE BEGIN 4 */
void setMotorMode(DriveMode mode) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	f200 808a 	bhi.w	800205a <_Z12setMotorMode9DriveMode+0x126>
 8001f46:	a201      	add	r2, pc, #4	@ (adr r2, 8001f4c <_Z12setMotorMode9DriveMode+0x18>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001f61 	.word	0x08001f61
 8001f50:	08001f93 	.word	0x08001f93
 8001f54:	08001fc5 	.word	0x08001fc5
 8001f58:	08001ff7 	.word	0x08001ff7
 8001f5c:	08002029 	.word	0x08002029
	case 0:
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN1_Pin, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f66:	483f      	ldr	r0, [pc, #252]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001f68:	f001 fb94 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN2_Pin, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f72:	483c      	ldr	r0, [pc, #240]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001f74:	f001 fb8e 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN1_Pin, GPIO_PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f7e:	4839      	ldr	r0, [pc, #228]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001f80:	f001 fb88 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN2_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f8a:	4836      	ldr	r0, [pc, #216]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001f8c:	f001 fb82 	bl	8003694 <HAL_GPIO_WritePin>
		break;
 8001f90:	e063      	b.n	800205a <_Z12setMotorMode9DriveMode+0x126>
	case 1:
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN1_Pin, GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f98:	4832      	ldr	r0, [pc, #200]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001f9a:	f001 fb7b 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN2_Pin, GPIO_PIN_SET);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fa4:	482f      	ldr	r0, [pc, #188]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001fa6:	f001 fb75 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN1_Pin, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fb0:	482c      	ldr	r0, [pc, #176]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001fb2:	f001 fb6f 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN2_Pin, GPIO_PIN_SET);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fbc:	4829      	ldr	r0, [pc, #164]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001fbe:	f001 fb69 	bl	8003694 <HAL_GPIO_WritePin>
		break;
 8001fc2:	e04a      	b.n	800205a <_Z12setMotorMode9DriveMode+0x126>
		// 으론쪽으로 회전 => Left Motor 전진 , Right Motor 후진
	case 2:
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN1_Pin, GPIO_PIN_SET);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fca:	4826      	ldr	r0, [pc, #152]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001fcc:	f001 fb62 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN2_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fd6:	4823      	ldr	r0, [pc, #140]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001fd8:	f001 fb5c 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN1_Pin, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fe2:	4820      	ldr	r0, [pc, #128]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001fe4:	f001 fb56 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN2_Pin, GPIO_PIN_SET);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fee:	481d      	ldr	r0, [pc, #116]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001ff0:	f001 fb50 	bl	8003694 <HAL_GPIO_WritePin>
		break;
 8001ff4:	e031      	b.n	800205a <_Z12setMotorMode9DriveMode+0x126>
		// 왼쪽으로 회전 => Left Motor 후진 , Right Motor 전진
	case 3:
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN1_Pin, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ffc:	4819      	ldr	r0, [pc, #100]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8001ffe:	f001 fb49 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN2_Pin, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002008:	4816      	ldr	r0, [pc, #88]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 800200a:	f001 fb43 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN1_Pin, GPIO_PIN_SET);
 800200e:	2201      	movs	r2, #1
 8002010:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002014:	4813      	ldr	r0, [pc, #76]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8002016:	f001 fb3d 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN2_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002020:	4810      	ldr	r0, [pc, #64]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8002022:	f001 fb37 	bl	8003694 <HAL_GPIO_WritePin>
		break;
 8002026:	e018      	b.n	800205a <_Z12setMotorMode9DriveMode+0x126>
	case 4:
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN1_Pin, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800202e:	480d      	ldr	r0, [pc, #52]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8002030:	f001 fb30 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Left_Motor_IN2_Pin, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800203a:	480a      	ldr	r0, [pc, #40]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 800203c:	f001 fb2a 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN1_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002046:	4807      	ldr	r0, [pc, #28]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8002048:	f001 fb24 	bl	8003694 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, Right_Motor_IN2_Pin, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002052:	4804      	ldr	r0, [pc, #16]	@ (8002064 <_Z12setMotorMode9DriveMode+0x130>)
 8002054:	f001 fb1e 	bl	8003694 <HAL_GPIO_WritePin>
		break;
 8002058:	bf00      	nop
	}
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40020c00 	.word	0x40020c00

08002068 <_Z13setMotorSpeedci>:

void setMotorSpeed(char motor_position, int speed) {
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
	int pwm = abs(speed) * 10;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800207a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
	if (pwm <= 30) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b1e      	cmp	r3, #30
 800208c:	dc01      	bgt.n	8002092 <_Z13setMotorSpeedci+0x2a>
		pwm = 35;
 800208e:	2323      	movs	r3, #35	@ 0x23
 8002090:	60fb      	str	r3, [r7, #12]
	}
	if (motor_position == 'L') {
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b4c      	cmp	r3, #76	@ 0x4c
 8002096:	d107      	bne.n	80020a8 <_Z13setMotorSpeedci+0x40>
		current_left_pwm = speed;
 8002098:	4a0b      	ldr	r2, [pc, #44]	@ (80020c8 <_Z13setMotorSpeedci+0x60>)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm);
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <_Z13setMotorSpeedci+0x64>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	639a      	str	r2, [r3, #56]	@ 0x38
	} else if (motor_position == 'R') {
		current_right_pwm = speed;
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm);
	}
}
 80020a6:	e009      	b.n	80020bc <_Z13setMotorSpeedci+0x54>
	} else if (motor_position == 'R') {
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	2b52      	cmp	r3, #82	@ 0x52
 80020ac:	d106      	bne.n	80020bc <_Z13setMotorSpeedci+0x54>
		current_right_pwm = speed;
 80020ae:	4a08      	ldr	r2, [pc, #32]	@ (80020d0 <_Z13setMotorSpeedci+0x68>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm);
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <_Z13setMotorSpeedci+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	20000338 	.word	0x20000338
 80020cc:	2000018c 	.word	0x2000018c
 80020d0:	2000033c 	.word	0x2000033c

080020d4 <_Z10motorStartv>:

void motorStart() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80020d8:	2104      	movs	r1, #4
 80020da:	4804      	ldr	r0, [pc, #16]	@ (80020ec <_Z10motorStartv+0x18>)
 80020dc:	f004 fb50 	bl	8006780 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80020e0:	2108      	movs	r1, #8
 80020e2:	4802      	ldr	r0, [pc, #8]	@ (80020ec <_Z10motorStartv+0x18>)
 80020e4:	f004 fb4c 	bl	8006780 <HAL_TIM_PWM_Start>
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000018c 	.word	0x2000018c

080020f0 <_Z13motorShutdownv>:

void motorShutdown() {
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <_Z13motorShutdownv+0x20>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80020fc:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <_Z13motorShutdownv+0x20>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2000018c 	.word	0x2000018c

08002114 <_Z12startEncoderP17TIM_HandleTypeDef>:

void startEncoder(TIM_HandleTypeDef *htim) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 800211c:	213c      	movs	r1, #60	@ 0x3c
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f004 fc9c 	bl	8006a5c <HAL_TIM_Encoder_Start>
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_Z11readEncoderP17TIM_HandleTypeDef>:

int32_t readEncoder(TIM_HandleTypeDef *htim) {
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    int16_t current_count = __HAL_TIM_GET_COUNTER(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	81bb      	strh	r3, [r7, #12]
    int16_t diff = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	81fb      	strh	r3, [r7, #14]

    if (htim->Instance == TIM3) {  // Left encoder
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <_Z11readEncoderP17TIM_HandleTypeDef+0xb4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d11e      	bne.n	8002188 <_Z11readEncoderP17TIM_HandleTypeDef+0x5c>
        diff = current_count - left_encoder_prev_count;
 800214a:	89ba      	ldrh	r2, [r7, #12]
 800214c:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <_Z11readEncoderP17TIM_HandleTypeDef+0xb8>)
 800214e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002152:	b29b      	uxth	r3, r3
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	b29b      	uxth	r3, r3
 8002158:	81fb      	strh	r3, [r7, #14]

        // 오버플로우 / 언더플로우 보정
        if (diff > 30000) diff -= 65536;
 800215a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800215e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002162:	4293      	cmp	r3, r2
 8002164:	dc03      	bgt.n	800216e <_Z11readEncoderP17TIM_HandleTypeDef+0x42>
        else if (diff < -30000) diff += 65536;
 8002166:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800216a:	4a1f      	ldr	r2, [pc, #124]	@ (80021e8 <_Z11readEncoderP17TIM_HandleTypeDef+0xbc>)
 800216c:	4293      	cmp	r3, r2

        left_encoder_total_count += diff;
 800216e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002172:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <_Z11readEncoderP17TIM_HandleTypeDef+0xc0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a1c      	ldr	r2, [pc, #112]	@ (80021ec <_Z11readEncoderP17TIM_HandleTypeDef+0xc0>)
 800217a:	6013      	str	r3, [r2, #0]
        left_encoder_prev_count = current_count;
 800217c:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <_Z11readEncoderP17TIM_HandleTypeDef+0xb8>)
 800217e:	89bb      	ldrh	r3, [r7, #12]
 8002180:	8013      	strh	r3, [r2, #0]
        return left_encoder_total_count;
 8002182:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <_Z11readEncoderP17TIM_HandleTypeDef+0xc0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	e024      	b.n	80021d2 <_Z11readEncoderP17TIM_HandleTypeDef+0xa6>
    } else if (htim->Instance == TIM2) {  // Right encoder
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002190:	d11e      	bne.n	80021d0 <_Z11readEncoderP17TIM_HandleTypeDef+0xa4>
        diff = current_count - right_encoder_prev_count;
 8002192:	89ba      	ldrh	r2, [r7, #12]
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <_Z11readEncoderP17TIM_HandleTypeDef+0xc4>)
 8002196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800219a:	b29b      	uxth	r3, r3
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	b29b      	uxth	r3, r3
 80021a0:	81fb      	strh	r3, [r7, #14]

        // 오버플로우 / 언더플로우 보정
        if (diff > 30000) diff -= 65536;
 80021a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021a6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80021aa:	4293      	cmp	r3, r2
 80021ac:	dc03      	bgt.n	80021b6 <_Z11readEncoderP17TIM_HandleTypeDef+0x8a>
        else if (diff < -30000) diff += 65536;
 80021ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021b2:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <_Z11readEncoderP17TIM_HandleTypeDef+0xbc>)
 80021b4:	4293      	cmp	r3, r2

        right_encoder_total_count += diff;
 80021b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <_Z11readEncoderP17TIM_HandleTypeDef+0xc8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a0c      	ldr	r2, [pc, #48]	@ (80021f4 <_Z11readEncoderP17TIM_HandleTypeDef+0xc8>)
 80021c2:	6013      	str	r3, [r2, #0]
        right_encoder_prev_count = current_count;
 80021c4:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <_Z11readEncoderP17TIM_HandleTypeDef+0xc4>)
 80021c6:	89bb      	ldrh	r3, [r7, #12]
 80021c8:	8013      	strh	r3, [r2, #0]
        return right_encoder_total_count;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <_Z11readEncoderP17TIM_HandleTypeDef+0xc8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	e000      	b.n	80021d2 <_Z11readEncoderP17TIM_HandleTypeDef+0xa6>
    } else {
        return 0;  // 지원하지 않는 타이머
 80021d0:	2300      	movs	r3, #0
    }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40000400 	.word	0x40000400
 80021e4:	20000340 	.word	0x20000340
 80021e8:	ffff8ad0 	.word	0xffff8ad0
 80021ec:	20000344 	.word	0x20000344
 80021f0:	20000348 	.word	0x20000348
 80021f4:	2000034c 	.word	0x2000034c

080021f8 <_Z24is_emergency_btn_pressedv>:
		result = (int) temp;
	}
	return result;
}

bool is_emergency_btn_pressed() {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80021fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002200:	4805      	ldr	r0, [pc, #20]	@ (8002218 <_Z24is_emergency_btn_pressedv+0x20>)
 8002202:	f001 fa2f 	bl	8003664 <HAL_GPIO_ReadPin>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40020400 	.word	0x40020400

0800221c <_Z12parseCommandPc>:

void parseCommand(char *cmd) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	int left_pwm = 0, right_pwm = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]

	char *l_ptr = strchr(cmd, 'L');
 800222c:	214c      	movs	r1, #76	@ 0x4c
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f00e f8b1 	bl	8010396 <strchr>
 8002234:	60f8      	str	r0, [r7, #12]
	char *r_ptr = strchr(cmd, 'R');
 8002236:	2152      	movs	r1, #82	@ 0x52
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f00e f8ac 	bl	8010396 <strchr>
 800223e:	60b8      	str	r0, [r7, #8]

	if (l_ptr && r_ptr) {
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d05a      	beq.n	80022fc <_Z12parseCommandPc+0xe0>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d057      	beq.n	80022fc <_Z12parseCommandPc+0xe0>
		left_pwm = atoi(l_ptr + 1);   // 'L' 다음부터 정수로 변환
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f00d fe05 	bl	800fe60 <atoi>
 8002256:	6178      	str	r0, [r7, #20]
		right_pwm = atoi(r_ptr + 1);  // 'R' 다음부터 정수로 변환
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3301      	adds	r3, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f00d fdff 	bl	800fe60 <atoi>
 8002262:	6138      	str	r0, [r7, #16]

		// PWM 제한 범위 적용
		if (left_pwm > 255)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2bff      	cmp	r3, #255	@ 0xff
 8002268:	dd01      	ble.n	800226e <_Z12parseCommandPc+0x52>
			left_pwm = 255;
 800226a:	23ff      	movs	r3, #255	@ 0xff
 800226c:	617b      	str	r3, [r7, #20]
		if (left_pwm < -255)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f113 0fff 	cmn.w	r3, #255	@ 0xff
 8002274:	da02      	bge.n	800227c <_Z12parseCommandPc+0x60>
			left_pwm = -255;
 8002276:	f06f 03fe 	mvn.w	r3, #254	@ 0xfe
 800227a:	617b      	str	r3, [r7, #20]
		if (right_pwm > 255)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2bff      	cmp	r3, #255	@ 0xff
 8002280:	dd01      	ble.n	8002286 <_Z12parseCommandPc+0x6a>
			right_pwm = 255;
 8002282:	23ff      	movs	r3, #255	@ 0xff
 8002284:	613b      	str	r3, [r7, #16]
		if (right_pwm < -255)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f113 0fff 	cmn.w	r3, #255	@ 0xff
 800228c:	da02      	bge.n	8002294 <_Z12parseCommandPc+0x78>
			right_pwm = -255;
 800228e:	f06f 03fe 	mvn.w	r3, #254	@ 0xfe
 8002292:	613b      	str	r3, [r7, #16]

		if (left_pwm > 0 && right_pwm > 0) {
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	dd06      	ble.n	80022a8 <_Z12parseCommandPc+0x8c>
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	dd03      	ble.n	80022a8 <_Z12parseCommandPc+0x8c>
			setMotorMode(FORWARD);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff fe47 	bl	8001f34 <_Z12setMotorMode9DriveMode>
 80022a6:	e020      	b.n	80022ea <_Z12parseCommandPc+0xce>

		} else if (left_pwm < 0 && right_pwm < 0) {
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	da06      	bge.n	80022bc <_Z12parseCommandPc+0xa0>
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da03      	bge.n	80022bc <_Z12parseCommandPc+0xa0>
			setMotorMode(BACKWARD);
 80022b4:	2001      	movs	r0, #1
 80022b6:	f7ff fe3d 	bl	8001f34 <_Z12setMotorMode9DriveMode>
 80022ba:	e016      	b.n	80022ea <_Z12parseCommandPc+0xce>

		} else if (left_pwm > 0 && right_pwm < 0) {
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	dd06      	ble.n	80022d0 <_Z12parseCommandPc+0xb4>
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	da03      	bge.n	80022d0 <_Z12parseCommandPc+0xb4>
			setMotorMode(ROTATE_RIGHT);
 80022c8:	2002      	movs	r0, #2
 80022ca:	f7ff fe33 	bl	8001f34 <_Z12setMotorMode9DriveMode>
 80022ce:	e00c      	b.n	80022ea <_Z12parseCommandPc+0xce>

		} else if (left_pwm < 0 && right_pwm > 0) {
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da06      	bge.n	80022e4 <_Z12parseCommandPc+0xc8>
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	dd03      	ble.n	80022e4 <_Z12parseCommandPc+0xc8>
			setMotorMode(ROTATE_LEFT);
 80022dc:	2003      	movs	r0, #3
 80022de:	f7ff fe29 	bl	8001f34 <_Z12setMotorMode9DriveMode>
 80022e2:	e002      	b.n	80022ea <_Z12parseCommandPc+0xce>

		} else {
			setMotorMode(STOP);
 80022e4:	2004      	movs	r0, #4
 80022e6:	f7ff fe25 	bl	8001f34 <_Z12setMotorMode9DriveMode>
		}

		setMotorSpeed('L', left_pwm);
 80022ea:	6979      	ldr	r1, [r7, #20]
 80022ec:	204c      	movs	r0, #76	@ 0x4c
 80022ee:	f7ff febb 	bl	8002068 <_Z13setMotorSpeedci>
		setMotorSpeed('R', right_pwm);
 80022f2:	6939      	ldr	r1, [r7, #16]
 80022f4:	2052      	movs	r0, #82	@ 0x52
 80022f6:	f7ff feb7 	bl	8002068 <_Z13setMotorSpeedci>
 80022fa:	e003      	b.n	8002304 <_Z12parseCommandPc+0xe8>
	} else {
		osDelay(1);
 80022fc:	2001      	movs	r0, #1
 80022fe:	f00a f8df 	bl	800c4c0 <osDelay>
	}
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	@ 0x30
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART5) {
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3a      	ldr	r2, [pc, #232]	@ (8002404 <HAL_UART_RxCpltCallback+0xf8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d16e      	bne.n	80023fc <HAL_UART_RxCpltCallback+0xf0>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800231e:	2300      	movs	r3, #0
 8002320:	62fb      	str	r3, [r7, #44]	@ 0x2c

		// 큐에 수신 바이트 삽입
		// 전달 받은 데이터에 따라 넣는 큐가 다름
		if (rx_data == '\n') {
 8002322:	4b39      	ldr	r3, [pc, #228]	@ (8002408 <HAL_UART_RxCpltCallback+0xfc>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b0a      	cmp	r3, #10
 8002328:	d145      	bne.n	80023b6 <HAL_UART_RxCpltCallback+0xaa>
			rx_cmd_buffer[rx_index] = '\0';  // 문자열 종료
 800232a:	4b38      	ldr	r3, [pc, #224]	@ (800240c <HAL_UART_RxCpltCallback+0x100>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	4b37      	ldr	r3, [pc, #220]	@ (8002410 <HAL_UART_RxCpltCallback+0x104>)
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]
			CommandMessage msg;
			strlcpy(msg.cmd, rx_cmd_buffer, CMD_BUFFER_SIZE);
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	2220      	movs	r2, #32
 800233c:	4934      	ldr	r1, [pc, #208]	@ (8002410 <HAL_UART_RxCpltCallback+0x104>)
 800233e:	4618      	mov	r0, r3
 8002340:	f00e f836 	bl	80103b0 <strlcpy>

			// 명령 종류 판별 및 큐 전송
			if (strncmp(msg.cmd, "L", 1) == 0) {
 8002344:	7b3a      	ldrb	r2, [r7, #12]
 8002346:	4b33      	ldr	r3, [pc, #204]	@ (8002414 <HAL_UART_RxCpltCallback+0x108>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_UART_RxCpltCallback+0x58>
				xQueueSendFromISR(MotorSpeedQueue, &msg,
 8002350:	4b31      	ldr	r3, [pc, #196]	@ (8002418 <HAL_UART_RxCpltCallback+0x10c>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002358:	f107 010c 	add.w	r1, r7, #12
 800235c:	2300      	movs	r3, #0
 800235e:	f00a ff79 	bl	800d254 <xQueueGenericSendFromISR>
 8002362:	e024      	b.n	80023ae <HAL_UART_RxCpltCallback+0xa2>
						&xHigherPriorityTaskWoken);
			} else if (strncmp(msg.cmd, "S", 1) == 0) {
 8002364:	7b3a      	ldrb	r2, [r7, #12]
 8002366:	4b2d      	ldr	r3, [pc, #180]	@ (800241c <HAL_UART_RxCpltCallback+0x110>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_UART_RxCpltCallback+0x78>
				xQueueSendFromISR(ServoQueue, &msg, &xHigherPriorityTaskWoken);
 8002370:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <HAL_UART_RxCpltCallback+0x114>)
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002378:	f107 010c 	add.w	r1, r7, #12
 800237c:	2300      	movs	r3, #0
 800237e:	f00a ff69 	bl	800d254 <xQueueGenericSendFromISR>
 8002382:	e014      	b.n	80023ae <HAL_UART_RxCpltCallback+0xa2>
			} else if (strncmp(msg.cmd, "U", 1) == 0
 8002384:	7b3a      	ldrb	r2, [r7, #12]
 8002386:	4b27      	ldr	r3, [pc, #156]	@ (8002424 <HAL_UART_RxCpltCallback+0x118>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_UART_RxCpltCallback+0x90>
					|| strncmp(msg.cmd, "D", 1) == 0) {
 8002390:	7b3a      	ldrb	r2, [r7, #12]
 8002392:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <HAL_UART_RxCpltCallback+0x11c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d108      	bne.n	80023ae <HAL_UART_RxCpltCallback+0xa2>
				xQueueSendFromISR(StepperQueue, &msg,
 800239c:	4b23      	ldr	r3, [pc, #140]	@ (800242c <HAL_UART_RxCpltCallback+0x120>)
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80023a4:	f107 010c 	add.w	r1, r7, #12
 80023a8:	2300      	movs	r3, #0
 80023aa:	f00a ff53 	bl	800d254 <xQueueGenericSendFromISR>
						&xHigherPriorityTaskWoken);
			}
			rx_index = 0;  // 버퍼 초기화
 80023ae:	4b17      	ldr	r3, [pc, #92]	@ (800240c <HAL_UART_RxCpltCallback+0x100>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e012      	b.n	80023dc <HAL_UART_RxCpltCallback+0xd0>
		} else {
			if (rx_index < CMD_BUFFER_SIZE - 1) {
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <HAL_UART_RxCpltCallback+0x100>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b1e      	cmp	r3, #30
 80023bc:	d80b      	bhi.n	80023d6 <HAL_UART_RxCpltCallback+0xca>
				rx_cmd_buffer[rx_index++] = rx_data;
 80023be:	4b13      	ldr	r3, [pc, #76]	@ (800240c <HAL_UART_RxCpltCallback+0x100>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	b2d1      	uxtb	r1, r2
 80023c6:	4a11      	ldr	r2, [pc, #68]	@ (800240c <HAL_UART_RxCpltCallback+0x100>)
 80023c8:	7011      	strb	r1, [r2, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <HAL_UART_RxCpltCallback+0xfc>)
 80023ce:	7819      	ldrb	r1, [r3, #0]
 80023d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <HAL_UART_RxCpltCallback+0x104>)
 80023d2:	5499      	strb	r1, [r3, r2]
 80023d4:	e002      	b.n	80023dc <HAL_UART_RxCpltCallback+0xd0>
			} else {
				rx_index = 0;  // overflow 방지
 80023d6:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <HAL_UART_RxCpltCallback+0x100>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
			}
		}

		// 다시 수신 시작
		HAL_UART_Receive_IT(&huart5, &rx_data, 1);
 80023dc:	2201      	movs	r2, #1
 80023de:	490a      	ldr	r1, [pc, #40]	@ (8002408 <HAL_UART_RxCpltCallback+0xfc>)
 80023e0:	4813      	ldr	r0, [pc, #76]	@ (8002430 <HAL_UART_RxCpltCallback+0x124>)
 80023e2:	f005 fb89 	bl	8007af8 <HAL_UART_Receive_IT>

		// 필요 시 context switch
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_UART_RxCpltCallback+0xf0>
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_UART_RxCpltCallback+0x128>)
 80023ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	f3bf 8f6f 	isb	sy
	}
}
 80023fc:	bf00      	nop
 80023fe:	3730      	adds	r7, #48	@ 0x30
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40005000 	.word	0x40005000
 8002408:	200002d4 	.word	0x200002d4
 800240c:	200002f8 	.word	0x200002f8
 8002410:	200002d8 	.word	0x200002d8
 8002414:	08011360 	.word	0x08011360
 8002418:	200002fc 	.word	0x200002fc
 800241c:	08011364 	.word	0x08011364
 8002420:	20000300 	.word	0x20000300
 8002424:	08011368 	.word	0x08011368
 8002428:	0801136c 	.word	0x0801136c
 800242c:	20000304 	.word	0x20000304
 8002430:	2000021c 	.word	0x2000021c
 8002434:	e000ed04 	.word	0xe000ed04

08002438 <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8002440:	f00d fa0a 	bl	800f858 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	osDelay(1);
 8002444:	2001      	movs	r0, #1
 8002446:	f00a f83b 	bl	800c4c0 <osDelay>
	for (;;) {
 800244a:	bf00      	nop
 800244c:	e7fd      	b.n	800244a <_Z16StartDefaultTaskPv+0x12>

0800244e <_Z9vCommTaskPv>:
 * @brief Function implementing the CommTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vCommTask */
void vCommTask(void *argument) {
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vCommTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002456:	2001      	movs	r0, #1
 8002458:	f00a f832 	bl	800c4c0 <osDelay>
 800245c:	e7fb      	b.n	8002456 <_Z9vCommTaskPv+0x8>
	...

08002460 <_Z15vNavigationTaskPv>:
 * @brief Function implementing the NavigationTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vNavigationTask */
void vNavigationTask(void *argument) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	@ 0x38
 8002464:	af02      	add	r7, sp, #8
 8002466:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vNavigationTask */
	/* Infinite loop */
	CommandMessage msg;
	for (;;) {
		EventBits_t bits = xEventGroupWaitBits(emegencyEventGroup,
 8002468:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <_Z15vNavigationTaskPv+0x60>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	2300      	movs	r3, #0
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	2201      	movs	r2, #1
 8002474:	2101      	movs	r1, #1
 8002476:	f00a fa37 	bl	800c8e8 <xEventGroupWaitBits>
 800247a:	62f8      	str	r0, [r7, #44]	@ 0x2c
		EmergencyOccure,
		pdTRUE,      // clear on exit
				pdFALSE,     // wait for ANY
				0);

		if (bits & EmergencyOccure) {
 800247c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <_Z15vNavigationTaskPv+0x2c>
			motorShutdown();
 8002486:	f7ff fe33 	bl	80020f0 <_Z13motorShutdownv>
			continue;
 800248a:	e017      	b.n	80024bc <_Z15vNavigationTaskPv+0x5c>
		}

		if (xQueueReceive(MotorSpeedQueue, &msg, 1) == pdTRUE) {
 800248c:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <_Z15vNavigationTaskPv+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f107 010c 	add.w	r1, r7, #12
 8002494:	2201      	movs	r2, #1
 8002496:	4618      	mov	r0, r3
 8002498:	f00a ff7a 	bl	800d390 <xQueueReceive>
 800249c:	4603      	mov	r3, r0
 800249e:	2b01      	cmp	r3, #1
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <_Z15vNavigationTaskPv+0x56>
			parseCommand(msg.cmd);  // 예: "L100R120"
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff feb3 	bl	800221c <_Z12parseCommandPc>
		}

		osDelay(1);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f00a f802 	bl	800c4c0 <osDelay>
	}
 80024bc:	e7d4      	b.n	8002468 <_Z15vNavigationTaskPv+0x8>
 80024be:	bf00      	nop
 80024c0:	200002d0 	.word	0x200002d0
 80024c4:	200002fc 	.word	0x200002fc

080024c8 <_Z11vIntakeTaskPv>:
 * @brief Function implementing the IntakeTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vIntakeTask */
void vIntakeTask(void *argument) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08e      	sub	sp, #56	@ 0x38
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vIntakeTask */
	/* Infinite loop */
	CommandMessage msg;
	for (;;) {
		//쓰레기 회수 플러그
		if (xQueueReceive(ServoQueue, &msg, 1) == pdTRUE) {
 80024d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002580 <_Z11vIntakeTaskPv+0xb8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f107 0108 	add.w	r1, r7, #8
 80024d8:	2201      	movs	r2, #1
 80024da:	4618      	mov	r0, r3
 80024dc:	f00a ff58 	bl	800d390 <xQueueReceive>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	bf0c      	ite	eq
 80024e6:	2301      	moveq	r3, #1
 80024e8:	2300      	movne	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ef      	beq.n	80024d0 <_Z11vIntakeTaskPv+0x8>
			char *s_ptr = strchr(msg.cmd, 'S');
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	2153      	movs	r1, #83	@ 0x53
 80024f6:	4618      	mov	r0, r3
 80024f8:	f00d ff4d 	bl	8010396 <strchr>
 80024fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
			bool isOpen = atoi(s_ptr + 1) == 1;
 80024fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002500:	3301      	adds	r3, #1
 8002502:	4618      	mov	r0, r3
 8002504:	f00d fcac 	bl	800fe60 <atoi>
 8002508:	4603      	mov	r3, r0
 800250a:	2b01      	cmp	r3, #1
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			if (isOpen) {
 8002516:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <_Z11vIntakeTaskPv+0x78>
				// TODO 각도에 대해서는 조립후 다시 정하기
				//position = (angle_in_degrees * 4095) / 360
				// 360도 = 15
				servo.RegWritePos(1, 4.63, 10, 150);
 800251e:	2396      	movs	r3, #150	@ 0x96
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	230a      	movs	r3, #10
 8002524:	2204      	movs	r2, #4
 8002526:	2101      	movs	r1, #1
 8002528:	4816      	ldr	r0, [pc, #88]	@ (8002584 <_Z11vIntakeTaskPv+0xbc>)
 800252a:	f7fe fc3e 	bl	8000daa <_ZN5SCSCL11RegWritePosEhttt>
				servo.RegWritePos(2, 9.37, 10, 150);
 800252e:	2396      	movs	r3, #150	@ 0x96
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	230a      	movs	r3, #10
 8002534:	2209      	movs	r2, #9
 8002536:	2102      	movs	r1, #2
 8002538:	4812      	ldr	r0, [pc, #72]	@ (8002584 <_Z11vIntakeTaskPv+0xbc>)
 800253a:	f7fe fc36 	bl	8000daa <_ZN5SCSCL11RegWritePosEhttt>
 800253e:	e00f      	b.n	8002560 <_Z11vIntakeTaskPv+0x98>
			} else {
				servo.RegWritePos(1, 7, 0, 150);
 8002540:	2396      	movs	r3, #150	@ 0x96
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2300      	movs	r3, #0
 8002546:	2207      	movs	r2, #7
 8002548:	2101      	movs	r1, #1
 800254a:	480e      	ldr	r0, [pc, #56]	@ (8002584 <_Z11vIntakeTaskPv+0xbc>)
 800254c:	f7fe fc2d 	bl	8000daa <_ZN5SCSCL11RegWritePosEhttt>
				servo.RegWritePos(2, 7, 0, 150);
 8002550:	2396      	movs	r3, #150	@ 0x96
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2300      	movs	r3, #0
 8002556:	2207      	movs	r2, #7
 8002558:	2102      	movs	r1, #2
 800255a:	480a      	ldr	r0, [pc, #40]	@ (8002584 <_Z11vIntakeTaskPv+0xbc>)
 800255c:	f7fe fc25 	bl	8000daa <_ZN5SCSCL11RegWritePosEhttt>
			}
			servo.RegWriteAction(1);
 8002560:	2101      	movs	r1, #1
 8002562:	4808      	ldr	r0, [pc, #32]	@ (8002584 <_Z11vIntakeTaskPv+0xbc>)
 8002564:	f7fe f947 	bl	80007f6 <_ZN3SCS14RegWriteActionEh>
			osDelay(20);
 8002568:	2014      	movs	r0, #20
 800256a:	f009 ffa9 	bl	800c4c0 <osDelay>
			servo.RegWriteAction(2);
 800256e:	2102      	movs	r1, #2
 8002570:	4804      	ldr	r0, [pc, #16]	@ (8002584 <_Z11vIntakeTaskPv+0xbc>)
 8002572:	f7fe f940 	bl	80007f6 <_ZN3SCS14RegWriteActionEh>
			osDelay(1);
 8002576:	2001      	movs	r0, #1
 8002578:	f009 ffa2 	bl	800c4c0 <osDelay>
		}
	}
 800257c:	e7a8      	b.n	80024d0 <_Z11vIntakeTaskPv+0x8>
 800257e:	bf00      	nop
 8002580:	20000300 	.word	0x20000300
 8002584:	20000308 	.word	0x20000308

08002588 <_Z20vTrashBinMonitorTaskPv>:
 * @brief Function implementing the TrashBinMonitor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vTrashBinMonitorTask */
void vTrashBinMonitorTask(void *argument) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vTrashBinMonitorTask */
	/* Infinite loop */
	for (;;) {
		GPIO_PinState trashbin_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002590:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002594:	480f      	ldr	r0, [pc, #60]	@ (80025d4 <_Z20vTrashBinMonitorTaskPv+0x4c>)
 8002596:	f001 f865 	bl	8003664 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]
		if (trashbin_state == GPIO_PIN_SET) {
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d109      	bne.n	80025b8 <_Z20vTrashBinMonitorTaskPv+0x30>
			isTrashbinFull = false;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <_Z20vTrashBinMonitorTaskPv+0x50>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, LD3_Orange_Pin, GPIO_PIN_SET);
 80025aa:	2201      	movs	r2, #1
 80025ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025b0:	480a      	ldr	r0, [pc, #40]	@ (80025dc <_Z20vTrashBinMonitorTaskPv+0x54>)
 80025b2:	f001 f86f 	bl	8003694 <HAL_GPIO_WritePin>
 80025b6:	e008      	b.n	80025ca <_Z20vTrashBinMonitorTaskPv+0x42>

		} else {
			isTrashbinFull = true;
 80025b8:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <_Z20vTrashBinMonitorTaskPv+0x50>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, LD3_Orange_Pin, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025c4:	4805      	ldr	r0, [pc, #20]	@ (80025dc <_Z20vTrashBinMonitorTaskPv+0x54>)
 80025c6:	f001 f865 	bl	8003694 <HAL_GPIO_WritePin>

		}
		osDelay(1);
 80025ca:	2001      	movs	r0, #1
 80025cc:	f009 ff78 	bl	800c4c0 <osDelay>
	}
 80025d0:	e7de      	b.n	8002590 <_Z20vTrashBinMonitorTaskPv+0x8>
 80025d2:	bf00      	nop
 80025d4:	40020400 	.word	0x40020400
 80025d8:	20000334 	.word	0x20000334
 80025dc:	40020c00 	.word	0x40020c00

080025e0 <_Z16vLiftControlTaskPv>:
 * @brief Function implementing the LiftControlTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vLiftControlTask */
void vLiftControlTask(void *argument) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	@ 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vLiftControlTask */
	/* Infinite loop */
	CommandMessage msg;
	for (;;) {
		if (xQueueReceive(StepperQueue, &msg, 1) == pdTRUE) {
 80025e8:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <_Z16vLiftControlTaskPv+0xa8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f107 0108 	add.w	r1, r7, #8
 80025f0:	2201      	movs	r2, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f00a fecc 	bl	800d390 <xQueueReceive>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ef      	beq.n	80025e8 <_Z16vLiftControlTaskPv+0x8>
			char *u_ptr = strchr(msg.cmd, 'U');
 8002608:	f107 0308 	add.w	r3, r7, #8
 800260c:	2155      	movs	r1, #85	@ 0x55
 800260e:	4618      	mov	r0, r3
 8002610:	f00d fec1 	bl	8010396 <strchr>
 8002614:	62f8      	str	r0, [r7, #44]	@ 0x2c
			char *d_ptr = strchr(msg.cmd, 'D');
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	2144      	movs	r1, #68	@ 0x44
 800261c:	4618      	mov	r0, r3
 800261e:	f00d feba 	bl	8010396 <strchr>
 8002622:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (u_ptr) {
 8002624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d015      	beq.n	8002656 <_Z16vLiftControlTaskPv+0x76>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg.cmd, strlen(msg.cmd),
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd fdce 	bl	80001d0 <strlen>
 8002634:	4603      	mov	r3, r0
 8002636:	b29a      	uxth	r2, r3
 8002638:	f107 0108 	add.w	r1, r7, #8
 800263c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002640:	4812      	ldr	r0, [pc, #72]	@ (800268c <_Z16vLiftControlTaskPv+0xac>)
 8002642:	f005 f937 	bl	80078b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, HAL_MAX_DELAY);
 8002646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800264a:	2201      	movs	r2, #1
 800264c:	4910      	ldr	r1, [pc, #64]	@ (8002690 <_Z16vLiftControlTaskPv+0xb0>)
 800264e:	480f      	ldr	r0, [pc, #60]	@ (800268c <_Z16vLiftControlTaskPv+0xac>)
 8002650:	f005 f930 	bl	80078b4 <HAL_UART_Transmit>
 8002654:	e7c8      	b.n	80025e8 <_Z16vLiftControlTaskPv+0x8>
			} else if (d_ptr) {
 8002656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0c5      	beq.n	80025e8 <_Z16vLiftControlTaskPv+0x8>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg.cmd, strlen(msg.cmd),
 800265c:	f107 0308 	add.w	r3, r7, #8
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd fdb5 	bl	80001d0 <strlen>
 8002666:	4603      	mov	r3, r0
 8002668:	b29a      	uxth	r2, r3
 800266a:	f107 0108 	add.w	r1, r7, #8
 800266e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002672:	4806      	ldr	r0, [pc, #24]	@ (800268c <_Z16vLiftControlTaskPv+0xac>)
 8002674:	f005 f91e 	bl	80078b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				HAL_UART_Transmit(&huart2, (uint8_t*) "\n", 1, HAL_MAX_DELAY); // 줄바꿈
 8002678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800267c:	2201      	movs	r2, #1
 800267e:	4904      	ldr	r1, [pc, #16]	@ (8002690 <_Z16vLiftControlTaskPv+0xb0>)
 8002680:	4802      	ldr	r0, [pc, #8]	@ (800268c <_Z16vLiftControlTaskPv+0xac>)
 8002682:	f005 f917 	bl	80078b4 <HAL_UART_Transmit>
			}
		}
	}
 8002686:	e7af      	b.n	80025e8 <_Z16vLiftControlTaskPv+0x8>
 8002688:	20000304 	.word	0x20000304
 800268c:	20000264 	.word	0x20000264
 8002690:	08011370 	.word	0x08011370

08002694 <_Z18vSystemMonitorTaskPv>:
 * @brief Function implementing the SystemMonitorTa thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vSystemMonitorTask */
void vSystemMonitorTask(void *argument) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b0ac      	sub	sp, #176	@ 0xb0
 8002698:	af06      	add	r7, sp, #24
 800269a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vSystemMonitorTask */
	char tx_buffer[128];
	/* Infinite loop */
	for (;;) {
		int32_t left_encoder = readEncoder(&htim3);
 800269c:	4827      	ldr	r0, [pc, #156]	@ (800273c <_Z18vSystemMonitorTaskPv+0xa8>)
 800269e:	f7ff fd45 	bl	800212c <_Z11readEncoderP17TIM_HandleTypeDef>
 80026a2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		int32_t right_encoder = readEncoder(&htim2);
 80026a6:	4826      	ldr	r0, [pc, #152]	@ (8002740 <_Z18vSystemMonitorTaskPv+0xac>)
 80026a8:	f7ff fd40 	bl	800212c <_Z11readEncoderP17TIM_HandleTypeDef>
 80026ac:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		if(left_encoder <0) {
 80026b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	da02      	bge.n	80026be <_Z18vSystemMonitorTaskPv+0x2a>
			printf("test");
 80026b8:	4822      	ldr	r0, [pc, #136]	@ (8002744 <_Z18vSystemMonitorTaskPv+0xb0>)
 80026ba:	f00d fdd9 	bl	8010270 <iprintf>

		// 현재 왼쪽/오른쪽 PWM 값을 저장하는 변수 필요 (추가해야 함)
		extern int current_left_pwm;
		extern int current_right_pwm;

		int trash_state = isTrashbinFull ? 1 : 0;
 80026be:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <_Z18vSystemMonitorTaskPv+0xb4>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <_Z18vSystemMonitorTaskPv+0x36>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <_Z18vSystemMonitorTaskPv+0x38>
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		int emergency_state =
				(xEventGroupGetBits(emegencyEventGroup) & EmergencyOccure) ?
 80026d0:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <_Z18vSystemMonitorTaskPv+0xb8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f00a f9d8 	bl	800ca8c <xEventGroupClearBits>
 80026dc:	4603      	mov	r3, r0
						1 : 0;
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

		snprintf(tx_buffer, sizeof(tx_buffer),
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <_Z18vSystemMonitorTaskPv+0xbc>)
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <_Z18vSystemMonitorTaskPv+0xc0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f107 0008 	add.w	r0, r7, #8
 80026f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80026f6:	9204      	str	r2, [sp, #16]
 80026f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026fc:	9203      	str	r2, [sp, #12]
 80026fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002702:	9202      	str	r2, [sp, #8]
 8002704:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002708:	9201      	str	r2, [sp, #4]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	460b      	mov	r3, r1
 800270e:	4a12      	ldr	r2, [pc, #72]	@ (8002758 <_Z18vSystemMonitorTaskPv+0xc4>)
 8002710:	2180      	movs	r1, #128	@ 0x80
 8002712:	f00d fdbf 	bl	8010294 <sniprintf>
				"SPEED:L%d,R%d;TRASH:%d;EMERGENCY:%d;ENCODER:L%d,R%d\n",
				current_left_pwm, current_right_pwm, trash_state,
				emergency_state, left_encoder, right_encoder);

		HAL_UART_Transmit(&huart5, (uint8_t*) tx_buffer, strlen(tx_buffer),
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fd58 	bl	80001d0 <strlen>
 8002720:	4603      	mov	r3, r0
 8002722:	b29a      	uxth	r2, r3
 8002724:	f107 0108 	add.w	r1, r7, #8
 8002728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800272c:	480b      	ldr	r0, [pc, #44]	@ (800275c <_Z18vSystemMonitorTaskPv+0xc8>)
 800272e:	f005 f8c1 	bl	80078b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		osDelay(500);  // 500ms마다 송신 (필요에 따라 조절 가능)
 8002732:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002736:	f009 fec3 	bl	800c4c0 <osDelay>
	}
 800273a:	e7af      	b.n	800269c <_Z18vSystemMonitorTaskPv+0x8>
 800273c:	20000144 	.word	0x20000144
 8002740:	200000fc 	.word	0x200000fc
 8002744:	08011374 	.word	0x08011374
 8002748:	20000334 	.word	0x20000334
 800274c:	200002d0 	.word	0x200002d0
 8002750:	20000338 	.word	0x20000338
 8002754:	2000033c 	.word	0x2000033c
 8002758:	0801137c 	.word	0x0801137c
 800275c:	2000021c 	.word	0x2000021c

08002760 <_Z14vEmergencyTaskPv>:
 * @brief Function implementing the EmergencyTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vEmergencyTask */
void vEmergencyTask(void *argument) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN vEmergencyTask */
	/* Infinite loop */
	for (;;) {
		if (is_emergency_btn_pressed()) {
 8002768:	f7ff fd46 	bl	80021f8 <_Z24is_emergency_btn_pressedv>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <_Z14vEmergencyTaskPv+0x1e>
			xEventGroupSetBits(emegencyEventGroup, EmergencyOccure);
 8002772:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <_Z14vEmergencyTaskPv+0x28>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2101      	movs	r1, #1
 8002778:	4618      	mov	r0, r3
 800277a:	f00a f9c0 	bl	800cafe <xEventGroupSetBits>
		}
		osDelay(1);
 800277e:	2001      	movs	r0, #1
 8002780:	f009 fe9e 	bl	800c4c0 <osDelay>
		if (is_emergency_btn_pressed()) {
 8002784:	e7f0      	b.n	8002768 <_Z14vEmergencyTaskPv+0x8>
 8002786:	bf00      	nop
 8002788:	200002d0 	.word	0x200002d0

0800278c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800279e:	f000 fc0d 	bl	8002fbc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40010000 	.word	0x40010000

080027b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b4:	b672      	cpsid	i
}
 80027b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <Error_Handler+0x8>

080027bc <_Z41__static_initialization_and_destruction_0v>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
SCSCL servo;
 80027c0:	4802      	ldr	r0, [pc, #8]	@ (80027cc <_Z41__static_initialization_and_destruction_0v+0x10>)
 80027c2:	f7fe fa67 	bl	8000c94 <_ZN5SCSCLC1Ev>
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000308 	.word	0x20000308

080027d0 <_GLOBAL__sub_I_hi2c1>:
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	f7ff fff2 	bl	80027bc <_Z41__static_initialization_and_destruction_0v>
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_MspInit+0x54>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_MspInit+0x54>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <HAL_MspInit+0x54>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_MspInit+0x54>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <HAL_MspInit+0x54>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	@ 0x40
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_MspInit+0x54>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	210f      	movs	r1, #15
 800281e:	f06f 0001 	mvn.w	r0, #1
 8002822:	f000 fcc7 	bl	80031b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800

08002834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	@ (80028b8 <HAL_I2C_MspInit+0x84>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d12c      	bne.n	80028b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <HAL_I2C_MspInit+0x88>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	4a17      	ldr	r2, [pc, #92]	@ (80028bc <HAL_I2C_MspInit+0x88>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6313      	str	r3, [r2, #48]	@ 0x30
 8002866:	4b15      	ldr	r3, [pc, #84]	@ (80028bc <HAL_I2C_MspInit+0x88>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002872:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002878:	2312      	movs	r3, #18
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287c:	2301      	movs	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002884:	2304      	movs	r3, #4
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	480c      	ldr	r0, [pc, #48]	@ (80028c0 <HAL_I2C_MspInit+0x8c>)
 8002890:	f000 fd4c 	bl	800332c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_I2C_MspInit+0x88>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <HAL_I2C_MspInit+0x88>)
 800289e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_I2C_MspInit+0x88>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	@ 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40005400 	.word	0x40005400
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020400 	.word	0x40020400

080028c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	@ 0x30
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e4:	d12c      	bne.n	8002940 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	4b3f      	ldr	r3, [pc, #252]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	4a3e      	ldr	r2, [pc, #248]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f6:	4b3c      	ldr	r3, [pc, #240]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	4b38      	ldr	r3, [pc, #224]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	4a37      	ldr	r2, [pc, #220]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6313      	str	r3, [r2, #48]	@ 0x30
 8002912:	4b35      	ldr	r3, [pc, #212]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Left_Motor_Encoder_B_Pin|Left_Motor_Encoder_A_Pin;
 800291e:	2322      	movs	r3, #34	@ 0x22
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800292e:	2301      	movs	r3, #1
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	482c      	ldr	r0, [pc, #176]	@ (80029ec <HAL_TIM_Encoder_MspInit+0x128>)
 800293a:	f000 fcf7 	bl	800332c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800293e:	e04e      	b.n	80029de <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM3)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2a      	ldr	r2, [pc, #168]	@ (80029f0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d149      	bne.n	80029de <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	4b26      	ldr	r3, [pc, #152]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a25      	ldr	r2, [pc, #148]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	4b1f      	ldr	r3, [pc, #124]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a1e      	ldr	r2, [pc, #120]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b18      	ldr	r3, [pc, #96]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a17      	ldr	r2, [pc, #92]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_Motor_Encoder_B_Pin;
 800299e:	2340      	movs	r3, #64	@ 0x40
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ae:	2302      	movs	r3, #2
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Right_Motor_Encoder_B_GPIO_Port, &GPIO_InitStruct);
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	4619      	mov	r1, r3
 80029b8:	480e      	ldr	r0, [pc, #56]	@ (80029f4 <HAL_TIM_Encoder_MspInit+0x130>)
 80029ba:	f000 fcb7 	bl	800332c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Right_Motor_Encoder_A_Pin;
 80029be:	2320      	movs	r3, #32
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ce:	2302      	movs	r3, #2
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Right_Motor_Encoder_A_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4619      	mov	r1, r3
 80029d8:	4807      	ldr	r0, [pc, #28]	@ (80029f8 <HAL_TIM_Encoder_MspInit+0x134>)
 80029da:	f000 fca7 	bl	800332c <HAL_GPIO_Init>
}
 80029de:	bf00      	nop
 80029e0:	3730      	adds	r7, #48	@ 0x30
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020000 	.word	0x40020000
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40020800 	.word	0x40020800
 80029f8:	40020400 	.word	0x40020400

080029fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0b      	ldr	r2, [pc, #44]	@ (8002a38 <HAL_TIM_Base_MspInit+0x3c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10d      	bne.n	8002a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_TIM_Base_MspInit+0x40>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	4a09      	ldr	r2, [pc, #36]	@ (8002a3c <HAL_TIM_Base_MspInit+0x40>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1e:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <HAL_TIM_Base_MspInit+0x40>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40000800 	.word	0x40000800
 8002a3c:	40023800 	.word	0x40023800

08002a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 030c 	add.w	r3, r7, #12
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <HAL_TIM_MspPostInit+0x68>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d11e      	bne.n	8002aa0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_TIM_MspPostInit+0x6c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4a10      	ldr	r2, [pc, #64]	@ (8002aac <HAL_TIM_MspPostInit+0x6c>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <HAL_TIM_MspPostInit+0x6c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = Left_Motor_PWM_Pin|Right_Motor_PWM_Pin;
 8002a7e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002a82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a90:	2302      	movs	r3, #2
 8002a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a94:	f107 030c 	add.w	r3, r7, #12
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4805      	ldr	r0, [pc, #20]	@ (8002ab0 <HAL_TIM_MspPostInit+0x70>)
 8002a9c:	f000 fc46 	bl	800332c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002aa0:	bf00      	nop
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020400 	.word	0x40020400

08002ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08e      	sub	sp, #56	@ 0x38
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5b      	ldr	r2, [pc, #364]	@ (8002c40 <HAL_UART_MspInit+0x18c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d12d      	bne.n	8002b32 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	4b5a      	ldr	r3, [pc, #360]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4a59      	ldr	r2, [pc, #356]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002ae0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae6:	4b57      	ldr	r3, [pc, #348]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	4b53      	ldr	r3, [pc, #332]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a52      	ldr	r2, [pc, #328]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b50      	ldr	r3, [pc, #320]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = Servo_TX_Pin|Servo_RX_Pin;
 8002b0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b20:	2308      	movs	r3, #8
 8002b22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4847      	ldr	r0, [pc, #284]	@ (8002c48 <HAL_UART_MspInit+0x194>)
 8002b2c:	f000 fbfe 	bl	800332c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b30:	e081      	b.n	8002c36 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==UART5)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a45      	ldr	r2, [pc, #276]	@ (8002c4c <HAL_UART_MspInit+0x198>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d14b      	bne.n	8002bd4 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	4b40      	ldr	r3, [pc, #256]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	4a3f      	ldr	r2, [pc, #252]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	4b39      	ldr	r3, [pc, #228]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b60:	4a38      	ldr	r2, [pc, #224]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b68:	4b36      	ldr	r3, [pc, #216]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	4b32      	ldr	r3, [pc, #200]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	4a31      	ldr	r2, [pc, #196]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b84:	4b2f      	ldr	r3, [pc, #188]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Raspberrypi_TX_Pin;
 8002b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Raspberrypi_TX_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002baa:	4619      	mov	r1, r3
 8002bac:	4826      	ldr	r0, [pc, #152]	@ (8002c48 <HAL_UART_MspInit+0x194>)
 8002bae:	f000 fbbd 	bl	800332c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Raspberrypi_RX_Pin;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Raspberrypi_RX_GPIO_Port, &GPIO_InitStruct);
 8002bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4820      	ldr	r0, [pc, #128]	@ (8002c50 <HAL_UART_MspInit+0x19c>)
 8002bce:	f000 fbad 	bl	800332c <HAL_GPIO_Init>
}
 8002bd2:	e030      	b.n	8002c36 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c54 <HAL_UART_MspInit+0x1a0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d12b      	bne.n	8002c36 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b18      	ldr	r3, [pc, #96]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	4a17      	ldr	r2, [pc, #92]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bee:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a10      	ldr	r2, [pc, #64]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_UART_MspInit+0x190>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Arduino_TX_Pin|Arduino_RX_Pin;
 8002c16:	230c      	movs	r3, #12
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c26:	2307      	movs	r3, #7
 8002c28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4809      	ldr	r0, [pc, #36]	@ (8002c58 <HAL_UART_MspInit+0x1a4>)
 8002c32:	f000 fb7b 	bl	800332c <HAL_GPIO_Init>
}
 8002c36:	bf00      	nop
 8002c38:	3738      	adds	r7, #56	@ 0x38
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40004c00 	.word	0x40004c00
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40020800 	.word	0x40020800
 8002c4c:	40005000 	.word	0x40005000
 8002c50:	40020c00 	.word	0x40020c00
 8002c54:	40004400 	.word	0x40004400
 8002c58:	40020000 	.word	0x40020000

08002c5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08c      	sub	sp, #48	@ 0x30
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	4b2f      	ldr	r3, [pc, #188]	@ (8002d30 <HAL_InitTick+0xd4>)
 8002c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c74:	4a2e      	ldr	r2, [pc, #184]	@ (8002d30 <HAL_InitTick+0xd4>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d30 <HAL_InitTick+0xd4>)
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c88:	f107 020c 	add.w	r2, r7, #12
 8002c8c:	f107 0310 	add.w	r3, r7, #16
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f003 fc28 	bl	80064e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002c98:	f003 fc12 	bl	80064c0 <HAL_RCC_GetPCLK2Freq>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca4:	4a23      	ldr	r2, [pc, #140]	@ (8002d34 <HAL_InitTick+0xd8>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	0c9b      	lsrs	r3, r3, #18
 8002cac:	3b01      	subs	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002cb0:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <HAL_InitTick+0xdc>)
 8002cb2:	4a22      	ldr	r2, [pc, #136]	@ (8002d3c <HAL_InitTick+0xe0>)
 8002cb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002cb6:	4b20      	ldr	r3, [pc, #128]	@ (8002d38 <HAL_InitTick+0xdc>)
 8002cb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cbc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002d38 <HAL_InitTick+0xdc>)
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <HAL_InitTick+0xdc>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_InitTick+0xdc>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <HAL_InitTick+0xdc>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002cd6:	4818      	ldr	r0, [pc, #96]	@ (8002d38 <HAL_InitTick+0xdc>)
 8002cd8:	f003 fc38 	bl	800654c <HAL_TIM_Base_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11b      	bne.n	8002d22 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002cea:	4813      	ldr	r0, [pc, #76]	@ (8002d38 <HAL_InitTick+0xdc>)
 8002cec:	f003 fc7e 	bl	80065ec <HAL_TIM_Base_Start_IT>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d111      	bne.n	8002d22 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cfe:	2019      	movs	r0, #25
 8002d00:	f000 fa74 	bl	80031ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	d808      	bhi.n	8002d1c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	2019      	movs	r0, #25
 8002d10:	f000 fa50 	bl	80031b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d14:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <HAL_InitTick+0xe4>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e002      	b.n	8002d22 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3730      	adds	r7, #48	@ 0x30
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	20000350 	.word	0x20000350
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	20000004 	.word	0x20000004

08002d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <NMI_Handler+0x4>

08002d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <HardFault_Handler+0x4>

08002d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <MemManage_Handler+0x4>

08002d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <BusFault_Handler+0x4>

08002d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <UsageFault_Handler+0x4>

08002d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d80:	4802      	ldr	r0, [pc, #8]	@ (8002d8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d82:	f003 fef9 	bl	8006b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000350 	.word	0x20000350

08002d90 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002d94:	4802      	ldr	r0, [pc, #8]	@ (8002da0 <UART5_IRQHandler+0x10>)
 8002d96:	f004 fed5 	bl	8007b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000021c 	.word	0x2000021c

08002da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002da8:	4802      	ldr	r0, [pc, #8]	@ (8002db4 <OTG_FS_IRQHandler+0x10>)
 8002daa:	f000 ff6d 	bl	8003c88 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20005194 	.word	0x20005194

08002db8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e00a      	b.n	8002de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dca:	f3af 8000 	nop.w
 8002dce:	4601      	mov	r1, r0
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	60ba      	str	r2, [r7, #8]
 8002dd6:	b2ca      	uxtb	r2, r1
 8002dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dbf0      	blt.n	8002dca <_read+0x12>
  }

  return len;
 8002de8:	687b      	ldr	r3, [r7, #4]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e009      	b.n	8002e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	60ba      	str	r2, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	dbf1      	blt.n	8002e04 <_write+0x12>
  }
  return len;
 8002e20:	687b      	ldr	r3, [r7, #4]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_close>:

int _close(int file)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e52:	605a      	str	r2, [r3, #4]
  return 0;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_isatty>:

int _isatty(int file)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <_sbrk+0x5c>)
 8002e9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <_sbrk+0x60>)
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <_sbrk+0x64>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <_sbrk+0x64>)
 8002eb2:	4a12      	ldr	r2, [pc, #72]	@ (8002efc <_sbrk+0x68>)
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <_sbrk+0x64>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d207      	bcs.n	8002ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ec4:	f00d fb3c 	bl	8010540 <__errno>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	220c      	movs	r2, #12
 8002ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ed2:	e009      	b.n	8002ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <_sbrk+0x64>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4a05      	ldr	r2, [pc, #20]	@ (8002ef8 <_sbrk+0x64>)
 8002ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20020000 	.word	0x20020000
 8002ef4:	00000400 	.word	0x00000400
 8002ef8:	20000398 	.word	0x20000398
 8002efc:	200056c0 	.word	0x200056c0

08002f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <SystemInit+0x20>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0a:	4a05      	ldr	r2, [pc, #20]	@ (8002f20 <SystemInit+0x20>)
 8002f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f28:	f7ff ffea 	bl	8002f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f2c:	480c      	ldr	r0, [pc, #48]	@ (8002f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f2e:	490d      	ldr	r1, [pc, #52]	@ (8002f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f44:	4c0a      	ldr	r4, [pc, #40]	@ (8002f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f52:	f00d fafb 	bl	801054c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f56:	f7fe fb11 	bl	800157c <main>
  bx  lr    
 8002f5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f64:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002f68:	08011718 	.word	0x08011718
  ldr r2, =_sbss
 8002f6c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002f70:	200056c0 	.word	0x200056c0

08002f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f74:	e7fe      	b.n	8002f74 <ADC_IRQHandler>
	...

08002f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <HAL_Init+0x40>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <HAL_Init+0x40>)
 8002f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <HAL_Init+0x40>)
 8002f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f94:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a07      	ldr	r2, [pc, #28]	@ (8002fb8 <HAL_Init+0x40>)
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa0:	2003      	movs	r0, #3
 8002fa2:	f000 f8fc 	bl	800319e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa6:	200f      	movs	r0, #15
 8002fa8:	f7ff fe58 	bl	8002c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fac:	f7ff fc16 	bl	80027dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00

08002fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_IncTick+0x20>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <HAL_IncTick+0x24>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a04      	ldr	r2, [pc, #16]	@ (8002fe0 <HAL_IncTick+0x24>)
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000008 	.word	0x20000008
 8002fe0:	2000039c 	.word	0x2000039c

08002fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	@ (8002ff8 <HAL_GetTick+0x14>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000039c 	.word	0x2000039c

08002ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7ff ffee 	bl	8002fe4 <HAL_GetTick>
 8003008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003014:	d005      	beq.n	8003022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003016:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <HAL_Delay+0x44>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003022:	bf00      	nop
 8003024:	f7ff ffde 	bl	8002fe4 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	429a      	cmp	r2, r3
 8003032:	d8f7      	bhi.n	8003024 <HAL_Delay+0x28>
  {
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000008 	.word	0x20000008

08003044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003054:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <__NVIC_SetPriorityGrouping+0x44>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003060:	4013      	ands	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800306c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003076:	4a04      	ldr	r2, [pc, #16]	@ (8003088 <__NVIC_SetPriorityGrouping+0x44>)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	60d3      	str	r3, [r2, #12]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003090:	4b04      	ldr	r3, [pc, #16]	@ (80030a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	f003 0307 	and.w	r3, r3, #7
}
 800309a:	4618      	mov	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	db0b      	blt.n	80030d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	f003 021f 	and.w	r2, r3, #31
 80030c0:	4907      	ldr	r1, [pc, #28]	@ (80030e0 <__NVIC_EnableIRQ+0x38>)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2001      	movs	r0, #1
 80030ca:	fa00 f202 	lsl.w	r2, r0, r2
 80030ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000e100 	.word	0xe000e100

080030e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	db0a      	blt.n	800310e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	490c      	ldr	r1, [pc, #48]	@ (8003130 <__NVIC_SetPriority+0x4c>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	440b      	add	r3, r1
 8003108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800310c:	e00a      	b.n	8003124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4908      	ldr	r1, [pc, #32]	@ (8003134 <__NVIC_SetPriority+0x50>)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	3b04      	subs	r3, #4
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	440b      	add	r3, r1
 8003122:	761a      	strb	r2, [r3, #24]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000e100 	.word	0xe000e100
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	@ 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f1c3 0307 	rsb	r3, r3, #7
 8003152:	2b04      	cmp	r3, #4
 8003154:	bf28      	it	cs
 8003156:	2304      	movcs	r3, #4
 8003158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3304      	adds	r3, #4
 800315e:	2b06      	cmp	r3, #6
 8003160:	d902      	bls.n	8003168 <NVIC_EncodePriority+0x30>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3b03      	subs	r3, #3
 8003166:	e000      	b.n	800316a <NVIC_EncodePriority+0x32>
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	401a      	ands	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003180:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43d9      	mvns	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	4313      	orrs	r3, r2
         );
}
 8003192:	4618      	mov	r0, r3
 8003194:	3724      	adds	r7, #36	@ 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ff4c 	bl	8003044 <__NVIC_SetPriorityGrouping>
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c6:	f7ff ff61 	bl	800308c <__NVIC_GetPriorityGrouping>
 80031ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	6978      	ldr	r0, [r7, #20]
 80031d2:	f7ff ffb1 	bl	8003138 <NVIC_EncodePriority>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff80 	bl	80030e4 <__NVIC_SetPriority>
}
 80031e4:	bf00      	nop
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff54 	bl	80030a8 <__NVIC_EnableIRQ>
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003216:	f7ff fee5 	bl	8002fe4 <HAL_GetTick>
 800321a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d008      	beq.n	800323a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2280      	movs	r2, #128	@ 0x80
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e052      	b.n	80032e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0216 	bic.w	r2, r2, #22
 8003248:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003258:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_DMA_Abort+0x62>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0208 	bic.w	r2, r2, #8
 8003278:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328a:	e013      	b.n	80032b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328c:	f7ff feaa 	bl	8002fe4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b05      	cmp	r3, #5
 8003298:	d90c      	bls.n	80032b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2203      	movs	r2, #3
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e015      	b.n	80032e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e4      	bne.n	800328c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	223f      	movs	r2, #63	@ 0x3f
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d004      	beq.n	8003306 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2280      	movs	r2, #128	@ 0x80
 8003300:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e00c      	b.n	8003320 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2205      	movs	r2, #5
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	@ 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e16b      	b.n	8003620 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003348:	2201      	movs	r2, #1
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	429a      	cmp	r2, r3
 8003362:	f040 815a 	bne.w	800361a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d005      	beq.n	800337e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800337a:	2b02      	cmp	r3, #2
 800337c:	d130      	bne.n	80033e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033b4:	2201      	movs	r2, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 0201 	and.w	r2, r3, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d017      	beq.n	800341c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d123      	bne.n	8003470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	08da      	lsrs	r2, r3, #3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3208      	adds	r2, #8
 8003430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	220f      	movs	r2, #15
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	08da      	lsrs	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3208      	adds	r2, #8
 800346a:	69b9      	ldr	r1, [r7, #24]
 800346c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0203 	and.w	r2, r3, #3
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80b4 	beq.w	800361a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b60      	ldr	r3, [pc, #384]	@ (8003638 <HAL_GPIO_Init+0x30c>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003638 <HAL_GPIO_Init+0x30c>)
 80034bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003638 <HAL_GPIO_Init+0x30c>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ce:	4a5b      	ldr	r2, [pc, #364]	@ (800363c <HAL_GPIO_Init+0x310>)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3302      	adds	r3, #2
 80034d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	220f      	movs	r2, #15
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a52      	ldr	r2, [pc, #328]	@ (8003640 <HAL_GPIO_Init+0x314>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d02b      	beq.n	8003552 <HAL_GPIO_Init+0x226>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a51      	ldr	r2, [pc, #324]	@ (8003644 <HAL_GPIO_Init+0x318>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d025      	beq.n	800354e <HAL_GPIO_Init+0x222>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a50      	ldr	r2, [pc, #320]	@ (8003648 <HAL_GPIO_Init+0x31c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01f      	beq.n	800354a <HAL_GPIO_Init+0x21e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4f      	ldr	r2, [pc, #316]	@ (800364c <HAL_GPIO_Init+0x320>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d019      	beq.n	8003546 <HAL_GPIO_Init+0x21a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4e      	ldr	r2, [pc, #312]	@ (8003650 <HAL_GPIO_Init+0x324>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_GPIO_Init+0x216>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4d      	ldr	r2, [pc, #308]	@ (8003654 <HAL_GPIO_Init+0x328>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00d      	beq.n	800353e <HAL_GPIO_Init+0x212>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4c      	ldr	r2, [pc, #304]	@ (8003658 <HAL_GPIO_Init+0x32c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <HAL_GPIO_Init+0x20e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4b      	ldr	r2, [pc, #300]	@ (800365c <HAL_GPIO_Init+0x330>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_GPIO_Init+0x20a>
 8003532:	2307      	movs	r3, #7
 8003534:	e00e      	b.n	8003554 <HAL_GPIO_Init+0x228>
 8003536:	2308      	movs	r3, #8
 8003538:	e00c      	b.n	8003554 <HAL_GPIO_Init+0x228>
 800353a:	2306      	movs	r3, #6
 800353c:	e00a      	b.n	8003554 <HAL_GPIO_Init+0x228>
 800353e:	2305      	movs	r3, #5
 8003540:	e008      	b.n	8003554 <HAL_GPIO_Init+0x228>
 8003542:	2304      	movs	r3, #4
 8003544:	e006      	b.n	8003554 <HAL_GPIO_Init+0x228>
 8003546:	2303      	movs	r3, #3
 8003548:	e004      	b.n	8003554 <HAL_GPIO_Init+0x228>
 800354a:	2302      	movs	r3, #2
 800354c:	e002      	b.n	8003554 <HAL_GPIO_Init+0x228>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_GPIO_Init+0x228>
 8003552:	2300      	movs	r3, #0
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	f002 0203 	and.w	r2, r2, #3
 800355a:	0092      	lsls	r2, r2, #2
 800355c:	4093      	lsls	r3, r2
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003564:	4935      	ldr	r1, [pc, #212]	@ (800363c <HAL_GPIO_Init+0x310>)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3302      	adds	r3, #2
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003572:	4b3b      	ldr	r3, [pc, #236]	@ (8003660 <HAL_GPIO_Init+0x334>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003596:	4a32      	ldr	r2, [pc, #200]	@ (8003660 <HAL_GPIO_Init+0x334>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800359c:	4b30      	ldr	r3, [pc, #192]	@ (8003660 <HAL_GPIO_Init+0x334>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c0:	4a27      	ldr	r2, [pc, #156]	@ (8003660 <HAL_GPIO_Init+0x334>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035c6:	4b26      	ldr	r3, [pc, #152]	@ (8003660 <HAL_GPIO_Init+0x334>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003660 <HAL_GPIO_Init+0x334>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <HAL_GPIO_Init+0x334>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003614:	4a12      	ldr	r2, [pc, #72]	@ (8003660 <HAL_GPIO_Init+0x334>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3301      	adds	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b0f      	cmp	r3, #15
 8003624:	f67f ae90 	bls.w	8003348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3724      	adds	r7, #36	@ 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	40013800 	.word	0x40013800
 8003640:	40020000 	.word	0x40020000
 8003644:	40020400 	.word	0x40020400
 8003648:	40020800 	.word	0x40020800
 800364c:	40020c00 	.word	0x40020c00
 8003650:	40021000 	.word	0x40021000
 8003654:	40021400 	.word	0x40021400
 8003658:	40021800 	.word	0x40021800
 800365c:	40021c00 	.word	0x40021c00
 8003660:	40013c00 	.word	0x40013c00

08003664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e001      	b.n	8003686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
 80036a0:	4613      	mov	r3, r2
 80036a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a4:	787b      	ldrb	r3, [r7, #1]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036b0:	e003      	b.n	80036ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036b2:	887b      	ldrh	r3, [r7, #2]
 80036b4:	041a      	lsls	r2, r3, #16
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	619a      	str	r2, [r3, #24]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af02      	add	r7, sp, #8
 80036cc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e059      	b.n	800378c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f00c f904 	bl	800f900 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003706:	d102      	bne.n	800370e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f005 f9e1 	bl	8008ada <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7c1a      	ldrb	r2, [r3, #16]
 8003720:	f88d 2000 	strb.w	r2, [sp]
 8003724:	3304      	adds	r3, #4
 8003726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003728:	f005 f962 	bl	80089f0 <USB_CoreInit>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e026      	b.n	800378c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f005 f9d9 	bl	8008afc <USB_SetCurrentMode>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e017      	b.n	800378c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	7c1a      	ldrb	r2, [r3, #16]
 8003764:	f88d 2000 	strb.w	r2, [sp]
 8003768:	3304      	adds	r3, #4
 800376a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800376c:	f005 fb7c 	bl	8008e68 <USB_HostInit>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2202      	movs	r2, #2
 800377a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e004      	b.n	800378c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b08b      	sub	sp, #44	@ 0x2c
 8003798:	af04      	add	r7, sp, #16
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	70fb      	strb	r3, [r7, #3]
 80037a6:	460b      	mov	r3, r1
 80037a8:	70bb      	strb	r3, [r7, #2]
 80037aa:	4613      	mov	r3, r2
 80037ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80037ae:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80037b0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_HCD_HC_Init+0x2c>
 80037bc:	2302      	movs	r3, #2
 80037be:	e09d      	b.n	80038fc <HAL_HCD_HC_Init+0x168>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3319      	adds	r3, #25
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3314      	adds	r3, #20
 80037ec:	787a      	ldrb	r2, [r7, #1]
 80037ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3315      	adds	r3, #21
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3326      	adds	r3, #38	@ 0x26
 8003814:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003818:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	78bb      	ldrb	r3, [r7, #2]
 800381e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003822:	b2d8      	uxtb	r0, r3
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3316      	adds	r3, #22
 8003832:	4602      	mov	r2, r0
 8003834:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fbc8 	bl	8003fd0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003840:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003844:	2b00      	cmp	r3, #0
 8003846:	da0a      	bge.n	800385e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3317      	adds	r3, #23
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e009      	b.n	8003872 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3317      	adds	r3, #23
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f005 fc5a 	bl	8009130 <USB_GetHostSpeed>
 800387c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800387e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10b      	bne.n	800389e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003886:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_HCD_HC_Init+0x10a>
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2bbc      	cmp	r3, #188	@ 0xbc
 8003898:	d901      	bls.n	800389e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800389a:	23bc      	movs	r3, #188	@ 0xbc
 800389c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3318      	adds	r3, #24
 80038ae:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80038b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	b298      	uxth	r0, r3
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3328      	adds	r3, #40	@ 0x28
 80038c8:	4602      	mov	r2, r0
 80038ca:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	787c      	ldrb	r4, [r7, #1]
 80038d6:	78ba      	ldrb	r2, [r7, #2]
 80038d8:	78f9      	ldrb	r1, [r7, #3]
 80038da:	9302      	str	r3, [sp, #8]
 80038dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	4623      	mov	r3, r4
 80038ea:	f005 fc49 	bl	8009180 <USB_HC_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	bd90      	pop	{r4, r7, pc}

08003904 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_HCD_HC_Halt+0x1e>
 800391e:	2302      	movs	r3, #2
 8003920:	e00f      	b.n	8003942 <HAL_HCD_HC_Halt+0x3e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f005 ffdb 	bl	80098ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	461a      	mov	r2, r3
 800395a:	4603      	mov	r3, r0
 800395c:	70fb      	strb	r3, [r7, #3]
 800395e:	460b      	mov	r3, r1
 8003960:	70bb      	strb	r3, [r7, #2]
 8003962:	4613      	mov	r3, r2
 8003964:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	3317      	adds	r3, #23
 8003976:	78ba      	ldrb	r2, [r7, #2]
 8003978:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	3326      	adds	r3, #38	@ 0x26
 800398a:	787a      	ldrb	r2, [r7, #1]
 800398c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800398e:	7c3b      	ldrb	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d114      	bne.n	80039be <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	332a      	adds	r3, #42	@ 0x2a
 80039a4:	2203      	movs	r2, #3
 80039a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	3319      	adds	r3, #25
 80039b8:	7f3a      	ldrb	r2, [r7, #28]
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e009      	b.n	80039d2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	332a      	adds	r3, #42	@ 0x2a
 80039ce:	2202      	movs	r2, #2
 80039d0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80039d2:	787b      	ldrb	r3, [r7, #1]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	f200 8102 	bhi.w	8003bde <HAL_HCD_HC_SubmitRequest+0x292>
 80039da:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	08003bc9 	.word	0x08003bc9
 80039e8:	08003ab5 	.word	0x08003ab5
 80039ec:	08003b3f 	.word	0x08003b3f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80039f0:	7c3b      	ldrb	r3, [r7, #16]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	f040 80f5 	bne.w	8003be2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80039f8:	78bb      	ldrb	r3, [r7, #2]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d12d      	bne.n	8003a5a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80039fe:	8b3b      	ldrh	r3, [r7, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	333d      	adds	r3, #61	@ 0x3d
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	333d      	adds	r3, #61	@ 0x3d
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	332a      	adds	r3, #42	@ 0x2a
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003a42:	e0ce      	b.n	8003be2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	332a      	adds	r3, #42	@ 0x2a
 8003a54:	2202      	movs	r2, #2
 8003a56:	701a      	strb	r2, [r3, #0]
      break;
 8003a58:	e0c3      	b.n	8003be2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	331a      	adds	r3, #26
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	f040 80b8 	bne.w	8003be2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	333c      	adds	r3, #60	@ 0x3c
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	332a      	adds	r3, #42	@ 0x2a
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
      break;
 8003a9c:	e0a1      	b.n	8003be2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	332a      	adds	r3, #42	@ 0x2a
 8003aae:	2202      	movs	r2, #2
 8003ab0:	701a      	strb	r2, [r3, #0]
      break;
 8003ab2:	e096      	b.n	8003be2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ab4:	78bb      	ldrb	r3, [r7, #2]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d120      	bne.n	8003afc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	333d      	adds	r3, #61	@ 0x3d
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	332a      	adds	r3, #42	@ 0x2a
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ae4:	e07e      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	332a      	adds	r3, #42	@ 0x2a
 8003af6:	2202      	movs	r2, #2
 8003af8:	701a      	strb	r2, [r3, #0]
      break;
 8003afa:	e073      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	333c      	adds	r3, #60	@ 0x3c
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	332a      	adds	r3, #42	@ 0x2a
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
      break;
 8003b26:	e05d      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	332a      	adds	r3, #42	@ 0x2a
 8003b38:	2202      	movs	r2, #2
 8003b3a:	701a      	strb	r2, [r3, #0]
      break;
 8003b3c:	e052      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b3e:	78bb      	ldrb	r3, [r7, #2]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d120      	bne.n	8003b86 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	333d      	adds	r3, #61	@ 0x3d
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	332a      	adds	r3, #42	@ 0x2a
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b6e:	e039      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	332a      	adds	r3, #42	@ 0x2a
 8003b80:	2202      	movs	r2, #2
 8003b82:	701a      	strb	r2, [r3, #0]
      break;
 8003b84:	e02e      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	333c      	adds	r3, #60	@ 0x3c
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	332a      	adds	r3, #42	@ 0x2a
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
      break;
 8003bb0:	e018      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	332a      	adds	r3, #42	@ 0x2a
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	701a      	strb	r2, [r3, #0]
      break;
 8003bc6:	e00d      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	332a      	adds	r3, #42	@ 0x2a
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
      break;
 8003bdc:	e002      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003be2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	332c      	adds	r3, #44	@ 0x2c
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	8b39      	ldrh	r1, [r7, #24]
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4403      	add	r3, r0
 8003c08:	3334      	adds	r3, #52	@ 0x34
 8003c0a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	334c      	adds	r3, #76	@ 0x4c
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3338      	adds	r3, #56	@ 0x38
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3315      	adds	r3, #21
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	334d      	adds	r3, #77	@ 0x4d
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	3310      	adds	r3, #16
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	1d19      	adds	r1, r3, #4
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	799b      	ldrb	r3, [r3, #6]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f005 fbae 	bl	80093d8 <USB_HC_StartXfer>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop

08003c88 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f005 f8a2 	bl	8008de8 <USB_GetMode>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	f040 80fb 	bne.w	8003ea2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f005 f865 	bl	8008d80 <USB_ReadInterrupts>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80f1 	beq.w	8003ea0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f005 f85c 	bl	8008d80 <USB_ReadInterrupts>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cd2:	d104      	bne.n	8003cde <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003cdc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f005 f84c 	bl	8008d80 <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cf2:	d104      	bne.n	8003cfe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003cfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f005 f83c 	bl	8008d80 <USB_ReadInterrupts>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d12:	d104      	bne.n	8003d1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003d1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f005 f82c 	bl	8008d80 <USB_ReadInterrupts>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d103      	bne.n	8003d3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2202      	movs	r2, #2
 8003d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f005 f81e 	bl	8008d80 <USB_ReadInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d4e:	d120      	bne.n	8003d92 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003d58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d113      	bne.n	8003d92 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003d6a:	2110      	movs	r1, #16
 8003d6c:	6938      	ldr	r0, [r7, #16]
 8003d6e:	f004 ff11 	bl	8008b94 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003d72:	6938      	ldr	r0, [r7, #16]
 8003d74:	f004 ff40 	bl	8008bf8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7a5b      	ldrb	r3, [r3, #9]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d105      	bne.n	8003d8c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2101      	movs	r1, #1
 8003d86:	4618      	mov	r0, r3
 8003d88:	f005 f932 	bl	8008ff0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f00b fe35 	bl	800f9fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f004 fff2 	bl	8008d80 <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003da2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003da6:	d102      	bne.n	8003dae <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f001 fd4d 	bl	8005848 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f004 ffe4 	bl	8008d80 <USB_ReadInterrupts>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d106      	bne.n	8003dd0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f00b fdfe 	bl	800f9c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f004 ffd3 	bl	8008d80 <USB_ReadInterrupts>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003de4:	d139      	bne.n	8003e5a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f005 fd6e 	bl	80098cc <USB_HC_ReadInterrupt>
 8003df0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e025      	b.n	8003e44 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d018      	beq.n	8003e3e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e22:	d106      	bne.n	8003e32 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f905 	bl	800403a <HCD_HC_IN_IRQHandler>
 8003e30:	e005      	b.n	8003e3e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 ff67 	bl	8004d0c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	3301      	adds	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	795b      	ldrb	r3, [r3, #5]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d3d3      	bcc.n	8003df8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f004 ff8e 	bl	8008d80 <USB_ReadInterrupts>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d101      	bne.n	8003e72 <HAL_HCD_IRQHandler+0x1ea>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <HAL_HCD_IRQHandler+0x1ec>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d014      	beq.n	8003ea2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0210 	bic.w	r2, r2, #16
 8003e86:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f001 fbfe 	bl	800568a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0210 	orr.w	r2, r2, #16
 8003e9c:	619a      	str	r2, [r3, #24]
 8003e9e:	e000      	b.n	8003ea2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003ea0:	bf00      	nop
    }
  }
}
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_HCD_Start+0x16>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e013      	b.n	8003ee6 <HAL_HCD_Start+0x3e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f005 f8f6 	bl	80090be <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 fdee 	bl	8008ab8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_HCD_Stop+0x16>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e00d      	b.n	8003f20 <HAL_HCD_Stop+0x32>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f005 fe49 	bl	8009ba8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f005 f898 	bl	800906a <USB_ResetPort>
 8003f3a:	4603      	mov	r3, r0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	334c      	adds	r3, #76	@ 0x4c
 8003f60:	781b      	ldrb	r3, [r3, #0]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3338      	adds	r3, #56	@ 0x38
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f005 f8da 	bl	800915e <USB_GetCurrentFrame>
 8003faa:	4603      	mov	r3, r0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f005 f8b5 	bl	8009130 <USB_GetHostSpeed>
 8003fc6:	4603      	mov	r3, r0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	331a      	adds	r3, #26
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	331b      	adds	r3, #27
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3325      	adds	r3, #37	@ 0x25
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	3324      	adds	r3, #36	@ 0x24
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f004 fea4 	bl	8008da6 <USB_ReadChInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d11a      	bne.n	800409e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004074:	461a      	mov	r2, r3
 8004076:	2304      	movs	r3, #4
 8004078:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	334d      	adds	r3, #77	@ 0x4d
 800408a:	2207      	movs	r2, #7
 800408c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	4611      	mov	r1, r2
 8004096:	4618      	mov	r0, r3
 8004098:	f005 fc29 	bl	80098ee <USB_HC_Halt>
 800409c:	e09e      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	4611      	mov	r1, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f004 fe7d 	bl	8008da6 <USB_ReadChInterrupts>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040b6:	d11b      	bne.n	80040f0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c4:	461a      	mov	r2, r3
 80040c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	2208      	movs	r2, #8
 80040de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	78fa      	ldrb	r2, [r7, #3]
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f005 fc00 	bl	80098ee <USB_HC_Halt>
 80040ee:	e075      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f004 fe54 	bl	8008da6 <USB_ReadChInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b08      	cmp	r3, #8
 8004106:	d11a      	bne.n	800413e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004114:	461a      	mov	r2, r3
 8004116:	2308      	movs	r3, #8
 8004118:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	334d      	adds	r3, #77	@ 0x4d
 800412a:	2206      	movs	r2, #6
 800412c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f005 fbd9 	bl	80098ee <USB_HC_Halt>
 800413c:	e04e      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f004 fe2d 	bl	8008da6 <USB_ReadChInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004156:	d11b      	bne.n	8004190 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004164:	461a      	mov	r2, r3
 8004166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800416a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	334d      	adds	r3, #77	@ 0x4d
 800417c:	2209      	movs	r2, #9
 800417e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f005 fbb0 	bl	80098ee <USB_HC_Halt>
 800418e:	e025      	b.n	80041dc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f004 fe04 	bl	8008da6 <USB_ReadChInterrupts>
 800419e:	4603      	mov	r3, r0
 80041a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a4:	2b80      	cmp	r3, #128	@ 0x80
 80041a6:	d119      	bne.n	80041dc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b4:	461a      	mov	r2, r3
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	334d      	adds	r3, #77	@ 0x4d
 80041ca:	2207      	movs	r2, #7
 80041cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f005 fb89 	bl	80098ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 fdde 	bl	8008da6 <USB_ReadChInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f4:	d112      	bne.n	800421c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f005 fb75 	bl	80098ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004210:	461a      	mov	r2, r3
 8004212:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004216:	6093      	str	r3, [r2, #8]
 8004218:	f000 bd75 	b.w	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f004 fdbe 	bl	8008da6 <USB_ReadChInterrupts>
 800422a:	4603      	mov	r3, r0
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b01      	cmp	r3, #1
 8004232:	f040 8128 	bne.w	8004486 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004242:	461a      	mov	r2, r3
 8004244:	2320      	movs	r3, #32
 8004246:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	331b      	adds	r3, #27
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d119      	bne.n	8004292 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	331b      	adds	r3, #27
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	0151      	lsls	r1, r2, #5
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	440a      	add	r2, r1
 8004288:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800428c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004290:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	799b      	ldrb	r3, [r3, #6]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01b      	beq.n	80042d2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3330      	adds	r3, #48	@ 0x30
 80042aa:	6819      	ldr	r1, [r3, #0]
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	1ac9      	subs	r1, r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4403      	add	r3, r0
 80042ce:	3338      	adds	r3, #56	@ 0x38
 80042d0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	334d      	adds	r3, #77	@ 0x4d
 80042e2:	2201      	movs	r2, #1
 80042e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	3344      	adds	r3, #68	@ 0x44
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004306:	461a      	mov	r2, r3
 8004308:	2301      	movs	r3, #1
 800430a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	3326      	adds	r3, #38	@ 0x26
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	3326      	adds	r3, #38	@ 0x26
 8004332:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004334:	2b02      	cmp	r3, #2
 8004336:	d110      	bne.n	800435a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f005 fad4 	bl	80098ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004352:	461a      	mov	r2, r3
 8004354:	2310      	movs	r3, #16
 8004356:	6093      	str	r3, [r2, #8]
 8004358:	e03d      	b.n	80043d6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3326      	adds	r3, #38	@ 0x26
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d00a      	beq.n	8004386 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	3326      	adds	r3, #38	@ 0x26
 8004380:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004382:	2b01      	cmp	r3, #1
 8004384:	d127      	bne.n	80043d6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	440a      	add	r2, r1
 800439c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	334c      	adds	r3, #76	@ 0x4c
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	334c      	adds	r3, #76	@ 0x4c
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f00b fb21 	bl	800fa18 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	799b      	ldrb	r3, [r3, #6]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d13b      	bne.n	8004456 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	3338      	adds	r3, #56	@ 0x38
 80043ee:	6819      	ldr	r1, [r3, #0]
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4403      	add	r3, r0
 80043fe:	3328      	adds	r3, #40	@ 0x28
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	440b      	add	r3, r1
 8004404:	1e59      	subs	r1, r3, #1
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4403      	add	r3, r0
 8004414:	3328      	adds	r3, #40	@ 0x28
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	fbb1 f3f3 	udiv	r3, r1, r3
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8470 	beq.w	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	333c      	adds	r3, #60	@ 0x3c
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	f083 0301 	eor.w	r3, r3, #1
 800443e:	b2d8      	uxtb	r0, r3
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	333c      	adds	r3, #60	@ 0x3c
 800444e:	4602      	mov	r2, r0
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	f000 bc58 	b.w	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	333c      	adds	r3, #60	@ 0x3c
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	f083 0301 	eor.w	r3, r3, #1
 800446e:	b2d8      	uxtb	r0, r3
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	333c      	adds	r3, #60	@ 0x3c
 800447e:	4602      	mov	r2, r0
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	f000 bc40 	b.w	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f004 fc89 	bl	8008da6 <USB_ReadChInterrupts>
 8004494:	4603      	mov	r3, r0
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	d131      	bne.n	8004502 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044aa:	461a      	mov	r2, r3
 80044ac:	2320      	movs	r3, #32
 80044ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	331a      	adds	r3, #26
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f040 841f 	bne.w	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	331b      	adds	r3, #27
 80044d8:	2201      	movs	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	334d      	adds	r3, #77	@ 0x4d
 80044ec:	2203      	movs	r2, #3
 80044ee:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f005 f9f8 	bl	80098ee <USB_HC_Halt>
 80044fe:	f000 bc02 	b.w	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f004 fc4b 	bl	8008da6 <USB_ReadChInterrupts>
 8004510:	4603      	mov	r3, r0
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	f040 8305 	bne.w	8004b26 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004528:	461a      	mov	r2, r3
 800452a:	2302      	movs	r3, #2
 800452c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	334d      	adds	r3, #77	@ 0x4d
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d114      	bne.n	800456e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	334d      	adds	r3, #77	@ 0x4d
 8004554:	2202      	movs	r2, #2
 8004556:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	334c      	adds	r3, #76	@ 0x4c
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	e2cc      	b.n	8004b08 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	334d      	adds	r3, #77	@ 0x4d
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b06      	cmp	r3, #6
 8004582:	d114      	bne.n	80045ae <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	334d      	adds	r3, #77	@ 0x4d
 8004594:	2202      	movs	r2, #2
 8004596:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	334c      	adds	r3, #76	@ 0x4c
 80045a8:	2205      	movs	r2, #5
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	e2ac      	b.n	8004b08 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	334d      	adds	r3, #77	@ 0x4d
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b07      	cmp	r3, #7
 80045c2:	d00b      	beq.n	80045dc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	334d      	adds	r3, #77	@ 0x4d
 80045d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045d6:	2b09      	cmp	r3, #9
 80045d8:	f040 80a6 	bne.w	8004728 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	334d      	adds	r3, #77	@ 0x4d
 80045ec:	2202      	movs	r2, #2
 80045ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	3344      	adds	r3, #68	@ 0x44
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	1c59      	adds	r1, r3, #1
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4403      	add	r3, r0
 8004610:	3344      	adds	r3, #68	@ 0x44
 8004612:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	3344      	adds	r3, #68	@ 0x44
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d943      	bls.n	80046b2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800462a:	78fa      	ldrb	r2, [r7, #3]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	3344      	adds	r3, #68	@ 0x44
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	331a      	adds	r3, #26
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d123      	bne.n	800469c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	331b      	adds	r3, #27
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	331c      	adds	r3, #28
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	440a      	add	r2, r1
 8004692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334c      	adds	r3, #76	@ 0x4c
 80046ac:	2204      	movs	r2, #4
 80046ae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046b0:	e229      	b.n	8004b06 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	334c      	adds	r3, #76	@ 0x4c
 80046c2:	2202      	movs	r2, #2
 80046c4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3326      	adds	r3, #38	@ 0x26
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	3326      	adds	r3, #38	@ 0x26
 80046ec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	f040 8209 	bne.w	8004b06 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800470a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004712:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004720:	461a      	mov	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004726:	e1ee      	b.n	8004b06 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334d      	adds	r3, #77	@ 0x4d
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b05      	cmp	r3, #5
 800473c:	f040 80c8 	bne.w	80048d0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	334d      	adds	r3, #77	@ 0x4d
 8004750:	2202      	movs	r2, #2
 8004752:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	331b      	adds	r3, #27
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	f040 81ce 	bne.w	8004b08 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	3326      	adds	r3, #38	@ 0x26
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d16b      	bne.n	800485a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	3348      	adds	r3, #72	@ 0x48
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	1c59      	adds	r1, r3, #1
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4403      	add	r3, r0
 80047a2:	3348      	adds	r3, #72	@ 0x48
 80047a4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	3348      	adds	r3, #72	@ 0x48
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d943      	bls.n	8004844 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	3348      	adds	r3, #72	@ 0x48
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	331b      	adds	r3, #27
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	3344      	adds	r3, #68	@ 0x44
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d809      	bhi.n	800480e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	331c      	adds	r3, #28
 800480a:	2201      	movs	r2, #1
 800480c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4413      	add	r3, r2
 8004816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	440a      	add	r2, r1
 8004824:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	334c      	adds	r3, #76	@ 0x4c
 800483e:	2204      	movs	r2, #4
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e014      	b.n	800486e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	334c      	adds	r3, #76	@ 0x4c
 8004854:	2202      	movs	r2, #2
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	e009      	b.n	800486e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	334c      	adds	r3, #76	@ 0x4c
 800486a:	2202      	movs	r2, #2
 800486c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	3326      	adds	r3, #38	@ 0x26
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	3326      	adds	r3, #38	@ 0x26
 8004894:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004896:	2b02      	cmp	r3, #2
 8004898:	f040 8136 	bne.w	8004b08 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048b2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048ba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048c8:	461a      	mov	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e11b      	b.n	8004b08 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	334d      	adds	r3, #77	@ 0x4d
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	f040 8081 	bne.w	80049ea <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	334d      	adds	r3, #77	@ 0x4d
 80048f8:	2202      	movs	r2, #2
 80048fa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	331b      	adds	r3, #27
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b01      	cmp	r3, #1
 8004910:	f040 80fa 	bne.w	8004b08 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	334c      	adds	r3, #76	@ 0x4c
 8004924:	2202      	movs	r2, #2
 8004926:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	440a      	add	r2, r1
 800493e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004946:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	440a      	add	r2, r1
 800495e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004966:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	440a      	add	r2, r1
 800497e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004982:	f023 0320 	bic.w	r3, r3, #32
 8004986:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	3326      	adds	r3, #38	@ 0x26
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800499e:	78fa      	ldrb	r2, [r7, #3]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	3326      	adds	r3, #38	@ 0x26
 80049ae:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	f040 80a9 	bne.w	8004b08 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049cc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049d4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e08e      	b.n	8004b08 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	334d      	adds	r3, #77	@ 0x4d
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d143      	bne.n	8004a88 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	334d      	adds	r3, #77	@ 0x4d
 8004a10:	2202      	movs	r2, #2
 8004a12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	334c      	adds	r3, #76	@ 0x4c
 8004a24:	2202      	movs	r2, #2
 8004a26:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3326      	adds	r3, #38	@ 0x26
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3326      	adds	r3, #38	@ 0x26
 8004a4e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d159      	bne.n	8004b08 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a6a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a72:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a80:	461a      	mov	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e03f      	b.n	8004b08 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	334d      	adds	r3, #77	@ 0x4d
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d126      	bne.n	8004aec <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	334d      	adds	r3, #77	@ 0x4d
 8004aae:	2202      	movs	r2, #2
 8004ab0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	3344      	adds	r3, #68	@ 0x44
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4403      	add	r3, r0
 8004ad2:	3344      	adds	r3, #68	@ 0x44
 8004ad4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	334c      	adds	r3, #76	@ 0x4c
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	e00d      	b.n	8004b08 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	334d      	adds	r3, #77	@ 0x4d
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	f000 8100 	beq.w	8004d04 <HCD_HC_IN_IRQHandler+0xcca>
 8004b04:	e000      	b.n	8004b08 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b06:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b08:	78fa      	ldrb	r2, [r7, #3]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	334c      	adds	r3, #76	@ 0x4c
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f00a ff7a 	bl	800fa18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b24:	e0ef      	b.n	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f004 f939 	bl	8008da6 <USB_ReadChInterrupts>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3a:	2b40      	cmp	r3, #64	@ 0x40
 8004b3c:	d12f      	bne.n	8004b9e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2340      	movs	r3, #64	@ 0x40
 8004b4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	334d      	adds	r3, #77	@ 0x4d
 8004b60:	2205      	movs	r2, #5
 8004b62:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004b64:	78fa      	ldrb	r2, [r7, #3]
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	331a      	adds	r3, #26
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	3344      	adds	r3, #68	@ 0x44
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f004 fea9 	bl	80098ee <USB_HC_Halt>
 8004b9c:	e0b3      	b.n	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 f8fd 	bl	8008da6 <USB_ReadChInterrupts>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	f040 80a7 	bne.w	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3326      	adds	r3, #38	@ 0x26
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d11b      	bne.n	8004c06 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3344      	adds	r3, #68	@ 0x44
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	334d      	adds	r3, #77	@ 0x4d
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	78fa      	ldrb	r2, [r7, #3]
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f004 fe75 	bl	80098ee <USB_HC_Halt>
 8004c04:	e03f      	b.n	8004c86 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	3326      	adds	r3, #38	@ 0x26
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3326      	adds	r3, #38	@ 0x26
 8004c2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d129      	bne.n	8004c86 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c32:	78fa      	ldrb	r2, [r7, #3]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3344      	adds	r3, #68	@ 0x44
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	799b      	ldrb	r3, [r3, #6]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <HCD_HC_IN_IRQHandler+0xc2a>
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	331b      	adds	r3, #27
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d110      	bne.n	8004c86 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	334d      	adds	r3, #77	@ 0x4d
 8004c74:	2204      	movs	r2, #4
 8004c76:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f004 fe34 	bl	80098ee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	331b      	adds	r3, #27
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d129      	bne.n	8004cf0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	1a9b      	subs	r3, r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	331b      	adds	r3, #27
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cce:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	0151      	lsls	r1, r2, #5
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cea:	f043 0320 	orr.w	r3, r3, #32
 8004cee:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2310      	movs	r3, #16
 8004d00:	6093      	str	r3, [r2, #8]
 8004d02:	e000      	b.n	8004d06 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004d04:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f004 f83b 	bl	8008da6 <USB_ReadChInterrupts>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d11b      	bne.n	8004d72 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d46:	461a      	mov	r2, r3
 8004d48:	2304      	movs	r3, #4
 8004d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	334d      	adds	r3, #77	@ 0x4d
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f004 fdc0 	bl	80098ee <USB_HC_Halt>
 8004d6e:	f000 bc89 	b.w	8005684 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	78fa      	ldrb	r2, [r7, #3]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f004 f813 	bl	8008da6 <USB_ReadChInterrupts>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	f040 8082 	bne.w	8004e90 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	3319      	adds	r3, #25
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d124      	bne.n	8004dfe <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	3319      	adds	r3, #25
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	334c      	adds	r3, #76	@ 0x4c
 8004dd8:	2202      	movs	r2, #2
 8004dda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	334d      	adds	r3, #77	@ 0x4d
 8004dec:	2203      	movs	r2, #3
 8004dee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f004 fd78 	bl	80098ee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	331a      	adds	r3, #26
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	f040 8437 	bne.w	8005684 <HCD_HC_OUT_IRQHandler+0x978>
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	331b      	adds	r3, #27
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f040 842b 	bne.w	8005684 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3326      	adds	r3, #38	@ 0x26
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d009      	beq.n	8004e58 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	331b      	adds	r3, #27
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	334d      	adds	r3, #77	@ 0x4d
 8004e68:	2203      	movs	r2, #3
 8004e6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	4611      	mov	r1, r2
 8004e74:	4618      	mov	r0, r3
 8004e76:	f004 fd3a 	bl	80098ee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	3344      	adds	r3, #68	@ 0x44
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e3f9      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	4611      	mov	r1, r2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f003 ff84 	bl	8008da6 <USB_ReadChInterrupts>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ea8:	d111      	bne.n	8004ece <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ebc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f004 fd11 	bl	80098ee <USB_HC_Halt>
 8004ecc:	e3da      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f003 ff65 	bl	8008da6 <USB_ReadChInterrupts>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d168      	bne.n	8004fb8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3344      	adds	r3, #68	@ 0x44
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f003 ff4f 	bl	8008da6 <USB_ReadChInterrupts>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0e:	2b40      	cmp	r3, #64	@ 0x40
 8004f10:	d112      	bne.n	8004f38 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	3319      	adds	r3, #25
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f32:	461a      	mov	r2, r3
 8004f34:	2340      	movs	r3, #64	@ 0x40
 8004f36:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	331b      	adds	r3, #27
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d019      	beq.n	8004f82 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	331b      	adds	r3, #27
 8004f5e:	2200      	movs	r2, #0
 8004f60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	78fa      	ldrb	r2, [r7, #3]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f80:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f8e:	461a      	mov	r2, r3
 8004f90:	2301      	movs	r3, #1
 8004f92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004f94:	78fa      	ldrb	r2, [r7, #3]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	334d      	adds	r3, #77	@ 0x4d
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f004 fc9c 	bl	80098ee <USB_HC_Halt>
 8004fb6:	e365      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f003 fef0 	bl	8008da6 <USB_ReadChInterrupts>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	d139      	bne.n	8005044 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	334d      	adds	r3, #77	@ 0x4d
 8004fe0:	2205      	movs	r2, #5
 8004fe2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	331a      	adds	r3, #26
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	3319      	adds	r3, #25
 800500a:	2201      	movs	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3344      	adds	r3, #68	@ 0x44
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	78fa      	ldrb	r2, [r7, #3]
 8005028:	4611      	mov	r1, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f004 fc5f 	bl	80098ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	2340      	movs	r3, #64	@ 0x40
 8005040:	6093      	str	r3, [r2, #8]
 8005042:	e31f      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f003 feaa 	bl	8008da6 <USB_ReadChInterrupts>
 8005052:	4603      	mov	r3, r0
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d11a      	bne.n	8005092 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005068:	461a      	mov	r2, r3
 800506a:	2308      	movs	r3, #8
 800506c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	334d      	adds	r3, #77	@ 0x4d
 800507e:	2206      	movs	r2, #6
 8005080:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f004 fc2f 	bl	80098ee <USB_HC_Halt>
 8005090:	e2f8      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f003 fe83 	bl	8008da6 <USB_ReadChInterrupts>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d144      	bne.n	8005134 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3344      	adds	r3, #68	@ 0x44
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	334d      	adds	r3, #77	@ 0x4d
 80050ce:	2204      	movs	r2, #4
 80050d0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	3319      	adds	r3, #25
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d114      	bne.n	8005112 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	3318      	adds	r3, #24
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3319      	adds	r3, #25
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f004 fbe7 	bl	80098ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4413      	add	r3, r2
 8005128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800512c:	461a      	mov	r2, r3
 800512e:	2310      	movs	r3, #16
 8005130:	6093      	str	r3, [r2, #8]
 8005132:	e2a7      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	78fa      	ldrb	r2, [r7, #3]
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f003 fe32 	bl	8008da6 <USB_ReadChInterrupts>
 8005142:	4603      	mov	r3, r0
 8005144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005148:	2b80      	cmp	r3, #128	@ 0x80
 800514a:	f040 8083 	bne.w	8005254 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	799b      	ldrb	r3, [r3, #6]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d111      	bne.n	800517a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	334d      	adds	r3, #77	@ 0x4d
 8005166:	2207      	movs	r2, #7
 8005168:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f004 fbbb 	bl	80098ee <USB_HC_Halt>
 8005178:	e062      	b.n	8005240 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	3344      	adds	r3, #68	@ 0x44
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	1c59      	adds	r1, r3, #1
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4403      	add	r3, r0
 800519a:	3344      	adds	r3, #68	@ 0x44
 800519c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	3344      	adds	r3, #68	@ 0x44
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d922      	bls.n	80051fa <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	3344      	adds	r3, #68	@ 0x44
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80051c8:	78fa      	ldrb	r2, [r7, #3]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	334c      	adds	r3, #76	@ 0x4c
 80051d8:	2204      	movs	r2, #4
 80051da:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	334c      	adds	r3, #76	@ 0x4c
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f00a fc10 	bl	800fa18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80051f8:	e022      	b.n	8005240 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	334c      	adds	r3, #76	@ 0x4c
 800520a:	2202      	movs	r2, #2
 800520c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005224:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800522c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800523a:	461a      	mov	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800524c:	461a      	mov	r2, r3
 800524e:	2380      	movs	r3, #128	@ 0x80
 8005250:	6093      	str	r3, [r2, #8]
 8005252:	e217      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f003 fda2 	bl	8008da6 <USB_ReadChInterrupts>
 8005262:	4603      	mov	r3, r0
 8005264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526c:	d11b      	bne.n	80052a6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	334d      	adds	r3, #77	@ 0x4d
 800527e:	2209      	movs	r2, #9
 8005280:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f004 fb2f 	bl	80098ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800529c:	461a      	mov	r2, r3
 800529e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052a2:	6093      	str	r3, [r2, #8]
 80052a4:	e1ee      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	4611      	mov	r1, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f003 fd79 	bl	8008da6 <USB_ReadChInterrupts>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	f040 81df 	bne.w	800567e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052cc:	461a      	mov	r2, r3
 80052ce:	2302      	movs	r3, #2
 80052d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	334d      	adds	r3, #77	@ 0x4d
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	f040 8093 	bne.w	8005410 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	334d      	adds	r3, #77	@ 0x4d
 80052fa:	2202      	movs	r2, #2
 80052fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	334c      	adds	r3, #76	@ 0x4c
 800530e:	2201      	movs	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	3326      	adds	r3, #38	@ 0x26
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d00b      	beq.n	8005340 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005328:	78fa      	ldrb	r2, [r7, #3]
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	3326      	adds	r3, #38	@ 0x26
 8005338:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800533a:	2b03      	cmp	r3, #3
 800533c:	f040 8190 	bne.w	8005660 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	799b      	ldrb	r3, [r3, #6]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d115      	bne.n	8005374 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	333d      	adds	r3, #61	@ 0x3d
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	78fa      	ldrb	r2, [r7, #3]
 800535c:	f083 0301 	eor.w	r3, r3, #1
 8005360:	b2d8      	uxtb	r0, r3
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	333d      	adds	r3, #61	@ 0x3d
 8005370:	4602      	mov	r2, r0
 8005372:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	799b      	ldrb	r3, [r3, #6]
 8005378:	2b01      	cmp	r3, #1
 800537a:	f040 8171 	bne.w	8005660 <HCD_HC_OUT_IRQHandler+0x954>
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3334      	adds	r3, #52	@ 0x34
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8165 	beq.w	8005660 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	3334      	adds	r3, #52	@ 0x34
 80053a6:	6819      	ldr	r1, [r3, #0]
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4403      	add	r3, r0
 80053b6:	3328      	adds	r3, #40	@ 0x28
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	440b      	add	r3, r1
 80053bc:	1e59      	subs	r1, r3, #1
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4403      	add	r3, r0
 80053cc:	3328      	adds	r3, #40	@ 0x28
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80053d4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 813f 	beq.w	8005660 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	333d      	adds	r3, #61	@ 0x3d
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	78fa      	ldrb	r2, [r7, #3]
 80053f6:	f083 0301 	eor.w	r3, r3, #1
 80053fa:	b2d8      	uxtb	r0, r3
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	333d      	adds	r3, #61	@ 0x3d
 800540a:	4602      	mov	r2, r0
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e127      	b.n	8005660 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	4613      	mov	r3, r2
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	334d      	adds	r3, #77	@ 0x4d
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d120      	bne.n	8005468 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005426:	78fa      	ldrb	r2, [r7, #3]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	334d      	adds	r3, #77	@ 0x4d
 8005436:	2202      	movs	r2, #2
 8005438:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	331b      	adds	r3, #27
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	f040 8107 	bne.w	8005660 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	334c      	adds	r3, #76	@ 0x4c
 8005462:	2202      	movs	r2, #2
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e0fb      	b.n	8005660 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	334d      	adds	r3, #77	@ 0x4d
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b04      	cmp	r3, #4
 800547c:	d13a      	bne.n	80054f4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	334d      	adds	r3, #77	@ 0x4d
 800548e:	2202      	movs	r2, #2
 8005490:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	334c      	adds	r3, #76	@ 0x4c
 80054a2:	2202      	movs	r2, #2
 80054a4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054a6:	78fa      	ldrb	r2, [r7, #3]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	331b      	adds	r3, #27
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	f040 80d1 	bne.w	8005660 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	331b      	adds	r3, #27
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f0:	6053      	str	r3, [r2, #4]
 80054f2:	e0b5      	b.n	8005660 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	334d      	adds	r3, #77	@ 0x4d
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d114      	bne.n	8005534 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	334d      	adds	r3, #77	@ 0x4d
 800551a:	2202      	movs	r2, #2
 800551c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	334c      	adds	r3, #76	@ 0x4c
 800552e:	2202      	movs	r2, #2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e095      	b.n	8005660 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005534:	78fa      	ldrb	r2, [r7, #3]
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	4613      	mov	r3, r2
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	1a9b      	subs	r3, r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	334d      	adds	r3, #77	@ 0x4d
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b06      	cmp	r3, #6
 8005548:	d114      	bne.n	8005574 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	334d      	adds	r3, #77	@ 0x4d
 800555a:	2202      	movs	r2, #2
 800555c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	334c      	adds	r3, #76	@ 0x4c
 800556e:	2205      	movs	r2, #5
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e075      	b.n	8005660 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005574:	78fa      	ldrb	r2, [r7, #3]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	334d      	adds	r3, #77	@ 0x4d
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b07      	cmp	r3, #7
 8005588:	d00a      	beq.n	80055a0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	334d      	adds	r3, #77	@ 0x4d
 800559a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800559c:	2b09      	cmp	r3, #9
 800559e:	d170      	bne.n	8005682 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	334d      	adds	r3, #77	@ 0x4d
 80055b0:	2202      	movs	r2, #2
 80055b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	3344      	adds	r3, #68	@ 0x44
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	1c59      	adds	r1, r3, #1
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4403      	add	r3, r0
 80055d4:	3344      	adds	r3, #68	@ 0x44
 80055d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	3344      	adds	r3, #68	@ 0x44
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d914      	bls.n	8005618 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	3344      	adds	r3, #68	@ 0x44
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	334c      	adds	r3, #76	@ 0x4c
 8005612:	2204      	movs	r2, #4
 8005614:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005616:	e022      	b.n	800565e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005618:	78fa      	ldrb	r2, [r7, #3]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	334c      	adds	r3, #76	@ 0x4c
 8005628:	2202      	movs	r2, #2
 800562a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4413      	add	r3, r2
 8005634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005642:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800564a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005658:	461a      	mov	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800565e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	334c      	adds	r3, #76	@ 0x4c
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f00a f9ce 	bl	800fa18 <HAL_HCD_HC_NotifyURBChange_Callback>
 800567c:	e002      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800567e:	bf00      	nop
 8005680:	e000      	b.n	8005684 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005682:	bf00      	nop
  }
}
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b08a      	sub	sp, #40	@ 0x28
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	0c5b      	lsrs	r3, r3, #17
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056be:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d004      	beq.n	80056d0 <HCD_RXQLVL_IRQHandler+0x46>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	f000 80b6 	beq.w	800583a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80056ce:	e0b7      	b.n	8005840 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80b3 	beq.w	800583e <HCD_RXQLVL_IRQHandler+0x1b4>
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4613      	mov	r3, r2
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	332c      	adds	r3, #44	@ 0x2c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 80a7 	beq.w	800583e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4613      	mov	r3, r2
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	3338      	adds	r3, #56	@ 0x38
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	18d1      	adds	r1, r2, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4613      	mov	r3, r2
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4403      	add	r3, r0
 8005714:	3334      	adds	r3, #52	@ 0x34
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4299      	cmp	r1, r3
 800571a:	f200 8083 	bhi.w	8005824 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4613      	mov	r3, r2
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	332c      	adds	r3, #44	@ 0x2c
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	b292      	uxth	r2, r2
 8005738:	4619      	mov	r1, r3
 800573a:	f003 fac9 	bl	8008cd0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4613      	mov	r3, r2
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	332c      	adds	r3, #44	@ 0x2c
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	18d1      	adds	r1, r2, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4613      	mov	r3, r2
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4403      	add	r3, r0
 8005762:	332c      	adds	r3, #44	@ 0x2c
 8005764:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4613      	mov	r3, r2
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3338      	adds	r3, #56	@ 0x38
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	18d1      	adds	r1, r2, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4613      	mov	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4403      	add	r3, r0
 800578a:	3338      	adds	r3, #56	@ 0x38
 800578c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	0cdb      	lsrs	r3, r3, #19
 800579e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057a2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4613      	mov	r3, r2
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	3328      	adds	r3, #40	@ 0x28
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d13f      	bne.n	800583e <HCD_RXQLVL_IRQHandler+0x1b4>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d03c      	beq.n	800583e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057da:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057e2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f0:	461a      	mov	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4613      	mov	r3, r2
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	333c      	adds	r3, #60	@ 0x3c
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f083 0301 	eor.w	r3, r3, #1
 800580c:	b2d8      	uxtb	r0, r3
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4613      	mov	r3, r2
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	333c      	adds	r3, #60	@ 0x3c
 800581e:	4602      	mov	r2, r0
 8005820:	701a      	strb	r2, [r3, #0]
      break;
 8005822:	e00c      	b.n	800583e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4613      	mov	r3, r2
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	334c      	adds	r3, #76	@ 0x4c
 8005834:	2204      	movs	r2, #4
 8005836:	701a      	strb	r2, [r3, #0]
      break;
 8005838:	e001      	b.n	800583e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800583a:	bf00      	nop
 800583c:	e000      	b.n	8005840 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800583e:	bf00      	nop
  }
}
 8005840:	bf00      	nop
 8005842:	3728      	adds	r7, #40	@ 0x28
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005874:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d10b      	bne.n	8005898 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b01      	cmp	r3, #1
 8005888:	d102      	bne.n	8005890 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f00a f8a8 	bl	800f9e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f043 0302 	orr.w	r3, r3, #2
 8005896:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d132      	bne.n	8005908 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f043 0308 	orr.w	r3, r3, #8
 80058a8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d126      	bne.n	8005902 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	7a5b      	ldrb	r3, [r3, #9]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d113      	bne.n	80058e4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80058c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058c6:	d106      	bne.n	80058d6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2102      	movs	r1, #2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f003 fb8e 	bl	8008ff0 <USB_InitFSLSPClkSel>
 80058d4:	e011      	b.n	80058fa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2101      	movs	r1, #1
 80058dc:	4618      	mov	r0, r3
 80058de:	f003 fb87 	bl	8008ff0 <USB_InitFSLSPClkSel>
 80058e2:	e00a      	b.n	80058fa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	79db      	ldrb	r3, [r3, #7]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d106      	bne.n	80058fa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058f2:	461a      	mov	r2, r3
 80058f4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80058f8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f00a f89e 	bl	800fa3c <HAL_HCD_PortEnabled_Callback>
 8005900:	e002      	b.n	8005908 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f00a f8a8 	bl	800fa58 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b20      	cmp	r3, #32
 8005910:	d103      	bne.n	800591a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f043 0320 	orr.w	r3, r3, #32
 8005918:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005920:	461a      	mov	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6013      	str	r3, [r2, #0]
}
 8005926:	bf00      	nop
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e12b      	b.n	8005b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fc ff6c 	bl	8002834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2224      	movs	r2, #36	@ 0x24
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005994:	f000 fd80 	bl	8006498 <HAL_RCC_GetPCLK1Freq>
 8005998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	4a81      	ldr	r2, [pc, #516]	@ (8005ba4 <HAL_I2C_Init+0x274>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d807      	bhi.n	80059b4 <HAL_I2C_Init+0x84>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a80      	ldr	r2, [pc, #512]	@ (8005ba8 <HAL_I2C_Init+0x278>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	bf94      	ite	ls
 80059ac:	2301      	movls	r3, #1
 80059ae:	2300      	movhi	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e006      	b.n	80059c2 <HAL_I2C_Init+0x92>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a7d      	ldr	r2, [pc, #500]	@ (8005bac <HAL_I2C_Init+0x27c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	bf94      	ite	ls
 80059bc:	2301      	movls	r3, #1
 80059be:	2300      	movhi	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e0e7      	b.n	8005b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4a78      	ldr	r2, [pc, #480]	@ (8005bb0 <HAL_I2C_Init+0x280>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	0c9b      	lsrs	r3, r3, #18
 80059d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	4a6a      	ldr	r2, [pc, #424]	@ (8005ba4 <HAL_I2C_Init+0x274>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d802      	bhi.n	8005a04 <HAL_I2C_Init+0xd4>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3301      	adds	r3, #1
 8005a02:	e009      	b.n	8005a18 <HAL_I2C_Init+0xe8>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	4a69      	ldr	r2, [pc, #420]	@ (8005bb4 <HAL_I2C_Init+0x284>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	099b      	lsrs	r3, r3, #6
 8005a16:	3301      	adds	r3, #1
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	495c      	ldr	r1, [pc, #368]	@ (8005ba4 <HAL_I2C_Init+0x274>)
 8005a34:	428b      	cmp	r3, r1
 8005a36:	d819      	bhi.n	8005a6c <HAL_I2C_Init+0x13c>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1e59      	subs	r1, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a46:	1c59      	adds	r1, r3, #1
 8005a48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a4c:	400b      	ands	r3, r1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_I2C_Init+0x138>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1e59      	subs	r1, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a60:	3301      	adds	r3, #1
 8005a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a66:	e051      	b.n	8005b0c <HAL_I2C_Init+0x1dc>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	e04f      	b.n	8005b0c <HAL_I2C_Init+0x1dc>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d111      	bne.n	8005a98 <HAL_I2C_Init+0x168>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	1e58      	subs	r0, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6859      	ldr	r1, [r3, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	440b      	add	r3, r1
 8005a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a86:	3301      	adds	r3, #1
 8005a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e012      	b.n	8005abe <HAL_I2C_Init+0x18e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	1e58      	subs	r0, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6859      	ldr	r1, [r3, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	0099      	lsls	r1, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Init+0x196>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e022      	b.n	8005b0c <HAL_I2C_Init+0x1dc>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10e      	bne.n	8005aec <HAL_I2C_Init+0x1bc>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1e58      	subs	r0, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6859      	ldr	r1, [r3, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	440b      	add	r3, r1
 8005adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aea:	e00f      	b.n	8005b0c <HAL_I2C_Init+0x1dc>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1e58      	subs	r0, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6859      	ldr	r1, [r3, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	0099      	lsls	r1, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b02:	3301      	adds	r3, #1
 8005b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	6809      	ldr	r1, [r1, #0]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69da      	ldr	r2, [r3, #28]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6911      	ldr	r1, [r2, #16]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68d2      	ldr	r2, [r2, #12]
 8005b46:	4311      	orrs	r1, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695a      	ldr	r2, [r3, #20]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	000186a0 	.word	0x000186a0
 8005ba8:	001e847f 	.word	0x001e847f
 8005bac:	003d08ff 	.word	0x003d08ff
 8005bb0:	431bde83 	.word	0x431bde83
 8005bb4:	10624dd3 	.word	0x10624dd3

08005bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e267      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d075      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bd6:	4b88      	ldr	r3, [pc, #544]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d00c      	beq.n	8005bfc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005be2:	4b85      	ldr	r3, [pc, #532]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d112      	bne.n	8005c14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bee:	4b82      	ldr	r3, [pc, #520]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bfa:	d10b      	bne.n	8005c14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d05b      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x108>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d157      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e242      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c1c:	d106      	bne.n	8005c2c <HAL_RCC_OscConfig+0x74>
 8005c1e:	4b76      	ldr	r3, [pc, #472]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a75      	ldr	r2, [pc, #468]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	e01d      	b.n	8005c68 <HAL_RCC_OscConfig+0xb0>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCC_OscConfig+0x98>
 8005c36:	4b70      	ldr	r3, [pc, #448]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a6f      	ldr	r2, [pc, #444]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4b6d      	ldr	r3, [pc, #436]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a6c      	ldr	r2, [pc, #432]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e00b      	b.n	8005c68 <HAL_RCC_OscConfig+0xb0>
 8005c50:	4b69      	ldr	r3, [pc, #420]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a68      	ldr	r2, [pc, #416]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	4b66      	ldr	r3, [pc, #408]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a65      	ldr	r2, [pc, #404]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c70:	f7fd f9b8 	bl	8002fe4 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c78:	f7fd f9b4 	bl	8002fe4 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b64      	cmp	r3, #100	@ 0x64
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e207      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0xc0>
 8005c96:	e014      	b.n	8005cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7fd f9a4 	bl	8002fe4 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca0:	f7fd f9a0 	bl	8002fe4 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b64      	cmp	r3, #100	@ 0x64
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e1f3      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cb2:	4b51      	ldr	r3, [pc, #324]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0xe8>
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d063      	beq.n	8005d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cce:	4b4a      	ldr	r3, [pc, #296]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cda:	4b47      	ldr	r3, [pc, #284]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d11c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ce6:	4b44      	ldr	r3, [pc, #272]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d116      	bne.n	8005d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cf2:	4b41      	ldr	r3, [pc, #260]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_RCC_OscConfig+0x152>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d001      	beq.n	8005d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e1c7      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4937      	ldr	r1, [pc, #220]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1e:	e03a      	b.n	8005d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d020      	beq.n	8005d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d28:	4b34      	ldr	r3, [pc, #208]	@ (8005dfc <HAL_RCC_OscConfig+0x244>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2e:	f7fd f959 	bl	8002fe4 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d36:	f7fd f955 	bl	8002fe4 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e1a8      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d48:	4b2b      	ldr	r3, [pc, #172]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d54:	4b28      	ldr	r3, [pc, #160]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4925      	ldr	r1, [pc, #148]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]
 8005d68:	e015      	b.n	8005d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d6a:	4b24      	ldr	r3, [pc, #144]	@ (8005dfc <HAL_RCC_OscConfig+0x244>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fd f938 	bl	8002fe4 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d78:	f7fd f934 	bl	8002fe4 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e187      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d036      	beq.n	8005e10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d016      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005daa:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <HAL_RCC_OscConfig+0x248>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db0:	f7fd f918 	bl	8002fe4 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db8:	f7fd f914 	bl	8002fe4 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e167      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dca:	4b0b      	ldr	r3, [pc, #44]	@ (8005df8 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0x200>
 8005dd6:	e01b      	b.n	8005e10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dd8:	4b09      	ldr	r3, [pc, #36]	@ (8005e00 <HAL_RCC_OscConfig+0x248>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dde:	f7fd f901 	bl	8002fe4 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de4:	e00e      	b.n	8005e04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de6:	f7fd f8fd 	bl	8002fe4 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d907      	bls.n	8005e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e150      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	42470000 	.word	0x42470000
 8005e00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e04:	4b88      	ldr	r3, [pc, #544]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1ea      	bne.n	8005de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8097 	beq.w	8005f4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e22:	4b81      	ldr	r3, [pc, #516]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10f      	bne.n	8005e4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	4b7d      	ldr	r3, [pc, #500]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	4a7c      	ldr	r2, [pc, #496]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e46:	60bb      	str	r3, [r7, #8]
 8005e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4e:	4b77      	ldr	r3, [pc, #476]	@ (800602c <HAL_RCC_OscConfig+0x474>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d118      	bne.n	8005e8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e5a:	4b74      	ldr	r3, [pc, #464]	@ (800602c <HAL_RCC_OscConfig+0x474>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a73      	ldr	r2, [pc, #460]	@ (800602c <HAL_RCC_OscConfig+0x474>)
 8005e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e66:	f7fd f8bd 	bl	8002fe4 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6c:	e008      	b.n	8005e80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e6e:	f7fd f8b9 	bl	8002fe4 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e10c      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e80:	4b6a      	ldr	r3, [pc, #424]	@ (800602c <HAL_RCC_OscConfig+0x474>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f0      	beq.n	8005e6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d106      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x2ea>
 8005e94:	4b64      	ldr	r3, [pc, #400]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e98:	4a63      	ldr	r2, [pc, #396]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ea0:	e01c      	b.n	8005edc <HAL_RCC_OscConfig+0x324>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x30c>
 8005eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eae:	4a5e      	ldr	r2, [pc, #376]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005eb0:	f043 0304 	orr.w	r3, r3, #4
 8005eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eb6:	4b5c      	ldr	r3, [pc, #368]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eba:	4a5b      	ldr	r2, [pc, #364]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	f043 0301 	orr.w	r3, r3, #1
 8005ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec2:	e00b      	b.n	8005edc <HAL_RCC_OscConfig+0x324>
 8005ec4:	4b58      	ldr	r3, [pc, #352]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec8:	4a57      	ldr	r2, [pc, #348]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005eca:	f023 0301 	bic.w	r3, r3, #1
 8005ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed0:	4b55      	ldr	r3, [pc, #340]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed4:	4a54      	ldr	r2, [pc, #336]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005ed6:	f023 0304 	bic.w	r3, r3, #4
 8005eda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d015      	beq.n	8005f10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee4:	f7fd f87e 	bl	8002fe4 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eea:	e00a      	b.n	8005f02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eec:	f7fd f87a 	bl	8002fe4 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e0cb      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f02:	4b49      	ldr	r3, [pc, #292]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0ee      	beq.n	8005eec <HAL_RCC_OscConfig+0x334>
 8005f0e:	e014      	b.n	8005f3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f10:	f7fd f868 	bl	8002fe4 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f16:	e00a      	b.n	8005f2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f18:	f7fd f864 	bl	8002fe4 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e0b5      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1ee      	bne.n	8005f18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d105      	bne.n	8005f4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f40:	4b39      	ldr	r3, [pc, #228]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f44:	4a38      	ldr	r2, [pc, #224]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80a1 	beq.w	8006098 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f56:	4b34      	ldr	r3, [pc, #208]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d05c      	beq.n	800601c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d141      	bne.n	8005fee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f6a:	4b31      	ldr	r3, [pc, #196]	@ (8006030 <HAL_RCC_OscConfig+0x478>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f70:	f7fd f838 	bl	8002fe4 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f78:	f7fd f834 	bl	8002fe4 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e087      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8a:	4b27      	ldr	r3, [pc, #156]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	019b      	lsls	r3, r3, #6
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	041b      	lsls	r3, r3, #16
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb8:	061b      	lsls	r3, r3, #24
 8005fba:	491b      	ldr	r1, [pc, #108]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <HAL_RCC_OscConfig+0x478>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc6:	f7fd f80d 	bl	8002fe4 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fce:	f7fd f809 	bl	8002fe4 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e05c      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe0:	4b11      	ldr	r3, [pc, #68]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0f0      	beq.n	8005fce <HAL_RCC_OscConfig+0x416>
 8005fec:	e054      	b.n	8006098 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fee:	4b10      	ldr	r3, [pc, #64]	@ (8006030 <HAL_RCC_OscConfig+0x478>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff4:	f7fc fff6 	bl	8002fe4 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffc:	f7fc fff2 	bl	8002fe4 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e045      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600e:	4b06      	ldr	r3, [pc, #24]	@ (8006028 <HAL_RCC_OscConfig+0x470>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <HAL_RCC_OscConfig+0x444>
 800601a:	e03d      	b.n	8006098 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d107      	bne.n	8006034 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e038      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
 8006028:	40023800 	.word	0x40023800
 800602c:	40007000 	.word	0x40007000
 8006030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006034:	4b1b      	ldr	r3, [pc, #108]	@ (80060a4 <HAL_RCC_OscConfig+0x4ec>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d028      	beq.n	8006094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800604c:	429a      	cmp	r2, r3
 800604e:	d121      	bne.n	8006094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605a:	429a      	cmp	r2, r3
 800605c:	d11a      	bne.n	8006094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006064:	4013      	ands	r3, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800606a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800606c:	4293      	cmp	r3, r2
 800606e:	d111      	bne.n	8006094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	3b01      	subs	r3, #1
 800607e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006080:	429a      	cmp	r2, r3
 8006082:	d107      	bne.n	8006094 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006090:	429a      	cmp	r2, r3
 8006092:	d001      	beq.n	8006098 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40023800 	.word	0x40023800

080060a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0cc      	b.n	8006256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060bc:	4b68      	ldr	r3, [pc, #416]	@ (8006260 <HAL_RCC_ClockConfig+0x1b8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d90c      	bls.n	80060e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ca:	4b65      	ldr	r3, [pc, #404]	@ (8006260 <HAL_RCC_ClockConfig+0x1b8>)
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d2:	4b63      	ldr	r3, [pc, #396]	@ (8006260 <HAL_RCC_ClockConfig+0x1b8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d001      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0b8      	b.n	8006256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d020      	beq.n	8006132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060fc:	4b59      	ldr	r3, [pc, #356]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	4a58      	ldr	r2, [pc, #352]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006106:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006114:	4b53      	ldr	r3, [pc, #332]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	4a52      	ldr	r2, [pc, #328]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800611e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006120:	4b50      	ldr	r3, [pc, #320]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	494d      	ldr	r1, [pc, #308]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	4313      	orrs	r3, r2
 8006130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d044      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d107      	bne.n	8006156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006146:	4b47      	ldr	r3, [pc, #284]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d119      	bne.n	8006186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e07f      	b.n	8006256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d003      	beq.n	8006166 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006162:	2b03      	cmp	r3, #3
 8006164:	d107      	bne.n	8006176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006166:	4b3f      	ldr	r3, [pc, #252]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e06f      	b.n	8006256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006176:	4b3b      	ldr	r3, [pc, #236]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e067      	b.n	8006256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006186:	4b37      	ldr	r3, [pc, #220]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f023 0203 	bic.w	r2, r3, #3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4934      	ldr	r1, [pc, #208]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	4313      	orrs	r3, r2
 8006196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006198:	f7fc ff24 	bl	8002fe4 <HAL_GetTick>
 800619c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800619e:	e00a      	b.n	80061b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a0:	f7fc ff20 	bl	8002fe4 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e04f      	b.n	8006256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 020c 	and.w	r2, r3, #12
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d1eb      	bne.n	80061a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061c8:	4b25      	ldr	r3, [pc, #148]	@ (8006260 <HAL_RCC_ClockConfig+0x1b8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d20c      	bcs.n	80061f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d6:	4b22      	ldr	r3, [pc, #136]	@ (8006260 <HAL_RCC_ClockConfig+0x1b8>)
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061de:	4b20      	ldr	r3, [pc, #128]	@ (8006260 <HAL_RCC_ClockConfig+0x1b8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d001      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e032      	b.n	8006256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061fc:	4b19      	ldr	r3, [pc, #100]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	4916      	ldr	r1, [pc, #88]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	4313      	orrs	r3, r2
 800620c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800621a:	4b12      	ldr	r3, [pc, #72]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	490e      	ldr	r1, [pc, #56]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	4313      	orrs	r3, r2
 800622c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800622e:	f000 f821 	bl	8006274 <HAL_RCC_GetSysClockFreq>
 8006232:	4602      	mov	r2, r0
 8006234:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	091b      	lsrs	r3, r3, #4
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	490a      	ldr	r1, [pc, #40]	@ (8006268 <HAL_RCC_ClockConfig+0x1c0>)
 8006240:	5ccb      	ldrb	r3, [r1, r3]
 8006242:	fa22 f303 	lsr.w	r3, r2, r3
 8006246:	4a09      	ldr	r2, [pc, #36]	@ (800626c <HAL_RCC_ClockConfig+0x1c4>)
 8006248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800624a:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <HAL_RCC_ClockConfig+0x1c8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f7fc fd04 	bl	8002c5c <HAL_InitTick>

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40023c00 	.word	0x40023c00
 8006264:	40023800 	.word	0x40023800
 8006268:	080115b8 	.word	0x080115b8
 800626c:	20000000 	.word	0x20000000
 8006270:	20000004 	.word	0x20000004

08006274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006278:	b094      	sub	sp, #80	@ 0x50
 800627a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800628c:	4b79      	ldr	r3, [pc, #484]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x200>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 030c 	and.w	r3, r3, #12
 8006294:	2b08      	cmp	r3, #8
 8006296:	d00d      	beq.n	80062b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006298:	2b08      	cmp	r3, #8
 800629a:	f200 80e1 	bhi.w	8006460 <HAL_RCC_GetSysClockFreq+0x1ec>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_RCC_GetSysClockFreq+0x34>
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d003      	beq.n	80062ae <HAL_RCC_GetSysClockFreq+0x3a>
 80062a6:	e0db      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062a8:	4b73      	ldr	r3, [pc, #460]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x204>)
 80062aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062ac:	e0db      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ae:	4b73      	ldr	r3, [pc, #460]	@ (800647c <HAL_RCC_GetSysClockFreq+0x208>)
 80062b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062b2:	e0d8      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x200>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062be:	4b6d      	ldr	r3, [pc, #436]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d063      	beq.n	8006392 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ca:	4b6a      	ldr	r3, [pc, #424]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x200>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	099b      	lsrs	r3, r3, #6
 80062d0:	2200      	movs	r2, #0
 80062d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80062de:	2300      	movs	r3, #0
 80062e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062e6:	4622      	mov	r2, r4
 80062e8:	462b      	mov	r3, r5
 80062ea:	f04f 0000 	mov.w	r0, #0
 80062ee:	f04f 0100 	mov.w	r1, #0
 80062f2:	0159      	lsls	r1, r3, #5
 80062f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062f8:	0150      	lsls	r0, r2, #5
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4621      	mov	r1, r4
 8006300:	1a51      	subs	r1, r2, r1
 8006302:	6139      	str	r1, [r7, #16]
 8006304:	4629      	mov	r1, r5
 8006306:	eb63 0301 	sbc.w	r3, r3, r1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006318:	4659      	mov	r1, fp
 800631a:	018b      	lsls	r3, r1, #6
 800631c:	4651      	mov	r1, sl
 800631e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006322:	4651      	mov	r1, sl
 8006324:	018a      	lsls	r2, r1, #6
 8006326:	4651      	mov	r1, sl
 8006328:	ebb2 0801 	subs.w	r8, r2, r1
 800632c:	4659      	mov	r1, fp
 800632e:	eb63 0901 	sbc.w	r9, r3, r1
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800633e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006346:	4690      	mov	r8, r2
 8006348:	4699      	mov	r9, r3
 800634a:	4623      	mov	r3, r4
 800634c:	eb18 0303 	adds.w	r3, r8, r3
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	462b      	mov	r3, r5
 8006354:	eb49 0303 	adc.w	r3, r9, r3
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006366:	4629      	mov	r1, r5
 8006368:	024b      	lsls	r3, r1, #9
 800636a:	4621      	mov	r1, r4
 800636c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006370:	4621      	mov	r1, r4
 8006372:	024a      	lsls	r2, r1, #9
 8006374:	4610      	mov	r0, r2
 8006376:	4619      	mov	r1, r3
 8006378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637a:	2200      	movs	r2, #0
 800637c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800637e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006380:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006384:	f7f9 ff7c 	bl	8000280 <__aeabi_uldivmod>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4613      	mov	r3, r2
 800638e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006390:	e058      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006392:	4b38      	ldr	r3, [pc, #224]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x200>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	099b      	lsrs	r3, r3, #6
 8006398:	2200      	movs	r2, #0
 800639a:	4618      	mov	r0, r3
 800639c:	4611      	mov	r1, r2
 800639e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063a2:	623b      	str	r3, [r7, #32]
 80063a4:	2300      	movs	r3, #0
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	f04f 0000 	mov.w	r0, #0
 80063b4:	f04f 0100 	mov.w	r1, #0
 80063b8:	0159      	lsls	r1, r3, #5
 80063ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063be:	0150      	lsls	r0, r2, #5
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4641      	mov	r1, r8
 80063c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80063ca:	4649      	mov	r1, r9
 80063cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063e4:	ebb2 040a 	subs.w	r4, r2, sl
 80063e8:	eb63 050b 	sbc.w	r5, r3, fp
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	00eb      	lsls	r3, r5, #3
 80063f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063fa:	00e2      	lsls	r2, r4, #3
 80063fc:	4614      	mov	r4, r2
 80063fe:	461d      	mov	r5, r3
 8006400:	4643      	mov	r3, r8
 8006402:	18e3      	adds	r3, r4, r3
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	464b      	mov	r3, r9
 8006408:	eb45 0303 	adc.w	r3, r5, r3
 800640c:	607b      	str	r3, [r7, #4]
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800641a:	4629      	mov	r1, r5
 800641c:	028b      	lsls	r3, r1, #10
 800641e:	4621      	mov	r1, r4
 8006420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006424:	4621      	mov	r1, r4
 8006426:	028a      	lsls	r2, r1, #10
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800642e:	2200      	movs	r2, #0
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	61fa      	str	r2, [r7, #28]
 8006434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006438:	f7f9 ff22 	bl	8000280 <__aeabi_uldivmod>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4613      	mov	r3, r2
 8006442:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006444:	4b0b      	ldr	r3, [pc, #44]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x200>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	0c1b      	lsrs	r3, r3, #16
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	3301      	adds	r3, #1
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006454:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800645e:	e002      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006460:	4b05      	ldr	r3, [pc, #20]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x204>)
 8006462:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006468:	4618      	mov	r0, r3
 800646a:	3750      	adds	r7, #80	@ 0x50
 800646c:	46bd      	mov	sp, r7
 800646e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006472:	bf00      	nop
 8006474:	40023800 	.word	0x40023800
 8006478:	00f42400 	.word	0x00f42400
 800647c:	007a1200 	.word	0x007a1200

08006480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006484:	4b03      	ldr	r3, [pc, #12]	@ (8006494 <HAL_RCC_GetHCLKFreq+0x14>)
 8006486:	681b      	ldr	r3, [r3, #0]
}
 8006488:	4618      	mov	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000000 	.word	0x20000000

08006498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800649c:	f7ff fff0 	bl	8006480 <HAL_RCC_GetHCLKFreq>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	0a9b      	lsrs	r3, r3, #10
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	4903      	ldr	r1, [pc, #12]	@ (80064bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ae:	5ccb      	ldrb	r3, [r1, r3]
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	40023800 	.word	0x40023800
 80064bc:	080115c8 	.word	0x080115c8

080064c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064c4:	f7ff ffdc 	bl	8006480 <HAL_RCC_GetHCLKFreq>
 80064c8:	4602      	mov	r2, r0
 80064ca:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	0b5b      	lsrs	r3, r3, #13
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	4903      	ldr	r1, [pc, #12]	@ (80064e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064d6:	5ccb      	ldrb	r3, [r1, r3]
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064dc:	4618      	mov	r0, r3
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40023800 	.word	0x40023800
 80064e4:	080115c8 	.word	0x080115c8

080064e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	220f      	movs	r2, #15
 80064f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064f8:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <HAL_RCC_GetClockConfig+0x5c>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 0203 	and.w	r2, r3, #3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006504:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <HAL_RCC_GetClockConfig+0x5c>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006510:	4b0c      	ldr	r3, [pc, #48]	@ (8006544 <HAL_RCC_GetClockConfig+0x5c>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800651c:	4b09      	ldr	r3, [pc, #36]	@ (8006544 <HAL_RCC_GetClockConfig+0x5c>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	08db      	lsrs	r3, r3, #3
 8006522:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800652a:	4b07      	ldr	r3, [pc, #28]	@ (8006548 <HAL_RCC_GetClockConfig+0x60>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0207 	and.w	r2, r3, #7
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	601a      	str	r2, [r3, #0]
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40023800 	.word	0x40023800
 8006548:	40023c00 	.word	0x40023c00

0800654c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e041      	b.n	80065e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fc fa42 	bl	80029fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f000 fd96 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d001      	beq.n	8006604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e04e      	b.n	80066a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a23      	ldr	r2, [pc, #140]	@ (80066b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d022      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662e:	d01d      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1f      	ldr	r2, [pc, #124]	@ (80066b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d018      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1e      	ldr	r2, [pc, #120]	@ (80066b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d013      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1c      	ldr	r2, [pc, #112]	@ (80066bc <HAL_TIM_Base_Start_IT+0xd0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00e      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1b      	ldr	r2, [pc, #108]	@ (80066c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d009      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a19      	ldr	r2, [pc, #100]	@ (80066c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <HAL_TIM_Base_Start_IT+0x80>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a18      	ldr	r2, [pc, #96]	@ (80066c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d111      	bne.n	8006690 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b06      	cmp	r3, #6
 800667c:	d010      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668e:	e007      	b.n	80066a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40010000 	.word	0x40010000
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40000800 	.word	0x40000800
 80066bc:	40000c00 	.word	0x40000c00
 80066c0:	40010400 	.word	0x40010400
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40001800 	.word	0x40001800

080066cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e041      	b.n	8006762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f839 	bl	800676a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f000 fcd6 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d109      	bne.n	80067a4 <HAL_TIM_PWM_Start+0x24>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	bf14      	ite	ne
 800679c:	2301      	movne	r3, #1
 800679e:	2300      	moveq	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	e022      	b.n	80067ea <HAL_TIM_PWM_Start+0x6a>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d109      	bne.n	80067be <HAL_TIM_PWM_Start+0x3e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	bf14      	ite	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	2300      	moveq	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	e015      	b.n	80067ea <HAL_TIM_PWM_Start+0x6a>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d109      	bne.n	80067d8 <HAL_TIM_PWM_Start+0x58>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e008      	b.n	80067ea <HAL_TIM_PWM_Start+0x6a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	bf14      	ite	ne
 80067e4:	2301      	movne	r3, #1
 80067e6:	2300      	moveq	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e07c      	b.n	80068ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_PWM_Start+0x82>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006800:	e013      	b.n	800682a <HAL_TIM_PWM_Start+0xaa>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d104      	bne.n	8006812 <HAL_TIM_PWM_Start+0x92>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006810:	e00b      	b.n	800682a <HAL_TIM_PWM_Start+0xaa>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b08      	cmp	r3, #8
 8006816:	d104      	bne.n	8006822 <HAL_TIM_PWM_Start+0xa2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006820:	e003      	b.n	800682a <HAL_TIM_PWM_Start+0xaa>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2202      	movs	r2, #2
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2201      	movs	r2, #1
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 ff38 	bl	80076a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a2d      	ldr	r2, [pc, #180]	@ (80068f4 <HAL_TIM_PWM_Start+0x174>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d004      	beq.n	800684c <HAL_TIM_PWM_Start+0xcc>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a2c      	ldr	r2, [pc, #176]	@ (80068f8 <HAL_TIM_PWM_Start+0x178>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d101      	bne.n	8006850 <HAL_TIM_PWM_Start+0xd0>
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <HAL_TIM_PWM_Start+0xd2>
 8006850:	2300      	movs	r3, #0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006864:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a22      	ldr	r2, [pc, #136]	@ (80068f4 <HAL_TIM_PWM_Start+0x174>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d022      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x136>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006878:	d01d      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x136>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1f      	ldr	r2, [pc, #124]	@ (80068fc <HAL_TIM_PWM_Start+0x17c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d018      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x136>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1d      	ldr	r2, [pc, #116]	@ (8006900 <HAL_TIM_PWM_Start+0x180>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x136>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1c      	ldr	r2, [pc, #112]	@ (8006904 <HAL_TIM_PWM_Start+0x184>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00e      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x136>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a16      	ldr	r2, [pc, #88]	@ (80068f8 <HAL_TIM_PWM_Start+0x178>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d009      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x136>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a18      	ldr	r2, [pc, #96]	@ (8006908 <HAL_TIM_PWM_Start+0x188>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d004      	beq.n	80068b6 <HAL_TIM_PWM_Start+0x136>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a16      	ldr	r2, [pc, #88]	@ (800690c <HAL_TIM_PWM_Start+0x18c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d111      	bne.n	80068da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b06      	cmp	r3, #6
 80068c6:	d010      	beq.n	80068ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d8:	e007      	b.n	80068ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0201 	orr.w	r2, r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40010400 	.word	0x40010400
 80068fc:	40000400 	.word	0x40000400
 8006900:	40000800 	.word	0x40000800
 8006904:	40000c00 	.word	0x40000c00
 8006908:	40014000 	.word	0x40014000
 800690c:	40001800 	.word	0x40001800

08006910 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e097      	b.n	8006a54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d106      	bne.n	800693e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7fb ffc3 	bl	80028c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2202      	movs	r2, #2
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006954:	f023 0307 	bic.w	r3, r3, #7
 8006958:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3304      	adds	r3, #4
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f000 fba9 	bl	80070bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	4313      	orrs	r3, r2
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80069b0:	f023 030c 	bic.w	r3, r3, #12
 80069b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	021b      	lsls	r3, r3, #8
 80069cc:	4313      	orrs	r3, r2
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	011a      	lsls	r2, r3, #4
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	031b      	lsls	r3, r3, #12
 80069e0:	4313      	orrs	r3, r2
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80069ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	4313      	orrs	r3, r2
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006a84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d110      	bne.n	8006aae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d102      	bne.n	8006a98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a92:	7b7b      	ldrb	r3, [r7, #13]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d001      	beq.n	8006a9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e069      	b.n	8006b70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006aac:	e031      	b.n	8006b12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d110      	bne.n	8006ad6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d102      	bne.n	8006ac0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006aba:	7b3b      	ldrb	r3, [r7, #12]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d001      	beq.n	8006ac4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e055      	b.n	8006b70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ad4:	e01d      	b.n	8006b12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d108      	bne.n	8006aee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d105      	bne.n	8006aee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ae2:	7b7b      	ldrb	r3, [r7, #13]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d102      	bne.n	8006aee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ae8:	7b3b      	ldrb	r3, [r7, #12]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d001      	beq.n	8006af2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e03e      	b.n	8006b70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2202      	movs	r2, #2
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2202      	movs	r2, #2
 8006afe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <HAL_TIM_Encoder_Start+0xc4>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d008      	beq.n	8006b30 <HAL_TIM_Encoder_Start+0xd4>
 8006b1e:	e00f      	b.n	8006b40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2201      	movs	r2, #1
 8006b26:	2100      	movs	r1, #0
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fdbd 	bl	80076a8 <TIM_CCxChannelCmd>
      break;
 8006b2e:	e016      	b.n	8006b5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2201      	movs	r2, #1
 8006b36:	2104      	movs	r1, #4
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fdb5 	bl	80076a8 <TIM_CCxChannelCmd>
      break;
 8006b3e:	e00e      	b.n	8006b5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	2100      	movs	r1, #0
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fdad 	bl	80076a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2201      	movs	r2, #1
 8006b54:	2104      	movs	r1, #4
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fda6 	bl	80076a8 <TIM_CCxChannelCmd>
      break;
 8006b5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0201 	orr.w	r2, r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d020      	beq.n	8006bdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01b      	beq.n	8006bdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0202 	mvn.w	r2, #2
 8006bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa5b 	bl	800707e <HAL_TIM_IC_CaptureCallback>
 8006bc8:	e005      	b.n	8006bd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa4d 	bl	800706a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fa5e 	bl	8007092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d020      	beq.n	8006c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01b      	beq.n	8006c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0204 	mvn.w	r2, #4
 8006bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa35 	bl	800707e <HAL_TIM_IC_CaptureCallback>
 8006c14:	e005      	b.n	8006c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa27 	bl	800706a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa38 	bl	8007092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d020      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01b      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0208 	mvn.w	r2, #8
 8006c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2204      	movs	r2, #4
 8006c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa0f 	bl	800707e <HAL_TIM_IC_CaptureCallback>
 8006c60:	e005      	b.n	8006c6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa01 	bl	800706a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fa12 	bl	8007092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d020      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f003 0310 	and.w	r3, r3, #16
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01b      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0210 	mvn.w	r2, #16
 8006c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2208      	movs	r2, #8
 8006c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f9e9 	bl	800707e <HAL_TIM_IC_CaptureCallback>
 8006cac:	e005      	b.n	8006cba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f9db 	bl	800706a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9ec 	bl	8007092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0201 	mvn.w	r2, #1
 8006cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fb fd54 	bl	800278c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00c      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fd7c 	bl	8007800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00c      	beq.n	8006d2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f9bd 	bl	80070a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00c      	beq.n	8006d50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d007      	beq.n	8006d50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0220 	mvn.w	r2, #32
 8006d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fd4e 	bl	80077ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e0ae      	b.n	8006ed4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b0c      	cmp	r3, #12
 8006d82:	f200 809f 	bhi.w	8006ec4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d86:	a201      	add	r2, pc, #4	@ (adr r2, 8006d8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006dc1 	.word	0x08006dc1
 8006d90:	08006ec5 	.word	0x08006ec5
 8006d94:	08006ec5 	.word	0x08006ec5
 8006d98:	08006ec5 	.word	0x08006ec5
 8006d9c:	08006e01 	.word	0x08006e01
 8006da0:	08006ec5 	.word	0x08006ec5
 8006da4:	08006ec5 	.word	0x08006ec5
 8006da8:	08006ec5 	.word	0x08006ec5
 8006dac:	08006e43 	.word	0x08006e43
 8006db0:	08006ec5 	.word	0x08006ec5
 8006db4:	08006ec5 	.word	0x08006ec5
 8006db8:	08006ec5 	.word	0x08006ec5
 8006dbc:	08006e83 	.word	0x08006e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fa24 	bl	8007214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0208 	orr.w	r2, r2, #8
 8006dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0204 	bic.w	r2, r2, #4
 8006dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6999      	ldr	r1, [r3, #24]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691a      	ldr	r2, [r3, #16]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	619a      	str	r2, [r3, #24]
      break;
 8006dfe:	e064      	b.n	8006eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68b9      	ldr	r1, [r7, #8]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fa74 	bl	80072f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6999      	ldr	r1, [r3, #24]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	021a      	lsls	r2, r3, #8
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	619a      	str	r2, [r3, #24]
      break;
 8006e40:	e043      	b.n	8006eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fac9 	bl	80073e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0208 	orr.w	r2, r2, #8
 8006e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0204 	bic.w	r2, r2, #4
 8006e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69d9      	ldr	r1, [r3, #28]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	61da      	str	r2, [r3, #28]
      break;
 8006e80:	e023      	b.n	8006eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fb1d 	bl	80074c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69d9      	ldr	r1, [r3, #28]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	021a      	lsls	r2, r3, #8
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	61da      	str	r2, [r3, #28]
      break;
 8006ec2:	e002      	b.n	8006eca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e0b4      	b.n	8007062 <HAL_TIM_ConfigClockSource+0x186>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f30:	d03e      	beq.n	8006fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8006f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f36:	f200 8087 	bhi.w	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f3e:	f000 8086 	beq.w	800704e <HAL_TIM_ConfigClockSource+0x172>
 8006f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f46:	d87f      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f48:	2b70      	cmp	r3, #112	@ 0x70
 8006f4a:	d01a      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0xa6>
 8006f4c:	2b70      	cmp	r3, #112	@ 0x70
 8006f4e:	d87b      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f50:	2b60      	cmp	r3, #96	@ 0x60
 8006f52:	d050      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8006f54:	2b60      	cmp	r3, #96	@ 0x60
 8006f56:	d877      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f58:	2b50      	cmp	r3, #80	@ 0x50
 8006f5a:	d03c      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8006f5c:	2b50      	cmp	r3, #80	@ 0x50
 8006f5e:	d873      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f60:	2b40      	cmp	r3, #64	@ 0x40
 8006f62:	d058      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x13a>
 8006f64:	2b40      	cmp	r3, #64	@ 0x40
 8006f66:	d86f      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f68:	2b30      	cmp	r3, #48	@ 0x30
 8006f6a:	d064      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x15a>
 8006f6c:	2b30      	cmp	r3, #48	@ 0x30
 8006f6e:	d86b      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d060      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x15a>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d867      	bhi.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d05c      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x15a>
 8006f7c:	2b10      	cmp	r3, #16
 8006f7e:	d05a      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x15a>
 8006f80:	e062      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f92:	f000 fb69 	bl	8007668 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	609a      	str	r2, [r3, #8]
      break;
 8006fae:	e04f      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fc0:	f000 fb52 	bl	8007668 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fd2:	609a      	str	r2, [r3, #8]
      break;
 8006fd4:	e03c      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f000 fac6 	bl	8007574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2150      	movs	r1, #80	@ 0x50
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fb1f 	bl	8007632 <TIM_ITRx_SetConfig>
      break;
 8006ff4:	e02c      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007002:	461a      	mov	r2, r3
 8007004:	f000 fae5 	bl	80075d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2160      	movs	r1, #96	@ 0x60
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fb0f 	bl	8007632 <TIM_ITRx_SetConfig>
      break;
 8007014:	e01c      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007022:	461a      	mov	r2, r3
 8007024:	f000 faa6 	bl	8007574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2140      	movs	r1, #64	@ 0x40
 800702e:	4618      	mov	r0, r3
 8007030:	f000 faff 	bl	8007632 <TIM_ITRx_SetConfig>
      break;
 8007034:	e00c      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f000 faf6 	bl	8007632 <TIM_ITRx_SetConfig>
      break;
 8007046:	e003      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	73fb      	strb	r3, [r7, #15]
      break;
 800704c:	e000      	b.n	8007050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800704e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007060:	7bfb      	ldrb	r3, [r7, #15]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a46      	ldr	r2, [pc, #280]	@ (80071e8 <TIM_Base_SetConfig+0x12c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070da:	d00f      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a43      	ldr	r2, [pc, #268]	@ (80071ec <TIM_Base_SetConfig+0x130>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00b      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a42      	ldr	r2, [pc, #264]	@ (80071f0 <TIM_Base_SetConfig+0x134>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d007      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a41      	ldr	r2, [pc, #260]	@ (80071f4 <TIM_Base_SetConfig+0x138>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a40      	ldr	r2, [pc, #256]	@ (80071f8 <TIM_Base_SetConfig+0x13c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d108      	bne.n	800710e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a35      	ldr	r2, [pc, #212]	@ (80071e8 <TIM_Base_SetConfig+0x12c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d02b      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800711c:	d027      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a32      	ldr	r2, [pc, #200]	@ (80071ec <TIM_Base_SetConfig+0x130>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d023      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a31      	ldr	r2, [pc, #196]	@ (80071f0 <TIM_Base_SetConfig+0x134>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01f      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a30      	ldr	r2, [pc, #192]	@ (80071f4 <TIM_Base_SetConfig+0x138>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01b      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2f      	ldr	r2, [pc, #188]	@ (80071f8 <TIM_Base_SetConfig+0x13c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d017      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <TIM_Base_SetConfig+0x140>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2d      	ldr	r2, [pc, #180]	@ (8007200 <TIM_Base_SetConfig+0x144>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00f      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2c      	ldr	r2, [pc, #176]	@ (8007204 <TIM_Base_SetConfig+0x148>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00b      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2b      	ldr	r2, [pc, #172]	@ (8007208 <TIM_Base_SetConfig+0x14c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d007      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2a      	ldr	r2, [pc, #168]	@ (800720c <TIM_Base_SetConfig+0x150>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d003      	beq.n	800716e <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a29      	ldr	r2, [pc, #164]	@ (8007210 <TIM_Base_SetConfig+0x154>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d108      	bne.n	8007180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a10      	ldr	r2, [pc, #64]	@ (80071e8 <TIM_Base_SetConfig+0x12c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_Base_SetConfig+0xf8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a12      	ldr	r2, [pc, #72]	@ (80071f8 <TIM_Base_SetConfig+0x13c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d103      	bne.n	80071bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d105      	bne.n	80071da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f023 0201 	bic.w	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	611a      	str	r2, [r3, #16]
  }
}
 80071da:	bf00      	nop
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	40010000 	.word	0x40010000
 80071ec:	40000400 	.word	0x40000400
 80071f0:	40000800 	.word	0x40000800
 80071f4:	40000c00 	.word	0x40000c00
 80071f8:	40010400 	.word	0x40010400
 80071fc:	40014000 	.word	0x40014000
 8007200:	40014400 	.word	0x40014400
 8007204:	40014800 	.word	0x40014800
 8007208:	40001800 	.word	0x40001800
 800720c:	40001c00 	.word	0x40001c00
 8007210:	40002000 	.word	0x40002000

08007214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	f023 0201 	bic.w	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f023 0302 	bic.w	r3, r3, #2
 800725c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a20      	ldr	r2, [pc, #128]	@ (80072ec <TIM_OC1_SetConfig+0xd8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_OC1_SetConfig+0x64>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a1f      	ldr	r2, [pc, #124]	@ (80072f0 <TIM_OC1_SetConfig+0xdc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d10c      	bne.n	8007292 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f023 0308 	bic.w	r3, r3, #8
 800727e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f023 0304 	bic.w	r3, r3, #4
 8007290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a15      	ldr	r2, [pc, #84]	@ (80072ec <TIM_OC1_SetConfig+0xd8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d003      	beq.n	80072a2 <TIM_OC1_SetConfig+0x8e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a14      	ldr	r2, [pc, #80]	@ (80072f0 <TIM_OC1_SetConfig+0xdc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d111      	bne.n	80072c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	621a      	str	r2, [r3, #32]
}
 80072e0:	bf00      	nop
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40010400 	.word	0x40010400

080072f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f023 0210 	bic.w	r2, r3, #16
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800732a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	021b      	lsls	r3, r3, #8
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f023 0320 	bic.w	r3, r3, #32
 800733e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a22      	ldr	r2, [pc, #136]	@ (80073d8 <TIM_OC2_SetConfig+0xe4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_OC2_SetConfig+0x68>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a21      	ldr	r2, [pc, #132]	@ (80073dc <TIM_OC2_SetConfig+0xe8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d10d      	bne.n	8007378 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007376:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a17      	ldr	r2, [pc, #92]	@ (80073d8 <TIM_OC2_SetConfig+0xe4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d003      	beq.n	8007388 <TIM_OC2_SetConfig+0x94>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a16      	ldr	r2, [pc, #88]	@ (80073dc <TIM_OC2_SetConfig+0xe8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d113      	bne.n	80073b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800738e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	621a      	str	r2, [r3, #32]
}
 80073ca:	bf00      	nop
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	40010000 	.word	0x40010000
 80073dc:	40010400 	.word	0x40010400

080073e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800740e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0303 	bic.w	r3, r3, #3
 8007416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a21      	ldr	r2, [pc, #132]	@ (80074c0 <TIM_OC3_SetConfig+0xe0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d003      	beq.n	8007446 <TIM_OC3_SetConfig+0x66>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a20      	ldr	r2, [pc, #128]	@ (80074c4 <TIM_OC3_SetConfig+0xe4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d10d      	bne.n	8007462 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800744c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a16      	ldr	r2, [pc, #88]	@ (80074c0 <TIM_OC3_SetConfig+0xe0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d003      	beq.n	8007472 <TIM_OC3_SetConfig+0x92>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a15      	ldr	r2, [pc, #84]	@ (80074c4 <TIM_OC3_SetConfig+0xe4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d113      	bne.n	800749a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4313      	orrs	r3, r2
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	621a      	str	r2, [r3, #32]
}
 80074b4:	bf00      	nop
 80074b6:	371c      	adds	r7, #28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	40010000 	.word	0x40010000
 80074c4:	40010400 	.word	0x40010400

080074c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	031b      	lsls	r3, r3, #12
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a12      	ldr	r2, [pc, #72]	@ (800756c <TIM_OC4_SetConfig+0xa4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d003      	beq.n	8007530 <TIM_OC4_SetConfig+0x68>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a11      	ldr	r2, [pc, #68]	@ (8007570 <TIM_OC4_SetConfig+0xa8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d109      	bne.n	8007544 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	019b      	lsls	r3, r3, #6
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	621a      	str	r2, [r3, #32]
}
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40010000 	.word	0x40010000
 8007570:	40010400 	.word	0x40010400

08007574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f023 0201 	bic.w	r2, r3, #1
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800759e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 030a 	bic.w	r3, r3, #10
 80075b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	621a      	str	r2, [r3, #32]
}
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b087      	sub	sp, #28
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	f023 0210 	bic.w	r2, r3, #16
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	031b      	lsls	r3, r3, #12
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	4313      	orrs	r3, r2
 8007606:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800760e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	621a      	str	r2, [r3, #32]
}
 8007626:	bf00      	nop
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	f043 0307 	orr.w	r3, r3, #7
 8007654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	609a      	str	r2, [r3, #8]
}
 800765c:	bf00      	nop
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	021a      	lsls	r2, r3, #8
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	431a      	orrs	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	4313      	orrs	r3, r2
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	609a      	str	r2, [r3, #8]
}
 800769c:	bf00      	nop
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f003 031f 	and.w	r3, r3, #31
 80076ba:	2201      	movs	r2, #1
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6a1a      	ldr	r2, [r3, #32]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	43db      	mvns	r3, r3
 80076ca:	401a      	ands	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a1a      	ldr	r2, [r3, #32]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f003 031f 	and.w	r3, r3, #31
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	fa01 f303 	lsl.w	r3, r1, r3
 80076e0:	431a      	orrs	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
	...

080076f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007708:	2302      	movs	r3, #2
 800770a:	e05a      	b.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a21      	ldr	r2, [pc, #132]	@ (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d022      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007758:	d01d      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1d      	ldr	r2, [pc, #116]	@ (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d018      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1b      	ldr	r2, [pc, #108]	@ (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d013      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1a      	ldr	r2, [pc, #104]	@ (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00e      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a18      	ldr	r2, [pc, #96]	@ (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d009      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a17      	ldr	r2, [pc, #92]	@ (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a15      	ldr	r2, [pc, #84]	@ (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d10c      	bne.n	80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800779c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	40010000 	.word	0x40010000
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	40000c00 	.word	0x40000c00
 80077e0:	40010400 	.word	0x40010400
 80077e4:	40014000 	.word	0x40014000
 80077e8:	40001800 	.word	0x40001800

080077ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e042      	b.n	80078ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fb f93a 	bl	8002ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2224      	movs	r2, #36	@ 0x24
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fe55 	bl	8008508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	691a      	ldr	r2, [r3, #16]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800786c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695a      	ldr	r2, [r3, #20]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800787c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800788c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	@ 0x28
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	4613      	mov	r3, r2
 80078c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d175      	bne.n	80079c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <HAL_UART_Transmit+0x2c>
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e06e      	b.n	80079c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2221      	movs	r2, #33	@ 0x21
 80078ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078f2:	f7fb fb77 	bl	8002fe4 <HAL_GetTick>
 80078f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	88fa      	ldrh	r2, [r7, #6]
 80078fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	88fa      	ldrh	r2, [r7, #6]
 8007902:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800790c:	d108      	bne.n	8007920 <HAL_UART_Transmit+0x6c>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d104      	bne.n	8007920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	e003      	b.n	8007928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007924:	2300      	movs	r3, #0
 8007926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007928:	e02e      	b.n	8007988 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	2180      	movs	r1, #128	@ 0x80
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fbb7 	bl	80080a8 <UART_WaitOnFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e03a      	b.n	80079c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	3302      	adds	r3, #2
 8007966:	61bb      	str	r3, [r7, #24]
 8007968:	e007      	b.n	800797a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	781a      	ldrb	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	3301      	adds	r3, #1
 8007978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800797e:	b29b      	uxth	r3, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	b29a      	uxth	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1cb      	bne.n	800792a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2200      	movs	r2, #0
 800799a:	2140      	movs	r1, #64	@ 0x40
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 fb83 	bl	80080a8 <UART_WaitOnFlagUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e006      	b.n	80079c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	e000      	b.n	80079c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80079c0:	2302      	movs	r3, #2
  }
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3720      	adds	r7, #32
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b08a      	sub	sp, #40	@ 0x28
 80079ce:	af02      	add	r7, sp, #8
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	603b      	str	r3, [r7, #0]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	f040 8081 	bne.w	8007aee <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <HAL_UART_Receive+0x2e>
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e079      	b.n	8007af0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2222      	movs	r2, #34	@ 0x22
 8007a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a10:	f7fb fae8 	bl	8002fe4 <HAL_GetTick>
 8007a14:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	88fa      	ldrh	r2, [r7, #6]
 8007a1a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	88fa      	ldrh	r2, [r7, #6]
 8007a20:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a2a:	d108      	bne.n	8007a3e <HAL_UART_Receive+0x74>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	61bb      	str	r3, [r7, #24]
 8007a3c:	e003      	b.n	8007a46 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007a46:	e047      	b.n	8007ad8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2120      	movs	r1, #32
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fb28 	bl	80080a8 <UART_WaitOnFlagUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e042      	b.n	8007af0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10c      	bne.n	8007a8a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	3302      	adds	r3, #2
 8007a86:	61bb      	str	r3, [r7, #24]
 8007a88:	e01f      	b.n	8007aca <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a92:	d007      	beq.n	8007aa4 <HAL_UART_Receive+0xda>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <HAL_UART_Receive+0xe8>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d106      	bne.n	8007ab2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	e008      	b.n	8007ac4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1b2      	bne.n	8007a48 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e000      	b.n	8007af0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007aee:	2302      	movs	r3, #2
  }
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3720      	adds	r7, #32
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	4613      	mov	r3, r2
 8007b04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d112      	bne.n	8007b38 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_UART_Receive_IT+0x26>
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e00b      	b.n	8007b3a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 fb13 	bl	800815a <UART_Start_Receive_IT>
 8007b34:	4603      	mov	r3, r0
 8007b36:	e000      	b.n	8007b3a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007b38:	2302      	movs	r3, #2
  }
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b0ba      	sub	sp, #232	@ 0xe8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10f      	bne.n	8007baa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d009      	beq.n	8007baa <HAL_UART_IRQHandler+0x66>
 8007b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fbf2 	bl	800838c <UART_Receive_IT>
      return;
 8007ba8:	e25b      	b.n	8008062 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 80de 	beq.w	8007d70 <HAL_UART_IRQHandler+0x22c>
 8007bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d106      	bne.n	8007bce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80d1 	beq.w	8007d70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <HAL_UART_IRQHandler+0xae>
 8007bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bea:	f043 0201 	orr.w	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf6:	f003 0304 	and.w	r3, r3, #4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <HAL_UART_IRQHandler+0xd2>
 8007bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0e:	f043 0202 	orr.w	r2, r3, #2
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00b      	beq.n	8007c3a <HAL_UART_IRQHandler+0xf6>
 8007c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c32:	f043 0204 	orr.w	r2, r3, #4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d011      	beq.n	8007c6a <HAL_UART_IRQHandler+0x126>
 8007c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d105      	bne.n	8007c5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c62:	f043 0208 	orr.w	r2, r3, #8
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 81f2 	beq.w	8008058 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <HAL_UART_IRQHandler+0x14e>
 8007c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c84:	f003 0320 	and.w	r3, r3, #32
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fb7d 	bl	800838c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9c:	2b40      	cmp	r3, #64	@ 0x40
 8007c9e:	bf0c      	ite	eq
 8007ca0:	2301      	moveq	r3, #1
 8007ca2:	2300      	movne	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d103      	bne.n	8007cbe <HAL_UART_IRQHandler+0x17a>
 8007cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d04f      	beq.n	8007d5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa85 	bl	80081ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cce:	2b40      	cmp	r3, #64	@ 0x40
 8007cd0:	d141      	bne.n	8007d56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3314      	adds	r3, #20
 8007cd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3314      	adds	r3, #20
 8007cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1d9      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d013      	beq.n	8007d4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f24 <HAL_UART_IRQHandler+0x3e0>)
 8007d2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fb fad8 	bl	80032e8 <HAL_DMA_Abort_IT>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d016      	beq.n	8007d6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4c:	e00e      	b.n	8007d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f994 	bl	800807c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d54:	e00a      	b.n	8007d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f990 	bl	800807c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d5c:	e006      	b.n	8007d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f98c 	bl	800807c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007d6a:	e175      	b.n	8008058 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6c:	bf00      	nop
    return;
 8007d6e:	e173      	b.n	8008058 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	f040 814f 	bne.w	8008018 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7e:	f003 0310 	and.w	r3, r3, #16
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 8148 	beq.w	8008018 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d8c:	f003 0310 	and.w	r3, r3, #16
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 8141 	beq.w	8008018 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d96:	2300      	movs	r3, #0
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	60bb      	str	r3, [r7, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	60bb      	str	r3, [r7, #8]
 8007daa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db6:	2b40      	cmp	r3, #64	@ 0x40
 8007db8:	f040 80b6 	bne.w	8007f28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8145 	beq.w	800805c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	f080 813e 	bcs.w	800805c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007de6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007df2:	f000 8088 	beq.w	8007f06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1d9      	bne.n	8007df6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3314      	adds	r3, #20
 8007e48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e54:	f023 0301 	bic.w	r3, r3, #1
 8007e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3314      	adds	r3, #20
 8007e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e1      	bne.n	8007e42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3314      	adds	r3, #20
 8007e84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e3      	bne.n	8007e7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	330c      	adds	r3, #12
 8007eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ed6:	f023 0310 	bic.w	r3, r3, #16
 8007eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	330c      	adds	r3, #12
 8007ee4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ee8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007eea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007eee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e3      	bne.n	8007ec4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fb f981 	bl	8003208 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f8b7 	bl	8008090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f22:	e09b      	b.n	800805c <HAL_UART_IRQHandler+0x518>
 8007f24:	08008295 	.word	0x08008295
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 808e 	beq.w	8008060 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 8089 	beq.w	8008060 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	330c      	adds	r3, #12
 8007f54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007f72:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e3      	bne.n	8007f4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3314      	adds	r3, #20
 8007f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	623b      	str	r3, [r7, #32]
   return(result);
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	f023 0301 	bic.w	r3, r3, #1
 8007f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3314      	adds	r3, #20
 8007fa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007faa:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e3      	bne.n	8007f86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	330c      	adds	r3, #12
 8007fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0310 	bic.w	r3, r3, #16
 8007fe2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	330c      	adds	r3, #12
 8007fec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ff0:	61fa      	str	r2, [r7, #28]
 8007ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	69b9      	ldr	r1, [r7, #24]
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e3      	bne.n	8007fcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800800a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f83d 	bl	8008090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008016:	e023      	b.n	8008060 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800801c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <HAL_UART_IRQHandler+0x4f4>
 8008024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802c:	2b00      	cmp	r3, #0
 800802e:	d003      	beq.n	8008038 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f943 	bl	80082bc <UART_Transmit_IT>
    return;
 8008036:	e014      	b.n	8008062 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00e      	beq.n	8008062 <HAL_UART_IRQHandler+0x51e>
 8008044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d008      	beq.n	8008062 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f983 	bl	800835c <UART_EndTransmit_IT>
    return;
 8008056:	e004      	b.n	8008062 <HAL_UART_IRQHandler+0x51e>
    return;
 8008058:	bf00      	nop
 800805a:	e002      	b.n	8008062 <HAL_UART_IRQHandler+0x51e>
      return;
 800805c:	bf00      	nop
 800805e:	e000      	b.n	8008062 <HAL_UART_IRQHandler+0x51e>
      return;
 8008060:	bf00      	nop
  }
}
 8008062:	37e8      	adds	r7, #232	@ 0xe8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	4613      	mov	r3, r2
 80080b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b8:	e03b      	b.n	8008132 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080c0:	d037      	beq.n	8008132 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c2:	f7fa ff8f 	bl	8002fe4 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	6a3a      	ldr	r2, [r7, #32]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d302      	bcc.n	80080d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e03a      	b.n	8008152 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d023      	beq.n	8008132 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b80      	cmp	r3, #128	@ 0x80
 80080ee:	d020      	beq.n	8008132 <UART_WaitOnFlagUntilTimeout+0x8a>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b40      	cmp	r3, #64	@ 0x40
 80080f4:	d01d      	beq.n	8008132 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	2b08      	cmp	r3, #8
 8008102:	d116      	bne.n	8008132 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 f857 	bl	80081ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2208      	movs	r2, #8
 8008124:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e00f      	b.n	8008152 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4013      	ands	r3, r2
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	429a      	cmp	r2, r3
 8008140:	bf0c      	ite	eq
 8008142:	2301      	moveq	r3, #1
 8008144:	2300      	movne	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	461a      	mov	r2, r3
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	429a      	cmp	r2, r3
 800814e:	d0b4      	beq.n	80080ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	4613      	mov	r3, r2
 8008166:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	88fa      	ldrh	r2, [r7, #6]
 8008172:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	88fa      	ldrh	r2, [r7, #6]
 8008178:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2222      	movs	r2, #34	@ 0x22
 8008184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d007      	beq.n	80081a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800819e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	695a      	ldr	r2, [r3, #20]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0201 	orr.w	r2, r2, #1
 80081ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0220 	orr.w	r2, r2, #32
 80081be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b095      	sub	sp, #84	@ 0x54
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	330c      	adds	r3, #12
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	330c      	adds	r3, #12
 80081f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80081f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e5      	bne.n	80081d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3314      	adds	r3, #20
 8008210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	61fb      	str	r3, [r7, #28]
   return(result);
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f023 0301 	bic.w	r3, r3, #1
 8008220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3314      	adds	r3, #20
 8008228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800822a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e5      	bne.n	800820a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008242:	2b01      	cmp	r3, #1
 8008244:	d119      	bne.n	800827a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	330c      	adds	r3, #12
 800824c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	60bb      	str	r3, [r7, #8]
   return(result);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f023 0310 	bic.w	r3, r3, #16
 800825c:	647b      	str	r3, [r7, #68]	@ 0x44
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	330c      	adds	r3, #12
 8008264:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008266:	61ba      	str	r2, [r7, #24]
 8008268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6979      	ldr	r1, [r7, #20]
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	613b      	str	r3, [r7, #16]
   return(result);
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e5      	bne.n	8008246 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008288:	bf00      	nop
 800828a:	3754      	adds	r7, #84	@ 0x54
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f7ff fee4 	bl	800807c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b4:	bf00      	nop
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b21      	cmp	r3, #33	@ 0x21
 80082ce:	d13e      	bne.n	800834e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082d8:	d114      	bne.n	8008304 <UART_Transmit_IT+0x48>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d110      	bne.n	8008304 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	1c9a      	adds	r2, r3, #2
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	621a      	str	r2, [r3, #32]
 8008302:	e008      	b.n	8008316 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	1c59      	adds	r1, r3, #1
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6211      	str	r1, [r2, #32]
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800831a:	b29b      	uxth	r3, r3
 800831c:	3b01      	subs	r3, #1
 800831e:	b29b      	uxth	r3, r3
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	4619      	mov	r1, r3
 8008324:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10f      	bne.n	800834a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008338:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68da      	ldr	r2, [r3, #12]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008348:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	e000      	b.n	8008350 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800834e:	2302      	movs	r3, #2
  }
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008372:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff fe73 	bl	8008068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08c      	sub	sp, #48	@ 0x30
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b22      	cmp	r3, #34	@ 0x22
 800839e:	f040 80ae 	bne.w	80084fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083aa:	d117      	bne.n	80083dc <UART_Receive_IT+0x50>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d113      	bne.n	80083dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083b4:	2300      	movs	r3, #0
 80083b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d4:	1c9a      	adds	r2, r3, #2
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80083da:	e026      	b.n	800842a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ee:	d007      	beq.n	8008400 <UART_Receive_IT+0x74>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <UART_Receive_IT+0x82>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	b2da      	uxtb	r2, r3
 8008408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e008      	b.n	8008420 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800841a:	b2da      	uxtb	r2, r3
 800841c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800842e:	b29b      	uxth	r3, r3
 8008430:	3b01      	subs	r3, #1
 8008432:	b29b      	uxth	r3, r3
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	4619      	mov	r1, r3
 8008438:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800843a:	2b00      	cmp	r3, #0
 800843c:	d15d      	bne.n	80084fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0220 	bic.w	r2, r2, #32
 800844c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800845c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	695a      	ldr	r2, [r3, #20]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0201 	bic.w	r2, r2, #1
 800846c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008480:	2b01      	cmp	r3, #1
 8008482:	d135      	bne.n	80084f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	330c      	adds	r3, #12
 8008490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	613b      	str	r3, [r7, #16]
   return(result);
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f023 0310 	bic.w	r3, r3, #16
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	330c      	adds	r3, #12
 80084a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084aa:	623a      	str	r2, [r7, #32]
 80084ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	69f9      	ldr	r1, [r7, #28]
 80084b0:	6a3a      	ldr	r2, [r7, #32]
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0310 	and.w	r3, r3, #16
 80084c8:	2b10      	cmp	r3, #16
 80084ca:	d10a      	bne.n	80084e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff fdd1 	bl	8008090 <HAL_UARTEx_RxEventCallback>
 80084ee:	e002      	b.n	80084f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7f9 ff0b 	bl	800230c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	e002      	b.n	8008500 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e000      	b.n	8008500 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084fe:	2302      	movs	r3, #2
  }
}
 8008500:	4618      	mov	r0, r3
 8008502:	3730      	adds	r7, #48	@ 0x30
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800850c:	b0c0      	sub	sp, #256	@ 0x100
 800850e:	af00      	add	r7, sp, #0
 8008510:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008524:	68d9      	ldr	r1, [r3, #12]
 8008526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	ea40 0301 	orr.w	r3, r0, r1
 8008530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	431a      	orrs	r2, r3
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	431a      	orrs	r2, r3
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008560:	f021 010c 	bic.w	r1, r1, #12
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800856e:	430b      	orrs	r3, r1
 8008570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008582:	6999      	ldr	r1, [r3, #24]
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	ea40 0301 	orr.w	r3, r0, r1
 800858e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	4b8f      	ldr	r3, [pc, #572]	@ (80087d4 <UART_SetConfig+0x2cc>)
 8008598:	429a      	cmp	r2, r3
 800859a:	d005      	beq.n	80085a8 <UART_SetConfig+0xa0>
 800859c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b8d      	ldr	r3, [pc, #564]	@ (80087d8 <UART_SetConfig+0x2d0>)
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d104      	bne.n	80085b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085a8:	f7fd ff8a 	bl	80064c0 <HAL_RCC_GetPCLK2Freq>
 80085ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80085b0:	e003      	b.n	80085ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085b2:	f7fd ff71 	bl	8006498 <HAL_RCC_GetPCLK1Freq>
 80085b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085c4:	f040 810c 	bne.w	80087e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80085d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80085da:	4622      	mov	r2, r4
 80085dc:	462b      	mov	r3, r5
 80085de:	1891      	adds	r1, r2, r2
 80085e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80085e2:	415b      	adcs	r3, r3
 80085e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80085ea:	4621      	mov	r1, r4
 80085ec:	eb12 0801 	adds.w	r8, r2, r1
 80085f0:	4629      	mov	r1, r5
 80085f2:	eb43 0901 	adc.w	r9, r3, r1
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	f04f 0300 	mov.w	r3, #0
 80085fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800860a:	4690      	mov	r8, r2
 800860c:	4699      	mov	r9, r3
 800860e:	4623      	mov	r3, r4
 8008610:	eb18 0303 	adds.w	r3, r8, r3
 8008614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008618:	462b      	mov	r3, r5
 800861a:	eb49 0303 	adc.w	r3, r9, r3
 800861e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800862e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008636:	460b      	mov	r3, r1
 8008638:	18db      	adds	r3, r3, r3
 800863a:	653b      	str	r3, [r7, #80]	@ 0x50
 800863c:	4613      	mov	r3, r2
 800863e:	eb42 0303 	adc.w	r3, r2, r3
 8008642:	657b      	str	r3, [r7, #84]	@ 0x54
 8008644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800864c:	f7f7 fe18 	bl	8000280 <__aeabi_uldivmod>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4b61      	ldr	r3, [pc, #388]	@ (80087dc <UART_SetConfig+0x2d4>)
 8008656:	fba3 2302 	umull	r2, r3, r3, r2
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	011c      	lsls	r4, r3, #4
 800865e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008662:	2200      	movs	r2, #0
 8008664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008668:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800866c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008670:	4642      	mov	r2, r8
 8008672:	464b      	mov	r3, r9
 8008674:	1891      	adds	r1, r2, r2
 8008676:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008678:	415b      	adcs	r3, r3
 800867a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800867c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008680:	4641      	mov	r1, r8
 8008682:	eb12 0a01 	adds.w	sl, r2, r1
 8008686:	4649      	mov	r1, r9
 8008688:	eb43 0b01 	adc.w	fp, r3, r1
 800868c:	f04f 0200 	mov.w	r2, #0
 8008690:	f04f 0300 	mov.w	r3, #0
 8008694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800869c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086a0:	4692      	mov	sl, r2
 80086a2:	469b      	mov	fp, r3
 80086a4:	4643      	mov	r3, r8
 80086a6:	eb1a 0303 	adds.w	r3, sl, r3
 80086aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086ae:	464b      	mov	r3, r9
 80086b0:	eb4b 0303 	adc.w	r3, fp, r3
 80086b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80086c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086cc:	460b      	mov	r3, r1
 80086ce:	18db      	adds	r3, r3, r3
 80086d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80086d2:	4613      	mov	r3, r2
 80086d4:	eb42 0303 	adc.w	r3, r2, r3
 80086d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80086e2:	f7f7 fdcd 	bl	8000280 <__aeabi_uldivmod>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4611      	mov	r1, r2
 80086ec:	4b3b      	ldr	r3, [pc, #236]	@ (80087dc <UART_SetConfig+0x2d4>)
 80086ee:	fba3 2301 	umull	r2, r3, r3, r1
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	2264      	movs	r2, #100	@ 0x64
 80086f6:	fb02 f303 	mul.w	r3, r2, r3
 80086fa:	1acb      	subs	r3, r1, r3
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008702:	4b36      	ldr	r3, [pc, #216]	@ (80087dc <UART_SetConfig+0x2d4>)
 8008704:	fba3 2302 	umull	r2, r3, r3, r2
 8008708:	095b      	lsrs	r3, r3, #5
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008710:	441c      	add	r4, r3
 8008712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008716:	2200      	movs	r2, #0
 8008718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800871c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008724:	4642      	mov	r2, r8
 8008726:	464b      	mov	r3, r9
 8008728:	1891      	adds	r1, r2, r2
 800872a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800872c:	415b      	adcs	r3, r3
 800872e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008734:	4641      	mov	r1, r8
 8008736:	1851      	adds	r1, r2, r1
 8008738:	6339      	str	r1, [r7, #48]	@ 0x30
 800873a:	4649      	mov	r1, r9
 800873c:	414b      	adcs	r3, r1
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	f04f 0300 	mov.w	r3, #0
 8008748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800874c:	4659      	mov	r1, fp
 800874e:	00cb      	lsls	r3, r1, #3
 8008750:	4651      	mov	r1, sl
 8008752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008756:	4651      	mov	r1, sl
 8008758:	00ca      	lsls	r2, r1, #3
 800875a:	4610      	mov	r0, r2
 800875c:	4619      	mov	r1, r3
 800875e:	4603      	mov	r3, r0
 8008760:	4642      	mov	r2, r8
 8008762:	189b      	adds	r3, r3, r2
 8008764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008768:	464b      	mov	r3, r9
 800876a:	460a      	mov	r2, r1
 800876c:	eb42 0303 	adc.w	r3, r2, r3
 8008770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008780:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008788:	460b      	mov	r3, r1
 800878a:	18db      	adds	r3, r3, r3
 800878c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800878e:	4613      	mov	r3, r2
 8008790:	eb42 0303 	adc.w	r3, r2, r3
 8008794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800879a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800879e:	f7f7 fd6f 	bl	8000280 <__aeabi_uldivmod>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <UART_SetConfig+0x2d4>)
 80087a8:	fba3 1302 	umull	r1, r3, r3, r2
 80087ac:	095b      	lsrs	r3, r3, #5
 80087ae:	2164      	movs	r1, #100	@ 0x64
 80087b0:	fb01 f303 	mul.w	r3, r1, r3
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	3332      	adds	r3, #50	@ 0x32
 80087ba:	4a08      	ldr	r2, [pc, #32]	@ (80087dc <UART_SetConfig+0x2d4>)
 80087bc:	fba2 2303 	umull	r2, r3, r2, r3
 80087c0:	095b      	lsrs	r3, r3, #5
 80087c2:	f003 0207 	and.w	r2, r3, #7
 80087c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4422      	add	r2, r4
 80087ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087d0:	e106      	b.n	80089e0 <UART_SetConfig+0x4d8>
 80087d2:	bf00      	nop
 80087d4:	40011000 	.word	0x40011000
 80087d8:	40011400 	.word	0x40011400
 80087dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80087ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80087f2:	4642      	mov	r2, r8
 80087f4:	464b      	mov	r3, r9
 80087f6:	1891      	adds	r1, r2, r2
 80087f8:	6239      	str	r1, [r7, #32]
 80087fa:	415b      	adcs	r3, r3
 80087fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80087fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008802:	4641      	mov	r1, r8
 8008804:	1854      	adds	r4, r2, r1
 8008806:	4649      	mov	r1, r9
 8008808:	eb43 0501 	adc.w	r5, r3, r1
 800880c:	f04f 0200 	mov.w	r2, #0
 8008810:	f04f 0300 	mov.w	r3, #0
 8008814:	00eb      	lsls	r3, r5, #3
 8008816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800881a:	00e2      	lsls	r2, r4, #3
 800881c:	4614      	mov	r4, r2
 800881e:	461d      	mov	r5, r3
 8008820:	4643      	mov	r3, r8
 8008822:	18e3      	adds	r3, r4, r3
 8008824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008828:	464b      	mov	r3, r9
 800882a:	eb45 0303 	adc.w	r3, r5, r3
 800882e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800883e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	f04f 0300 	mov.w	r3, #0
 800884a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800884e:	4629      	mov	r1, r5
 8008850:	008b      	lsls	r3, r1, #2
 8008852:	4621      	mov	r1, r4
 8008854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008858:	4621      	mov	r1, r4
 800885a:	008a      	lsls	r2, r1, #2
 800885c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008860:	f7f7 fd0e 	bl	8000280 <__aeabi_uldivmod>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4b60      	ldr	r3, [pc, #384]	@ (80089ec <UART_SetConfig+0x4e4>)
 800886a:	fba3 2302 	umull	r2, r3, r3, r2
 800886e:	095b      	lsrs	r3, r3, #5
 8008870:	011c      	lsls	r4, r3, #4
 8008872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008876:	2200      	movs	r2, #0
 8008878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800887c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008884:	4642      	mov	r2, r8
 8008886:	464b      	mov	r3, r9
 8008888:	1891      	adds	r1, r2, r2
 800888a:	61b9      	str	r1, [r7, #24]
 800888c:	415b      	adcs	r3, r3
 800888e:	61fb      	str	r3, [r7, #28]
 8008890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008894:	4641      	mov	r1, r8
 8008896:	1851      	adds	r1, r2, r1
 8008898:	6139      	str	r1, [r7, #16]
 800889a:	4649      	mov	r1, r9
 800889c:	414b      	adcs	r3, r1
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	f04f 0200 	mov.w	r2, #0
 80088a4:	f04f 0300 	mov.w	r3, #0
 80088a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088ac:	4659      	mov	r1, fp
 80088ae:	00cb      	lsls	r3, r1, #3
 80088b0:	4651      	mov	r1, sl
 80088b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088b6:	4651      	mov	r1, sl
 80088b8:	00ca      	lsls	r2, r1, #3
 80088ba:	4610      	mov	r0, r2
 80088bc:	4619      	mov	r1, r3
 80088be:	4603      	mov	r3, r0
 80088c0:	4642      	mov	r2, r8
 80088c2:	189b      	adds	r3, r3, r2
 80088c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088c8:	464b      	mov	r3, r9
 80088ca:	460a      	mov	r2, r1
 80088cc:	eb42 0303 	adc.w	r3, r2, r3
 80088d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80088ec:	4649      	mov	r1, r9
 80088ee:	008b      	lsls	r3, r1, #2
 80088f0:	4641      	mov	r1, r8
 80088f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088f6:	4641      	mov	r1, r8
 80088f8:	008a      	lsls	r2, r1, #2
 80088fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80088fe:	f7f7 fcbf 	bl	8000280 <__aeabi_uldivmod>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4611      	mov	r1, r2
 8008908:	4b38      	ldr	r3, [pc, #224]	@ (80089ec <UART_SetConfig+0x4e4>)
 800890a:	fba3 2301 	umull	r2, r3, r3, r1
 800890e:	095b      	lsrs	r3, r3, #5
 8008910:	2264      	movs	r2, #100	@ 0x64
 8008912:	fb02 f303 	mul.w	r3, r2, r3
 8008916:	1acb      	subs	r3, r1, r3
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	3332      	adds	r3, #50	@ 0x32
 800891c:	4a33      	ldr	r2, [pc, #204]	@ (80089ec <UART_SetConfig+0x4e4>)
 800891e:	fba2 2303 	umull	r2, r3, r2, r3
 8008922:	095b      	lsrs	r3, r3, #5
 8008924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008928:	441c      	add	r4, r3
 800892a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800892e:	2200      	movs	r2, #0
 8008930:	673b      	str	r3, [r7, #112]	@ 0x70
 8008932:	677a      	str	r2, [r7, #116]	@ 0x74
 8008934:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008938:	4642      	mov	r2, r8
 800893a:	464b      	mov	r3, r9
 800893c:	1891      	adds	r1, r2, r2
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	415b      	adcs	r3, r3
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008948:	4641      	mov	r1, r8
 800894a:	1851      	adds	r1, r2, r1
 800894c:	6039      	str	r1, [r7, #0]
 800894e:	4649      	mov	r1, r9
 8008950:	414b      	adcs	r3, r1
 8008952:	607b      	str	r3, [r7, #4]
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008960:	4659      	mov	r1, fp
 8008962:	00cb      	lsls	r3, r1, #3
 8008964:	4651      	mov	r1, sl
 8008966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800896a:	4651      	mov	r1, sl
 800896c:	00ca      	lsls	r2, r1, #3
 800896e:	4610      	mov	r0, r2
 8008970:	4619      	mov	r1, r3
 8008972:	4603      	mov	r3, r0
 8008974:	4642      	mov	r2, r8
 8008976:	189b      	adds	r3, r3, r2
 8008978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800897a:	464b      	mov	r3, r9
 800897c:	460a      	mov	r2, r1
 800897e:	eb42 0303 	adc.w	r3, r2, r3
 8008982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	663b      	str	r3, [r7, #96]	@ 0x60
 800898e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008990:	f04f 0200 	mov.w	r2, #0
 8008994:	f04f 0300 	mov.w	r3, #0
 8008998:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800899c:	4649      	mov	r1, r9
 800899e:	008b      	lsls	r3, r1, #2
 80089a0:	4641      	mov	r1, r8
 80089a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089a6:	4641      	mov	r1, r8
 80089a8:	008a      	lsls	r2, r1, #2
 80089aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80089ae:	f7f7 fc67 	bl	8000280 <__aeabi_uldivmod>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <UART_SetConfig+0x4e4>)
 80089b8:	fba3 1302 	umull	r1, r3, r3, r2
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	2164      	movs	r1, #100	@ 0x64
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	3332      	adds	r3, #50	@ 0x32
 80089ca:	4a08      	ldr	r2, [pc, #32]	@ (80089ec <UART_SetConfig+0x4e4>)
 80089cc:	fba2 2303 	umull	r2, r3, r2, r3
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f003 020f 	and.w	r2, r3, #15
 80089d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4422      	add	r2, r4
 80089de:	609a      	str	r2, [r3, #8]
}
 80089e0:	bf00      	nop
 80089e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80089e6:	46bd      	mov	sp, r7
 80089e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089ec:	51eb851f 	.word	0x51eb851f

080089f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089f0:	b084      	sub	sp, #16
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	f107 001c 	add.w	r0, r7, #28
 80089fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d123      	bne.n	8008a52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d105      	bne.n	8008a46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f9dc 	bl	8008e04 <USB_CoreReset>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
 8008a50:	e01b      	b.n	8008a8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f9d0 	bl	8008e04 <USB_CoreReset>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d106      	bne.n	8008a7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008a7c:	e005      	b.n	8008a8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a8a:	7fbb      	ldrb	r3, [r7, #30]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d10b      	bne.n	8008aa8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f043 0206 	orr.w	r2, r3, #6
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f043 0220 	orr.w	r2, r3, #32
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ab4:	b004      	add	sp, #16
 8008ab6:	4770      	bx	lr

08008ab8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f043 0201 	orr.w	r2, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f023 0201 	bic.w	r2, r3, #1
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d115      	bne.n	8008b4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b2a:	200a      	movs	r0, #10
 8008b2c:	f7fa fa66 	bl	8002ffc <HAL_Delay>
      ms += 10U;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	330a      	adds	r3, #10
 8008b34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f956 	bl	8008de8 <USB_GetMode>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d01e      	beq.n	8008b80 <USB_SetCurrentMode+0x84>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b46:	d9f0      	bls.n	8008b2a <USB_SetCurrentMode+0x2e>
 8008b48:	e01a      	b.n	8008b80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d115      	bne.n	8008b7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b5c:	200a      	movs	r0, #10
 8008b5e:	f7fa fa4d 	bl	8002ffc <HAL_Delay>
      ms += 10U;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	330a      	adds	r3, #10
 8008b66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f93d 	bl	8008de8 <USB_GetMode>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <USB_SetCurrentMode+0x84>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b78:	d9f0      	bls.n	8008b5c <USB_SetCurrentMode+0x60>
 8008b7a:	e001      	b.n	8008b80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e005      	b.n	8008b8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2bc8      	cmp	r3, #200	@ 0xc8
 8008b84:	d101      	bne.n	8008b8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e000      	b.n	8008b8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bae:	d901      	bls.n	8008bb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e01b      	b.n	8008bec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	daf2      	bge.n	8008ba2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	019b      	lsls	r3, r3, #6
 8008bc4:	f043 0220 	orr.w	r2, r3, #32
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bd8:	d901      	bls.n	8008bde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e006      	b.n	8008bec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d0f0      	beq.n	8008bcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3301      	adds	r3, #1
 8008c08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c10:	d901      	bls.n	8008c16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e018      	b.n	8008c48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	daf2      	bge.n	8008c04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2210      	movs	r2, #16
 8008c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c34:	d901      	bls.n	8008c3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e006      	b.n	8008c48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	f003 0310 	and.w	r3, r3, #16
 8008c42:	2b10      	cmp	r3, #16
 8008c44:	d0f0      	beq.n	8008c28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b089      	sub	sp, #36	@ 0x24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	460b      	mov	r3, r1
 8008c64:	71fb      	strb	r3, [r7, #7]
 8008c66:	4613      	mov	r3, r2
 8008c68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d123      	bne.n	8008cc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c7a:	88bb      	ldrh	r3, [r7, #4]
 8008c7c:	3303      	adds	r3, #3
 8008c7e:	089b      	lsrs	r3, r3, #2
 8008c80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c82:	2300      	movs	r3, #0
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e018      	b.n	8008cba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	031a      	lsls	r2, r3, #12
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c94:	461a      	mov	r2, r3
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	3301      	adds	r3, #1
 8008cac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d3e2      	bcc.n	8008c88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3724      	adds	r7, #36	@ 0x24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b08b      	sub	sp, #44	@ 0x2c
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ce6:	88fb      	ldrh	r3, [r7, #6]
 8008ce8:	089b      	lsrs	r3, r3, #2
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008cee:	88fb      	ldrh	r3, [r7, #6]
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	623b      	str	r3, [r7, #32]
 8008cfa:	e014      	b.n	8008d26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d10:	3301      	adds	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d16:	3301      	adds	r3, #1
 8008d18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	3301      	adds	r3, #1
 8008d24:	623b      	str	r3, [r7, #32]
 8008d26:	6a3a      	ldr	r2, [r7, #32]
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d3e6      	bcc.n	8008cfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d2e:	8bfb      	ldrh	r3, [r7, #30]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01e      	beq.n	8008d72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f107 0310 	add.w	r3, r7, #16
 8008d44:	6812      	ldr	r2, [r2, #0]
 8008d46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	fa22 f303 	lsr.w	r3, r2, r3
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d58:	701a      	strb	r2, [r3, #0]
      i++;
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	3301      	adds	r3, #1
 8008d64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008d66:	8bfb      	ldrh	r3, [r7, #30]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d6c:	8bfb      	ldrh	r3, [r7, #30]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1ea      	bne.n	8008d48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	372c      	adds	r7, #44	@ 0x2c
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	4013      	ands	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d98:	68fb      	ldr	r3, [r7, #12]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b085      	sub	sp, #20
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dda:	68bb      	ldr	r3, [r7, #8]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	f003 0301 	and.w	r3, r3, #1
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3301      	adds	r3, #1
 8008e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e1c:	d901      	bls.n	8008e22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e01b      	b.n	8008e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	daf2      	bge.n	8008e10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f043 0201 	orr.w	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e46:	d901      	bls.n	8008e4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e006      	b.n	8008e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d0f0      	beq.n	8008e3a <USB_CoreReset+0x36>

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
	...

08008e68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e68:	b084      	sub	sp, #16
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b086      	sub	sp, #24
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e88:	461a      	mov	r2, r3
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d119      	bne.n	8008ef2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d10a      	bne.n	8008edc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ed4:	f043 0304 	orr.w	r3, r3, #4
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	e014      	b.n	8008f06 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008eea:	f023 0304 	bic.w	r3, r3, #4
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	e009      	b.n	8008f06 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008f00:	f023 0304 	bic.w	r3, r3, #4
 8008f04:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f06:	2110      	movs	r1, #16
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff fe43 	bl	8008b94 <USB_FlushTxFifo>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7ff fe6d 	bl	8008bf8 <USB_FlushRxFifo>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	e015      	b.n	8008f5a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f40:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f4e:	461a      	mov	r2, r3
 8008f50:	2300      	movs	r3, #0
 8008f52:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	3301      	adds	r3, #1
 8008f58:	613b      	str	r3, [r7, #16]
 8008f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008f5e:	461a      	mov	r2, r3
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d3e3      	bcc.n	8008f2e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f72:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a18      	ldr	r2, [pc, #96]	@ (8008fd8 <USB_HostInit+0x170>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d10b      	bne.n	8008f94 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f82:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a15      	ldr	r2, [pc, #84]	@ (8008fdc <USB_HostInit+0x174>)
 8008f88:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a14      	ldr	r2, [pc, #80]	@ (8008fe0 <USB_HostInit+0x178>)
 8008f8e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008f92:	e009      	b.n	8008fa8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2280      	movs	r2, #128	@ 0x80
 8008f98:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a11      	ldr	r2, [pc, #68]	@ (8008fe4 <USB_HostInit+0x17c>)
 8008f9e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a11      	ldr	r2, [pc, #68]	@ (8008fe8 <USB_HostInit+0x180>)
 8008fa4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d105      	bne.n	8008fbc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	f043 0210 	orr.w	r2, r3, #16
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699a      	ldr	r2, [r3, #24]
 8008fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8008fec <USB_HostInit+0x184>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd4:	b004      	add	sp, #16
 8008fd6:	4770      	bx	lr
 8008fd8:	40040000 	.word	0x40040000
 8008fdc:	01000200 	.word	0x01000200
 8008fe0:	00e00300 	.word	0x00e00300
 8008fe4:	00600080 	.word	0x00600080
 8008fe8:	004000e0 	.word	0x004000e0
 8008fec:	a3200008 	.word	0xa3200008

08008ff0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800900e:	f023 0303 	bic.w	r3, r3, #3
 8009012:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	68f9      	ldr	r1, [r7, #12]
 8009024:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009028:	4313      	orrs	r3, r2
 800902a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d107      	bne.n	8009042 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009038:	461a      	mov	r2, r3
 800903a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800903e:	6053      	str	r3, [r2, #4]
 8009040:	e00c      	b.n	800905c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009042:	78fb      	ldrb	r3, [r7, #3]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d107      	bne.n	8009058 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800904e:	461a      	mov	r2, r3
 8009050:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009054:	6053      	str	r3, [r2, #4]
 8009056:	e001      	b.n	800905c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e000      	b.n	800905e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800908a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009098:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800909a:	2064      	movs	r0, #100	@ 0x64
 800909c:	f7f9 ffae 	bl	8002ffc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80090a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80090ae:	200a      	movs	r0, #10
 80090b0:	f7f9 ffa4 	bl	8002ffc <HAL_Delay>

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80090be:	b480      	push	{r7}
 80090c0:	b085      	sub	sp, #20
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80090e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d109      	bne.n	8009102 <USB_DriveVbus+0x44>
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d106      	bne.n	8009102 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80090fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009100:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800910c:	d109      	bne.n	8009122 <USB_DriveVbus+0x64>
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800911c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009120:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	0c5b      	lsrs	r3, r3, #17
 800914e:	f003 0303 	and.w	r3, r3, #3
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800915e:	b480      	push	{r7}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	b29b      	uxth	r3, r3
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	4608      	mov	r0, r1
 800918a:	4611      	mov	r1, r2
 800918c:	461a      	mov	r2, r3
 800918e:	4603      	mov	r3, r0
 8009190:	70fb      	strb	r3, [r7, #3]
 8009192:	460b      	mov	r3, r1
 8009194:	70bb      	strb	r3, [r7, #2]
 8009196:	4613      	mov	r3, r2
 8009198:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80091a2:	78fb      	ldrb	r3, [r7, #3]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ae:	461a      	mov	r2, r3
 80091b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80091b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d87c      	bhi.n	80092b8 <USB_HC_Init+0x138>
 80091be:	a201      	add	r2, pc, #4	@ (adr r2, 80091c4 <USB_HC_Init+0x44>)
 80091c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c4:	080091d5 	.word	0x080091d5
 80091c8:	0800927b 	.word	0x0800927b
 80091cc:	080091d5 	.word	0x080091d5
 80091d0:	0800923d 	.word	0x0800923d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091e0:	461a      	mov	r2, r3
 80091e2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80091e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80091e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	da10      	bge.n	8009212 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	0151      	lsls	r1, r2, #5
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	440a      	add	r2, r1
 8009206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800920a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800920e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009210:	e055      	b.n	80092be <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a6f      	ldr	r2, [pc, #444]	@ (80093d4 <USB_HC_Init+0x254>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d151      	bne.n	80092be <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	4413      	add	r3, r2
 8009222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	78fa      	ldrb	r2, [r7, #3]
 800922a:	0151      	lsls	r1, r2, #5
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	440a      	add	r2, r1
 8009230:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009234:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009238:	60d3      	str	r3, [r2, #12]
      break;
 800923a:	e040      	b.n	80092be <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	4413      	add	r3, r2
 8009244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009248:	461a      	mov	r2, r3
 800924a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800924e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009250:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da34      	bge.n	80092c2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	4413      	add	r3, r2
 8009260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	440a      	add	r2, r1
 800926e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009276:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009278:	e023      	b.n	80092c2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	4413      	add	r3, r2
 8009282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009286:	461a      	mov	r2, r3
 8009288:	f240 2325 	movw	r3, #549	@ 0x225
 800928c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800928e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009292:	2b00      	cmp	r3, #0
 8009294:	da17      	bge.n	80092c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009296:	78fb      	ldrb	r3, [r7, #3]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	4413      	add	r3, r2
 800929e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	78fa      	ldrb	r2, [r7, #3]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092b0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80092b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80092b6:	e006      	b.n	80092c6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	77fb      	strb	r3, [r7, #31]
      break;
 80092bc:	e004      	b.n	80092c8 <USB_HC_Init+0x148>
      break;
 80092be:	bf00      	nop
 80092c0:	e002      	b.n	80092c8 <USB_HC_Init+0x148>
      break;
 80092c2:	bf00      	nop
 80092c4:	e000      	b.n	80092c8 <USB_HC_Init+0x148>
      break;
 80092c6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d4:	461a      	mov	r2, r3
 80092d6:	2300      	movs	r3, #0
 80092d8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	78fa      	ldrb	r2, [r7, #3]
 80092ea:	0151      	lsls	r1, r2, #5
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	440a      	add	r2, r1
 80092f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092f4:	f043 0302 	orr.w	r3, r3, #2
 80092f8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	78fb      	ldrb	r3, [r7, #3]
 8009304:	f003 030f 	and.w	r3, r3, #15
 8009308:	2101      	movs	r1, #1
 800930a:	fa01 f303 	lsl.w	r3, r1, r3
 800930e:	6939      	ldr	r1, [r7, #16]
 8009310:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009314:	4313      	orrs	r3, r2
 8009316:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009324:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009328:	2b00      	cmp	r3, #0
 800932a:	da03      	bge.n	8009334 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800932c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	e001      	b.n	8009338 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff fef9 	bl	8009130 <USB_GetHostSpeed>
 800933e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009340:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009344:	2b02      	cmp	r3, #2
 8009346:	d106      	bne.n	8009356 <USB_HC_Init+0x1d6>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b02      	cmp	r3, #2
 800934c:	d003      	beq.n	8009356 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800934e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	e001      	b.n	800935a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800935a:	787b      	ldrb	r3, [r7, #1]
 800935c:	059b      	lsls	r3, r3, #22
 800935e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009362:	78bb      	ldrb	r3, [r7, #2]
 8009364:	02db      	lsls	r3, r3, #11
 8009366:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800936a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800936c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009370:	049b      	lsls	r3, r3, #18
 8009372:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009376:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009378:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800937a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800937e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	431a      	orrs	r2, r3
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009388:	78fa      	ldrb	r2, [r7, #3]
 800938a:	0151      	lsls	r1, r2, #5
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	440a      	add	r2, r1
 8009390:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009394:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009398:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800939a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d003      	beq.n	80093aa <USB_HC_Init+0x22a>
 80093a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d10f      	bne.n	80093ca <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	78fa      	ldrb	r2, [r7, #3]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80093c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	40040000 	.word	0x40040000

080093d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08c      	sub	sp, #48	@ 0x30
 80093dc:	af02      	add	r7, sp, #8
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	4613      	mov	r3, r2
 80093e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80093f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80093f4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4a5d      	ldr	r2, [pc, #372]	@ (8009570 <USB_HC_StartXfer+0x198>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d12f      	bne.n	800945e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80093fe:	79fb      	ldrb	r3, [r7, #7]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d11c      	bne.n	800943e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	7c9b      	ldrb	r3, [r3, #18]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <USB_HC_StartXfer+0x3c>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	7c9b      	ldrb	r3, [r3, #18]
 8009410:	2b02      	cmp	r3, #2
 8009412:	d124      	bne.n	800945e <USB_HC_StartXfer+0x86>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	799b      	ldrb	r3, [r3, #6]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d120      	bne.n	800945e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	4413      	add	r3, r2
 8009424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	69fa      	ldr	r2, [r7, #28]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	6a3a      	ldr	r2, [r7, #32]
 8009430:	440a      	add	r2, r1
 8009432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800943a:	60d3      	str	r3, [r2, #12]
 800943c:	e00f      	b.n	800945e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	791b      	ldrb	r3, [r3, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10b      	bne.n	800945e <USB_HC_StartXfer+0x86>
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	795b      	ldrb	r3, [r3, #5]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d107      	bne.n	800945e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	785b      	ldrb	r3, [r3, #1]
 8009452:	4619      	mov	r1, r3
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 fb6b 	bl	8009b30 <USB_DoPing>
        return HAL_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	e232      	b.n	80098c4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	799b      	ldrb	r3, [r3, #6]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d158      	bne.n	8009518 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009466:	2301      	movs	r3, #1
 8009468:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	78db      	ldrb	r3, [r3, #3]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009472:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	8a92      	ldrh	r2, [r2, #20]
 8009478:	fb03 f202 	mul.w	r2, r3, r2
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	61da      	str	r2, [r3, #28]
 8009480:	e07c      	b.n	800957c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	7c9b      	ldrb	r3, [r3, #18]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d130      	bne.n	80094ec <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	2bbc      	cmp	r3, #188	@ 0xbc
 8009490:	d918      	bls.n	80094c4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	8a9b      	ldrh	r3, [r3, #20]
 8009496:	461a      	mov	r2, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	69da      	ldr	r2, [r3, #28]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d003      	beq.n	80094b4 <USB_HC_StartXfer+0xdc>
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d103      	bne.n	80094bc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2202      	movs	r2, #2
 80094b8:	60da      	str	r2, [r3, #12]
 80094ba:	e05f      	b.n	800957c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2201      	movs	r2, #1
 80094c0:	60da      	str	r2, [r3, #12]
 80094c2:	e05b      	b.n	800957c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	6a1a      	ldr	r2, [r3, #32]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d007      	beq.n	80094e4 <USB_HC_StartXfer+0x10c>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d003      	beq.n	80094e4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2204      	movs	r2, #4
 80094e0:	60da      	str	r2, [r3, #12]
 80094e2:	e04b      	b.n	800957c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2203      	movs	r2, #3
 80094e8:	60da      	str	r2, [r3, #12]
 80094ea:	e047      	b.n	800957c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d10d      	bne.n	800950e <USB_HC_StartXfer+0x136>
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	8a92      	ldrh	r2, [r2, #20]
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d907      	bls.n	800950e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80094fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	8a92      	ldrh	r2, [r2, #20]
 8009504:	fb03 f202 	mul.w	r2, r3, r2
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	61da      	str	r2, [r3, #28]
 800950c:	e036      	b.n	800957c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	6a1a      	ldr	r2, [r3, #32]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	61da      	str	r2, [r3, #28]
 8009516:	e031      	b.n	800957c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d018      	beq.n	8009552 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	8a92      	ldrh	r2, [r2, #20]
 8009528:	4413      	add	r3, r2
 800952a:	3b01      	subs	r3, #1
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	8a92      	ldrh	r2, [r2, #20]
 8009530:	fbb3 f3f2 	udiv	r3, r3, r2
 8009534:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009536:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009538:	8b7b      	ldrh	r3, [r7, #26]
 800953a:	429a      	cmp	r2, r3
 800953c:	d90b      	bls.n	8009556 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800953e:	8b7b      	ldrh	r3, [r7, #26]
 8009540:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009542:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	8a92      	ldrh	r2, [r2, #20]
 8009548:	fb03 f202 	mul.w	r2, r3, r2
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	61da      	str	r2, [r3, #28]
 8009550:	e001      	b.n	8009556 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009552:	2301      	movs	r3, #1
 8009554:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	78db      	ldrb	r3, [r3, #3]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800955e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	8a92      	ldrh	r2, [r2, #20]
 8009564:	fb03 f202 	mul.w	r2, r3, r2
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	61da      	str	r2, [r3, #28]
 800956c:	e006      	b.n	800957c <USB_HC_StartXfer+0x1a4>
 800956e:	bf00      	nop
 8009570:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	6a1a      	ldr	r2, [r3, #32]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009584:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009586:	04d9      	lsls	r1, r3, #19
 8009588:	4ba3      	ldr	r3, [pc, #652]	@ (8009818 <USB_HC_StartXfer+0x440>)
 800958a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800958c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	7d9b      	ldrb	r3, [r3, #22]
 8009592:	075b      	lsls	r3, r3, #29
 8009594:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009598:	69f9      	ldr	r1, [r7, #28]
 800959a:	0148      	lsls	r0, r1, #5
 800959c:	6a39      	ldr	r1, [r7, #32]
 800959e:	4401      	add	r1, r0
 80095a0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80095a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d009      	beq.n	80095c2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6999      	ldr	r1, [r3, #24]
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095be:	460a      	mov	r2, r1
 80095c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	bf0c      	ite	eq
 80095d2:	2301      	moveq	r3, #1
 80095d4:	2300      	movne	r3, #0
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	0151      	lsls	r1, r2, #5
 80095ec:	6a3a      	ldr	r2, [r7, #32]
 80095ee:	440a      	add	r2, r1
 80095f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80095f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	4413      	add	r3, r2
 8009602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	7e7b      	ldrb	r3, [r7, #25]
 800960a:	075b      	lsls	r3, r3, #29
 800960c:	69f9      	ldr	r1, [r7, #28]
 800960e:	0148      	lsls	r0, r1, #5
 8009610:	6a39      	ldr	r1, [r7, #32]
 8009612:	4401      	add	r1, r0
 8009614:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009618:	4313      	orrs	r3, r2
 800961a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	799b      	ldrb	r3, [r3, #6]
 8009620:	2b01      	cmp	r3, #1
 8009622:	f040 80c3 	bne.w	80097ac <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	7c5b      	ldrb	r3, [r3, #17]
 800962a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009630:	4313      	orrs	r3, r2
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	0151      	lsls	r1, r2, #5
 8009636:	6a3a      	ldr	r2, [r7, #32]
 8009638:	440a      	add	r2, r1
 800963a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800963e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009642:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	4413      	add	r3, r2
 800964c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	69fa      	ldr	r2, [r7, #28]
 8009654:	0151      	lsls	r1, r2, #5
 8009656:	6a3a      	ldr	r2, [r7, #32]
 8009658:	440a      	add	r2, r1
 800965a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800965e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009662:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	79db      	ldrb	r3, [r3, #7]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d123      	bne.n	80096b4 <USB_HC_StartXfer+0x2dc>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	78db      	ldrb	r3, [r3, #3]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d11f      	bne.n	80096b4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	4413      	add	r3, r2
 800967c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	0151      	lsls	r1, r2, #5
 8009686:	6a3a      	ldr	r2, [r7, #32]
 8009688:	440a      	add	r2, r1
 800968a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800968e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009692:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	4413      	add	r3, r2
 800969c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	0151      	lsls	r1, r2, #5
 80096a6:	6a3a      	ldr	r2, [r7, #32]
 80096a8:	440a      	add	r2, r1
 80096aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096b2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	7c9b      	ldrb	r3, [r3, #18]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d003      	beq.n	80096c4 <USB_HC_StartXfer+0x2ec>
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	7c9b      	ldrb	r3, [r3, #18]
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d117      	bne.n	80096f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d113      	bne.n	80096f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	78db      	ldrb	r3, [r3, #3]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d10f      	bne.n	80096f4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	69fa      	ldr	r2, [r7, #28]
 80096e4:	0151      	lsls	r1, r2, #5
 80096e6:	6a3a      	ldr	r2, [r7, #32]
 80096e8:	440a      	add	r2, r1
 80096ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096f2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	7c9b      	ldrb	r3, [r3, #18]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d162      	bne.n	80097c2 <USB_HC_StartXfer+0x3ea>
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	78db      	ldrb	r3, [r3, #3]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d15e      	bne.n	80097c2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	3b01      	subs	r3, #1
 800970a:	2b03      	cmp	r3, #3
 800970c:	d858      	bhi.n	80097c0 <USB_HC_StartXfer+0x3e8>
 800970e:	a201      	add	r2, pc, #4	@ (adr r2, 8009714 <USB_HC_StartXfer+0x33c>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009725 	.word	0x08009725
 8009718:	08009747 	.word	0x08009747
 800971c:	08009769 	.word	0x08009769
 8009720:	0800978b 	.word	0x0800978b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	4413      	add	r3, r2
 800972c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	6a3a      	ldr	r2, [r7, #32]
 8009738:	440a      	add	r2, r1
 800973a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800973e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009742:	6053      	str	r3, [r2, #4]
          break;
 8009744:	e03d      	b.n	80097c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	4413      	add	r3, r2
 800974e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	69fa      	ldr	r2, [r7, #28]
 8009756:	0151      	lsls	r1, r2, #5
 8009758:	6a3a      	ldr	r2, [r7, #32]
 800975a:	440a      	add	r2, r1
 800975c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009760:	f043 030e 	orr.w	r3, r3, #14
 8009764:	6053      	str	r3, [r2, #4]
          break;
 8009766:	e02c      	b.n	80097c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	4413      	add	r3, r2
 8009770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	69fa      	ldr	r2, [r7, #28]
 8009778:	0151      	lsls	r1, r2, #5
 800977a:	6a3a      	ldr	r2, [r7, #32]
 800977c:	440a      	add	r2, r1
 800977e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009782:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009786:	6053      	str	r3, [r2, #4]
          break;
 8009788:	e01b      	b.n	80097c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	015a      	lsls	r2, r3, #5
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	4413      	add	r3, r2
 8009792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	69fa      	ldr	r2, [r7, #28]
 800979a:	0151      	lsls	r1, r2, #5
 800979c:	6a3a      	ldr	r2, [r7, #32]
 800979e:	440a      	add	r2, r1
 80097a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097a8:	6053      	str	r3, [r2, #4]
          break;
 80097aa:	e00a      	b.n	80097c2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097b8:	461a      	mov	r2, r3
 80097ba:	2300      	movs	r3, #0
 80097bc:	6053      	str	r3, [r2, #4]
 80097be:	e000      	b.n	80097c2 <USB_HC_StartXfer+0x3ea>
          break;
 80097c0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097d8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	78db      	ldrb	r3, [r3, #3]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d004      	beq.n	80097ec <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097e8:	613b      	str	r3, [r7, #16]
 80097ea:	e003      	b.n	80097f4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80097f2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097fa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	4413      	add	r3, r2
 8009804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009808:	461a      	mov	r2, r3
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	e055      	b.n	80098c4 <USB_HC_StartXfer+0x4ec>
 8009818:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	78db      	ldrb	r3, [r3, #3]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d14e      	bne.n	80098c2 <USB_HC_StartXfer+0x4ea>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d04a      	beq.n	80098c2 <USB_HC_StartXfer+0x4ea>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	79db      	ldrb	r3, [r3, #7]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d146      	bne.n	80098c2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	7c9b      	ldrb	r3, [r3, #18]
 8009838:	2b03      	cmp	r3, #3
 800983a:	d831      	bhi.n	80098a0 <USB_HC_StartXfer+0x4c8>
 800983c:	a201      	add	r2, pc, #4	@ (adr r2, 8009844 <USB_HC_StartXfer+0x46c>)
 800983e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009842:	bf00      	nop
 8009844:	08009855 	.word	0x08009855
 8009848:	08009879 	.word	0x08009879
 800984c:	08009855 	.word	0x08009855
 8009850:	08009879 	.word	0x08009879
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	3303      	adds	r3, #3
 800985a:	089b      	lsrs	r3, r3, #2
 800985c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800985e:	8afa      	ldrh	r2, [r7, #22]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009864:	b29b      	uxth	r3, r3
 8009866:	429a      	cmp	r2, r3
 8009868:	d91c      	bls.n	80098a4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	f043 0220 	orr.w	r2, r3, #32
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	619a      	str	r2, [r3, #24]
        }
        break;
 8009876:	e015      	b.n	80098a4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	3303      	adds	r3, #3
 800987e:	089b      	lsrs	r3, r3, #2
 8009880:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009882:	8afa      	ldrh	r2, [r7, #22]
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	b29b      	uxth	r3, r3
 800988e:	429a      	cmp	r2, r3
 8009890:	d90a      	bls.n	80098a8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	619a      	str	r2, [r3, #24]
        }
        break;
 800989e:	e003      	b.n	80098a8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80098a0:	bf00      	nop
 80098a2:	e002      	b.n	80098aa <USB_HC_StartXfer+0x4d2>
        break;
 80098a4:	bf00      	nop
 80098a6:	e000      	b.n	80098aa <USB_HC_StartXfer+0x4d2>
        break;
 80098a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	6999      	ldr	r1, [r3, #24]
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	785a      	ldrb	r2, [r3, #1]
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	2000      	movs	r0, #0
 80098ba:	9000      	str	r0, [sp, #0]
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff f9c9 	bl	8008c54 <USB_WritePacket>
  }

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3728      	adds	r7, #40	@ 0x28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	b29b      	uxth	r3, r3
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b089      	sub	sp, #36	@ 0x24
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009902:	2300      	movs	r3, #0
 8009904:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	4413      	add	r3, r2
 800990e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	0c9b      	lsrs	r3, r3, #18
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	4413      	add	r3, r2
 8009924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	0fdb      	lsrs	r3, r3, #31
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	0fdb      	lsrs	r3, r3, #31
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b20      	cmp	r3, #32
 8009952:	d10d      	bne.n	8009970 <USB_HC_Halt+0x82>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <USB_HC_Halt+0x82>
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d002      	beq.n	800996c <USB_HC_Halt+0x7e>
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b03      	cmp	r3, #3
 800996a:	d101      	bne.n	8009970 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	e0d8      	b.n	8009b22 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <USB_HC_Halt+0x8e>
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d173      	bne.n	8009a64 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	4413      	add	r3, r2
 8009984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	0151      	lsls	r1, r2, #5
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	440a      	add	r2, r1
 8009992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009996:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800999a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d14a      	bne.n	8009a3e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d133      	bne.n	8009a1c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099d2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	0151      	lsls	r1, r2, #5
 80099e6:	69fa      	ldr	r2, [r7, #28]
 80099e8:	440a      	add	r2, r1
 80099ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099f2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	3301      	adds	r3, #1
 80099f8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a00:	d82e      	bhi.n	8009a60 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a18:	d0ec      	beq.n	80099f4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a1a:	e081      	b.n	8009b20 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	0151      	lsls	r1, r2, #5
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	440a      	add	r2, r1
 8009a32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a3a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a3c:	e070      	b.n	8009b20 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	69ba      	ldr	r2, [r7, #24]
 8009a4e:	0151      	lsls	r1, r2, #5
 8009a50:	69fa      	ldr	r2, [r7, #28]
 8009a52:	440a      	add	r2, r1
 8009a54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a5c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a5e:	e05f      	b.n	8009b20 <USB_HC_Halt+0x232>
            break;
 8009a60:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a62:	e05d      	b.n	8009b20 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	69ba      	ldr	r2, [r7, #24]
 8009a74:	0151      	lsls	r1, r2, #5
 8009a76:	69fa      	ldr	r2, [r7, #28]
 8009a78:	440a      	add	r2, r1
 8009a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d133      	bne.n	8009afc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69ba      	ldr	r2, [r7, #24]
 8009aa4:	0151      	lsls	r1, r2, #5
 8009aa6:	69fa      	ldr	r2, [r7, #28]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ab2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	0151      	lsls	r1, r2, #5
 8009ac6:	69fa      	ldr	r2, [r7, #28]
 8009ac8:	440a      	add	r2, r1
 8009aca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ad2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ae0:	d81d      	bhi.n	8009b1e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009af4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009af8:	d0ec      	beq.n	8009ad4 <USB_HC_Halt+0x1e6>
 8009afa:	e011      	b.n	8009b20 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	0151      	lsls	r1, r2, #5
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	440a      	add	r2, r1
 8009b12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	e000      	b.n	8009b20 <USB_HC_Halt+0x232>
          break;
 8009b1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3724      	adds	r7, #36	@ 0x24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
	...

08009b30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009b40:	78fb      	ldrb	r3, [r7, #3]
 8009b42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009b44:	2301      	movs	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	04da      	lsls	r2, r3, #19
 8009b4c:	4b15      	ldr	r3, [pc, #84]	@ (8009ba4 <USB_DoPing+0x74>)
 8009b4e:	4013      	ands	r3, r2
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	0151      	lsls	r1, r2, #5
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	440a      	add	r2, r1
 8009b58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009b60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009b78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009b80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	015a      	lsls	r2, r3, #5
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	4413      	add	r3, r2
 8009b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b8e:	461a      	mov	r2, r3
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	371c      	adds	r7, #28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	1ff80000 	.word	0x1ff80000

08009ba8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b088      	sub	sp, #32
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7fe ff8c 	bl	8008ada <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bc2:	2110      	movs	r1, #16
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7fe ffe5 	bl	8008b94 <USB_FlushTxFifo>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff f80f 	bl	8008bf8 <USB_FlushRxFifo>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009be4:	2300      	movs	r3, #0
 8009be6:	61bb      	str	r3, [r7, #24]
 8009be8:	e01f      	b.n	8009c2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c1e:	461a      	mov	r2, r3
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	3301      	adds	r3, #1
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b0f      	cmp	r3, #15
 8009c2e:	d9dc      	bls.n	8009bea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009c30:	2300      	movs	r3, #0
 8009c32:	61bb      	str	r3, [r7, #24]
 8009c34:	e034      	b.n	8009ca0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	015a      	lsls	r2, r3, #5
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009c54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c7c:	d80c      	bhi.n	8009c98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c94:	d0ec      	beq.n	8009c70 <USB_StopHost+0xc8>
 8009c96:	e000      	b.n	8009c9a <USB_StopHost+0xf2>
        break;
 8009c98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	61bb      	str	r3, [r7, #24]
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	2b0f      	cmp	r3, #15
 8009ca4:	d9c7      	bls.n	8009c36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009cac:	461a      	mov	r2, r3
 8009cae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7fe fefb 	bl	8008ab8 <USB_EnableGlobalInt>

  return ret;
 8009cc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3720      	adds	r7, #32
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009ccc:	b590      	push	{r4, r7, lr}
 8009cce:	b089      	sub	sp, #36	@ 0x24
 8009cd0:	af04      	add	r7, sp, #16
 8009cd2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	2102      	movs	r1, #2
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fcd1 	bl	800a682 <USBH_FindInterface>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	2bff      	cmp	r3, #255	@ 0xff
 8009ce8:	d002      	beq.n	8009cf0 <USBH_CDC_InterfaceInit+0x24>
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d901      	bls.n	8009cf4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	e13d      	b.n	8009f70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fca6 	bl	800a64a <USBH_SelectInterface>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009d08:	2302      	movs	r3, #2
 8009d0a:	e131      	b.n	8009f70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009d12:	2050      	movs	r0, #80	@ 0x50
 8009d14:	f006 f8a8 	bl	800fe68 <malloc>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	e11f      	b.n	8009f70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009d30:	2250      	movs	r2, #80	@ 0x50
 8009d32:	2100      	movs	r1, #0
 8009d34:	68b8      	ldr	r0, [r7, #8]
 8009d36:	f006 fb26 	bl	8010386 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	211a      	movs	r1, #26
 8009d40:	fb01 f303 	mul.w	r3, r1, r3
 8009d44:	4413      	add	r3, r2
 8009d46:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b25b      	sxtb	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	da15      	bge.n	8009d7e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	211a      	movs	r1, #26
 8009d58:	fb01 f303 	mul.w	r3, r1, r3
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009d62:	781a      	ldrb	r2, [r3, #0]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	211a      	movs	r1, #26
 8009d6e:	fb01 f303 	mul.w	r3, r1, r3
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009d78:	881a      	ldrh	r2, [r3, #0]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	785b      	ldrb	r3, [r3, #1]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f002 fa18 	bl	800c1ba <USBH_AllocPipe>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	7819      	ldrb	r1, [r3, #0]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	7858      	ldrb	r0, [r3, #1]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	8952      	ldrh	r2, [r2, #10]
 8009daa:	9202      	str	r2, [sp, #8]
 8009dac:	2203      	movs	r2, #3
 8009dae:	9201      	str	r2, [sp, #4]
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	4623      	mov	r3, r4
 8009db4:	4602      	mov	r2, r0
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f002 f9d0 	bl	800c15c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f005 ffc5 	bl	800fd54 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2200      	movs	r2, #0
 8009dce:	210a      	movs	r1, #10
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fc56 	bl	800a682 <USBH_FindInterface>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	2bff      	cmp	r3, #255	@ 0xff
 8009dde:	d002      	beq.n	8009de6 <USBH_CDC_InterfaceInit+0x11a>
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d901      	bls.n	8009dea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009de6:	2302      	movs	r3, #2
 8009de8:	e0c2      	b.n	8009f70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	211a      	movs	r1, #26
 8009df0:	fb01 f303 	mul.w	r3, r1, r3
 8009df4:	4413      	add	r3, r2
 8009df6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	b25b      	sxtb	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da16      	bge.n	8009e30 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	211a      	movs	r1, #26
 8009e08:	fb01 f303 	mul.w	r3, r1, r3
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009e12:	781a      	ldrb	r2, [r3, #0]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	211a      	movs	r1, #26
 8009e1e:	fb01 f303 	mul.w	r3, r1, r3
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009e28:	881a      	ldrh	r2, [r3, #0]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	835a      	strh	r2, [r3, #26]
 8009e2e:	e015      	b.n	8009e5c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e30:	7bfb      	ldrb	r3, [r7, #15]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	211a      	movs	r1, #26
 8009e36:	fb01 f303 	mul.w	r3, r1, r3
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009e40:	781a      	ldrb	r2, [r3, #0]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	211a      	movs	r1, #26
 8009e4c:	fb01 f303 	mul.w	r3, r1, r3
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009e56:	881a      	ldrh	r2, [r3, #0]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	211a      	movs	r1, #26
 8009e62:	fb01 f303 	mul.w	r3, r1, r3
 8009e66:	4413      	add	r3, r2
 8009e68:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	b25b      	sxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	da16      	bge.n	8009ea2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	211a      	movs	r1, #26
 8009e7a:	fb01 f303 	mul.w	r3, r1, r3
 8009e7e:	4413      	add	r3, r2
 8009e80:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009e84:	781a      	ldrb	r2, [r3, #0]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	211a      	movs	r1, #26
 8009e90:	fb01 f303 	mul.w	r3, r1, r3
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009e9a:	881a      	ldrh	r2, [r3, #0]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	835a      	strh	r2, [r3, #26]
 8009ea0:	e015      	b.n	8009ece <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009ea2:	7bfb      	ldrb	r3, [r7, #15]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	211a      	movs	r1, #26
 8009ea8:	fb01 f303 	mul.w	r3, r1, r3
 8009eac:	4413      	add	r3, r2
 8009eae:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	211a      	movs	r1, #26
 8009ebe:	fb01 f303 	mul.w	r3, r1, r3
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009ec8:	881a      	ldrh	r2, [r3, #0]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	7b9b      	ldrb	r3, [r3, #14]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f002 f970 	bl	800c1ba <USBH_AllocPipe>
 8009eda:	4603      	mov	r3, r0
 8009edc:	461a      	mov	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	7bdb      	ldrb	r3, [r3, #15]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f002 f966 	bl	800c1ba <USBH_AllocPipe>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	7b59      	ldrb	r1, [r3, #13]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	7b98      	ldrb	r0, [r3, #14]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	8b12      	ldrh	r2, [r2, #24]
 8009f0e:	9202      	str	r2, [sp, #8]
 8009f10:	2202      	movs	r2, #2
 8009f12:	9201      	str	r2, [sp, #4]
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	4623      	mov	r3, r4
 8009f18:	4602      	mov	r2, r0
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f002 f91e 	bl	800c15c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	7b19      	ldrb	r1, [r3, #12]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	7bd8      	ldrb	r0, [r3, #15]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	8b52      	ldrh	r2, [r2, #26]
 8009f38:	9202      	str	r2, [sp, #8]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	9201      	str	r2, [sp, #4]
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	4623      	mov	r3, r4
 8009f42:	4602      	mov	r2, r0
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f002 f909 	bl	800c15c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	7b5b      	ldrb	r3, [r3, #13]
 8009f56:	2200      	movs	r2, #0
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f005 fefa 	bl	800fd54 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	7b1b      	ldrb	r3, [r3, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f005 fef3 	bl	800fd54 <USBH_LL_SetToggle>

  return USBH_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd90      	pop	{r4, r7, pc}

08009f78 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f86:	69db      	ldr	r3, [r3, #28]
 8009f88:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00e      	beq.n	8009fb0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f002 f8fe 	bl	800c19a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f002 f929 	bl	800c1fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	7b1b      	ldrb	r3, [r3, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00e      	beq.n	8009fd6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	7b1b      	ldrb	r3, [r3, #12]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f002 f8eb 	bl	800c19a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	7b1b      	ldrb	r3, [r3, #12]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f002 f916 	bl	800c1fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	7b5b      	ldrb	r3, [r3, #13]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00e      	beq.n	8009ffc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	7b5b      	ldrb	r3, [r3, #13]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f002 f8d8 	bl	800c19a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	7b5b      	ldrb	r3, [r3, #13]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f002 f903 	bl	800c1fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	4618      	mov	r0, r3
 800a012:	f005 ff31 	bl	800fe78 <free>
    phost->pActiveClass->pData = 0U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a01c:	2200      	movs	r2, #0
 800a01e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3340      	adds	r3, #64	@ 0x40
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f8b1 	bl	800a1aa <GetLineCoding>
 800a048:	4603      	mov	r3, r0
 800a04a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d105      	bne.n	800a05e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a058:	2102      	movs	r1, #2
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a05e:	7afb      	ldrb	r3, [r7, #11]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a070:	2301      	movs	r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d877      	bhi.n	800a17c <USBH_CDC_Process+0x114>
 800a08c:	a201      	add	r2, pc, #4	@ (adr r2, 800a094 <USBH_CDC_Process+0x2c>)
 800a08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a092:	bf00      	nop
 800a094:	0800a0a9 	.word	0x0800a0a9
 800a098:	0800a0af 	.word	0x0800a0af
 800a09c:	0800a0df 	.word	0x0800a0df
 800a0a0:	0800a153 	.word	0x0800a153
 800a0a4:	0800a161 	.word	0x0800a161
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ac:	e06d      	b.n	800a18a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f897 	bl	800a1e8 <SetLineCoding>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d104      	bne.n	800a0ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a0cc:	e058      	b.n	800a180 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d055      	beq.n	800a180 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2204      	movs	r2, #4
 800a0d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a0dc:	e050      	b.n	800a180 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	3340      	adds	r3, #64	@ 0x40
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f860 	bl	800a1aa <GetLineCoding>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d126      	bne.n	800a142 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a106:	791b      	ldrb	r3, [r3, #4]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d13b      	bne.n	800a184 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a116:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a118:	429a      	cmp	r2, r3
 800a11a:	d133      	bne.n	800a184 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a126:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a128:	429a      	cmp	r2, r3
 800a12a:	d12b      	bne.n	800a184 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a134:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a136:	429a      	cmp	r2, r3
 800a138:	d124      	bne.n	800a184 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f982 	bl	800a444 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a140:	e020      	b.n	800a184 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d01d      	beq.n	800a184 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2204      	movs	r2, #4
 800a14c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a150:	e018      	b.n	800a184 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f867 	bl	800a226 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f8f6 	bl	800a34a <CDC_ProcessReception>
      break;
 800a15e:	e014      	b.n	800a18a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a160:	2100      	movs	r1, #0
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 f984 	bl	800b470 <USBH_ClrFeature>
 800a168:	4603      	mov	r3, r0
 800a16a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a16c:	7bbb      	ldrb	r3, [r7, #14]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10a      	bne.n	800a188 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800a17a:	e005      	b.n	800a188 <USBH_CDC_Process+0x120>

    default:
      break;
 800a17c:	bf00      	nop
 800a17e:	e004      	b.n	800a18a <USBH_CDC_Process+0x122>
      break;
 800a180:	bf00      	nop
 800a182:	e002      	b.n	800a18a <USBH_CDC_Process+0x122>
      break;
 800a184:	bf00      	nop
 800a186:	e000      	b.n	800a18a <USBH_CDC_Process+0x122>
      break;
 800a188:	bf00      	nop

  }

  return status;
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	22a1      	movs	r2, #161	@ 0xa1
 800a1b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2221      	movs	r2, #33	@ 0x21
 800a1be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2207      	movs	r2, #7
 800a1d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2207      	movs	r2, #7
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f001 fc7e 	bl	800bada <USBH_CtlReq>
 800a1de:	4603      	mov	r3, r0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2221      	movs	r2, #33	@ 0x21
 800a1f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2207      	movs	r2, #7
 800a20e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2207      	movs	r2, #7
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f001 fc5f 	bl	800bada <USBH_CtlReq>
 800a21c:	4603      	mov	r3, r0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b086      	sub	sp, #24
 800a22a:	af02      	add	r7, sp, #8
 800a22c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a234:	69db      	ldr	r3, [r3, #28]
 800a236:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a238:	2300      	movs	r3, #0
 800a23a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a242:	2b01      	cmp	r3, #1
 800a244:	d002      	beq.n	800a24c <CDC_ProcessTransmission+0x26>
 800a246:	2b02      	cmp	r3, #2
 800a248:	d023      	beq.n	800a292 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a24a:	e07a      	b.n	800a342 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	8b12      	ldrh	r2, [r2, #24]
 800a254:	4293      	cmp	r3, r2
 800a256:	d90b      	bls.n	800a270 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	69d9      	ldr	r1, [r3, #28]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	8b1a      	ldrh	r2, [r3, #24]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	7b5b      	ldrb	r3, [r3, #13]
 800a264:	2001      	movs	r0, #1
 800a266:	9000      	str	r0, [sp, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 ff34 	bl	800c0d6 <USBH_BulkSendData>
 800a26e:	e00b      	b.n	800a288 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a278:	b29a      	uxth	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	7b5b      	ldrb	r3, [r3, #13]
 800a27e:	2001      	movs	r0, #1
 800a280:	9000      	str	r0, [sp, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f001 ff27 	bl	800c0d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a290:	e057      	b.n	800a342 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	7b5b      	ldrb	r3, [r3, #13]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f005 fd31 	bl	800fd00 <USBH_LL_GetURBState>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a2a2:	7afb      	ldrb	r3, [r7, #11]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d136      	bne.n	800a316 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	8b12      	ldrh	r2, [r2, #24]
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d90e      	bls.n	800a2d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	8b12      	ldrh	r2, [r2, #24]
 800a2bc:	1a9a      	subs	r2, r3, r2
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	8b12      	ldrh	r2, [r2, #24]
 800a2ca:	441a      	add	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	61da      	str	r2, [r3, #28]
 800a2d0:	e002      	b.n	800a2d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d004      	beq.n	800a2ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800a2e8:	e006      	b.n	800a2f8 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f892 	bl	800a41c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2204      	movs	r2, #4
 800a2fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a30c:	2300      	movs	r3, #0
 800a30e:	2200      	movs	r2, #0
 800a310:	f002 f9a4 	bl	800c65c <osMessageQueuePut>
      break;
 800a314:	e014      	b.n	800a340 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a316:	7afb      	ldrb	r3, [r7, #11]
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d111      	bne.n	800a340 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2204      	movs	r2, #4
 800a328:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a338:	2300      	movs	r3, #0
 800a33a:	2200      	movs	r2, #0
 800a33c:	f002 f98e 	bl	800c65c <osMessageQueuePut>
      break;
 800a340:	bf00      	nop
  }
}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b086      	sub	sp, #24
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a358:	69db      	ldr	r3, [r3, #28]
 800a35a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a366:	2b03      	cmp	r3, #3
 800a368:	d002      	beq.n	800a370 <CDC_ProcessReception+0x26>
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d00e      	beq.n	800a38c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a36e:	e051      	b.n	800a414 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	6a19      	ldr	r1, [r3, #32]
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	8b5a      	ldrh	r2, [r3, #26]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	7b1b      	ldrb	r3, [r3, #12]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f001 fecf 	bl	800c120 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2204      	movs	r2, #4
 800a386:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a38a:	e043      	b.n	800a414 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	7b1b      	ldrb	r3, [r3, #12]
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f005 fcb4 	bl	800fd00 <USBH_LL_GetURBState>
 800a398:	4603      	mov	r3, r0
 800a39a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a39c:	7cfb      	ldrb	r3, [r7, #19]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d137      	bne.n	800a412 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	7b1b      	ldrb	r3, [r3, #12]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f005 fc17 	bl	800fbdc <USBH_LL_GetLastXferSize>
 800a3ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d016      	beq.n	800a3e8 <CDC_ProcessReception+0x9e>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	8b5b      	ldrh	r3, [r3, #26]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d110      	bne.n	800a3e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	1ad2      	subs	r2, r2, r3
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	6a1a      	ldr	r2, [r3, #32]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	441a      	add	r2, r3
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2203      	movs	r2, #3
 800a3e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800a3e6:	e006      	b.n	800a3f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f81d 	bl	800a430 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2204      	movs	r2, #4
 800a3fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a40a:	2300      	movs	r3, #0
 800a40c:	2200      	movs	r2, #0
 800a40e:	f002 f925 	bl	800c65c <osMessageQueuePut>
      break;
 800a412:	bf00      	nop
  }
}
 800a414:	bf00      	nop
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	4613      	mov	r3, r2
 800a464:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a46c:	2302      	movs	r3, #2
 800a46e:	e044      	b.n	800a4fa <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	79fa      	ldrb	r2, [r7, #7]
 800a474:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 f841 	bl	800a510 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d003      	beq.n	800a4bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2104      	movs	r1, #4
 800a4c0:	2010      	movs	r0, #16
 800a4c2:	f002 f857 	bl	800c574 <osMessageQueueNew>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a504 <USBH_Init+0xac>)
 800a4d0:	4a0d      	ldr	r2, [pc, #52]	@ (800a508 <USBH_Init+0xb0>)
 800a4d2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a4d4:	4b0b      	ldr	r3, [pc, #44]	@ (800a504 <USBH_Init+0xac>)
 800a4d6:	2280      	movs	r2, #128	@ 0x80
 800a4d8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a4da:	4b0a      	ldr	r3, [pc, #40]	@ (800a504 <USBH_Init+0xac>)
 800a4dc:	2218      	movs	r2, #24
 800a4de:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a4e0:	4a08      	ldr	r2, [pc, #32]	@ (800a504 <USBH_Init+0xac>)
 800a4e2:	68f9      	ldr	r1, [r7, #12]
 800a4e4:	4809      	ldr	r0, [pc, #36]	@ (800a50c <USBH_Init+0xb4>)
 800a4e6:	f001 ff59 	bl	800c39c <osThreadNew>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f005 fabe 	bl	800fa74 <USBH_LL_Init>

  return USBH_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	200003a0 	.word	0x200003a0
 800a508:	080113b8 	.word	0x080113b8
 800a50c:	0800b1c1 	.word	0x0800b1c1

0800a510 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a51c:	2300      	movs	r3, #0
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	e009      	b.n	800a536 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	33e0      	adds	r3, #224	@ 0xe0
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	2200      	movs	r2, #0
 800a52e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3301      	adds	r3, #1
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b0f      	cmp	r3, #15
 800a53a:	d9f2      	bls.n	800a522 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a53c:	2300      	movs	r3, #0
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	e009      	b.n	800a556 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	3301      	adds	r3, #1
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a55c:	d3f1      	bcc.n	800a542 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2240      	movs	r2, #64	@ 0x40
 800a582:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	331c      	adds	r3, #28
 800a5ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f005 fee6 	bl	8010386 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a5c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f005 fedd 	bl	8010386 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a5d2:	2212      	movs	r2, #18
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f005 fed5 	bl	8010386 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a5e2:	223e      	movs	r2, #62	@ 0x3e
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f005 fecd 	bl	8010386 <memset>

  return USBH_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b085      	sub	sp, #20
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d016      	beq.n	800a638 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10e      	bne.n	800a632 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a61a:	1c59      	adds	r1, r3, #1
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	33de      	adds	r3, #222	@ 0xde
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
 800a630:	e004      	b.n	800a63c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a632:	2302      	movs	r3, #2
 800a634:	73fb      	strb	r3, [r7, #15]
 800a636:	e001      	b.n	800a63c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a638:	2302      	movs	r3, #2
 800a63a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a64a:	b480      	push	{r7}
 800a64c:	b085      	sub	sp, #20
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a660:	78fa      	ldrb	r2, [r7, #3]
 800a662:	429a      	cmp	r2, r3
 800a664:	d204      	bcs.n	800a670 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	78fa      	ldrb	r2, [r7, #3]
 800a66a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a66e:	e001      	b.n	800a674 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a670:	2302      	movs	r3, #2
 800a672:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a674:	7bfb      	ldrb	r3, [r7, #15]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a682:	b480      	push	{r7}
 800a684:	b087      	sub	sp, #28
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	4608      	mov	r0, r1
 800a68c:	4611      	mov	r1, r2
 800a68e:	461a      	mov	r2, r3
 800a690:	4603      	mov	r3, r0
 800a692:	70fb      	strb	r3, [r7, #3]
 800a694:	460b      	mov	r3, r1
 800a696:	70bb      	strb	r3, [r7, #2]
 800a698:	4613      	mov	r3, r2
 800a69a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a6aa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a6ac:	e025      	b.n	800a6fa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	221a      	movs	r2, #26
 800a6b2:	fb02 f303 	mul.w	r3, r2, r3
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	3302      	adds	r3, #2
 800a6be:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	795b      	ldrb	r3, [r3, #5]
 800a6c4:	78fa      	ldrb	r2, [r7, #3]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d002      	beq.n	800a6d0 <USBH_FindInterface+0x4e>
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	2bff      	cmp	r3, #255	@ 0xff
 800a6ce:	d111      	bne.n	800a6f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a6d4:	78ba      	ldrb	r2, [r7, #2]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d002      	beq.n	800a6e0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a6da:	78bb      	ldrb	r3, [r7, #2]
 800a6dc:	2bff      	cmp	r3, #255	@ 0xff
 800a6de:	d109      	bne.n	800a6f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a6e4:	787a      	ldrb	r2, [r7, #1]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d002      	beq.n	800a6f0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a6ea:	787b      	ldrb	r3, [r7, #1]
 800a6ec:	2bff      	cmp	r3, #255	@ 0xff
 800a6ee:	d101      	bne.n	800a6f4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	e006      	b.n	800a702 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a6fa:	7dfb      	ldrb	r3, [r7, #23]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d9d6      	bls.n	800a6ae <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a700:	23ff      	movs	r3, #255	@ 0xff
}
 800a702:	4618      	mov	r0, r3
 800a704:	371c      	adds	r7, #28
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f005 f9e8 	bl	800faec <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a71c:	2101      	movs	r1, #1
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f005 fb01 	bl	800fd26 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af04      	add	r7, sp, #16
 800a736:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a738:	2302      	movs	r3, #2
 800a73a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d102      	bne.n	800a752 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2203      	movs	r2, #3
 800a750:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b0b      	cmp	r3, #11
 800a75a:	f200 8244 	bhi.w	800abe6 <USBH_Process+0x4b6>
 800a75e:	a201      	add	r2, pc, #4	@ (adr r2, 800a764 <USBH_Process+0x34>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a795 	.word	0x0800a795
 800a768:	0800a7e3 	.word	0x0800a7e3
 800a76c:	0800a867 	.word	0x0800a867
 800a770:	0800ab65 	.word	0x0800ab65
 800a774:	0800abe7 	.word	0x0800abe7
 800a778:	0800a923 	.word	0x0800a923
 800a77c:	0800aaef 	.word	0x0800aaef
 800a780:	0800a975 	.word	0x0800a975
 800a784:	0800a9b1 	.word	0x0800a9b1
 800a788:	0800a9e9 	.word	0x0800a9e9
 800a78c:	0800aa47 	.word	0x0800aa47
 800a790:	0800ab4d 	.word	0x0800ab4d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 8224 	beq.w	800abea <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a7a8:	20c8      	movs	r0, #200	@ 0xc8
 800a7aa:	f005 fb06 	bl	800fdba <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f005 f9f9 	bl	800fba6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f001 ff3e 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a7e0:	e203      	b.n	800abea <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d107      	bne.n	800a7fc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	e025      	b.n	800a848 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a802:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a806:	d914      	bls.n	800a832 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a80e:	3301      	adds	r3, #1
 800a810:	b2da      	uxtb	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d903      	bls.n	800a82a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	220d      	movs	r2, #13
 800a826:	701a      	strb	r2, [r3, #0]
 800a828:	e00e      	b.n	800a848 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	701a      	strb	r2, [r3, #0]
 800a830:	e00a      	b.n	800a848 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a838:	f103 020a 	add.w	r2, r3, #10
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a842:	200a      	movs	r0, #10
 800a844:	f005 fab9 	bl	800fdba <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a85c:	2300      	movs	r3, #0
 800a85e:	2200      	movs	r2, #0
 800a860:	f001 fefc 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      break;
 800a864:	e1c8      	b.n	800abf8 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d005      	beq.n	800a87c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a876:	2104      	movs	r1, #4
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a87c:	2064      	movs	r0, #100	@ 0x64
 800a87e:	f005 fa9c 	bl	800fdba <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f005 f968 	bl	800fb58 <USBH_LL_GetSpeed>
 800a888:	4603      	mov	r3, r0
 800a88a:	461a      	mov	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2205      	movs	r2, #5
 800a896:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a898:	2100      	movs	r1, #0
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f001 fc8d 	bl	800c1ba <USBH_AllocPipe>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a8a8:	2180      	movs	r1, #128	@ 0x80
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 fc85 	bl	800c1ba <USBH_AllocPipe>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	7919      	ldrb	r1, [r3, #4]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a8cc:	9202      	str	r2, [sp, #8]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	9201      	str	r2, [sp, #4]
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2280      	movs	r2, #128	@ 0x80
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 fc3f 	bl	800c15c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	7959      	ldrb	r1, [r3, #5]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a8f2:	9202      	str	r2, [sp, #8]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	9201      	str	r2, [sp, #4]
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f001 fc2c 	bl	800c15c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a918:	2300      	movs	r3, #0
 800a91a:	2200      	movs	r2, #0
 800a91c:	f001 fe9e 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      break;
 800a920:	e16a      	b.n	800abf8 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f96e 	bl	800ac04 <USBH_HandleEnum>
 800a928:	4603      	mov	r3, r0
 800a92a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b00      	cmp	r3, #0
 800a932:	f040 815c 	bne.w	800abee <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a944:	2b01      	cmp	r3, #1
 800a946:	d103      	bne.n	800a950 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2208      	movs	r2, #8
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	e002      	b.n	800a956 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2207      	movs	r2, #7
 800a954:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2205      	movs	r2, #5
 800a95a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a96a:	2300      	movs	r3, #0
 800a96c:	2200      	movs	r2, #0
 800a96e:	f001 fe75 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a972:	e13c      	b.n	800abee <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 8139 	beq.w	800abf2 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a986:	2101      	movs	r1, #1
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2208      	movs	r2, #8
 800a990:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2205      	movs	r2, #5
 800a996:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f001 fe57 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a9ae:	e120      	b.n	800abf2 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fd12 	bl	800b3e2 <USBH_SetCfg>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d102      	bne.n	800a9ca <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2209      	movs	r2, #9
 800a9c8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f001 fe3b 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      break;
 800a9e6:	e107      	b.n	800abf8 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a9ee:	f003 0320 	and.w	r3, r3, #32
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d015      	beq.n	800aa22 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fd15 	bl	800b428 <USBH_SetFeature>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d103      	bne.n	800aa12 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	e00a      	b.n	800aa28 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800aa12:	7bbb      	ldrb	r3, [r7, #14]
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d106      	bne.n	800aa28 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	220a      	movs	r2, #10
 800aa1e:	701a      	strb	r2, [r3, #0]
 800aa20:	e002      	b.n	800aa28 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	220a      	movs	r2, #10
 800aa26:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f001 fe0c 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      break;
 800aa44:	e0d8      	b.n	800abf8 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d03f      	beq.n	800aad0 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
 800aa5c:	e016      	b.n	800aa8c <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aa5e:	7bfa      	ldrb	r2, [r7, #15]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	32de      	adds	r2, #222	@ 0xde
 800aa64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa68:	791a      	ldrb	r2, [r3, #4]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d108      	bne.n	800aa86 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aa74:	7bfa      	ldrb	r2, [r7, #15]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	32de      	adds	r2, #222	@ 0xde
 800aa7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800aa84:	e005      	b.n	800aa92 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	73fb      	strb	r3, [r7, #15]
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0e5      	beq.n	800aa5e <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d016      	beq.n	800aaca <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	4798      	blx	r3
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d109      	bne.n	800aac2 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2206      	movs	r2, #6
 800aab2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aaba:	2103      	movs	r1, #3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	4798      	blx	r3
 800aac0:	e006      	b.n	800aad0 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	220d      	movs	r2, #13
 800aac6:	701a      	strb	r2, [r3, #0]
 800aac8:	e002      	b.n	800aad0 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	220d      	movs	r2, #13
 800aace:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2205      	movs	r2, #5
 800aad4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800aae4:	2300      	movs	r3, #0
 800aae6:	2200      	movs	r2, #0
 800aae8:	f001 fdb8 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      break;
 800aaec:	e084      	b.n	800abf8 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d017      	beq.n	800ab28 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	4798      	blx	r3
 800ab04:	4603      	mov	r3, r0
 800ab06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d103      	bne.n	800ab18 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	220b      	movs	r2, #11
 800ab14:	701a      	strb	r2, [r3, #0]
 800ab16:	e00a      	b.n	800ab2e <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d106      	bne.n	800ab2e <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	220d      	movs	r2, #13
 800ab24:	701a      	strb	r2, [r3, #0]
 800ab26:	e002      	b.n	800ab2e <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	220d      	movs	r2, #13
 800ab2c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2205      	movs	r2, #5
 800ab32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ab42:	2300      	movs	r3, #0
 800ab44:	2200      	movs	r2, #0
 800ab46:	f001 fd89 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      break;
 800ab4a:	e055      	b.n	800abf8 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d04f      	beq.n	800abf6 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	4798      	blx	r3
      }
      break;
 800ab62:	e048      	b.n	800abf6 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff fccf 	bl	800a510 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d009      	beq.n	800ab90 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d005      	beq.n	800aba6 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aba0:	2105      	movs	r1, #5
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d107      	bne.n	800abc2 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff fda7 	bl	800a70e <USBH_Start>
 800abc0:	e002      	b.n	800abc8 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f004 ff92 	bl	800faec <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800abdc:	2300      	movs	r3, #0
 800abde:	2200      	movs	r2, #0
 800abe0:	f001 fd3c 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      break;
 800abe4:	e008      	b.n	800abf8 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800abe6:	bf00      	nop
 800abe8:	e006      	b.n	800abf8 <USBH_Process+0x4c8>
      break;
 800abea:	bf00      	nop
 800abec:	e004      	b.n	800abf8 <USBH_Process+0x4c8>
      break;
 800abee:	bf00      	nop
 800abf0:	e002      	b.n	800abf8 <USBH_Process+0x4c8>
    break;
 800abf2:	bf00      	nop
 800abf4:	e000      	b.n	800abf8 <USBH_Process+0x4c8>
      break;
 800abf6:	bf00      	nop
  }
  return USBH_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop

0800ac04 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af04      	add	r7, sp, #16
 800ac0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	785b      	ldrb	r3, [r3, #1]
 800ac18:	2b07      	cmp	r3, #7
 800ac1a:	f200 8204 	bhi.w	800b026 <USBH_HandleEnum+0x422>
 800ac1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac24 <USBH_HandleEnum+0x20>)
 800ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac24:	0800ac45 	.word	0x0800ac45
 800ac28:	0800acff 	.word	0x0800acff
 800ac2c:	0800ad69 	.word	0x0800ad69
 800ac30:	0800adf3 	.word	0x0800adf3
 800ac34:	0800ae5d 	.word	0x0800ae5d
 800ac38:	0800aecd 	.word	0x0800aecd
 800ac3c:	0800af69 	.word	0x0800af69
 800ac40:	0800afe7 	.word	0x0800afe7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ac44:	2108      	movs	r1, #8
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fae8 	bl	800b21c <USBH_Get_DevDesc>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d12e      	bne.n	800acb4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7919      	ldrb	r1, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac7a:	9202      	str	r2, [sp, #8]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	9201      	str	r2, [sp, #4]
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4603      	mov	r3, r0
 800ac84:	2280      	movs	r2, #128	@ 0x80
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f001 fa68 	bl	800c15c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	7959      	ldrb	r1, [r3, #5]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aca0:	9202      	str	r2, [sp, #8]
 800aca2:	2200      	movs	r2, #0
 800aca4:	9201      	str	r2, [sp, #4]
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	4603      	mov	r3, r0
 800acaa:	2200      	movs	r2, #0
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f001 fa55 	bl	800c15c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800acb2:	e1ba      	b.n	800b02a <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	f040 81b7 	bne.w	800b02a <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800acc2:	3301      	adds	r3, #1
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d903      	bls.n	800acde <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	220d      	movs	r2, #13
 800acda:	701a      	strb	r2, [r3, #0]
      break;
 800acdc:	e1a5      	b.n	800b02a <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	795b      	ldrb	r3, [r3, #5]
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f001 fa89 	bl	800c1fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	791b      	ldrb	r3, [r3, #4]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f001 fa83 	bl	800c1fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	701a      	strb	r2, [r3, #0]
      break;
 800acfc:	e195      	b.n	800b02a <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800acfe:	2112      	movs	r1, #18
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fa8b 	bl	800b21c <USBH_Get_DevDesc>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad0a:	7bbb      	ldrb	r3, [r7, #14]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d103      	bne.n	800ad18 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2202      	movs	r2, #2
 800ad14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad16:	e18a      	b.n	800b02e <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	f040 8187 	bne.w	800b02e <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ad26:	3301      	adds	r3, #1
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d903      	bls.n	800ad42 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	220d      	movs	r2, #13
 800ad3e:	701a      	strb	r2, [r3, #0]
      break;
 800ad40:	e175      	b.n	800b02e <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	795b      	ldrb	r3, [r3, #5]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f001 fa57 	bl	800c1fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	791b      	ldrb	r3, [r3, #4]
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f001 fa51 	bl	800c1fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	701a      	strb	r2, [r3, #0]
      break;
 800ad66:	e162      	b.n	800b02e <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ad68:	2101      	movs	r1, #1
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fb15 	bl	800b39a <USBH_SetAddress>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d130      	bne.n	800addc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800ad7a:	2002      	movs	r0, #2
 800ad7c:	f005 f81d 	bl	800fdba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2203      	movs	r2, #3
 800ad8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	7919      	ldrb	r1, [r3, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ada2:	9202      	str	r2, [sp, #8]
 800ada4:	2200      	movs	r2, #0
 800ada6:	9201      	str	r2, [sp, #4]
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	4603      	mov	r3, r0
 800adac:	2280      	movs	r2, #128	@ 0x80
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f001 f9d4 	bl	800c15c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	7959      	ldrb	r1, [r3, #5]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adc8:	9202      	str	r2, [sp, #8]
 800adca:	2200      	movs	r2, #0
 800adcc:	9201      	str	r2, [sp, #4]
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	4603      	mov	r3, r0
 800add2:	2200      	movs	r2, #0
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 f9c1 	bl	800c15c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800adda:	e12a      	b.n	800b032 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	f040 8127 	bne.w	800b032 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	220d      	movs	r2, #13
 800ade8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	705a      	strb	r2, [r3, #1]
      break;
 800adf0:	e11f      	b.n	800b032 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800adf2:	2109      	movs	r1, #9
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fa3d 	bl	800b274 <USBH_Get_CfgDesc>
 800adfa:	4603      	mov	r3, r0
 800adfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d103      	bne.n	800ae0c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2204      	movs	r2, #4
 800ae08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae0a:	e114      	b.n	800b036 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	2b03      	cmp	r3, #3
 800ae10:	f040 8111 	bne.w	800b036 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d903      	bls.n	800ae36 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	220d      	movs	r2, #13
 800ae32:	701a      	strb	r2, [r3, #0]
      break;
 800ae34:	e0ff      	b.n	800b036 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	795b      	ldrb	r3, [r3, #5]
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f001 f9dd 	bl	800c1fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	791b      	ldrb	r3, [r3, #4]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f001 f9d7 	bl	800c1fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
      break;
 800ae5a:	e0ec      	b.n	800b036 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fa05 	bl	800b274 <USBH_Get_CfgDesc>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d103      	bne.n	800ae7c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2205      	movs	r2, #5
 800ae78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae7a:	e0de      	b.n	800b03a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	f040 80db 	bne.w	800b03a <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d903      	bls.n	800aea6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	220d      	movs	r2, #13
 800aea2:	701a      	strb	r2, [r3, #0]
      break;
 800aea4:	e0c9      	b.n	800b03a <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	795b      	ldrb	r3, [r3, #5]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 f9a5 	bl	800c1fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	791b      	ldrb	r3, [r3, #4]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f001 f99f 	bl	800c1fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	701a      	strb	r2, [r3, #0]
      break;
 800aeca:	e0b6      	b.n	800b03a <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d036      	beq.n	800af44 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aee2:	23ff      	movs	r3, #255	@ 0xff
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f9ef 	bl	800b2c8 <USBH_Get_StringDesc>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d111      	bne.n	800af18 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2206      	movs	r2, #6
 800aef8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2205      	movs	r2, #5
 800aefe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800af0e:	2300      	movs	r3, #0
 800af10:	2200      	movs	r2, #0
 800af12:	f001 fba3 	bl	800c65c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800af16:	e092      	b.n	800b03e <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	f040 808f 	bne.w	800b03e <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2206      	movs	r2, #6
 800af24:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2205      	movs	r2, #5
 800af2a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800af3a:	2300      	movs	r3, #0
 800af3c:	2200      	movs	r2, #0
 800af3e:	f001 fb8d 	bl	800c65c <osMessageQueuePut>
      break;
 800af42:	e07c      	b.n	800b03e <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2206      	movs	r2, #6
 800af48:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2205      	movs	r2, #5
 800af4e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800af5e:	2300      	movs	r3, #0
 800af60:	2200      	movs	r2, #0
 800af62:	f001 fb7b 	bl	800c65c <osMessageQueuePut>
      break;
 800af66:	e06a      	b.n	800b03e <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d027      	beq.n	800afc2 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af7e:	23ff      	movs	r3, #255	@ 0xff
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f9a1 	bl	800b2c8 <USBH_Get_StringDesc>
 800af86:	4603      	mov	r3, r0
 800af88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2207      	movs	r2, #7
 800af94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800af96:	e054      	b.n	800b042 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af98:	7bbb      	ldrb	r3, [r7, #14]
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d151      	bne.n	800b042 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2207      	movs	r2, #7
 800afa2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2205      	movs	r2, #5
 800afa8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800afb8:	2300      	movs	r3, #0
 800afba:	2200      	movs	r2, #0
 800afbc:	f001 fb4e 	bl	800c65c <osMessageQueuePut>
      break;
 800afc0:	e03f      	b.n	800b042 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2207      	movs	r2, #7
 800afc6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2205      	movs	r2, #5
 800afcc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800afdc:	2300      	movs	r3, #0
 800afde:	2200      	movs	r2, #0
 800afe0:	f001 fb3c 	bl	800c65c <osMessageQueuePut>
      break;
 800afe4:	e02d      	b.n	800b042 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800afec:	2b00      	cmp	r3, #0
 800afee:	d017      	beq.n	800b020 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800affc:	23ff      	movs	r3, #255	@ 0xff
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f962 	bl	800b2c8 <USBH_Get_StringDesc>
 800b004:	4603      	mov	r3, r0
 800b006:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d102      	bne.n	800b014 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b012:	e018      	b.n	800b046 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	2b03      	cmp	r3, #3
 800b018:	d115      	bne.n	800b046 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	73fb      	strb	r3, [r7, #15]
      break;
 800b01e:	e012      	b.n	800b046 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]
      break;
 800b024:	e00f      	b.n	800b046 <USBH_HandleEnum+0x442>

    default:
      break;
 800b026:	bf00      	nop
 800b028:	e00e      	b.n	800b048 <USBH_HandleEnum+0x444>
      break;
 800b02a:	bf00      	nop
 800b02c:	e00c      	b.n	800b048 <USBH_HandleEnum+0x444>
      break;
 800b02e:	bf00      	nop
 800b030:	e00a      	b.n	800b048 <USBH_HandleEnum+0x444>
      break;
 800b032:	bf00      	nop
 800b034:	e008      	b.n	800b048 <USBH_HandleEnum+0x444>
      break;
 800b036:	bf00      	nop
 800b038:	e006      	b.n	800b048 <USBH_HandleEnum+0x444>
      break;
 800b03a:	bf00      	nop
 800b03c:	e004      	b.n	800b048 <USBH_HandleEnum+0x444>
      break;
 800b03e:	bf00      	nop
 800b040:	e002      	b.n	800b048 <USBH_HandleEnum+0x444>
      break;
 800b042:	bf00      	nop
 800b044:	e000      	b.n	800b048 <USBH_HandleEnum+0x444>
      break;
 800b046:	bf00      	nop
  }
  return Status;
 800b048:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop

0800b054 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b066:	bf00      	nop
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b080:	1c5a      	adds	r2, r3, #1
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f804 	bl	800b096 <USBH_HandleSof>
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b082      	sub	sp, #8
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b0b      	cmp	r3, #11
 800b0a6:	d10a      	bne.n	800b0be <USBH_HandleSof+0x28>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	4798      	blx	r3
  }
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f001 fab5 	bl	800c65c <osMessageQueuePut>
#endif
#endif

  return;
 800b0f2:	bf00      	nop
}
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800b10a:	bf00      	nop
}
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b082      	sub	sp, #8
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b14a:	2300      	movs	r3, #0
 800b14c:	2200      	movs	r2, #0
 800b14e:	f001 fa85 	bl	800c65c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f004 fcd0 	bl	800fb22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	791b      	ldrb	r3, [r3, #4]
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f001 f837 	bl	800c1fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	795b      	ldrb	r3, [r3, #5]
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 f831 	bl	800c1fc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f001 fa53 	bl	800c65c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3708      	adds	r7, #8
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b1d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f001 fa9f 	bl	800c71c <osMessageQueueGet>
 800b1de:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1f0      	bne.n	800b1c8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff faa2 	bl	800a730 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b1ec:	e7ec      	b.n	800b1c8 <USBH_Process_OS+0x8>

0800b1ee <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800b20a:	2300      	movs	r3, #0
 800b20c:	2200      	movs	r2, #0
 800b20e:	f001 fa25 	bl	800c65c <osMessageQueuePut>
#endif

  return USBH_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af02      	add	r7, sp, #8
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b228:	887b      	ldrh	r3, [r7, #2]
 800b22a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b22e:	d901      	bls.n	800b234 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b230:	2303      	movs	r3, #3
 800b232:	e01b      	b.n	800b26c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b23a:	887b      	ldrh	r3, [r7, #2]
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	4613      	mov	r3, r2
 800b240:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b244:	2100      	movs	r1, #0
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f872 	bl	800b330 <USBH_GetDescriptor>
 800b24c:	4603      	mov	r3, r0
 800b24e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d109      	bne.n	800b26a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b25c:	887a      	ldrh	r2, [r7, #2]
 800b25e:	4619      	mov	r1, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f929 	bl	800b4b8 <USBH_ParseDevDesc>
 800b266:	4603      	mov	r3, r0
 800b268:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af02      	add	r7, sp, #8
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	331c      	adds	r3, #28
 800b284:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b286:	887b      	ldrh	r3, [r7, #2]
 800b288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b28c:	d901      	bls.n	800b292 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b28e:	2303      	movs	r3, #3
 800b290:	e016      	b.n	800b2c0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b292:	887b      	ldrh	r3, [r7, #2]
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b29c:	2100      	movs	r1, #0
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f846 	bl	800b330 <USBH_GetDescriptor>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d107      	bne.n	800b2be <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b2ae:	887b      	ldrh	r3, [r7, #2]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	68b9      	ldr	r1, [r7, #8]
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f9af 	bl	800b618 <USBH_ParseCfgDesc>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af02      	add	r7, sp, #8
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	607a      	str	r2, [r7, #4]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	72fb      	strb	r3, [r7, #11]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b2dc:	893b      	ldrh	r3, [r7, #8]
 800b2de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2e2:	d802      	bhi.n	800b2ea <USBH_Get_StringDesc+0x22>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e01c      	b.n	800b328 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b2ee:	7afb      	ldrb	r3, [r7, #11]
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b2f6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b2fe:	893b      	ldrh	r3, [r7, #8]
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	460b      	mov	r3, r1
 800b304:	2100      	movs	r1, #0
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f000 f812 	bl	800b330 <USBH_GetDescriptor>
 800b30c:	4603      	mov	r3, r0
 800b30e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b310:	7dfb      	ldrb	r3, [r7, #23]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d107      	bne.n	800b326 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b31c:	893a      	ldrh	r2, [r7, #8]
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	4618      	mov	r0, r3
 800b322:	f000 fb8d 	bl	800ba40 <USBH_ParseStringDesc>
  }

  return status;
 800b326:	7dfb      	ldrb	r3, [r7, #23]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3718      	adds	r7, #24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	607b      	str	r3, [r7, #4]
 800b33a:	460b      	mov	r3, r1
 800b33c:	72fb      	strb	r3, [r7, #11]
 800b33e:	4613      	mov	r3, r2
 800b340:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	789b      	ldrb	r3, [r3, #2]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d11c      	bne.n	800b384 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b34a:	7afb      	ldrb	r3, [r7, #11]
 800b34c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b350:	b2da      	uxtb	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2206      	movs	r2, #6
 800b35a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	893a      	ldrh	r2, [r7, #8]
 800b360:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b362:	893b      	ldrh	r3, [r7, #8]
 800b364:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b368:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b36c:	d104      	bne.n	800b378 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f240 4209 	movw	r2, #1033	@ 0x409
 800b374:	829a      	strh	r2, [r3, #20]
 800b376:	e002      	b.n	800b37e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	8b3a      	ldrh	r2, [r7, #24]
 800b382:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b384:	8b3b      	ldrh	r3, [r7, #24]
 800b386:	461a      	mov	r2, r3
 800b388:	6879      	ldr	r1, [r7, #4]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 fba5 	bl	800bada <USBH_CtlReq>
 800b390:	4603      	mov	r3, r0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b082      	sub	sp, #8
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	789b      	ldrb	r3, [r3, #2]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d10f      	bne.n	800b3ce <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2205      	movs	r2, #5
 800b3b8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fb81 	bl	800bada <USBH_CtlReq>
 800b3d8:	4603      	mov	r3, r0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b082      	sub	sp, #8
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	789b      	ldrb	r3, [r3, #2]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d10e      	bne.n	800b414 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2209      	movs	r2, #9
 800b400:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	887a      	ldrh	r2, [r7, #2]
 800b406:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b414:	2200      	movs	r2, #0
 800b416:	2100      	movs	r1, #0
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fb5e 	bl	800bada <USBH_CtlReq>
 800b41e:	4603      	mov	r3, r0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	460b      	mov	r3, r1
 800b432:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	789b      	ldrb	r3, [r3, #2]
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d10f      	bne.n	800b45c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2203      	movs	r2, #3
 800b446:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b45c:	2200      	movs	r2, #0
 800b45e:	2100      	movs	r1, #0
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fb3a 	bl	800bada <USBH_CtlReq>
 800b466:	4603      	mov	r3, r0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	789b      	ldrb	r3, [r3, #2]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d10f      	bne.n	800b4a4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b496:	78fb      	ldrb	r3, [r7, #3]
 800b498:	b29a      	uxth	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fb16 	bl	800bada <USBH_CtlReq>
 800b4ae:	4603      	mov	r3, r0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b4cc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e094      	b.n	800b606 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	781a      	ldrb	r2, [r3, #0]
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	785a      	ldrb	r2, [r3, #1]
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	3302      	adds	r3, #2
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	3303      	adds	r3, #3
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	021b      	lsls	r3, r3, #8
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	4313      	orrs	r3, r2
 800b500:	b29a      	uxth	r2, r3
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	791a      	ldrb	r2, [r3, #4]
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	795a      	ldrb	r2, [r3, #5]
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	799a      	ldrb	r2, [r3, #6]
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	79da      	ldrb	r2, [r3, #7]
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d004      	beq.n	800b53a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b536:	2b01      	cmp	r3, #1
 800b538:	d11b      	bne.n	800b572 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	79db      	ldrb	r3, [r3, #7]
 800b53e:	2b20      	cmp	r3, #32
 800b540:	dc0f      	bgt.n	800b562 <USBH_ParseDevDesc+0xaa>
 800b542:	2b08      	cmp	r3, #8
 800b544:	db0f      	blt.n	800b566 <USBH_ParseDevDesc+0xae>
 800b546:	3b08      	subs	r3, #8
 800b548:	4a32      	ldr	r2, [pc, #200]	@ (800b614 <USBH_ParseDevDesc+0x15c>)
 800b54a:	fa22 f303 	lsr.w	r3, r2, r3
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	2b00      	cmp	r3, #0
 800b554:	bf14      	ite	ne
 800b556:	2301      	movne	r3, #1
 800b558:	2300      	moveq	r3, #0
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d106      	bne.n	800b56e <USBH_ParseDevDesc+0xb6>
 800b560:	e001      	b.n	800b566 <USBH_ParseDevDesc+0xae>
 800b562:	2b40      	cmp	r3, #64	@ 0x40
 800b564:	d003      	beq.n	800b56e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2208      	movs	r2, #8
 800b56a:	71da      	strb	r2, [r3, #7]
        break;
 800b56c:	e000      	b.n	800b570 <USBH_ParseDevDesc+0xb8>
        break;
 800b56e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b570:	e00e      	b.n	800b590 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d107      	bne.n	800b58c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	79db      	ldrb	r3, [r3, #7]
 800b580:	2b08      	cmp	r3, #8
 800b582:	d005      	beq.n	800b590 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	2208      	movs	r2, #8
 800b588:	71da      	strb	r2, [r3, #7]
 800b58a:	e001      	b.n	800b590 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b58c:	2303      	movs	r3, #3
 800b58e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b590:	88fb      	ldrh	r3, [r7, #6]
 800b592:	2b08      	cmp	r3, #8
 800b594:	d936      	bls.n	800b604 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	3308      	adds	r3, #8
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	461a      	mov	r2, r3
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	3309      	adds	r3, #9
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	330a      	adds	r3, #10
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	330b      	adds	r3, #11
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	021b      	lsls	r3, r3, #8
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	330c      	adds	r3, #12
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	330d      	adds	r3, #13
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	021b      	lsls	r3, r3, #8
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	7b9a      	ldrb	r2, [r3, #14]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	7bda      	ldrb	r2, [r3, #15]
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	7c1a      	ldrb	r2, [r3, #16]
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	7c5a      	ldrb	r2, [r3, #17]
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b604:	7dfb      	ldrb	r3, [r7, #23]
}
 800b606:	4618      	mov	r0, r3
 800b608:	371c      	adds	r7, #28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	01000101 	.word	0x01000101

0800b618 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08c      	sub	sp, #48	@ 0x30
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	4613      	mov	r3, r2
 800b624:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b62c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b634:	2300      	movs	r3, #0
 800b636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b63a:	2300      	movs	r3, #0
 800b63c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b646:	2302      	movs	r3, #2
 800b648:	e0da      	b.n	800b800 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	2b09      	cmp	r3, #9
 800b654:	d002      	beq.n	800b65c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b658:	2209      	movs	r2, #9
 800b65a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	781a      	ldrb	r2, [r3, #0]
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	785a      	ldrb	r2, [r3, #1]
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	3302      	adds	r3, #2
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	3303      	adds	r3, #3
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	021b      	lsls	r3, r3, #8
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	4313      	orrs	r3, r2
 800b680:	b29b      	uxth	r3, r3
 800b682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b686:	bf28      	it	cs
 800b688:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	791a      	ldrb	r2, [r3, #4]
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	795a      	ldrb	r2, [r3, #5]
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	799a      	ldrb	r2, [r3, #6]
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	79da      	ldrb	r2, [r3, #7]
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	7a1a      	ldrb	r2, [r3, #8]
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b6ba:	88fb      	ldrh	r3, [r7, #6]
 800b6bc:	2b09      	cmp	r3, #9
 800b6be:	f240 809d 	bls.w	800b7fc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800b6c2:	2309      	movs	r3, #9
 800b6c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b6ca:	e081      	b.n	800b7d0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b6cc:	f107 0316 	add.w	r3, r7, #22
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6d4:	f000 f9e7 	bl	800baa6 <USBH_GetNextDesc>
 800b6d8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6dc:	785b      	ldrb	r3, [r3, #1]
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	d176      	bne.n	800b7d0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	2b09      	cmp	r3, #9
 800b6e8:	d002      	beq.n	800b6f0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ec:	2209      	movs	r2, #9
 800b6ee:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6f4:	221a      	movs	r2, #26
 800b6f6:	fb02 f303 	mul.w	r3, r2, r3
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	6a3a      	ldr	r2, [r7, #32]
 800b6fe:	4413      	add	r3, r2
 800b700:	3302      	adds	r3, #2
 800b702:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b704:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b706:	69f8      	ldr	r0, [r7, #28]
 800b708:	f000 f87e 	bl	800b808 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b712:	2300      	movs	r3, #0
 800b714:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b716:	e043      	b.n	800b7a0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b718:	f107 0316 	add.w	r3, r7, #22
 800b71c:	4619      	mov	r1, r3
 800b71e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b720:	f000 f9c1 	bl	800baa6 <USBH_GetNextDesc>
 800b724:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b728:	785b      	ldrb	r3, [r3, #1]
 800b72a:	2b05      	cmp	r3, #5
 800b72c:	d138      	bne.n	800b7a0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	795b      	ldrb	r3, [r3, #5]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d113      	bne.n	800b75e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d003      	beq.n	800b746 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	799b      	ldrb	r3, [r3, #6]
 800b742:	2b03      	cmp	r3, #3
 800b744:	d10b      	bne.n	800b75e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	79db      	ldrb	r3, [r3, #7]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10b      	bne.n	800b766 <USBH_ParseCfgDesc+0x14e>
 800b74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	2b09      	cmp	r3, #9
 800b754:	d007      	beq.n	800b766 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b758:	2209      	movs	r2, #9
 800b75a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b75c:	e003      	b.n	800b766 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b760:	2207      	movs	r2, #7
 800b762:	701a      	strb	r2, [r3, #0]
 800b764:	e000      	b.n	800b768 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b766:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b76c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b770:	3201      	adds	r2, #1
 800b772:	00d2      	lsls	r2, r2, #3
 800b774:	211a      	movs	r1, #26
 800b776:	fb01 f303 	mul.w	r3, r1, r3
 800b77a:	4413      	add	r3, r2
 800b77c:	3308      	adds	r3, #8
 800b77e:	6a3a      	ldr	r2, [r7, #32]
 800b780:	4413      	add	r3, r2
 800b782:	3304      	adds	r3, #4
 800b784:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b788:	69b9      	ldr	r1, [r7, #24]
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f000 f870 	bl	800b870 <USBH_ParseEPDesc>
 800b790:	4603      	mov	r3, r0
 800b792:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b796:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b79a:	3301      	adds	r3, #1
 800b79c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	791b      	ldrb	r3, [r3, #4]
 800b7a4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d204      	bcs.n	800b7b6 <USBH_ParseCfgDesc+0x19e>
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	885a      	ldrh	r2, [r3, #2]
 800b7b0:	8afb      	ldrh	r3, [r7, #22]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d8b0      	bhi.n	800b718 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	791b      	ldrb	r3, [r3, #4]
 800b7ba:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d201      	bcs.n	800b7c6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	e01c      	b.n	800b800 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800b7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d805      	bhi.n	800b7e4 <USBH_ParseCfgDesc+0x1cc>
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	885a      	ldrh	r2, [r3, #2]
 800b7dc:	8afb      	ldrh	r3, [r7, #22]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	f63f af74 	bhi.w	800b6cc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	791b      	ldrb	r3, [r3, #4]
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	bf28      	it	cs
 800b7ec:	2302      	movcs	r3, #2
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d201      	bcs.n	800b7fc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	e001      	b.n	800b800 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800b7fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b800:	4618      	mov	r0, r3
 800b802:	3730      	adds	r7, #48	@ 0x30
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781a      	ldrb	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	785a      	ldrb	r2, [r3, #1]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	789a      	ldrb	r2, [r3, #2]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	78da      	ldrb	r2, [r3, #3]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	3304      	adds	r3, #4
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2b02      	cmp	r3, #2
 800b83a:	bf28      	it	cs
 800b83c:	2302      	movcs	r3, #2
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	795a      	ldrb	r2, [r3, #5]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	799a      	ldrb	r2, [r3, #6]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	79da      	ldrb	r2, [r3, #7]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	7a1a      	ldrb	r2, [r3, #8]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	721a      	strb	r2, [r3, #8]
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b870:	b480      	push	{r7}
 800b872:	b087      	sub	sp, #28
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	781a      	ldrb	r2, [r3, #0]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	785a      	ldrb	r2, [r3, #1]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	789a      	ldrb	r2, [r3, #2]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	78da      	ldrb	r2, [r3, #3]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3305      	adds	r3, #5
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	021b      	lsls	r3, r3, #8
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	799a      	ldrb	r2, [r3, #6]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	889b      	ldrh	r3, [r3, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d009      	beq.n	800b8de <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b8ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8d2:	d804      	bhi.n	800b8de <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b8d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8dc:	d901      	bls.n	800b8e2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d136      	bne.n	800b95a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	78db      	ldrb	r3, [r3, #3]
 800b8f0:	f003 0303 	and.w	r3, r3, #3
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d108      	bne.n	800b90a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	889b      	ldrh	r3, [r3, #4]
 800b8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b900:	f240 8097 	bls.w	800ba32 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b904:	2303      	movs	r3, #3
 800b906:	75fb      	strb	r3, [r7, #23]
 800b908:	e093      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	78db      	ldrb	r3, [r3, #3]
 800b90e:	f003 0303 	and.w	r3, r3, #3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d107      	bne.n	800b926 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	889b      	ldrh	r3, [r3, #4]
 800b91a:	2b40      	cmp	r3, #64	@ 0x40
 800b91c:	f240 8089 	bls.w	800ba32 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b920:	2303      	movs	r3, #3
 800b922:	75fb      	strb	r3, [r7, #23]
 800b924:	e085      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	78db      	ldrb	r3, [r3, #3]
 800b92a:	f003 0303 	and.w	r3, r3, #3
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d005      	beq.n	800b93e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	78db      	ldrb	r3, [r3, #3]
 800b936:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b93a:	2b03      	cmp	r3, #3
 800b93c:	d10a      	bne.n	800b954 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	799b      	ldrb	r3, [r3, #6]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d003      	beq.n	800b94e <USBH_ParseEPDesc+0xde>
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	799b      	ldrb	r3, [r3, #6]
 800b94a:	2b10      	cmp	r3, #16
 800b94c:	d970      	bls.n	800ba30 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b94e:	2303      	movs	r3, #3
 800b950:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b952:	e06d      	b.n	800ba30 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b954:	2303      	movs	r3, #3
 800b956:	75fb      	strb	r3, [r7, #23]
 800b958:	e06b      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b960:	2b01      	cmp	r3, #1
 800b962:	d13c      	bne.n	800b9de <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	78db      	ldrb	r3, [r3, #3]
 800b968:	f003 0303 	and.w	r3, r3, #3
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d005      	beq.n	800b97c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	78db      	ldrb	r3, [r3, #3]
 800b974:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d106      	bne.n	800b98a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	889b      	ldrh	r3, [r3, #4]
 800b980:	2b40      	cmp	r3, #64	@ 0x40
 800b982:	d956      	bls.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b984:	2303      	movs	r3, #3
 800b986:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b988:	e053      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	78db      	ldrb	r3, [r3, #3]
 800b98e:	f003 0303 	and.w	r3, r3, #3
 800b992:	2b01      	cmp	r3, #1
 800b994:	d10e      	bne.n	800b9b4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	799b      	ldrb	r3, [r3, #6]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d007      	beq.n	800b9ae <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b9a2:	2b10      	cmp	r3, #16
 800b9a4:	d803      	bhi.n	800b9ae <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b9aa:	2b40      	cmp	r3, #64	@ 0x40
 800b9ac:	d941      	bls.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	75fb      	strb	r3, [r7, #23]
 800b9b2:	e03e      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	78db      	ldrb	r3, [r3, #3]
 800b9b8:	f003 0303 	and.w	r3, r3, #3
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d10b      	bne.n	800b9d8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	799b      	ldrb	r3, [r3, #6]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d004      	beq.n	800b9d2 <USBH_ParseEPDesc+0x162>
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	889b      	ldrh	r3, [r3, #4]
 800b9cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9d0:	d32f      	bcc.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	75fb      	strb	r3, [r7, #23]
 800b9d6:	e02c      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	75fb      	strb	r3, [r7, #23]
 800b9dc:	e029      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d120      	bne.n	800ba2a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	78db      	ldrb	r3, [r3, #3]
 800b9ec:	f003 0303 	and.w	r3, r3, #3
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d106      	bne.n	800ba02 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	889b      	ldrh	r3, [r3, #4]
 800b9f8:	2b08      	cmp	r3, #8
 800b9fa:	d01a      	beq.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	75fb      	strb	r3, [r7, #23]
 800ba00:	e017      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	78db      	ldrb	r3, [r3, #3]
 800ba06:	f003 0303 	and.w	r3, r3, #3
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d10a      	bne.n	800ba24 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	799b      	ldrb	r3, [r3, #6]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <USBH_ParseEPDesc+0x1ae>
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	889b      	ldrh	r3, [r3, #4]
 800ba1a:	2b08      	cmp	r3, #8
 800ba1c:	d909      	bls.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	75fb      	strb	r3, [r7, #23]
 800ba22:	e006      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ba24:	2303      	movs	r3, #3
 800ba26:	75fb      	strb	r3, [r7, #23]
 800ba28:	e003      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	75fb      	strb	r3, [r7, #23]
 800ba2e:	e000      	b.n	800ba32 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ba30:	bf00      	nop
  }

  return status;
 800ba32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	371c      	adds	r7, #28
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3301      	adds	r3, #1
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	d120      	bne.n	800ba9a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	1e9a      	subs	r2, r3, #2
 800ba5e:	88fb      	ldrh	r3, [r7, #6]
 800ba60:	4293      	cmp	r3, r2
 800ba62:	bf28      	it	cs
 800ba64:	4613      	movcs	r3, r2
 800ba66:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	3302      	adds	r3, #2
 800ba6c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ba6e:	2300      	movs	r3, #0
 800ba70:	82fb      	strh	r3, [r7, #22]
 800ba72:	e00b      	b.n	800ba8c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ba74:	8afb      	ldrh	r3, [r7, #22]
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	781a      	ldrb	r2, [r3, #0]
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	3301      	adds	r3, #1
 800ba84:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ba86:	8afb      	ldrh	r3, [r7, #22]
 800ba88:	3302      	adds	r3, #2
 800ba8a:	82fb      	strh	r3, [r7, #22]
 800ba8c:	8afa      	ldrh	r2, [r7, #22]
 800ba8e:	8abb      	ldrh	r3, [r7, #20]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d3ef      	bcc.n	800ba74 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	2200      	movs	r2, #0
 800ba98:	701a      	strb	r2, [r3, #0]
  }
}
 800ba9a:	bf00      	nop
 800ba9c:	371c      	adds	r7, #28
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800baa6:	b480      	push	{r7}
 800baa8:	b085      	sub	sp, #20
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	881b      	ldrh	r3, [r3, #0]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	7812      	ldrb	r2, [r2, #0]
 800bab8:	4413      	add	r3, r2
 800baba:	b29a      	uxth	r2, r3
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4413      	add	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bacc:	68fb      	ldr	r3, [r7, #12]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b086      	sub	sp, #24
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	4613      	mov	r3, r2
 800bae6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bae8:	2301      	movs	r3, #1
 800baea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	789b      	ldrb	r3, [r3, #2]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d002      	beq.n	800bafa <USBH_CtlReq+0x20>
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d01d      	beq.n	800bb34 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800baf8:	e043      	b.n	800bb82 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	88fa      	ldrh	r2, [r7, #6]
 800bb04:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bb12:	2301      	movs	r3, #1
 800bb14:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2203      	movs	r2, #3
 800bb1a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f000 fd95 	bl	800c65c <osMessageQueuePut>
      break;
 800bb32:	e026      	b.n	800bb82 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f829 	bl	800bb8c <USBH_HandleControl>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <USBH_CtlReq+0x70>
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d106      	bne.n	800bb58 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	761a      	strb	r2, [r3, #24]
 800bb56:	e005      	b.n	800bb64 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d102      	bne.n	800bb64 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2201      	movs	r2, #1
 800bb62:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2203      	movs	r2, #3
 800bb68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bb78:	2300      	movs	r3, #0
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f000 fd6e 	bl	800c65c <osMessageQueuePut>
      break;
 800bb80:	bf00      	nop
  }
  return status;
 800bb82:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af02      	add	r7, sp, #8
 800bb92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bb94:	2301      	movs	r3, #1
 800bb96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	7e1b      	ldrb	r3, [r3, #24]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	2b0a      	cmp	r3, #10
 800bba4:	f200 8229 	bhi.w	800bffa <USBH_HandleControl+0x46e>
 800bba8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbb0 <USBH_HandleControl+0x24>)
 800bbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbae:	bf00      	nop
 800bbb0:	0800bbdd 	.word	0x0800bbdd
 800bbb4:	0800bbf7 	.word	0x0800bbf7
 800bbb8:	0800bc99 	.word	0x0800bc99
 800bbbc:	0800bcbf 	.word	0x0800bcbf
 800bbc0:	0800bd4b 	.word	0x0800bd4b
 800bbc4:	0800bd75 	.word	0x0800bd75
 800bbc8:	0800be37 	.word	0x0800be37
 800bbcc:	0800be59 	.word	0x0800be59
 800bbd0:	0800beeb 	.word	0x0800beeb
 800bbd4:	0800bf11 	.word	0x0800bf11
 800bbd8:	0800bfa3 	.word	0x0800bfa3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f103 0110 	add.w	r1, r3, #16
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	795b      	ldrb	r3, [r3, #5]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fa17 	bl	800c01c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	761a      	strb	r2, [r3, #24]
      break;
 800bbf4:	e20c      	b.n	800c010 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	795b      	ldrb	r3, [r3, #5]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f004 f87f 	bl	800fd00 <USBH_LL_GetURBState>
 800bc02:	4603      	mov	r3, r0
 800bc04:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc06:	7bbb      	ldrb	r3, [r7, #14]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d12c      	bne.n	800bc66 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7c1b      	ldrb	r3, [r3, #16]
 800bc10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bc14:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	8adb      	ldrh	r3, [r3, #22]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00a      	beq.n	800bc34 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bc1e:	7b7b      	ldrb	r3, [r7, #13]
 800bc20:	2b80      	cmp	r3, #128	@ 0x80
 800bc22:	d103      	bne.n	800bc2c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2203      	movs	r2, #3
 800bc28:	761a      	strb	r2, [r3, #24]
 800bc2a:	e00d      	b.n	800bc48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2205      	movs	r2, #5
 800bc30:	761a      	strb	r2, [r3, #24]
 800bc32:	e009      	b.n	800bc48 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800bc34:	7b7b      	ldrb	r3, [r7, #13]
 800bc36:	2b80      	cmp	r3, #128	@ 0x80
 800bc38:	d103      	bne.n	800bc42 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2209      	movs	r2, #9
 800bc3e:	761a      	strb	r2, [r3, #24]
 800bc40:	e002      	b.n	800bc48 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2207      	movs	r2, #7
 800bc46:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2203      	movs	r2, #3
 800bc4c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f000 fcfc 	bl	800c65c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc64:	e1cb      	b.n	800bffe <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	2b04      	cmp	r3, #4
 800bc6a:	d003      	beq.n	800bc74 <USBH_HandleControl+0xe8>
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	f040 81c5 	bne.w	800bffe <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	220b      	movs	r2, #11
 800bc78:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2203      	movs	r2, #3
 800bc7e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bc8e:	2300      	movs	r3, #0
 800bc90:	2200      	movs	r2, #0
 800bc92:	f000 fce3 	bl	800c65c <osMessageQueuePut>
      break;
 800bc96:	e1b2      	b.n	800bffe <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6899      	ldr	r1, [r3, #8]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	899a      	ldrh	r2, [r3, #12]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	791b      	ldrb	r3, [r3, #4]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f9f2 	bl	800c09a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2204      	movs	r2, #4
 800bcba:	761a      	strb	r2, [r3, #24]
      break;
 800bcbc:	e1a8      	b.n	800c010 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	791b      	ldrb	r3, [r3, #4]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f004 f81b 	bl	800fd00 <USBH_LL_GetURBState>
 800bcca:	4603      	mov	r3, r0
 800bccc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bcce:	7bbb      	ldrb	r3, [r7, #14]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d110      	bne.n	800bcf6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2209      	movs	r2, #9
 800bcd8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2203      	movs	r2, #3
 800bcde:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bcee:	2300      	movs	r3, #0
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f000 fcb3 	bl	800c65c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bcf6:	7bbb      	ldrb	r3, [r7, #14]
 800bcf8:	2b05      	cmp	r3, #5
 800bcfa:	d110      	bne.n	800bd1e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2203      	movs	r2, #3
 800bd04:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bd14:	2300      	movs	r3, #0
 800bd16:	2200      	movs	r2, #0
 800bd18:	f000 fca0 	bl	800c65c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd1c:	e171      	b.n	800c002 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	f040 816e 	bne.w	800c002 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	220b      	movs	r2, #11
 800bd2a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2203      	movs	r2, #3
 800bd30:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bd40:	2300      	movs	r3, #0
 800bd42:	2200      	movs	r2, #0
 800bd44:	f000 fc8a 	bl	800c65c <osMessageQueuePut>
      break;
 800bd48:	e15b      	b.n	800c002 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6899      	ldr	r1, [r3, #8]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	899a      	ldrh	r2, [r3, #12]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	795b      	ldrb	r3, [r3, #5]
 800bd56:	2001      	movs	r0, #1
 800bd58:	9000      	str	r0, [sp, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f978 	bl	800c050 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2206      	movs	r2, #6
 800bd70:	761a      	strb	r2, [r3, #24]
      break;
 800bd72:	e14d      	b.n	800c010 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	795b      	ldrb	r3, [r3, #5]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f003 ffc0 	bl	800fd00 <USBH_LL_GetURBState>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bd84:	7bbb      	ldrb	r3, [r7, #14]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d111      	bne.n	800bdae <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2207      	movs	r2, #7
 800bd8e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2203      	movs	r2, #3
 800bd94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bda4:	2300      	movs	r3, #0
 800bda6:	2200      	movs	r2, #0
 800bda8:	f000 fc58 	bl	800c65c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bdac:	e12b      	b.n	800c006 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	2b05      	cmp	r3, #5
 800bdb2:	d113      	bne.n	800bddc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	220c      	movs	r2, #12
 800bdb8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2203      	movs	r2, #3
 800bdc2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f000 fc41 	bl	800c65c <osMessageQueuePut>
      break;
 800bdda:	e114      	b.n	800c006 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d111      	bne.n	800be06 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2205      	movs	r2, #5
 800bde6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2203      	movs	r2, #3
 800bdec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	2200      	movs	r2, #0
 800be00:	f000 fc2c 	bl	800c65c <osMessageQueuePut>
      break;
 800be04:	e0ff      	b.n	800c006 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800be06:	7bbb      	ldrb	r3, [r7, #14]
 800be08:	2b04      	cmp	r3, #4
 800be0a:	f040 80fc 	bne.w	800c006 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	220b      	movs	r2, #11
 800be12:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800be14:	2302      	movs	r3, #2
 800be16:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2203      	movs	r2, #3
 800be1c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800be2c:	2300      	movs	r3, #0
 800be2e:	2200      	movs	r2, #0
 800be30:	f000 fc14 	bl	800c65c <osMessageQueuePut>
      break;
 800be34:	e0e7      	b.n	800c006 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	791b      	ldrb	r3, [r3, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	2100      	movs	r1, #0
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f92b 	bl	800c09a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2208      	movs	r2, #8
 800be54:	761a      	strb	r2, [r3, #24]

      break;
 800be56:	e0db      	b.n	800c010 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	791b      	ldrb	r3, [r3, #4]
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f003 ff4e 	bl	800fd00 <USBH_LL_GetURBState>
 800be64:	4603      	mov	r3, r0
 800be66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800be68:	7bbb      	ldrb	r3, [r7, #14]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d113      	bne.n	800be96 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	220d      	movs	r2, #13
 800be72:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2203      	movs	r2, #3
 800be7c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800be8c:	2300      	movs	r3, #0
 800be8e:	2200      	movs	r2, #0
 800be90:	f000 fbe4 	bl	800c65c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be94:	e0b9      	b.n	800c00a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	2b04      	cmp	r3, #4
 800be9a:	d111      	bne.n	800bec0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	220b      	movs	r2, #11
 800bea0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2203      	movs	r2, #3
 800bea6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800beb6:	2300      	movs	r3, #0
 800beb8:	2200      	movs	r2, #0
 800beba:	f000 fbcf 	bl	800c65c <osMessageQueuePut>
      break;
 800bebe:	e0a4      	b.n	800c00a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
 800bec2:	2b05      	cmp	r3, #5
 800bec4:	f040 80a1 	bne.w	800c00a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800bec8:	2303      	movs	r3, #3
 800beca:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2203      	movs	r2, #3
 800bed0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bee0:	2300      	movs	r3, #0
 800bee2:	2200      	movs	r2, #0
 800bee4:	f000 fbba 	bl	800c65c <osMessageQueuePut>
      break;
 800bee8:	e08f      	b.n	800c00a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	795b      	ldrb	r3, [r3, #5]
 800beee:	2201      	movs	r2, #1
 800bef0:	9200      	str	r2, [sp, #0]
 800bef2:	2200      	movs	r2, #0
 800bef4:	2100      	movs	r1, #0
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f8aa 	bl	800c050 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	220a      	movs	r2, #10
 800bf0c:	761a      	strb	r2, [r3, #24]
      break;
 800bf0e:	e07f      	b.n	800c010 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	795b      	ldrb	r3, [r3, #5]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f003 fef2 	bl	800fd00 <USBH_LL_GetURBState>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bf20:	7bbb      	ldrb	r3, [r7, #14]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d113      	bne.n	800bf4e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	220d      	movs	r2, #13
 800bf2e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2203      	movs	r2, #3
 800bf34:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bf44:	2300      	movs	r3, #0
 800bf46:	2200      	movs	r2, #0
 800bf48:	f000 fb88 	bl	800c65c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf4c:	e05f      	b.n	800c00e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf4e:	7bbb      	ldrb	r3, [r7, #14]
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d111      	bne.n	800bf78 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2209      	movs	r2, #9
 800bf58:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2203      	movs	r2, #3
 800bf5e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bf6e:	2300      	movs	r3, #0
 800bf70:	2200      	movs	r2, #0
 800bf72:	f000 fb73 	bl	800c65c <osMessageQueuePut>
      break;
 800bf76:	e04a      	b.n	800c00e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	2b04      	cmp	r3, #4
 800bf7c:	d147      	bne.n	800c00e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	220b      	movs	r2, #11
 800bf82:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2203      	movs	r2, #3
 800bf88:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bf98:	2300      	movs	r3, #0
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f000 fb5e 	bl	800c65c <osMessageQueuePut>
      break;
 800bfa0:	e035      	b.n	800c00e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7e5b      	ldrb	r3, [r3, #25]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	765a      	strb	r2, [r3, #25]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	7e5b      	ldrb	r3, [r3, #25]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d806      	bhi.n	800bfc4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bfc2:	e025      	b.n	800c010 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bfca:	2106      	movs	r1, #6
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	795b      	ldrb	r3, [r3, #5]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f90d 	bl	800c1fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	791b      	ldrb	r3, [r3, #4]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f907 	bl	800c1fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bff4:	2302      	movs	r3, #2
 800bff6:	73fb      	strb	r3, [r7, #15]
      break;
 800bff8:	e00a      	b.n	800c010 <USBH_HandleControl+0x484>

    default:
      break;
 800bffa:	bf00      	nop
 800bffc:	e008      	b.n	800c010 <USBH_HandleControl+0x484>
      break;
 800bffe:	bf00      	nop
 800c000:	e006      	b.n	800c010 <USBH_HandleControl+0x484>
      break;
 800c002:	bf00      	nop
 800c004:	e004      	b.n	800c010 <USBH_HandleControl+0x484>
      break;
 800c006:	bf00      	nop
 800c008:	e002      	b.n	800c010 <USBH_HandleControl+0x484>
      break;
 800c00a:	bf00      	nop
 800c00c:	e000      	b.n	800c010 <USBH_HandleControl+0x484>
      break;
 800c00e:	bf00      	nop
  }

  return status;
 800c010:	7bfb      	ldrb	r3, [r7, #15]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop

0800c01c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af04      	add	r7, sp, #16
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	4613      	mov	r3, r2
 800c028:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c02a:	79f9      	ldrb	r1, [r7, #7]
 800c02c:	2300      	movs	r3, #0
 800c02e:	9303      	str	r3, [sp, #12]
 800c030:	2308      	movs	r3, #8
 800c032:	9302      	str	r3, [sp, #8]
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	9301      	str	r3, [sp, #4]
 800c038:	2300      	movs	r3, #0
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	2300      	movs	r3, #0
 800c03e:	2200      	movs	r2, #0
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f003 fe2c 	bl	800fc9e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b088      	sub	sp, #32
 800c054:	af04      	add	r7, sp, #16
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	4611      	mov	r1, r2
 800c05c:	461a      	mov	r2, r3
 800c05e:	460b      	mov	r3, r1
 800c060:	80fb      	strh	r3, [r7, #6]
 800c062:	4613      	mov	r3, r2
 800c064:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d001      	beq.n	800c074 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c074:	7979      	ldrb	r1, [r7, #5]
 800c076:	7e3b      	ldrb	r3, [r7, #24]
 800c078:	9303      	str	r3, [sp, #12]
 800c07a:	88fb      	ldrh	r3, [r7, #6]
 800c07c:	9302      	str	r3, [sp, #8]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	2301      	movs	r3, #1
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	2300      	movs	r3, #0
 800c088:	2200      	movs	r2, #0
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f003 fe07 	bl	800fc9e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b088      	sub	sp, #32
 800c09e:	af04      	add	r7, sp, #16
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	80fb      	strh	r3, [r7, #6]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c0b0:	7979      	ldrb	r1, [r7, #5]
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	9303      	str	r3, [sp, #12]
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
 800c0b8:	9302      	str	r3, [sp, #8]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	2301      	movs	r3, #1
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f003 fde9 	bl	800fc9e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c0cc:	2300      	movs	r3, #0

}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b088      	sub	sp, #32
 800c0da:	af04      	add	r7, sp, #16
 800c0dc:	60f8      	str	r0, [r7, #12]
 800c0de:	60b9      	str	r1, [r7, #8]
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	80fb      	strh	r3, [r7, #6]
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c0fa:	7979      	ldrb	r1, [r7, #5]
 800c0fc:	7e3b      	ldrb	r3, [r7, #24]
 800c0fe:	9303      	str	r3, [sp, #12]
 800c100:	88fb      	ldrh	r3, [r7, #6]
 800c102:	9302      	str	r3, [sp, #8]
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	2301      	movs	r3, #1
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	2302      	movs	r3, #2
 800c10e:	2200      	movs	r2, #0
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	f003 fdc4 	bl	800fc9e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af04      	add	r7, sp, #16
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	4611      	mov	r1, r2
 800c12c:	461a      	mov	r2, r3
 800c12e:	460b      	mov	r3, r1
 800c130:	80fb      	strh	r3, [r7, #6]
 800c132:	4613      	mov	r3, r2
 800c134:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c136:	7979      	ldrb	r1, [r7, #5]
 800c138:	2300      	movs	r3, #0
 800c13a:	9303      	str	r3, [sp, #12]
 800c13c:	88fb      	ldrh	r3, [r7, #6]
 800c13e:	9302      	str	r3, [sp, #8]
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	9301      	str	r3, [sp, #4]
 800c144:	2301      	movs	r3, #1
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	2302      	movs	r3, #2
 800c14a:	2201      	movs	r2, #1
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f003 fda6 	bl	800fc9e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af04      	add	r7, sp, #16
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	4608      	mov	r0, r1
 800c166:	4611      	mov	r1, r2
 800c168:	461a      	mov	r2, r3
 800c16a:	4603      	mov	r3, r0
 800c16c:	70fb      	strb	r3, [r7, #3]
 800c16e:	460b      	mov	r3, r1
 800c170:	70bb      	strb	r3, [r7, #2]
 800c172:	4613      	mov	r3, r2
 800c174:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c176:	7878      	ldrb	r0, [r7, #1]
 800c178:	78ba      	ldrb	r2, [r7, #2]
 800c17a:	78f9      	ldrb	r1, [r7, #3]
 800c17c:	8b3b      	ldrh	r3, [r7, #24]
 800c17e:	9302      	str	r3, [sp, #8]
 800c180:	7d3b      	ldrb	r3, [r7, #20]
 800c182:	9301      	str	r3, [sp, #4]
 800c184:	7c3b      	ldrb	r3, [r7, #16]
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	4603      	mov	r3, r0
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f003 fd39 	bl	800fc02 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c1a6:	78fb      	ldrb	r3, [r7, #3]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f003 fd58 	bl	800fc60 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f836 	bl	800c238 <USBH_GetFreePipe>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c1d0:	89fb      	ldrh	r3, [r7, #14]
 800c1d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d00a      	beq.n	800c1f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c1da:	78fa      	ldrb	r2, [r7, #3]
 800c1dc:	89fb      	ldrh	r3, [r7, #14]
 800c1de:	f003 030f 	and.w	r3, r3, #15
 800c1e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	33e0      	adds	r3, #224	@ 0xe0
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	440b      	add	r3, r1
 800c1ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c1f0:	89fb      	ldrh	r3, [r7, #14]
 800c1f2:	b2db      	uxtb	r3, r3
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	460b      	mov	r3, r1
 800c206:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c208:	78fb      	ldrb	r3, [r7, #3]
 800c20a:	2b0f      	cmp	r3, #15
 800c20c:	d80d      	bhi.n	800c22a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c20e:	78fb      	ldrb	r3, [r7, #3]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	33e0      	adds	r3, #224	@ 0xe0
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	78fb      	ldrb	r3, [r7, #3]
 800c21c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c220:	6879      	ldr	r1, [r7, #4]
 800c222:	33e0      	adds	r3, #224	@ 0xe0
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	440b      	add	r3, r1
 800c228:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
 800c248:	e00f      	b.n	800c26a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	33e0      	adds	r3, #224	@ 0xe0
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d102      	bne.n	800c264 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c25e:	7bfb      	ldrb	r3, [r7, #15]
 800c260:	b29b      	uxth	r3, r3
 800c262:	e007      	b.n	800c274 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	3301      	adds	r3, #1
 800c268:	73fb      	strb	r3, [r7, #15]
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	2b0f      	cmp	r3, #15
 800c26e:	d9ec      	bls.n	800c24a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <__NVIC_SetPriority>:
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	6039      	str	r1, [r7, #0]
 800c28a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c28c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c290:	2b00      	cmp	r3, #0
 800c292:	db0a      	blt.n	800c2aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	b2da      	uxtb	r2, r3
 800c298:	490c      	ldr	r1, [pc, #48]	@ (800c2cc <__NVIC_SetPriority+0x4c>)
 800c29a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c29e:	0112      	lsls	r2, r2, #4
 800c2a0:	b2d2      	uxtb	r2, r2
 800c2a2:	440b      	add	r3, r1
 800c2a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c2a8:	e00a      	b.n	800c2c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	4908      	ldr	r1, [pc, #32]	@ (800c2d0 <__NVIC_SetPriority+0x50>)
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	f003 030f 	and.w	r3, r3, #15
 800c2b6:	3b04      	subs	r3, #4
 800c2b8:	0112      	lsls	r2, r2, #4
 800c2ba:	b2d2      	uxtb	r2, r2
 800c2bc:	440b      	add	r3, r1
 800c2be:	761a      	strb	r2, [r3, #24]
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	e000e100 	.word	0xe000e100
 800c2d0:	e000ed00 	.word	0xe000ed00

0800c2d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c2d8:	4b05      	ldr	r3, [pc, #20]	@ (800c2f0 <SysTick_Handler+0x1c>)
 800c2da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c2dc:	f002 fa24 	bl	800e728 <xTaskGetSchedulerState>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d001      	beq.n	800c2ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c2e6:	f003 f837 	bl	800f358 <xPortSysTickHandler>
  }
}
 800c2ea:	bf00      	nop
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	e000e010 	.word	0xe000e010

0800c2f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	f06f 0004 	mvn.w	r0, #4
 800c2fe:	f7ff ffbf 	bl	800c280 <__NVIC_SetPriority>
#endif
}
 800c302:	bf00      	nop
 800c304:	bd80      	pop	{r7, pc}
	...

0800c308 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c30e:	f3ef 8305 	mrs	r3, IPSR
 800c312:	603b      	str	r3, [r7, #0]
  return(result);
 800c314:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c316:	2b00      	cmp	r3, #0
 800c318:	d003      	beq.n	800c322 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c31a:	f06f 0305 	mvn.w	r3, #5
 800c31e:	607b      	str	r3, [r7, #4]
 800c320:	e00c      	b.n	800c33c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c322:	4b0a      	ldr	r3, [pc, #40]	@ (800c34c <osKernelInitialize+0x44>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d105      	bne.n	800c336 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c32a:	4b08      	ldr	r3, [pc, #32]	@ (800c34c <osKernelInitialize+0x44>)
 800c32c:	2201      	movs	r2, #1
 800c32e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c330:	2300      	movs	r3, #0
 800c332:	607b      	str	r3, [r7, #4]
 800c334:	e002      	b.n	800c33c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c33a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c33c:	687b      	ldr	r3, [r7, #4]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	200003c4 	.word	0x200003c4

0800c350 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c356:	f3ef 8305 	mrs	r3, IPSR
 800c35a:	603b      	str	r3, [r7, #0]
  return(result);
 800c35c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d003      	beq.n	800c36a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c362:	f06f 0305 	mvn.w	r3, #5
 800c366:	607b      	str	r3, [r7, #4]
 800c368:	e010      	b.n	800c38c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c36a:	4b0b      	ldr	r3, [pc, #44]	@ (800c398 <osKernelStart+0x48>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d109      	bne.n	800c386 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c372:	f7ff ffbf 	bl	800c2f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c376:	4b08      	ldr	r3, [pc, #32]	@ (800c398 <osKernelStart+0x48>)
 800c378:	2202      	movs	r2, #2
 800c37a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c37c:	f001 fcce 	bl	800dd1c <vTaskStartScheduler>
      stat = osOK;
 800c380:	2300      	movs	r3, #0
 800c382:	607b      	str	r3, [r7, #4]
 800c384:	e002      	b.n	800c38c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c38a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c38c:	687b      	ldr	r3, [r7, #4]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3708      	adds	r7, #8
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	200003c4 	.word	0x200003c4

0800c39c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08e      	sub	sp, #56	@ 0x38
 800c3a0:	af04      	add	r7, sp, #16
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3ac:	f3ef 8305 	mrs	r3, IPSR
 800c3b0:	617b      	str	r3, [r7, #20]
  return(result);
 800c3b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d17e      	bne.n	800c4b6 <osThreadNew+0x11a>
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d07b      	beq.n	800c4b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c3be:	2380      	movs	r3, #128	@ 0x80
 800c3c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c3c2:	2318      	movs	r3, #24
 800c3c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c3ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d045      	beq.n	800c462 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d002      	beq.n	800c3e4 <osThreadNew+0x48>
        name = attr->name;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d008      	beq.n	800c40a <osThreadNew+0x6e>
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	2b38      	cmp	r3, #56	@ 0x38
 800c3fc:	d805      	bhi.n	800c40a <osThreadNew+0x6e>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	f003 0301 	and.w	r3, r3, #1
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <osThreadNew+0x72>
        return (NULL);
 800c40a:	2300      	movs	r3, #0
 800c40c:	e054      	b.n	800c4b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	089b      	lsrs	r3, r3, #2
 800c41c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00e      	beq.n	800c444 <osThreadNew+0xa8>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	2ba7      	cmp	r3, #167	@ 0xa7
 800c42c:	d90a      	bls.n	800c444 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c432:	2b00      	cmp	r3, #0
 800c434:	d006      	beq.n	800c444 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <osThreadNew+0xa8>
        mem = 1;
 800c43e:	2301      	movs	r3, #1
 800c440:	61bb      	str	r3, [r7, #24]
 800c442:	e010      	b.n	800c466 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10c      	bne.n	800c466 <osThreadNew+0xca>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d108      	bne.n	800c466 <osThreadNew+0xca>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d104      	bne.n	800c466 <osThreadNew+0xca>
          mem = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	61bb      	str	r3, [r7, #24]
 800c460:	e001      	b.n	800c466 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c462:	2300      	movs	r3, #0
 800c464:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d110      	bne.n	800c48e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c474:	9202      	str	r2, [sp, #8]
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	6a3a      	ldr	r2, [r7, #32]
 800c480:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f001 fa56 	bl	800d934 <xTaskCreateStatic>
 800c488:	4603      	mov	r3, r0
 800c48a:	613b      	str	r3, [r7, #16]
 800c48c:	e013      	b.n	800c4b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d110      	bne.n	800c4b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	b29a      	uxth	r2, r3
 800c498:	f107 0310 	add.w	r3, r7, #16
 800c49c:	9301      	str	r3, [sp, #4]
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f001 faa4 	bl	800d9f4 <xTaskCreate>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d001      	beq.n	800c4b6 <osThreadNew+0x11a>
            hTask = NULL;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c4b6:	693b      	ldr	r3, [r7, #16]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3728      	adds	r7, #40	@ 0x28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4c8:	f3ef 8305 	mrs	r3, IPSR
 800c4cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800c4ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d003      	beq.n	800c4dc <osDelay+0x1c>
    stat = osErrorISR;
 800c4d4:	f06f 0305 	mvn.w	r3, #5
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	e007      	b.n	800c4ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d002      	beq.n	800c4ec <osDelay+0x2c>
      vTaskDelay(ticks);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f001 fbe2 	bl	800dcb0 <vTaskDelay>
    }
  }

  return (stat);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b086      	sub	sp, #24
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c4fe:	2300      	movs	r3, #0
 800c500:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c502:	f3ef 8305 	mrs	r3, IPSR
 800c506:	60fb      	str	r3, [r7, #12]
  return(result);
 800c508:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d12d      	bne.n	800c56a <osEventFlagsNew+0x74>
    mem = -1;
 800c50e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c512:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d015      	beq.n	800c546 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d006      	beq.n	800c530 <osEventFlagsNew+0x3a>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	2b1f      	cmp	r3, #31
 800c528:	d902      	bls.n	800c530 <osEventFlagsNew+0x3a>
        mem = 1;
 800c52a:	2301      	movs	r3, #1
 800c52c:	613b      	str	r3, [r7, #16]
 800c52e:	e00c      	b.n	800c54a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d108      	bne.n	800c54a <osEventFlagsNew+0x54>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d104      	bne.n	800c54a <osEventFlagsNew+0x54>
          mem = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	613b      	str	r3, [r7, #16]
 800c544:	e001      	b.n	800c54a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d106      	bne.n	800c55e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	4618      	mov	r0, r3
 800c556:	f000 f973 	bl	800c840 <xEventGroupCreateStatic>
 800c55a:	6178      	str	r0, [r7, #20]
 800c55c:	e005      	b.n	800c56a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d102      	bne.n	800c56a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c564:	f000 f9a5 	bl	800c8b2 <xEventGroupCreate>
 800c568:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c56a:	697b      	ldr	r3, [r7, #20]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c574:	b580      	push	{r7, lr}
 800c576:	b08a      	sub	sp, #40	@ 0x28
 800c578:	af02      	add	r7, sp, #8
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c580:	2300      	movs	r3, #0
 800c582:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c584:	f3ef 8305 	mrs	r3, IPSR
 800c588:	613b      	str	r3, [r7, #16]
  return(result);
 800c58a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d15f      	bne.n	800c650 <osMessageQueueNew+0xdc>
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d05c      	beq.n	800c650 <osMessageQueueNew+0xdc>
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d059      	beq.n	800c650 <osMessageQueueNew+0xdc>
    mem = -1;
 800c59c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d029      	beq.n	800c5fc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d012      	beq.n	800c5d6 <osMessageQueueNew+0x62>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	2b4f      	cmp	r3, #79	@ 0x4f
 800c5b6:	d90e      	bls.n	800c5d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00a      	beq.n	800c5d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	695a      	ldr	r2, [r3, #20]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	68b9      	ldr	r1, [r7, #8]
 800c5c8:	fb01 f303 	mul.w	r3, r1, r3
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d302      	bcc.n	800c5d6 <osMessageQueueNew+0x62>
        mem = 1;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	61bb      	str	r3, [r7, #24]
 800c5d4:	e014      	b.n	800c600 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d110      	bne.n	800c600 <osMessageQueueNew+0x8c>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10c      	bne.n	800c600 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d108      	bne.n	800c600 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	695b      	ldr	r3, [r3, #20]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d104      	bne.n	800c600 <osMessageQueueNew+0x8c>
          mem = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	61bb      	str	r3, [r7, #24]
 800c5fa:	e001      	b.n	800c600 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	2b01      	cmp	r3, #1
 800c604:	d10b      	bne.n	800c61e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	691a      	ldr	r2, [r3, #16]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	2100      	movs	r1, #0
 800c610:	9100      	str	r1, [sp, #0]
 800c612:	68b9      	ldr	r1, [r7, #8]
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 fc3f 	bl	800ce98 <xQueueGenericCreateStatic>
 800c61a:	61f8      	str	r0, [r7, #28]
 800c61c:	e008      	b.n	800c630 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d105      	bne.n	800c630 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c624:	2200      	movs	r2, #0
 800c626:	68b9      	ldr	r1, [r7, #8]
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f000 fcb2 	bl	800cf92 <xQueueGenericCreate>
 800c62e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00c      	beq.n	800c650 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d003      	beq.n	800c644 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	617b      	str	r3, [r7, #20]
 800c642:	e001      	b.n	800c648 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c644:	2300      	movs	r3, #0
 800c646:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c648:	6979      	ldr	r1, [r7, #20]
 800c64a:	69f8      	ldr	r0, [r7, #28]
 800c64c:	f001 f914 	bl	800d878 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c650:	69fb      	ldr	r3, [r7, #28]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3720      	adds	r7, #32
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
	...

0800c65c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b088      	sub	sp, #32
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	4613      	mov	r3, r2
 800c66a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c670:	2300      	movs	r3, #0
 800c672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c674:	f3ef 8305 	mrs	r3, IPSR
 800c678:	617b      	str	r3, [r7, #20]
  return(result);
 800c67a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d028      	beq.n	800c6d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d005      	beq.n	800c692 <osMessageQueuePut+0x36>
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <osMessageQueuePut+0x36>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c692:	f06f 0303 	mvn.w	r3, #3
 800c696:	61fb      	str	r3, [r7, #28]
 800c698:	e038      	b.n	800c70c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c69a:	2300      	movs	r3, #0
 800c69c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c69e:	f107 0210 	add.w	r2, r7, #16
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	68b9      	ldr	r1, [r7, #8]
 800c6a6:	69b8      	ldr	r0, [r7, #24]
 800c6a8:	f000 fdd4 	bl	800d254 <xQueueGenericSendFromISR>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d003      	beq.n	800c6ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c6b2:	f06f 0302 	mvn.w	r3, #2
 800c6b6:	61fb      	str	r3, [r7, #28]
 800c6b8:	e028      	b.n	800c70c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d025      	beq.n	800c70c <osMessageQueuePut+0xb0>
 800c6c0:	4b15      	ldr	r3, [pc, #84]	@ (800c718 <osMessageQueuePut+0xbc>)
 800c6c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	f3bf 8f6f 	isb	sy
 800c6d0:	e01c      	b.n	800c70c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <osMessageQueuePut+0x82>
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d103      	bne.n	800c6e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c6de:	f06f 0303 	mvn.w	r3, #3
 800c6e2:	61fb      	str	r3, [r7, #28]
 800c6e4:	e012      	b.n	800c70c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	69b8      	ldr	r0, [r7, #24]
 800c6ee:	f000 fcaf 	bl	800d050 <xQueueGenericSend>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d009      	beq.n	800c70c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d003      	beq.n	800c706 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c6fe:	f06f 0301 	mvn.w	r3, #1
 800c702:	61fb      	str	r3, [r7, #28]
 800c704:	e002      	b.n	800c70c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c706:	f06f 0302 	mvn.w	r3, #2
 800c70a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c70c:	69fb      	ldr	r3, [r7, #28]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3720      	adds	r7, #32
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b088      	sub	sp, #32
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c72e:	2300      	movs	r3, #0
 800c730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c732:	f3ef 8305 	mrs	r3, IPSR
 800c736:	617b      	str	r3, [r7, #20]
  return(result);
 800c738:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d028      	beq.n	800c790 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d005      	beq.n	800c750 <osMessageQueueGet+0x34>
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d002      	beq.n	800c750 <osMessageQueueGet+0x34>
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d003      	beq.n	800c758 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c750:	f06f 0303 	mvn.w	r3, #3
 800c754:	61fb      	str	r3, [r7, #28]
 800c756:	e037      	b.n	800c7c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c758:	2300      	movs	r3, #0
 800c75a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c75c:	f107 0310 	add.w	r3, r7, #16
 800c760:	461a      	mov	r2, r3
 800c762:	68b9      	ldr	r1, [r7, #8]
 800c764:	69b8      	ldr	r0, [r7, #24]
 800c766:	f000 fef5 	bl	800d554 <xQueueReceiveFromISR>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d003      	beq.n	800c778 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c770:	f06f 0302 	mvn.w	r3, #2
 800c774:	61fb      	str	r3, [r7, #28]
 800c776:	e027      	b.n	800c7c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d024      	beq.n	800c7c8 <osMessageQueueGet+0xac>
 800c77e:	4b15      	ldr	r3, [pc, #84]	@ (800c7d4 <osMessageQueueGet+0xb8>)
 800c780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	e01b      	b.n	800c7c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <osMessageQueueGet+0x80>
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d103      	bne.n	800c7a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c79c:	f06f 0303 	mvn.w	r3, #3
 800c7a0:	61fb      	str	r3, [r7, #28]
 800c7a2:	e011      	b.n	800c7c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	68b9      	ldr	r1, [r7, #8]
 800c7a8:	69b8      	ldr	r0, [r7, #24]
 800c7aa:	f000 fdf1 	bl	800d390 <xQueueReceive>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d009      	beq.n	800c7c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c7ba:	f06f 0301 	mvn.w	r3, #1
 800c7be:	61fb      	str	r3, [r7, #28]
 800c7c0:	e002      	b.n	800c7c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c7c2:	f06f 0302 	mvn.w	r3, #2
 800c7c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c7c8:	69fb      	ldr	r3, [r7, #28]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3720      	adds	r7, #32
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	e000ed04 	.word	0xe000ed04

0800c7d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	4a07      	ldr	r2, [pc, #28]	@ (800c804 <vApplicationGetIdleTaskMemory+0x2c>)
 800c7e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	4a06      	ldr	r2, [pc, #24]	@ (800c808 <vApplicationGetIdleTaskMemory+0x30>)
 800c7ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2280      	movs	r2, #128	@ 0x80
 800c7f4:	601a      	str	r2, [r3, #0]
}
 800c7f6:	bf00      	nop
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	200003c8 	.word	0x200003c8
 800c808:	20000470 	.word	0x20000470

0800c80c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	4a07      	ldr	r2, [pc, #28]	@ (800c838 <vApplicationGetTimerTaskMemory+0x2c>)
 800c81c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	4a06      	ldr	r2, [pc, #24]	@ (800c83c <vApplicationGetTimerTaskMemory+0x30>)
 800c822:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c82a:	601a      	str	r2, [r3, #0]
}
 800c82c:	bf00      	nop
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr
 800c838:	20000670 	.word	0x20000670
 800c83c:	20000718 	.word	0x20000718

0800c840 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10b      	bne.n	800c866 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c860:	bf00      	nop
 800c862:	bf00      	nop
 800c864:	e7fd      	b.n	800c862 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c866:	2320      	movs	r3, #32
 800c868:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	2b20      	cmp	r3, #32
 800c86e:	d00b      	beq.n	800c888 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	60fb      	str	r3, [r7, #12]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00a      	beq.n	800c8a8 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2200      	movs	r2, #0
 800c896:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	3304      	adds	r3, #4
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 f9dc 	bl	800cc5a <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c8a8:	697b      	ldr	r3, [r7, #20]
	}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3718      	adds	r7, #24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b082      	sub	sp, #8
 800c8b6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c8b8:	2020      	movs	r0, #32
 800c8ba:	f002 fddf 	bl	800f47c <pvPortMalloc>
 800c8be:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00a      	beq.n	800c8dc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 f9c2 	bl	800cc5a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c8dc:	687b      	ldr	r3, [r7, #4]
	}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
	...

0800c8e8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b090      	sub	sp, #64	@ 0x40
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c8fe:	2300      	movs	r3, #0
 800c900:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10b      	bne.n	800c920 <xEventGroupWaitBits+0x38>
	__asm volatile
 800c908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	623b      	str	r3, [r7, #32]
}
 800c91a:	bf00      	nop
 800c91c:	bf00      	nop
 800c91e:	e7fd      	b.n	800c91c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c926:	d30b      	bcc.n	800c940 <xEventGroupWaitBits+0x58>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	61fb      	str	r3, [r7, #28]
}
 800c93a:	bf00      	nop
 800c93c:	bf00      	nop
 800c93e:	e7fd      	b.n	800c93c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10b      	bne.n	800c95e <xEventGroupWaitBits+0x76>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	61bb      	str	r3, [r7, #24]
}
 800c958:	bf00      	nop
 800c95a:	bf00      	nop
 800c95c:	e7fd      	b.n	800c95a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c95e:	f001 fee3 	bl	800e728 <xTaskGetSchedulerState>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d102      	bne.n	800c96e <xEventGroupWaitBits+0x86>
 800c968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <xEventGroupWaitBits+0x8a>
 800c96e:	2301      	movs	r3, #1
 800c970:	e000      	b.n	800c974 <xEventGroupWaitBits+0x8c>
 800c972:	2300      	movs	r3, #0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10b      	bne.n	800c990 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	617b      	str	r3, [r7, #20]
}
 800c98a:	bf00      	nop
 800c98c:	bf00      	nop
 800c98e:	e7fd      	b.n	800c98c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800c990:	f001 fa34 	bl	800ddfc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	68b9      	ldr	r1, [r7, #8]
 800c99e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9a0:	f000 f939 	bl	800cc16 <prvTestWaitCondition>
 800c9a4:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00e      	beq.n	800c9ca <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d028      	beq.n	800ca0c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	43db      	mvns	r3, r3
 800c9c2:	401a      	ands	r2, r3
 800c9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c6:	601a      	str	r2, [r3, #0]
 800c9c8:	e020      	b.n	800ca0c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c9ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d104      	bne.n	800c9da <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9d8:	e018      	b.n	800ca0c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d003      	beq.n	800c9e8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c9e6:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d003      	beq.n	800c9f6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c9f4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c9f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f8:	1d18      	adds	r0, r3, #4
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca02:	4619      	mov	r1, r3
 800ca04:	f001 fbfc 	bl	800e200 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800ca0c:	f001 fa04 	bl	800de18 <xTaskResumeAll>
 800ca10:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800ca12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d031      	beq.n	800ca7c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800ca18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d107      	bne.n	800ca2e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800ca1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ca88 <xEventGroupWaitBits+0x1a0>)
 800ca20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca24:	601a      	str	r2, [r3, #0]
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800ca2e:	f001 ff09 	bl	800e844 <uxTaskResetEventItemValue>
 800ca32:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800ca34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d11a      	bne.n	800ca74 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800ca3e:	f002 fbfb 	bl	800f238 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800ca42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	68b9      	ldr	r1, [r7, #8]
 800ca4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ca4e:	f000 f8e2 	bl	800cc16 <prvTestWaitCondition>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d009      	beq.n	800ca6c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d006      	beq.n	800ca6c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ca5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	43db      	mvns	r3, r3
 800ca66:	401a      	ands	r2, r3
 800ca68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca6a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800ca70:	f002 fc14 	bl	800f29c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ca74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ca7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800ca7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3740      	adds	r7, #64	@ 0x40
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	e000ed04 	.word	0xe000ed04

0800ca8c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10b      	bne.n	800cab8 <xEventGroupClearBits+0x2c>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	60fb      	str	r3, [r7, #12]
}
 800cab2:	bf00      	nop
 800cab4:	bf00      	nop
 800cab6:	e7fd      	b.n	800cab4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cabe:	d30b      	bcc.n	800cad8 <xEventGroupClearBits+0x4c>
	__asm volatile
 800cac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	60bb      	str	r3, [r7, #8]
}
 800cad2:	bf00      	nop
 800cad4:	bf00      	nop
 800cad6:	e7fd      	b.n	800cad4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800cad8:	f002 fbae 	bl	800f238 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	43db      	mvns	r3, r3
 800caea:	401a      	ands	r2, r3
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800caf0:	f002 fbd4 	bl	800f29c <vPortExitCritical>

	return uxReturn;
 800caf4:	693b      	ldr	r3, [r7, #16]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b08e      	sub	sp, #56	@ 0x38
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
 800cb06:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800cb10:	2300      	movs	r3, #0
 800cb12:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10b      	bne.n	800cb32 <xEventGroupSetBits+0x34>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	613b      	str	r3, [r7, #16]
}
 800cb2c:	bf00      	nop
 800cb2e:	bf00      	nop
 800cb30:	e7fd      	b.n	800cb2e <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb38:	d30b      	bcc.n	800cb52 <xEventGroupSetBits+0x54>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	60fb      	str	r3, [r7, #12]
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	e7fd      	b.n	800cb4e <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800cb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb54:	3304      	adds	r3, #4
 800cb56:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800cb5e:	f001 f94d 	bl	800ddfc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800cb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800cb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	431a      	orrs	r2, r3
 800cb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb72:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800cb74:	e03c      	b.n	800cbf0 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800cb76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800cb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800cb82:	2300      	movs	r3, #0
 800cb84:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800cb8c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb94:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d108      	bne.n	800cbb2 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800cba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	4013      	ands	r3, r2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00b      	beq.n	800cbc4 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800cbac:	2301      	movs	r3, #1
 800cbae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbb0:	e008      	b.n	800cbc4 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800cbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	4013      	ands	r3, r2
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d101      	bne.n	800cbc4 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800cbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d010      	beq.n	800cbec <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800cbd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800cbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cbe8:	f001 fbd8 	bl	800e39c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800cbf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbf2:	6a3b      	ldr	r3, [r7, #32]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d1be      	bne.n	800cb76 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800cbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfe:	43db      	mvns	r3, r3
 800cc00:	401a      	ands	r2, r3
 800cc02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc04:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800cc06:	f001 f907 	bl	800de18 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800cc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0c:	681b      	ldr	r3, [r3, #0]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3738      	adds	r7, #56	@ 0x38
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800cc16:	b480      	push	{r7}
 800cc18:	b087      	sub	sp, #28
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	60f8      	str	r0, [r7, #12]
 800cc1e:	60b9      	str	r1, [r7, #8]
 800cc20:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d107      	bne.n	800cc3c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	4013      	ands	r3, r2
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00a      	beq.n	800cc4c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cc36:	2301      	movs	r3, #1
 800cc38:	617b      	str	r3, [r7, #20]
 800cc3a:	e007      	b.n	800cc4c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	4013      	ands	r3, r2
 800cc42:	68ba      	ldr	r2, [r7, #8]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d101      	bne.n	800cc4c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800cc4c:	697b      	ldr	r3, [r7, #20]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	371c      	adds	r7, #28
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b083      	sub	sp, #12
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f103 0208 	add.w	r2, r3, #8
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f103 0208 	add.w	r2, r3, #8
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f103 0208 	add.w	r2, r3, #8
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc8e:	bf00      	nop
 800cc90:	370c      	adds	r7, #12
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b083      	sub	sp, #12
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cca8:	bf00      	nop
 800ccaa:	370c      	adds	r7, #12
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	689a      	ldr	r2, [r3, #8]
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	683a      	ldr	r2, [r7, #0]
 800ccde:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	1c5a      	adds	r2, r3, #1
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	601a      	str	r2, [r3, #0]
}
 800ccf0:	bf00      	nop
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd12:	d103      	bne.n	800cd1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	60fb      	str	r3, [r7, #12]
 800cd1a:	e00c      	b.n	800cd36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	3308      	adds	r3, #8
 800cd20:	60fb      	str	r3, [r7, #12]
 800cd22:	e002      	b.n	800cd2a <vListInsert+0x2e>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	60fb      	str	r3, [r7, #12]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d2f6      	bcs.n	800cd24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	685a      	ldr	r2, [r3, #4]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	601a      	str	r2, [r3, #0]
}
 800cd62:	bf00      	nop
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b085      	sub	sp, #20
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	6892      	ldr	r2, [r2, #8]
 800cd84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	6852      	ldr	r2, [r2, #4]
 800cd8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d103      	bne.n	800cda2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	689a      	ldr	r2, [r3, #8]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	1e5a      	subs	r2, r3, #1
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3714      	adds	r7, #20
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d10b      	bne.n	800cdf0 <xQueueGenericReset+0x2c>
	__asm volatile
 800cdd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cddc:	f383 8811 	msr	BASEPRI, r3
 800cde0:	f3bf 8f6f 	isb	sy
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	60bb      	str	r3, [r7, #8]
}
 800cdea:	bf00      	nop
 800cdec:	bf00      	nop
 800cdee:	e7fd      	b.n	800cdec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cdf0:	f002 fa22 	bl	800f238 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdfc:	68f9      	ldr	r1, [r7, #12]
 800cdfe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ce00:	fb01 f303 	mul.w	r3, r1, r3
 800ce04:	441a      	add	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce20:	3b01      	subs	r3, #1
 800ce22:	68f9      	ldr	r1, [r7, #12]
 800ce24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ce26:	fb01 f303 	mul.w	r3, r1, r3
 800ce2a:	441a      	add	r2, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	22ff      	movs	r2, #255	@ 0xff
 800ce34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	22ff      	movs	r2, #255	@ 0xff
 800ce3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d114      	bne.n	800ce70 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d01a      	beq.n	800ce84 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3310      	adds	r3, #16
 800ce52:	4618      	mov	r0, r3
 800ce54:	f001 fa3e 	bl	800e2d4 <xTaskRemoveFromEventList>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d012      	beq.n	800ce84 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce94 <xQueueGenericReset+0xd0>)
 800ce60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	e009      	b.n	800ce84 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	3310      	adds	r3, #16
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7ff fef0 	bl	800cc5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	3324      	adds	r3, #36	@ 0x24
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7ff feeb 	bl	800cc5a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce84:	f002 fa0a 	bl	800f29c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce88:	2301      	movs	r3, #1
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	e000ed04 	.word	0xe000ed04

0800ce98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b08e      	sub	sp, #56	@ 0x38
 800ce9c:	af02      	add	r7, sp, #8
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
 800cea4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10b      	bne.n	800cec4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cebe:	bf00      	nop
 800cec0:	bf00      	nop
 800cec2:	e7fd      	b.n	800cec0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10b      	bne.n	800cee2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cedc:	bf00      	nop
 800cede:	bf00      	nop
 800cee0:	e7fd      	b.n	800cede <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d002      	beq.n	800ceee <xQueueGenericCreateStatic+0x56>
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <xQueueGenericCreateStatic+0x5a>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e000      	b.n	800cef4 <xQueueGenericCreateStatic+0x5c>
 800cef2:	2300      	movs	r3, #0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10b      	bne.n	800cf10 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	623b      	str	r3, [r7, #32]
}
 800cf0a:	bf00      	nop
 800cf0c:	bf00      	nop
 800cf0e:	e7fd      	b.n	800cf0c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d102      	bne.n	800cf1c <xQueueGenericCreateStatic+0x84>
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d101      	bne.n	800cf20 <xQueueGenericCreateStatic+0x88>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e000      	b.n	800cf22 <xQueueGenericCreateStatic+0x8a>
 800cf20:	2300      	movs	r3, #0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10b      	bne.n	800cf3e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	61fb      	str	r3, [r7, #28]
}
 800cf38:	bf00      	nop
 800cf3a:	bf00      	nop
 800cf3c:	e7fd      	b.n	800cf3a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf3e:	2350      	movs	r3, #80	@ 0x50
 800cf40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	2b50      	cmp	r3, #80	@ 0x50
 800cf46:	d00b      	beq.n	800cf60 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	61bb      	str	r3, [r7, #24]
}
 800cf5a:	bf00      	nop
 800cf5c:	bf00      	nop
 800cf5e:	e7fd      	b.n	800cf5c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf60:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00d      	beq.n	800cf88 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf74:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cf78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	68b9      	ldr	r1, [r7, #8]
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f000 f840 	bl	800d008 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3730      	adds	r7, #48	@ 0x30
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b08a      	sub	sp, #40	@ 0x28
 800cf96:	af02      	add	r7, sp, #8
 800cf98:	60f8      	str	r0, [r7, #12]
 800cf9a:	60b9      	str	r1, [r7, #8]
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10b      	bne.n	800cfbe <xQueueGenericCreate+0x2c>
	__asm volatile
 800cfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	613b      	str	r3, [r7, #16]
}
 800cfb8:	bf00      	nop
 800cfba:	bf00      	nop
 800cfbc:	e7fd      	b.n	800cfba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	fb02 f303 	mul.w	r3, r2, r3
 800cfc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	3350      	adds	r3, #80	@ 0x50
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f002 fa55 	bl	800f47c <pvPortMalloc>
 800cfd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d011      	beq.n	800cffe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	3350      	adds	r3, #80	@ 0x50
 800cfe2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfec:	79fa      	ldrb	r2, [r7, #7]
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	4613      	mov	r3, r2
 800cff4:	697a      	ldr	r2, [r7, #20]
 800cff6:	68b9      	ldr	r1, [r7, #8]
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f000 f805 	bl	800d008 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cffe:	69bb      	ldr	r3, [r7, #24]
	}
 800d000:	4618      	mov	r0, r3
 800d002:	3720      	adds	r7, #32
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d103      	bne.n	800d024 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	69ba      	ldr	r2, [r7, #24]
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	e002      	b.n	800d02a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d036:	2101      	movs	r1, #1
 800d038:	69b8      	ldr	r0, [r7, #24]
 800d03a:	f7ff fec3 	bl	800cdc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	78fa      	ldrb	r2, [r7, #3]
 800d042:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d046:	bf00      	nop
 800d048:	3710      	adds	r7, #16
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
	...

0800d050 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b08e      	sub	sp, #56	@ 0x38
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
 800d05c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d05e:	2300      	movs	r3, #0
 800d060:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10b      	bne.n	800d084 <xQueueGenericSend+0x34>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d07e:	bf00      	nop
 800d080:	bf00      	nop
 800d082:	e7fd      	b.n	800d080 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d103      	bne.n	800d092 <xQueueGenericSend+0x42>
 800d08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d101      	bne.n	800d096 <xQueueGenericSend+0x46>
 800d092:	2301      	movs	r3, #1
 800d094:	e000      	b.n	800d098 <xQueueGenericSend+0x48>
 800d096:	2300      	movs	r3, #0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10b      	bne.n	800d0b4 <xQueueGenericSend+0x64>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d0ae:	bf00      	nop
 800d0b0:	bf00      	nop
 800d0b2:	e7fd      	b.n	800d0b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d103      	bne.n	800d0c2 <xQueueGenericSend+0x72>
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d101      	bne.n	800d0c6 <xQueueGenericSend+0x76>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e000      	b.n	800d0c8 <xQueueGenericSend+0x78>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d10b      	bne.n	800d0e4 <xQueueGenericSend+0x94>
	__asm volatile
 800d0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	623b      	str	r3, [r7, #32]
}
 800d0de:	bf00      	nop
 800d0e0:	bf00      	nop
 800d0e2:	e7fd      	b.n	800d0e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0e4:	f001 fb20 	bl	800e728 <xTaskGetSchedulerState>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d102      	bne.n	800d0f4 <xQueueGenericSend+0xa4>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <xQueueGenericSend+0xa8>
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e000      	b.n	800d0fa <xQueueGenericSend+0xaa>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d10b      	bne.n	800d116 <xQueueGenericSend+0xc6>
	__asm volatile
 800d0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	61fb      	str	r3, [r7, #28]
}
 800d110:	bf00      	nop
 800d112:	bf00      	nop
 800d114:	e7fd      	b.n	800d112 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d116:	f002 f88f 	bl	800f238 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d122:	429a      	cmp	r2, r3
 800d124:	d302      	bcc.n	800d12c <xQueueGenericSend+0xdc>
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b02      	cmp	r3, #2
 800d12a:	d129      	bne.n	800d180 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	68b9      	ldr	r1, [r7, #8]
 800d130:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d132:	f000 fa91 	bl	800d658 <prvCopyDataToQueue>
 800d136:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d010      	beq.n	800d162 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d142:	3324      	adds	r3, #36	@ 0x24
 800d144:	4618      	mov	r0, r3
 800d146:	f001 f8c5 	bl	800e2d4 <xTaskRemoveFromEventList>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d013      	beq.n	800d178 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d150:	4b3f      	ldr	r3, [pc, #252]	@ (800d250 <xQueueGenericSend+0x200>)
 800d152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d156:	601a      	str	r2, [r3, #0]
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	e00a      	b.n	800d178 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d164:	2b00      	cmp	r3, #0
 800d166:	d007      	beq.n	800d178 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d168:	4b39      	ldr	r3, [pc, #228]	@ (800d250 <xQueueGenericSend+0x200>)
 800d16a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d16e:	601a      	str	r2, [r3, #0]
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d178:	f002 f890 	bl	800f29c <vPortExitCritical>
				return pdPASS;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e063      	b.n	800d248 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d103      	bne.n	800d18e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d186:	f002 f889 	bl	800f29c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d18a:	2300      	movs	r3, #0
 800d18c:	e05c      	b.n	800d248 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d190:	2b00      	cmp	r3, #0
 800d192:	d106      	bne.n	800d1a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d194:	f107 0314 	add.w	r3, r7, #20
 800d198:	4618      	mov	r0, r3
 800d19a:	f001 f963 	bl	800e464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1a2:	f002 f87b 	bl	800f29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1a6:	f000 fe29 	bl	800ddfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1aa:	f002 f845 	bl	800f238 <vPortEnterCritical>
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1b4:	b25b      	sxtb	r3, r3
 800d1b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1ba:	d103      	bne.n	800d1c4 <xQueueGenericSend+0x174>
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1ca:	b25b      	sxtb	r3, r3
 800d1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1d0:	d103      	bne.n	800d1da <xQueueGenericSend+0x18a>
 800d1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1da:	f002 f85f 	bl	800f29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1de:	1d3a      	adds	r2, r7, #4
 800d1e0:	f107 0314 	add.w	r3, r7, #20
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f001 f952 	bl	800e490 <xTaskCheckForTimeOut>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d124      	bne.n	800d23c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d1f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1f4:	f000 fb28 	bl	800d848 <prvIsQueueFull>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d018      	beq.n	800d230 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d200:	3310      	adds	r3, #16
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	4611      	mov	r1, r2
 800d206:	4618      	mov	r0, r3
 800d208:	f000 ffd4 	bl	800e1b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d20c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d20e:	f000 fab3 	bl	800d778 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d212:	f000 fe01 	bl	800de18 <xTaskResumeAll>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f47f af7c 	bne.w	800d116 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d21e:	4b0c      	ldr	r3, [pc, #48]	@ (800d250 <xQueueGenericSend+0x200>)
 800d220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d224:	601a      	str	r2, [r3, #0]
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	e772      	b.n	800d116 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d232:	f000 faa1 	bl	800d778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d236:	f000 fdef 	bl	800de18 <xTaskResumeAll>
 800d23a:	e76c      	b.n	800d116 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d23c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d23e:	f000 fa9b 	bl	800d778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d242:	f000 fde9 	bl	800de18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d246:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3738      	adds	r7, #56	@ 0x38
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	e000ed04 	.word	0xe000ed04

0800d254 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b090      	sub	sp, #64	@ 0x40
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10b      	bne.n	800d284 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d270:	f383 8811 	msr	BASEPRI, r3
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d27e:	bf00      	nop
 800d280:	bf00      	nop
 800d282:	e7fd      	b.n	800d280 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d103      	bne.n	800d292 <xQueueGenericSendFromISR+0x3e>
 800d28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d101      	bne.n	800d296 <xQueueGenericSendFromISR+0x42>
 800d292:	2301      	movs	r3, #1
 800d294:	e000      	b.n	800d298 <xQueueGenericSendFromISR+0x44>
 800d296:	2300      	movs	r3, #0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10b      	bne.n	800d2b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d2ae:	bf00      	nop
 800d2b0:	bf00      	nop
 800d2b2:	e7fd      	b.n	800d2b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d103      	bne.n	800d2c2 <xQueueGenericSendFromISR+0x6e>
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d101      	bne.n	800d2c6 <xQueueGenericSendFromISR+0x72>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e000      	b.n	800d2c8 <xQueueGenericSendFromISR+0x74>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10b      	bne.n	800d2e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	623b      	str	r3, [r7, #32]
}
 800d2de:	bf00      	nop
 800d2e0:	bf00      	nop
 800d2e2:	e7fd      	b.n	800d2e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2e4:	f002 f888 	bl	800f3f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d2e8:	f3ef 8211 	mrs	r2, BASEPRI
 800d2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	61fa      	str	r2, [r7, #28]
 800d2fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d300:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d302:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d30a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d302      	bcc.n	800d316 <xQueueGenericSendFromISR+0xc2>
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	2b02      	cmp	r3, #2
 800d314:	d12f      	bne.n	800d376 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d31c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d324:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d326:	683a      	ldr	r2, [r7, #0]
 800d328:	68b9      	ldr	r1, [r7, #8]
 800d32a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d32c:	f000 f994 	bl	800d658 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d330:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d338:	d112      	bne.n	800d360 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d016      	beq.n	800d370 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d344:	3324      	adds	r3, #36	@ 0x24
 800d346:	4618      	mov	r0, r3
 800d348:	f000 ffc4 	bl	800e2d4 <xTaskRemoveFromEventList>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00e      	beq.n	800d370 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00b      	beq.n	800d370 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	e007      	b.n	800d370 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d360:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d364:	3301      	adds	r3, #1
 800d366:	b2db      	uxtb	r3, r3
 800d368:	b25a      	sxtb	r2, r3
 800d36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d370:	2301      	movs	r3, #1
 800d372:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d374:	e001      	b.n	800d37a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d376:	2300      	movs	r3, #0
 800d378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d37c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d384:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3740      	adds	r7, #64	@ 0x40
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b08c      	sub	sp, #48	@ 0x30
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d39c:	2300      	movs	r3, #0
 800d39e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10b      	bne.n	800d3c2 <xQueueReceive+0x32>
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	623b      	str	r3, [r7, #32]
}
 800d3bc:	bf00      	nop
 800d3be:	bf00      	nop
 800d3c0:	e7fd      	b.n	800d3be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d103      	bne.n	800d3d0 <xQueueReceive+0x40>
 800d3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <xQueueReceive+0x44>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e000      	b.n	800d3d6 <xQueueReceive+0x46>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10b      	bne.n	800d3f2 <xQueueReceive+0x62>
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	61fb      	str	r3, [r7, #28]
}
 800d3ec:	bf00      	nop
 800d3ee:	bf00      	nop
 800d3f0:	e7fd      	b.n	800d3ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3f2:	f001 f999 	bl	800e728 <xTaskGetSchedulerState>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d102      	bne.n	800d402 <xQueueReceive+0x72>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d101      	bne.n	800d406 <xQueueReceive+0x76>
 800d402:	2301      	movs	r3, #1
 800d404:	e000      	b.n	800d408 <xQueueReceive+0x78>
 800d406:	2300      	movs	r3, #0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10b      	bne.n	800d424 <xQueueReceive+0x94>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	61bb      	str	r3, [r7, #24]
}
 800d41e:	bf00      	nop
 800d420:	bf00      	nop
 800d422:	e7fd      	b.n	800d420 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d424:	f001 ff08 	bl	800f238 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d42c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d430:	2b00      	cmp	r3, #0
 800d432:	d01f      	beq.n	800d474 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d434:	68b9      	ldr	r1, [r7, #8]
 800d436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d438:	f000 f978 	bl	800d72c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	1e5a      	subs	r2, r3, #1
 800d440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d442:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d446:	691b      	ldr	r3, [r3, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d00f      	beq.n	800d46c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d44e:	3310      	adds	r3, #16
 800d450:	4618      	mov	r0, r3
 800d452:	f000 ff3f 	bl	800e2d4 <xTaskRemoveFromEventList>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d007      	beq.n	800d46c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d45c:	4b3c      	ldr	r3, [pc, #240]	@ (800d550 <xQueueReceive+0x1c0>)
 800d45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d46c:	f001 ff16 	bl	800f29c <vPortExitCritical>
				return pdPASS;
 800d470:	2301      	movs	r3, #1
 800d472:	e069      	b.n	800d548 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d103      	bne.n	800d482 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d47a:	f001 ff0f 	bl	800f29c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d47e:	2300      	movs	r3, #0
 800d480:	e062      	b.n	800d548 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d484:	2b00      	cmp	r3, #0
 800d486:	d106      	bne.n	800d496 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d488:	f107 0310 	add.w	r3, r7, #16
 800d48c:	4618      	mov	r0, r3
 800d48e:	f000 ffe9 	bl	800e464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d492:	2301      	movs	r3, #1
 800d494:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d496:	f001 ff01 	bl	800f29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d49a:	f000 fcaf 	bl	800ddfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d49e:	f001 fecb 	bl	800f238 <vPortEnterCritical>
 800d4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4a8:	b25b      	sxtb	r3, r3
 800d4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4ae:	d103      	bne.n	800d4b8 <xQueueReceive+0x128>
 800d4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4be:	b25b      	sxtb	r3, r3
 800d4c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4c4:	d103      	bne.n	800d4ce <xQueueReceive+0x13e>
 800d4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4ce:	f001 fee5 	bl	800f29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4d2:	1d3a      	adds	r2, r7, #4
 800d4d4:	f107 0310 	add.w	r3, r7, #16
 800d4d8:	4611      	mov	r1, r2
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 ffd8 	bl	800e490 <xTaskCheckForTimeOut>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d123      	bne.n	800d52e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4e8:	f000 f998 	bl	800d81c <prvIsQueueEmpty>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d017      	beq.n	800d522 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f4:	3324      	adds	r3, #36	@ 0x24
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 fe5a 	bl	800e1b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d502:	f000 f939 	bl	800d778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d506:	f000 fc87 	bl	800de18 <xTaskResumeAll>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d189      	bne.n	800d424 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d510:	4b0f      	ldr	r3, [pc, #60]	@ (800d550 <xQueueReceive+0x1c0>)
 800d512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d516:	601a      	str	r2, [r3, #0]
 800d518:	f3bf 8f4f 	dsb	sy
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	e780      	b.n	800d424 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d524:	f000 f928 	bl	800d778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d528:	f000 fc76 	bl	800de18 <xTaskResumeAll>
 800d52c:	e77a      	b.n	800d424 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d52e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d530:	f000 f922 	bl	800d778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d534:	f000 fc70 	bl	800de18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d53a:	f000 f96f 	bl	800d81c <prvIsQueueEmpty>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	f43f af6f 	beq.w	800d424 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d546:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3730      	adds	r7, #48	@ 0x30
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	e000ed04 	.word	0xe000ed04

0800d554 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08e      	sub	sp, #56	@ 0x38
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d566:	2b00      	cmp	r3, #0
 800d568:	d10b      	bne.n	800d582 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d56e:	f383 8811 	msr	BASEPRI, r3
 800d572:	f3bf 8f6f 	isb	sy
 800d576:	f3bf 8f4f 	dsb	sy
 800d57a:	623b      	str	r3, [r7, #32]
}
 800d57c:	bf00      	nop
 800d57e:	bf00      	nop
 800d580:	e7fd      	b.n	800d57e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d103      	bne.n	800d590 <xQueueReceiveFromISR+0x3c>
 800d588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d58a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d101      	bne.n	800d594 <xQueueReceiveFromISR+0x40>
 800d590:	2301      	movs	r3, #1
 800d592:	e000      	b.n	800d596 <xQueueReceiveFromISR+0x42>
 800d594:	2300      	movs	r3, #0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10b      	bne.n	800d5b2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59e:	f383 8811 	msr	BASEPRI, r3
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	61fb      	str	r3, [r7, #28]
}
 800d5ac:	bf00      	nop
 800d5ae:	bf00      	nop
 800d5b0:	e7fd      	b.n	800d5ae <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5b2:	f001 ff21 	bl	800f3f8 <vPortValidateInterruptPriority>
	__asm volatile
 800d5b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	61ba      	str	r2, [r7, #24]
 800d5cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d5ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d5d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d02f      	beq.n	800d63e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5e8:	68b9      	ldr	r1, [r7, #8]
 800d5ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5ec:	f000 f89e 	bl	800d72c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f2:	1e5a      	subs	r2, r3, #1
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d5f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d600:	d112      	bne.n	800d628 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d016      	beq.n	800d638 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	3310      	adds	r3, #16
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 fe60 	bl	800e2d4 <xTaskRemoveFromEventList>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00e      	beq.n	800d638 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00b      	beq.n	800d638 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	e007      	b.n	800d638 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d62c:	3301      	adds	r3, #1
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	b25a      	sxtb	r2, r3
 800d632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d638:	2301      	movs	r3, #1
 800d63a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d63c:	e001      	b.n	800d642 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d63e:	2300      	movs	r3, #0
 800d640:	637b      	str	r3, [r7, #52]	@ 0x34
 800d642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d644:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	f383 8811 	msr	BASEPRI, r3
}
 800d64c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d650:	4618      	mov	r0, r3
 800d652:	3738      	adds	r7, #56	@ 0x38
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d664:	2300      	movs	r3, #0
 800d666:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d66c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10d      	bne.n	800d692 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d14d      	bne.n	800d71a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	4618      	mov	r0, r3
 800d684:	f001 f86e 	bl	800e764 <xTaskPriorityDisinherit>
 800d688:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2200      	movs	r2, #0
 800d68e:	609a      	str	r2, [r3, #8]
 800d690:	e043      	b.n	800d71a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d119      	bne.n	800d6cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6858      	ldr	r0, [r3, #4]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	68b9      	ldr	r1, [r7, #8]
 800d6a4:	f002 ff79 	bl	801059a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b0:	441a      	add	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	685a      	ldr	r2, [r3, #4]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d32b      	bcc.n	800d71a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	605a      	str	r2, [r3, #4]
 800d6ca:	e026      	b.n	800d71a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	68d8      	ldr	r0, [r3, #12]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	68b9      	ldr	r1, [r7, #8]
 800d6d8:	f002 ff5f 	bl	801059a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	68da      	ldr	r2, [r3, #12]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6e4:	425b      	negs	r3, r3
 800d6e6:	441a      	add	r2, r3
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	68da      	ldr	r2, [r3, #12]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d207      	bcs.n	800d708 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	689a      	ldr	r2, [r3, #8]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d700:	425b      	negs	r3, r3
 800d702:	441a      	add	r2, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d105      	bne.n	800d71a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d002      	beq.n	800d71a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	3b01      	subs	r3, #1
 800d718:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d722:	697b      	ldr	r3, [r7, #20]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3718      	adds	r7, #24
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d018      	beq.n	800d770 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68da      	ldr	r2, [r3, #12]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d746:	441a      	add	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	68da      	ldr	r2, [r3, #12]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	689b      	ldr	r3, [r3, #8]
 800d754:	429a      	cmp	r2, r3
 800d756:	d303      	bcc.n	800d760 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	68d9      	ldr	r1, [r3, #12]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d768:	461a      	mov	r2, r3
 800d76a:	6838      	ldr	r0, [r7, #0]
 800d76c:	f002 ff15 	bl	801059a <memcpy>
	}
}
 800d770:	bf00      	nop
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d780:	f001 fd5a 	bl	800f238 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d78a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d78c:	e011      	b.n	800d7b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d792:	2b00      	cmp	r3, #0
 800d794:	d012      	beq.n	800d7bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	3324      	adds	r3, #36	@ 0x24
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fd9a 	bl	800e2d4 <xTaskRemoveFromEventList>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d7a6:	f000 fed7 	bl	800e558 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	dce9      	bgt.n	800d78e <prvUnlockQueue+0x16>
 800d7ba:	e000      	b.n	800d7be <prvUnlockQueue+0x46>
					break;
 800d7bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	22ff      	movs	r2, #255	@ 0xff
 800d7c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d7c6:	f001 fd69 	bl	800f29c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d7ca:	f001 fd35 	bl	800f238 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7d6:	e011      	b.n	800d7fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d012      	beq.n	800d806 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	3310      	adds	r3, #16
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f000 fd75 	bl	800e2d4 <xTaskRemoveFromEventList>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7f0:	f000 feb2 	bl	800e558 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d7f4:	7bbb      	ldrb	r3, [r7, #14]
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d800:	2b00      	cmp	r3, #0
 800d802:	dce9      	bgt.n	800d7d8 <prvUnlockQueue+0x60>
 800d804:	e000      	b.n	800d808 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d806:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	22ff      	movs	r2, #255	@ 0xff
 800d80c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d810:	f001 fd44 	bl	800f29c <vPortExitCritical>
}
 800d814:	bf00      	nop
 800d816:	3710      	adds	r7, #16
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d824:	f001 fd08 	bl	800f238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d102      	bne.n	800d836 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d830:	2301      	movs	r3, #1
 800d832:	60fb      	str	r3, [r7, #12]
 800d834:	e001      	b.n	800d83a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d836:	2300      	movs	r3, #0
 800d838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d83a:	f001 fd2f 	bl	800f29c <vPortExitCritical>

	return xReturn;
 800d83e:	68fb      	ldr	r3, [r7, #12]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d850:	f001 fcf2 	bl	800f238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d102      	bne.n	800d866 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d860:	2301      	movs	r3, #1
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	e001      	b.n	800d86a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d866:	2300      	movs	r3, #0
 800d868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d86a:	f001 fd17 	bl	800f29c <vPortExitCritical>

	return xReturn;
 800d86e:	68fb      	ldr	r3, [r7, #12]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d882:	2300      	movs	r3, #0
 800d884:	60fb      	str	r3, [r7, #12]
 800d886:	e014      	b.n	800d8b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d888:	4a0f      	ldr	r2, [pc, #60]	@ (800d8c8 <vQueueAddToRegistry+0x50>)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10b      	bne.n	800d8ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d894:	490c      	ldr	r1, [pc, #48]	@ (800d8c8 <vQueueAddToRegistry+0x50>)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d89e:	4a0a      	ldr	r2, [pc, #40]	@ (800d8c8 <vQueueAddToRegistry+0x50>)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	00db      	lsls	r3, r3, #3
 800d8a4:	4413      	add	r3, r2
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d8aa:	e006      	b.n	800d8ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	60fb      	str	r3, [r7, #12]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2b07      	cmp	r3, #7
 800d8b6:	d9e7      	bls.n	800d888 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d8b8:	bf00      	nop
 800d8ba:	bf00      	nop
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	20000b18 	.word	0x20000b18

0800d8cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d8dc:	f001 fcac 	bl	800f238 <vPortEnterCritical>
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d8e6:	b25b      	sxtb	r3, r3
 800d8e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8ec:	d103      	bne.n	800d8f6 <vQueueWaitForMessageRestricted+0x2a>
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8fc:	b25b      	sxtb	r3, r3
 800d8fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d902:	d103      	bne.n	800d90c <vQueueWaitForMessageRestricted+0x40>
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d90c:	f001 fcc6 	bl	800f29c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d914:	2b00      	cmp	r3, #0
 800d916:	d106      	bne.n	800d926 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	3324      	adds	r3, #36	@ 0x24
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	68b9      	ldr	r1, [r7, #8]
 800d920:	4618      	mov	r0, r3
 800d922:	f000 fcab 	bl	800e27c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d926:	6978      	ldr	r0, [r7, #20]
 800d928:	f7ff ff26 	bl	800d778 <prvUnlockQueue>
	}
 800d92c:	bf00      	nop
 800d92e:	3718      	adds	r7, #24
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08e      	sub	sp, #56	@ 0x38
 800d938:	af04      	add	r7, sp, #16
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10b      	bne.n	800d960 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94c:	f383 8811 	msr	BASEPRI, r3
 800d950:	f3bf 8f6f 	isb	sy
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	623b      	str	r3, [r7, #32]
}
 800d95a:	bf00      	nop
 800d95c:	bf00      	nop
 800d95e:	e7fd      	b.n	800d95c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10b      	bne.n	800d97e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96a:	f383 8811 	msr	BASEPRI, r3
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	61fb      	str	r3, [r7, #28]
}
 800d978:	bf00      	nop
 800d97a:	bf00      	nop
 800d97c:	e7fd      	b.n	800d97a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d97e:	23a8      	movs	r3, #168	@ 0xa8
 800d980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	2ba8      	cmp	r3, #168	@ 0xa8
 800d986:	d00b      	beq.n	800d9a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	61bb      	str	r3, [r7, #24]
}
 800d99a:	bf00      	nop
 800d99c:	bf00      	nop
 800d99e:	e7fd      	b.n	800d99c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d01e      	beq.n	800d9e6 <xTaskCreateStatic+0xb2>
 800d9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d01b      	beq.n	800d9e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ba:	2202      	movs	r2, #2
 800d9bc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	9303      	str	r3, [sp, #12]
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c6:	9302      	str	r3, [sp, #8]
 800d9c8:	f107 0314 	add.w	r3, r7, #20
 800d9cc:	9301      	str	r3, [sp, #4]
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	68b9      	ldr	r1, [r7, #8]
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 f851 	bl	800da80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d9e0:	f000 f8f6 	bl	800dbd0 <prvAddNewTaskToReadyList>
 800d9e4:	e001      	b.n	800d9ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9ea:	697b      	ldr	r3, [r7, #20]
	}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3728      	adds	r7, #40	@ 0x28
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b08c      	sub	sp, #48	@ 0x30
 800d9f8:	af04      	add	r7, sp, #16
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	4613      	mov	r3, r2
 800da02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da04:	88fb      	ldrh	r3, [r7, #6]
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	4618      	mov	r0, r3
 800da0a:	f001 fd37 	bl	800f47c <pvPortMalloc>
 800da0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00e      	beq.n	800da34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da16:	20a8      	movs	r0, #168	@ 0xa8
 800da18:	f001 fd30 	bl	800f47c <pvPortMalloc>
 800da1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d003      	beq.n	800da2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	631a      	str	r2, [r3, #48]	@ 0x30
 800da2a:	e005      	b.n	800da38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da2c:	6978      	ldr	r0, [r7, #20]
 800da2e:	f001 fdf3 	bl	800f618 <vPortFree>
 800da32:	e001      	b.n	800da38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da34:	2300      	movs	r3, #0
 800da36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d017      	beq.n	800da6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	2200      	movs	r2, #0
 800da42:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da46:	88fa      	ldrh	r2, [r7, #6]
 800da48:	2300      	movs	r3, #0
 800da4a:	9303      	str	r3, [sp, #12]
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	9302      	str	r3, [sp, #8]
 800da50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da52:	9301      	str	r3, [sp, #4]
 800da54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	68b9      	ldr	r1, [r7, #8]
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f000 f80f 	bl	800da80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da62:	69f8      	ldr	r0, [r7, #28]
 800da64:	f000 f8b4 	bl	800dbd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da68:	2301      	movs	r3, #1
 800da6a:	61bb      	str	r3, [r7, #24]
 800da6c:	e002      	b.n	800da74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da74:	69bb      	ldr	r3, [r7, #24]
	}
 800da76:	4618      	mov	r0, r3
 800da78:	3720      	adds	r7, #32
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
	...

0800da80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b088      	sub	sp, #32
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
 800da8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800da8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da90:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	461a      	mov	r2, r3
 800da98:	21a5      	movs	r1, #165	@ 0xa5
 800da9a:	f002 fc74 	bl	8010386 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800daa8:	3b01      	subs	r3, #1
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4413      	add	r3, r2
 800daae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	f023 0307 	bic.w	r3, r3, #7
 800dab6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	f003 0307 	and.w	r3, r3, #7
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00b      	beq.n	800dada <prvInitialiseNewTask+0x5a>
	__asm volatile
 800dac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac6:	f383 8811 	msr	BASEPRI, r3
 800daca:	f3bf 8f6f 	isb	sy
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	617b      	str	r3, [r7, #20]
}
 800dad4:	bf00      	nop
 800dad6:	bf00      	nop
 800dad8:	e7fd      	b.n	800dad6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d01f      	beq.n	800db20 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dae0:	2300      	movs	r3, #0
 800dae2:	61fb      	str	r3, [r7, #28]
 800dae4:	e012      	b.n	800db0c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dae6:	68ba      	ldr	r2, [r7, #8]
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	4413      	add	r3, r2
 800daec:	7819      	ldrb	r1, [r3, #0]
 800daee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	4413      	add	r3, r2
 800daf4:	3334      	adds	r3, #52	@ 0x34
 800daf6:	460a      	mov	r2, r1
 800daf8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	4413      	add	r3, r2
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d006      	beq.n	800db14 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	3301      	adds	r3, #1
 800db0a:	61fb      	str	r3, [r7, #28]
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	2b0f      	cmp	r3, #15
 800db10:	d9e9      	bls.n	800dae6 <prvInitialiseNewTask+0x66>
 800db12:	e000      	b.n	800db16 <prvInitialiseNewTask+0x96>
			{
				break;
 800db14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db18:	2200      	movs	r2, #0
 800db1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800db1e:	e003      	b.n	800db28 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db22:	2200      	movs	r2, #0
 800db24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2a:	2b37      	cmp	r3, #55	@ 0x37
 800db2c:	d901      	bls.n	800db32 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db2e:	2337      	movs	r3, #55	@ 0x37
 800db30:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db36:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db3c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db40:	2200      	movs	r2, #0
 800db42:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db46:	3304      	adds	r3, #4
 800db48:	4618      	mov	r0, r3
 800db4a:	f7ff f8a6 	bl	800cc9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db50:	3318      	adds	r3, #24
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff f8a1 	bl	800cc9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800db64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db6c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db70:	2200      	movs	r2, #0
 800db72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db80:	3354      	adds	r3, #84	@ 0x54
 800db82:	224c      	movs	r2, #76	@ 0x4c
 800db84:	2100      	movs	r1, #0
 800db86:	4618      	mov	r0, r3
 800db88:	f002 fbfd 	bl	8010386 <memset>
 800db8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8e:	4a0d      	ldr	r2, [pc, #52]	@ (800dbc4 <prvInitialiseNewTask+0x144>)
 800db90:	659a      	str	r2, [r3, #88]	@ 0x58
 800db92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db94:	4a0c      	ldr	r2, [pc, #48]	@ (800dbc8 <prvInitialiseNewTask+0x148>)
 800db96:	65da      	str	r2, [r3, #92]	@ 0x5c
 800db98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db9a:	4a0c      	ldr	r2, [pc, #48]	@ (800dbcc <prvInitialiseNewTask+0x14c>)
 800db9c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	68f9      	ldr	r1, [r7, #12]
 800dba2:	69b8      	ldr	r0, [r7, #24]
 800dba4:	f001 fa14 	bl	800efd0 <pxPortInitialiseStack>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbba:	bf00      	nop
 800dbbc:	3720      	adds	r7, #32
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	2000557c 	.word	0x2000557c
 800dbc8:	200055e4 	.word	0x200055e4
 800dbcc:	2000564c 	.word	0x2000564c

0800dbd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbd8:	f001 fb2e 	bl	800f238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dbdc:	4b2d      	ldr	r3, [pc, #180]	@ (800dc94 <prvAddNewTaskToReadyList+0xc4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	4a2c      	ldr	r2, [pc, #176]	@ (800dc94 <prvAddNewTaskToReadyList+0xc4>)
 800dbe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dbe6:	4b2c      	ldr	r3, [pc, #176]	@ (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d109      	bne.n	800dc02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dbee:	4a2a      	ldr	r2, [pc, #168]	@ (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbf4:	4b27      	ldr	r3, [pc, #156]	@ (800dc94 <prvAddNewTaskToReadyList+0xc4>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d110      	bne.n	800dc1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dbfc:	f000 fcd0 	bl	800e5a0 <prvInitialiseTaskLists>
 800dc00:	e00d      	b.n	800dc1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc02:	4b26      	ldr	r3, [pc, #152]	@ (800dc9c <prvAddNewTaskToReadyList+0xcc>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d109      	bne.n	800dc1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc0a:	4b23      	ldr	r3, [pc, #140]	@ (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d802      	bhi.n	800dc1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc18:	4a1f      	ldr	r2, [pc, #124]	@ (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc1e:	4b20      	ldr	r3, [pc, #128]	@ (800dca0 <prvAddNewTaskToReadyList+0xd0>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	3301      	adds	r3, #1
 800dc24:	4a1e      	ldr	r2, [pc, #120]	@ (800dca0 <prvAddNewTaskToReadyList+0xd0>)
 800dc26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc28:	4b1d      	ldr	r3, [pc, #116]	@ (800dca0 <prvAddNewTaskToReadyList+0xd0>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc34:	4b1b      	ldr	r3, [pc, #108]	@ (800dca4 <prvAddNewTaskToReadyList+0xd4>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d903      	bls.n	800dc44 <prvAddNewTaskToReadyList+0x74>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc40:	4a18      	ldr	r2, [pc, #96]	@ (800dca4 <prvAddNewTaskToReadyList+0xd4>)
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc48:	4613      	mov	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4a15      	ldr	r2, [pc, #84]	@ (800dca8 <prvAddNewTaskToReadyList+0xd8>)
 800dc52:	441a      	add	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	3304      	adds	r3, #4
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f7ff f82a 	bl	800ccb4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc60:	f001 fb1c 	bl	800f29c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc64:	4b0d      	ldr	r3, [pc, #52]	@ (800dc9c <prvAddNewTaskToReadyList+0xcc>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00e      	beq.n	800dc8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc6c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc98 <prvAddNewTaskToReadyList+0xc8>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d207      	bcs.n	800dc8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc7a:	4b0c      	ldr	r3, [pc, #48]	@ (800dcac <prvAddNewTaskToReadyList+0xdc>)
 800dc7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc80:	601a      	str	r2, [r3, #0]
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc8a:	bf00      	nop
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	2000102c 	.word	0x2000102c
 800dc98:	20000b58 	.word	0x20000b58
 800dc9c:	20001038 	.word	0x20001038
 800dca0:	20001048 	.word	0x20001048
 800dca4:	20001034 	.word	0x20001034
 800dca8:	20000b5c 	.word	0x20000b5c
 800dcac:	e000ed04 	.word	0xe000ed04

0800dcb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d018      	beq.n	800dcf4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcc2:	4b14      	ldr	r3, [pc, #80]	@ (800dd14 <vTaskDelay+0x64>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00b      	beq.n	800dce2 <vTaskDelay+0x32>
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	60bb      	str	r3, [r7, #8]
}
 800dcdc:	bf00      	nop
 800dcde:	bf00      	nop
 800dce0:	e7fd      	b.n	800dcde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dce2:	f000 f88b 	bl	800ddfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dce6:	2100      	movs	r1, #0
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fdc3 	bl	800e874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dcee:	f000 f893 	bl	800de18 <xTaskResumeAll>
 800dcf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d107      	bne.n	800dd0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dcfa:	4b07      	ldr	r3, [pc, #28]	@ (800dd18 <vTaskDelay+0x68>)
 800dcfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd0a:	bf00      	nop
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20001054 	.word	0x20001054
 800dd18:	e000ed04 	.word	0xe000ed04

0800dd1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b08a      	sub	sp, #40	@ 0x28
 800dd20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd22:	2300      	movs	r3, #0
 800dd24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd26:	2300      	movs	r3, #0
 800dd28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd2a:	463a      	mov	r2, r7
 800dd2c:	1d39      	adds	r1, r7, #4
 800dd2e:	f107 0308 	add.w	r3, r7, #8
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe fd50 	bl	800c7d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	9202      	str	r2, [sp, #8]
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	2300      	movs	r3, #0
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	2300      	movs	r3, #0
 800dd48:	460a      	mov	r2, r1
 800dd4a:	4924      	ldr	r1, [pc, #144]	@ (800dddc <vTaskStartScheduler+0xc0>)
 800dd4c:	4824      	ldr	r0, [pc, #144]	@ (800dde0 <vTaskStartScheduler+0xc4>)
 800dd4e:	f7ff fdf1 	bl	800d934 <xTaskCreateStatic>
 800dd52:	4603      	mov	r3, r0
 800dd54:	4a23      	ldr	r2, [pc, #140]	@ (800dde4 <vTaskStartScheduler+0xc8>)
 800dd56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd58:	4b22      	ldr	r3, [pc, #136]	@ (800dde4 <vTaskStartScheduler+0xc8>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd60:	2301      	movs	r3, #1
 800dd62:	617b      	str	r3, [r7, #20]
 800dd64:	e001      	b.n	800dd6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd66:	2300      	movs	r3, #0
 800dd68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d102      	bne.n	800dd76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd70:	f000 fdd4 	bl	800e91c <xTimerCreateTimerTask>
 800dd74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d11b      	bne.n	800ddb4 <vTaskStartScheduler+0x98>
	__asm volatile
 800dd7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
 800dd8c:	613b      	str	r3, [r7, #16]
}
 800dd8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd90:	4b15      	ldr	r3, [pc, #84]	@ (800dde8 <vTaskStartScheduler+0xcc>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3354      	adds	r3, #84	@ 0x54
 800dd96:	4a15      	ldr	r2, [pc, #84]	@ (800ddec <vTaskStartScheduler+0xd0>)
 800dd98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd9a:	4b15      	ldr	r3, [pc, #84]	@ (800ddf0 <vTaskStartScheduler+0xd4>)
 800dd9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dda0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dda2:	4b14      	ldr	r3, [pc, #80]	@ (800ddf4 <vTaskStartScheduler+0xd8>)
 800dda4:	2201      	movs	r2, #1
 800dda6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dda8:	4b13      	ldr	r3, [pc, #76]	@ (800ddf8 <vTaskStartScheduler+0xdc>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddae:	f001 f99f 	bl	800f0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddb2:	e00f      	b.n	800ddd4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ddba:	d10b      	bne.n	800ddd4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc0:	f383 8811 	msr	BASEPRI, r3
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	60fb      	str	r3, [r7, #12]
}
 800ddce:	bf00      	nop
 800ddd0:	bf00      	nop
 800ddd2:	e7fd      	b.n	800ddd0 <vTaskStartScheduler+0xb4>
}
 800ddd4:	bf00      	nop
 800ddd6:	3718      	adds	r7, #24
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	080113c4 	.word	0x080113c4
 800dde0:	0800e571 	.word	0x0800e571
 800dde4:	20001050 	.word	0x20001050
 800dde8:	20000b58 	.word	0x20000b58
 800ddec:	2000003c 	.word	0x2000003c
 800ddf0:	2000104c 	.word	0x2000104c
 800ddf4:	20001038 	.word	0x20001038
 800ddf8:	20001030 	.word	0x20001030

0800ddfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de00:	4b04      	ldr	r3, [pc, #16]	@ (800de14 <vTaskSuspendAll+0x18>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	3301      	adds	r3, #1
 800de06:	4a03      	ldr	r2, [pc, #12]	@ (800de14 <vTaskSuspendAll+0x18>)
 800de08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de0a:	bf00      	nop
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	20001054 	.word	0x20001054

0800de18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de22:	2300      	movs	r3, #0
 800de24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de26:	4b42      	ldr	r3, [pc, #264]	@ (800df30 <xTaskResumeAll+0x118>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10b      	bne.n	800de46 <xTaskResumeAll+0x2e>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	603b      	str	r3, [r7, #0]
}
 800de40:	bf00      	nop
 800de42:	bf00      	nop
 800de44:	e7fd      	b.n	800de42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de46:	f001 f9f7 	bl	800f238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de4a:	4b39      	ldr	r3, [pc, #228]	@ (800df30 <xTaskResumeAll+0x118>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3b01      	subs	r3, #1
 800de50:	4a37      	ldr	r2, [pc, #220]	@ (800df30 <xTaskResumeAll+0x118>)
 800de52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de54:	4b36      	ldr	r3, [pc, #216]	@ (800df30 <xTaskResumeAll+0x118>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d162      	bne.n	800df22 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de5c:	4b35      	ldr	r3, [pc, #212]	@ (800df34 <xTaskResumeAll+0x11c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d05e      	beq.n	800df22 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de64:	e02f      	b.n	800dec6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de66:	4b34      	ldr	r3, [pc, #208]	@ (800df38 <xTaskResumeAll+0x120>)
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3318      	adds	r3, #24
 800de72:	4618      	mov	r0, r3
 800de74:	f7fe ff7b 	bl	800cd6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	3304      	adds	r3, #4
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fe ff76 	bl	800cd6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de86:	4b2d      	ldr	r3, [pc, #180]	@ (800df3c <xTaskResumeAll+0x124>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d903      	bls.n	800de96 <xTaskResumeAll+0x7e>
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de92:	4a2a      	ldr	r2, [pc, #168]	@ (800df3c <xTaskResumeAll+0x124>)
 800de94:	6013      	str	r3, [r2, #0]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de9a:	4613      	mov	r3, r2
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4413      	add	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4a27      	ldr	r2, [pc, #156]	@ (800df40 <xTaskResumeAll+0x128>)
 800dea4:	441a      	add	r2, r3
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	3304      	adds	r3, #4
 800deaa:	4619      	mov	r1, r3
 800deac:	4610      	mov	r0, r2
 800deae:	f7fe ff01 	bl	800ccb4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deb6:	4b23      	ldr	r3, [pc, #140]	@ (800df44 <xTaskResumeAll+0x12c>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800debc:	429a      	cmp	r2, r3
 800debe:	d302      	bcc.n	800dec6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dec0:	4b21      	ldr	r3, [pc, #132]	@ (800df48 <xTaskResumeAll+0x130>)
 800dec2:	2201      	movs	r2, #1
 800dec4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dec6:	4b1c      	ldr	r3, [pc, #112]	@ (800df38 <xTaskResumeAll+0x120>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1cb      	bne.n	800de66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d001      	beq.n	800ded8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ded4:	f000 fc08 	bl	800e6e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ded8:	4b1c      	ldr	r3, [pc, #112]	@ (800df4c <xTaskResumeAll+0x134>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d010      	beq.n	800df06 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dee4:	f000 f846 	bl	800df74 <xTaskIncrementTick>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d002      	beq.n	800def4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800deee:	4b16      	ldr	r3, [pc, #88]	@ (800df48 <xTaskResumeAll+0x130>)
 800def0:	2201      	movs	r2, #1
 800def2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	3b01      	subs	r3, #1
 800def8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d1f1      	bne.n	800dee4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800df00:	4b12      	ldr	r3, [pc, #72]	@ (800df4c <xTaskResumeAll+0x134>)
 800df02:	2200      	movs	r2, #0
 800df04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df06:	4b10      	ldr	r3, [pc, #64]	@ (800df48 <xTaskResumeAll+0x130>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d009      	beq.n	800df22 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df0e:	2301      	movs	r3, #1
 800df10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df12:	4b0f      	ldr	r3, [pc, #60]	@ (800df50 <xTaskResumeAll+0x138>)
 800df14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df18:	601a      	str	r2, [r3, #0]
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df22:	f001 f9bb 	bl	800f29c <vPortExitCritical>

	return xAlreadyYielded;
 800df26:	68bb      	ldr	r3, [r7, #8]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3710      	adds	r7, #16
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	20001054 	.word	0x20001054
 800df34:	2000102c 	.word	0x2000102c
 800df38:	20000fec 	.word	0x20000fec
 800df3c:	20001034 	.word	0x20001034
 800df40:	20000b5c 	.word	0x20000b5c
 800df44:	20000b58 	.word	0x20000b58
 800df48:	20001040 	.word	0x20001040
 800df4c:	2000103c 	.word	0x2000103c
 800df50:	e000ed04 	.word	0xe000ed04

0800df54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df5a:	4b05      	ldr	r3, [pc, #20]	@ (800df70 <xTaskGetTickCount+0x1c>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df60:	687b      	ldr	r3, [r7, #4]
}
 800df62:	4618      	mov	r0, r3
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	20001030 	.word	0x20001030

0800df74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df7a:	2300      	movs	r3, #0
 800df7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df7e:	4b4f      	ldr	r3, [pc, #316]	@ (800e0bc <xTaskIncrementTick+0x148>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	f040 8090 	bne.w	800e0a8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df88:	4b4d      	ldr	r3, [pc, #308]	@ (800e0c0 <xTaskIncrementTick+0x14c>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3301      	adds	r3, #1
 800df8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df90:	4a4b      	ldr	r2, [pc, #300]	@ (800e0c0 <xTaskIncrementTick+0x14c>)
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d121      	bne.n	800dfe0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800df9c:	4b49      	ldr	r3, [pc, #292]	@ (800e0c4 <xTaskIncrementTick+0x150>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00b      	beq.n	800dfbe <xTaskIncrementTick+0x4a>
	__asm volatile
 800dfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfaa:	f383 8811 	msr	BASEPRI, r3
 800dfae:	f3bf 8f6f 	isb	sy
 800dfb2:	f3bf 8f4f 	dsb	sy
 800dfb6:	603b      	str	r3, [r7, #0]
}
 800dfb8:	bf00      	nop
 800dfba:	bf00      	nop
 800dfbc:	e7fd      	b.n	800dfba <xTaskIncrementTick+0x46>
 800dfbe:	4b41      	ldr	r3, [pc, #260]	@ (800e0c4 <xTaskIncrementTick+0x150>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	60fb      	str	r3, [r7, #12]
 800dfc4:	4b40      	ldr	r3, [pc, #256]	@ (800e0c8 <xTaskIncrementTick+0x154>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a3e      	ldr	r2, [pc, #248]	@ (800e0c4 <xTaskIncrementTick+0x150>)
 800dfca:	6013      	str	r3, [r2, #0]
 800dfcc:	4a3e      	ldr	r2, [pc, #248]	@ (800e0c8 <xTaskIncrementTick+0x154>)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	6013      	str	r3, [r2, #0]
 800dfd2:	4b3e      	ldr	r3, [pc, #248]	@ (800e0cc <xTaskIncrementTick+0x158>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	4a3c      	ldr	r2, [pc, #240]	@ (800e0cc <xTaskIncrementTick+0x158>)
 800dfda:	6013      	str	r3, [r2, #0]
 800dfdc:	f000 fb84 	bl	800e6e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dfe0:	4b3b      	ldr	r3, [pc, #236]	@ (800e0d0 <xTaskIncrementTick+0x15c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	693a      	ldr	r2, [r7, #16]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d349      	bcc.n	800e07e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfea:	4b36      	ldr	r3, [pc, #216]	@ (800e0c4 <xTaskIncrementTick+0x150>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d104      	bne.n	800dffe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dff4:	4b36      	ldr	r3, [pc, #216]	@ (800e0d0 <xTaskIncrementTick+0x15c>)
 800dff6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dffa:	601a      	str	r2, [r3, #0]
					break;
 800dffc:	e03f      	b.n	800e07e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dffe:	4b31      	ldr	r3, [pc, #196]	@ (800e0c4 <xTaskIncrementTick+0x150>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e00e:	693a      	ldr	r2, [r7, #16]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	429a      	cmp	r2, r3
 800e014:	d203      	bcs.n	800e01e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e016:	4a2e      	ldr	r2, [pc, #184]	@ (800e0d0 <xTaskIncrementTick+0x15c>)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e01c:	e02f      	b.n	800e07e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	3304      	adds	r3, #4
 800e022:	4618      	mov	r0, r3
 800e024:	f7fe fea3 	bl	800cd6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d004      	beq.n	800e03a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	3318      	adds	r3, #24
 800e034:	4618      	mov	r0, r3
 800e036:	f7fe fe9a 	bl	800cd6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e03e:	4b25      	ldr	r3, [pc, #148]	@ (800e0d4 <xTaskIncrementTick+0x160>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	429a      	cmp	r2, r3
 800e044:	d903      	bls.n	800e04e <xTaskIncrementTick+0xda>
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e04a:	4a22      	ldr	r2, [pc, #136]	@ (800e0d4 <xTaskIncrementTick+0x160>)
 800e04c:	6013      	str	r3, [r2, #0]
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e052:	4613      	mov	r3, r2
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	4413      	add	r3, r2
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	4a1f      	ldr	r2, [pc, #124]	@ (800e0d8 <xTaskIncrementTick+0x164>)
 800e05c:	441a      	add	r2, r3
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	3304      	adds	r3, #4
 800e062:	4619      	mov	r1, r3
 800e064:	4610      	mov	r0, r2
 800e066:	f7fe fe25 	bl	800ccb4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e06e:	4b1b      	ldr	r3, [pc, #108]	@ (800e0dc <xTaskIncrementTick+0x168>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e074:	429a      	cmp	r2, r3
 800e076:	d3b8      	bcc.n	800dfea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e078:	2301      	movs	r3, #1
 800e07a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e07c:	e7b5      	b.n	800dfea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e07e:	4b17      	ldr	r3, [pc, #92]	@ (800e0dc <xTaskIncrementTick+0x168>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e084:	4914      	ldr	r1, [pc, #80]	@ (800e0d8 <xTaskIncrementTick+0x164>)
 800e086:	4613      	mov	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	440b      	add	r3, r1
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d901      	bls.n	800e09a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e096:	2301      	movs	r3, #1
 800e098:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e09a:	4b11      	ldr	r3, [pc, #68]	@ (800e0e0 <xTaskIncrementTick+0x16c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d007      	beq.n	800e0b2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	617b      	str	r3, [r7, #20]
 800e0a6:	e004      	b.n	800e0b2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e0e4 <xTaskIncrementTick+0x170>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	4a0d      	ldr	r2, [pc, #52]	@ (800e0e4 <xTaskIncrementTick+0x170>)
 800e0b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0b2:	697b      	ldr	r3, [r7, #20]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3718      	adds	r7, #24
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	20001054 	.word	0x20001054
 800e0c0:	20001030 	.word	0x20001030
 800e0c4:	20000fe4 	.word	0x20000fe4
 800e0c8:	20000fe8 	.word	0x20000fe8
 800e0cc:	20001044 	.word	0x20001044
 800e0d0:	2000104c 	.word	0x2000104c
 800e0d4:	20001034 	.word	0x20001034
 800e0d8:	20000b5c 	.word	0x20000b5c
 800e0dc:	20000b58 	.word	0x20000b58
 800e0e0:	20001040 	.word	0x20001040
 800e0e4:	2000103c 	.word	0x2000103c

0800e0e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e0ee:	4b2b      	ldr	r3, [pc, #172]	@ (800e19c <vTaskSwitchContext+0xb4>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d003      	beq.n	800e0fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e0f6:	4b2a      	ldr	r3, [pc, #168]	@ (800e1a0 <vTaskSwitchContext+0xb8>)
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e0fc:	e047      	b.n	800e18e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e0fe:	4b28      	ldr	r3, [pc, #160]	@ (800e1a0 <vTaskSwitchContext+0xb8>)
 800e100:	2200      	movs	r2, #0
 800e102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e104:	4b27      	ldr	r3, [pc, #156]	@ (800e1a4 <vTaskSwitchContext+0xbc>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	60fb      	str	r3, [r7, #12]
 800e10a:	e011      	b.n	800e130 <vTaskSwitchContext+0x48>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10b      	bne.n	800e12a <vTaskSwitchContext+0x42>
	__asm volatile
 800e112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e116:	f383 8811 	msr	BASEPRI, r3
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	607b      	str	r3, [r7, #4]
}
 800e124:	bf00      	nop
 800e126:	bf00      	nop
 800e128:	e7fd      	b.n	800e126 <vTaskSwitchContext+0x3e>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	3b01      	subs	r3, #1
 800e12e:	60fb      	str	r3, [r7, #12]
 800e130:	491d      	ldr	r1, [pc, #116]	@ (800e1a8 <vTaskSwitchContext+0xc0>)
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	4613      	mov	r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	440b      	add	r3, r1
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0e3      	beq.n	800e10c <vTaskSwitchContext+0x24>
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	4613      	mov	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4413      	add	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4a16      	ldr	r2, [pc, #88]	@ (800e1a8 <vTaskSwitchContext+0xc0>)
 800e150:	4413      	add	r3, r2
 800e152:	60bb      	str	r3, [r7, #8]
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	605a      	str	r2, [r3, #4]
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	3308      	adds	r3, #8
 800e166:	429a      	cmp	r2, r3
 800e168:	d104      	bne.n	800e174 <vTaskSwitchContext+0x8c>
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	605a      	str	r2, [r3, #4]
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	4a0c      	ldr	r2, [pc, #48]	@ (800e1ac <vTaskSwitchContext+0xc4>)
 800e17c:	6013      	str	r3, [r2, #0]
 800e17e:	4a09      	ldr	r2, [pc, #36]	@ (800e1a4 <vTaskSwitchContext+0xbc>)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e184:	4b09      	ldr	r3, [pc, #36]	@ (800e1ac <vTaskSwitchContext+0xc4>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3354      	adds	r3, #84	@ 0x54
 800e18a:	4a09      	ldr	r2, [pc, #36]	@ (800e1b0 <vTaskSwitchContext+0xc8>)
 800e18c:	6013      	str	r3, [r2, #0]
}
 800e18e:	bf00      	nop
 800e190:	3714      	adds	r7, #20
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop
 800e19c:	20001054 	.word	0x20001054
 800e1a0:	20001040 	.word	0x20001040
 800e1a4:	20001034 	.word	0x20001034
 800e1a8:	20000b5c 	.word	0x20000b5c
 800e1ac:	20000b58 	.word	0x20000b58
 800e1b0:	2000003c 	.word	0x2000003c

0800e1b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10b      	bne.n	800e1dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	60fb      	str	r3, [r7, #12]
}
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	e7fd      	b.n	800e1d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1dc:	4b07      	ldr	r3, [pc, #28]	@ (800e1fc <vTaskPlaceOnEventList+0x48>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	3318      	adds	r3, #24
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7fe fd89 	bl	800ccfc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1ea:	2101      	movs	r1, #1
 800e1ec:	6838      	ldr	r0, [r7, #0]
 800e1ee:	f000 fb41 	bl	800e874 <prvAddCurrentTaskToDelayedList>
}
 800e1f2:	bf00      	nop
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	20000b58 	.word	0x20000b58

0800e200 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10b      	bne.n	800e22a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	617b      	str	r3, [r7, #20]
}
 800e224:	bf00      	nop
 800e226:	bf00      	nop
 800e228:	e7fd      	b.n	800e226 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e22a:	4b12      	ldr	r3, [pc, #72]	@ (800e274 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10b      	bne.n	800e24a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	613b      	str	r3, [r7, #16]
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop
 800e248:	e7fd      	b.n	800e246 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e24a:	4b0b      	ldr	r3, [pc, #44]	@ (800e278 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e254:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e256:	4b08      	ldr	r3, [pc, #32]	@ (800e278 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3318      	adds	r3, #24
 800e25c:	4619      	mov	r1, r3
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f7fe fd28 	bl	800ccb4 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e264:	2101      	movs	r1, #1
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fb04 	bl	800e874 <prvAddCurrentTaskToDelayedList>
}
 800e26c:	bf00      	nop
 800e26e:	3718      	adds	r7, #24
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	20001054 	.word	0x20001054
 800e278:	20000b58 	.word	0x20000b58

0800e27c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10b      	bne.n	800e2a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e292:	f383 8811 	msr	BASEPRI, r3
 800e296:	f3bf 8f6f 	isb	sy
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	617b      	str	r3, [r7, #20]
}
 800e2a0:	bf00      	nop
 800e2a2:	bf00      	nop
 800e2a4:	e7fd      	b.n	800e2a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e2d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	3318      	adds	r3, #24
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f7fe fd00 	bl	800ccb4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e2ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e2be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e2c0:	6879      	ldr	r1, [r7, #4]
 800e2c2:	68b8      	ldr	r0, [r7, #8]
 800e2c4:	f000 fad6 	bl	800e874 <prvAddCurrentTaskToDelayedList>
	}
 800e2c8:	bf00      	nop
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	20000b58 	.word	0x20000b58

0800e2d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10b      	bne.n	800e302 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	60fb      	str	r3, [r7, #12]
}
 800e2fc:	bf00      	nop
 800e2fe:	bf00      	nop
 800e300:	e7fd      	b.n	800e2fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	3318      	adds	r3, #24
 800e306:	4618      	mov	r0, r3
 800e308:	f7fe fd31 	bl	800cd6e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e30c:	4b1d      	ldr	r3, [pc, #116]	@ (800e384 <xTaskRemoveFromEventList+0xb0>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d11d      	bne.n	800e350 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	3304      	adds	r3, #4
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fe fd28 	bl	800cd6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e322:	4b19      	ldr	r3, [pc, #100]	@ (800e388 <xTaskRemoveFromEventList+0xb4>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	d903      	bls.n	800e332 <xTaskRemoveFromEventList+0x5e>
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e32e:	4a16      	ldr	r2, [pc, #88]	@ (800e388 <xTaskRemoveFromEventList+0xb4>)
 800e330:	6013      	str	r3, [r2, #0]
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e336:	4613      	mov	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	4413      	add	r3, r2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	4a13      	ldr	r2, [pc, #76]	@ (800e38c <xTaskRemoveFromEventList+0xb8>)
 800e340:	441a      	add	r2, r3
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	3304      	adds	r3, #4
 800e346:	4619      	mov	r1, r3
 800e348:	4610      	mov	r0, r2
 800e34a:	f7fe fcb3 	bl	800ccb4 <vListInsertEnd>
 800e34e:	e005      	b.n	800e35c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	3318      	adds	r3, #24
 800e354:	4619      	mov	r1, r3
 800e356:	480e      	ldr	r0, [pc, #56]	@ (800e390 <xTaskRemoveFromEventList+0xbc>)
 800e358:	f7fe fcac 	bl	800ccb4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e360:	4b0c      	ldr	r3, [pc, #48]	@ (800e394 <xTaskRemoveFromEventList+0xc0>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e366:	429a      	cmp	r2, r3
 800e368:	d905      	bls.n	800e376 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e36a:	2301      	movs	r3, #1
 800e36c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e36e:	4b0a      	ldr	r3, [pc, #40]	@ (800e398 <xTaskRemoveFromEventList+0xc4>)
 800e370:	2201      	movs	r2, #1
 800e372:	601a      	str	r2, [r3, #0]
 800e374:	e001      	b.n	800e37a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e376:	2300      	movs	r3, #0
 800e378:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e37a:	697b      	ldr	r3, [r7, #20]
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	20001054 	.word	0x20001054
 800e388:	20001034 	.word	0x20001034
 800e38c:	20000b5c 	.word	0x20000b5c
 800e390:	20000fec 	.word	0x20000fec
 800e394:	20000b58 	.word	0x20000b58
 800e398:	20001040 	.word	0x20001040

0800e39c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e3a6:	4b2a      	ldr	r3, [pc, #168]	@ (800e450 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d10b      	bne.n	800e3c6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	613b      	str	r3, [r7, #16]
}
 800e3c0:	bf00      	nop
 800e3c2:	bf00      	nop
 800e3c4:	e7fd      	b.n	800e3c2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10b      	bne.n	800e3f4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	60fb      	str	r3, [r7, #12]
}
 800e3ee:	bf00      	nop
 800e3f0:	bf00      	nop
 800e3f2:	e7fd      	b.n	800e3f0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f7fe fcba 	bl	800cd6e <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	3304      	adds	r3, #4
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe fcb5 	bl	800cd6e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e408:	4b12      	ldr	r3, [pc, #72]	@ (800e454 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d903      	bls.n	800e418 <vTaskRemoveFromUnorderedEventList+0x7c>
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e414:	4a0f      	ldr	r2, [pc, #60]	@ (800e454 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e416:	6013      	str	r3, [r2, #0]
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e41c:	4613      	mov	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4a0c      	ldr	r2, [pc, #48]	@ (800e458 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e426:	441a      	add	r2, r3
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	3304      	adds	r3, #4
 800e42c:	4619      	mov	r1, r3
 800e42e:	4610      	mov	r0, r2
 800e430:	f7fe fc40 	bl	800ccb4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e438:	4b08      	ldr	r3, [pc, #32]	@ (800e45c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43e:	429a      	cmp	r2, r3
 800e440:	d902      	bls.n	800e448 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e442:	4b07      	ldr	r3, [pc, #28]	@ (800e460 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e444:	2201      	movs	r2, #1
 800e446:	601a      	str	r2, [r3, #0]
	}
}
 800e448:	bf00      	nop
 800e44a:	3718      	adds	r7, #24
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	20001054 	.word	0x20001054
 800e454:	20001034 	.word	0x20001034
 800e458:	20000b5c 	.word	0x20000b5c
 800e45c:	20000b58 	.word	0x20000b58
 800e460:	20001040 	.word	0x20001040

0800e464 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e46c:	4b06      	ldr	r3, [pc, #24]	@ (800e488 <vTaskInternalSetTimeOutState+0x24>)
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e474:	4b05      	ldr	r3, [pc, #20]	@ (800e48c <vTaskInternalSetTimeOutState+0x28>)
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	605a      	str	r2, [r3, #4]
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	20001044 	.word	0x20001044
 800e48c:	20001030 	.word	0x20001030

0800e490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b088      	sub	sp, #32
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d10b      	bne.n	800e4b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	613b      	str	r3, [r7, #16]
}
 800e4b2:	bf00      	nop
 800e4b4:	bf00      	nop
 800e4b6:	e7fd      	b.n	800e4b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d10b      	bne.n	800e4d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c2:	f383 8811 	msr	BASEPRI, r3
 800e4c6:	f3bf 8f6f 	isb	sy
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	60fb      	str	r3, [r7, #12]
}
 800e4d0:	bf00      	nop
 800e4d2:	bf00      	nop
 800e4d4:	e7fd      	b.n	800e4d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e4d6:	f000 feaf 	bl	800f238 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e4da:	4b1d      	ldr	r3, [pc, #116]	@ (800e550 <xTaskCheckForTimeOut+0xc0>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	69ba      	ldr	r2, [r7, #24]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4f2:	d102      	bne.n	800e4fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	61fb      	str	r3, [r7, #28]
 800e4f8:	e023      	b.n	800e542 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	4b15      	ldr	r3, [pc, #84]	@ (800e554 <xTaskCheckForTimeOut+0xc4>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	429a      	cmp	r2, r3
 800e504:	d007      	beq.n	800e516 <xTaskCheckForTimeOut+0x86>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	69ba      	ldr	r2, [r7, #24]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d302      	bcc.n	800e516 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e510:	2301      	movs	r3, #1
 800e512:	61fb      	str	r3, [r7, #28]
 800e514:	e015      	b.n	800e542 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d20b      	bcs.n	800e538 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	1ad2      	subs	r2, r2, r3
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff ff99 	bl	800e464 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e532:	2300      	movs	r3, #0
 800e534:	61fb      	str	r3, [r7, #28]
 800e536:	e004      	b.n	800e542 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	2200      	movs	r2, #0
 800e53c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e53e:	2301      	movs	r3, #1
 800e540:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e542:	f000 feab 	bl	800f29c <vPortExitCritical>

	return xReturn;
 800e546:	69fb      	ldr	r3, [r7, #28]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3720      	adds	r7, #32
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	20001030 	.word	0x20001030
 800e554:	20001044 	.word	0x20001044

0800e558 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e558:	b480      	push	{r7}
 800e55a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e55c:	4b03      	ldr	r3, [pc, #12]	@ (800e56c <vTaskMissedYield+0x14>)
 800e55e:	2201      	movs	r2, #1
 800e560:	601a      	str	r2, [r3, #0]
}
 800e562:	bf00      	nop
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	20001040 	.word	0x20001040

0800e570 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e578:	f000 f852 	bl	800e620 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e57c:	4b06      	ldr	r3, [pc, #24]	@ (800e598 <prvIdleTask+0x28>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2b01      	cmp	r3, #1
 800e582:	d9f9      	bls.n	800e578 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e584:	4b05      	ldr	r3, [pc, #20]	@ (800e59c <prvIdleTask+0x2c>)
 800e586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e594:	e7f0      	b.n	800e578 <prvIdleTask+0x8>
 800e596:	bf00      	nop
 800e598:	20000b5c 	.word	0x20000b5c
 800e59c:	e000ed04 	.word	0xe000ed04

0800e5a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	607b      	str	r3, [r7, #4]
 800e5aa:	e00c      	b.n	800e5c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4a12      	ldr	r2, [pc, #72]	@ (800e600 <prvInitialiseTaskLists+0x60>)
 800e5b8:	4413      	add	r3, r2
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fe fb4d 	bl	800cc5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	607b      	str	r3, [r7, #4]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2b37      	cmp	r3, #55	@ 0x37
 800e5ca:	d9ef      	bls.n	800e5ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e5cc:	480d      	ldr	r0, [pc, #52]	@ (800e604 <prvInitialiseTaskLists+0x64>)
 800e5ce:	f7fe fb44 	bl	800cc5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e5d2:	480d      	ldr	r0, [pc, #52]	@ (800e608 <prvInitialiseTaskLists+0x68>)
 800e5d4:	f7fe fb41 	bl	800cc5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e5d8:	480c      	ldr	r0, [pc, #48]	@ (800e60c <prvInitialiseTaskLists+0x6c>)
 800e5da:	f7fe fb3e 	bl	800cc5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e5de:	480c      	ldr	r0, [pc, #48]	@ (800e610 <prvInitialiseTaskLists+0x70>)
 800e5e0:	f7fe fb3b 	bl	800cc5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e5e4:	480b      	ldr	r0, [pc, #44]	@ (800e614 <prvInitialiseTaskLists+0x74>)
 800e5e6:	f7fe fb38 	bl	800cc5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e5ea:	4b0b      	ldr	r3, [pc, #44]	@ (800e618 <prvInitialiseTaskLists+0x78>)
 800e5ec:	4a05      	ldr	r2, [pc, #20]	@ (800e604 <prvInitialiseTaskLists+0x64>)
 800e5ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800e61c <prvInitialiseTaskLists+0x7c>)
 800e5f2:	4a05      	ldr	r2, [pc, #20]	@ (800e608 <prvInitialiseTaskLists+0x68>)
 800e5f4:	601a      	str	r2, [r3, #0]
}
 800e5f6:	bf00      	nop
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20000b5c 	.word	0x20000b5c
 800e604:	20000fbc 	.word	0x20000fbc
 800e608:	20000fd0 	.word	0x20000fd0
 800e60c:	20000fec 	.word	0x20000fec
 800e610:	20001000 	.word	0x20001000
 800e614:	20001018 	.word	0x20001018
 800e618:	20000fe4 	.word	0x20000fe4
 800e61c:	20000fe8 	.word	0x20000fe8

0800e620 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e626:	e019      	b.n	800e65c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e628:	f000 fe06 	bl	800f238 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e62c:	4b10      	ldr	r3, [pc, #64]	@ (800e670 <prvCheckTasksWaitingTermination+0x50>)
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	3304      	adds	r3, #4
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fe fb98 	bl	800cd6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e63e:	4b0d      	ldr	r3, [pc, #52]	@ (800e674 <prvCheckTasksWaitingTermination+0x54>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3b01      	subs	r3, #1
 800e644:	4a0b      	ldr	r2, [pc, #44]	@ (800e674 <prvCheckTasksWaitingTermination+0x54>)
 800e646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e648:	4b0b      	ldr	r3, [pc, #44]	@ (800e678 <prvCheckTasksWaitingTermination+0x58>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	3b01      	subs	r3, #1
 800e64e:	4a0a      	ldr	r2, [pc, #40]	@ (800e678 <prvCheckTasksWaitingTermination+0x58>)
 800e650:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e652:	f000 fe23 	bl	800f29c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f810 	bl	800e67c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e65c:	4b06      	ldr	r3, [pc, #24]	@ (800e678 <prvCheckTasksWaitingTermination+0x58>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1e1      	bne.n	800e628 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop
 800e668:	3708      	adds	r7, #8
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20001000 	.word	0x20001000
 800e674:	2000102c 	.word	0x2000102c
 800e678:	20001014 	.word	0x20001014

0800e67c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	3354      	adds	r3, #84	@ 0x54
 800e688:	4618      	mov	r0, r3
 800e68a:	f001 feb5 	bl	80103f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e694:	2b00      	cmp	r3, #0
 800e696:	d108      	bne.n	800e6aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e69c:	4618      	mov	r0, r3
 800e69e:	f000 ffbb 	bl	800f618 <vPortFree>
				vPortFree( pxTCB );
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 ffb8 	bl	800f618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6a8:	e019      	b.n	800e6de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d103      	bne.n	800e6bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 ffaf 	bl	800f618 <vPortFree>
	}
 800e6ba:	e010      	b.n	800e6de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d00b      	beq.n	800e6de <prvDeleteTCB+0x62>
	__asm volatile
 800e6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	60fb      	str	r3, [r7, #12]
}
 800e6d8:	bf00      	nop
 800e6da:	bf00      	nop
 800e6dc:	e7fd      	b.n	800e6da <prvDeleteTCB+0x5e>
	}
 800e6de:	bf00      	nop
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
	...

0800e6e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e720 <prvResetNextTaskUnblockTime+0x38>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d104      	bne.n	800e702 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e6f8:	4b0a      	ldr	r3, [pc, #40]	@ (800e724 <prvResetNextTaskUnblockTime+0x3c>)
 800e6fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e6fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e700:	e008      	b.n	800e714 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e702:	4b07      	ldr	r3, [pc, #28]	@ (800e720 <prvResetNextTaskUnblockTime+0x38>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	4a04      	ldr	r2, [pc, #16]	@ (800e724 <prvResetNextTaskUnblockTime+0x3c>)
 800e712:	6013      	str	r3, [r2, #0]
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr
 800e720:	20000fe4 	.word	0x20000fe4
 800e724:	2000104c 	.word	0x2000104c

0800e728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e72e:	4b0b      	ldr	r3, [pc, #44]	@ (800e75c <xTaskGetSchedulerState+0x34>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d102      	bne.n	800e73c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e736:	2301      	movs	r3, #1
 800e738:	607b      	str	r3, [r7, #4]
 800e73a:	e008      	b.n	800e74e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e73c:	4b08      	ldr	r3, [pc, #32]	@ (800e760 <xTaskGetSchedulerState+0x38>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d102      	bne.n	800e74a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e744:	2302      	movs	r3, #2
 800e746:	607b      	str	r3, [r7, #4]
 800e748:	e001      	b.n	800e74e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e74a:	2300      	movs	r3, #0
 800e74c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e74e:	687b      	ldr	r3, [r7, #4]
	}
 800e750:	4618      	mov	r0, r3
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr
 800e75c:	20001038 	.word	0x20001038
 800e760:	20001054 	.word	0x20001054

0800e764 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e764:	b580      	push	{r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e770:	2300      	movs	r3, #0
 800e772:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d058      	beq.n	800e82c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e77a:	4b2f      	ldr	r3, [pc, #188]	@ (800e838 <xTaskPriorityDisinherit+0xd4>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	693a      	ldr	r2, [r7, #16]
 800e780:	429a      	cmp	r2, r3
 800e782:	d00b      	beq.n	800e79c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	60fb      	str	r3, [r7, #12]
}
 800e796:	bf00      	nop
 800e798:	bf00      	nop
 800e79a:	e7fd      	b.n	800e798 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10b      	bne.n	800e7bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	60bb      	str	r3, [r7, #8]
}
 800e7b6:	bf00      	nop
 800e7b8:	bf00      	nop
 800e7ba:	e7fd      	b.n	800e7b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7c0:	1e5a      	subs	r2, r3, #1
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d02c      	beq.n	800e82c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d128      	bne.n	800e82c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	3304      	adds	r3, #4
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fe fac5 	bl	800cd6e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7fc:	4b0f      	ldr	r3, [pc, #60]	@ (800e83c <xTaskPriorityDisinherit+0xd8>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	429a      	cmp	r2, r3
 800e802:	d903      	bls.n	800e80c <xTaskPriorityDisinherit+0xa8>
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e808:	4a0c      	ldr	r2, [pc, #48]	@ (800e83c <xTaskPriorityDisinherit+0xd8>)
 800e80a:	6013      	str	r3, [r2, #0]
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e810:	4613      	mov	r3, r2
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	4413      	add	r3, r2
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	4a09      	ldr	r2, [pc, #36]	@ (800e840 <xTaskPriorityDisinherit+0xdc>)
 800e81a:	441a      	add	r2, r3
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	3304      	adds	r3, #4
 800e820:	4619      	mov	r1, r3
 800e822:	4610      	mov	r0, r2
 800e824:	f7fe fa46 	bl	800ccb4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e828:	2301      	movs	r3, #1
 800e82a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e82c:	697b      	ldr	r3, [r7, #20]
	}
 800e82e:	4618      	mov	r0, r3
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20000b58 	.word	0x20000b58
 800e83c:	20001034 	.word	0x20001034
 800e840:	20000b5c 	.word	0x20000b5c

0800e844 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800e84a:	4b09      	ldr	r3, [pc, #36]	@ (800e870 <uxTaskResetEventItemValue+0x2c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e852:	4b07      	ldr	r3, [pc, #28]	@ (800e870 <uxTaskResetEventItemValue+0x2c>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e858:	4b05      	ldr	r3, [pc, #20]	@ (800e870 <uxTaskResetEventItemValue+0x2c>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e860:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800e862:	687b      	ldr	r3, [r7, #4]
}
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	20000b58 	.word	0x20000b58

0800e874 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e87e:	4b21      	ldr	r3, [pc, #132]	@ (800e904 <prvAddCurrentTaskToDelayedList+0x90>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e884:	4b20      	ldr	r3, [pc, #128]	@ (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3304      	adds	r3, #4
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fe fa6f 	bl	800cd6e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e896:	d10a      	bne.n	800e8ae <prvAddCurrentTaskToDelayedList+0x3a>
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d007      	beq.n	800e8ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e89e:	4b1a      	ldr	r3, [pc, #104]	@ (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4819      	ldr	r0, [pc, #100]	@ (800e90c <prvAddCurrentTaskToDelayedList+0x98>)
 800e8a8:	f7fe fa04 	bl	800ccb4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e8ac:	e026      	b.n	800e8fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e8b6:	4b14      	ldr	r3, [pc, #80]	@ (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d209      	bcs.n	800e8da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8c6:	4b12      	ldr	r3, [pc, #72]	@ (800e910 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	4b0f      	ldr	r3, [pc, #60]	@ (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	f7fe fa12 	bl	800ccfc <vListInsert>
}
 800e8d8:	e010      	b.n	800e8fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8da:	4b0e      	ldr	r3, [pc, #56]	@ (800e914 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	4b0a      	ldr	r3, [pc, #40]	@ (800e908 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	f7fe fa08 	bl	800ccfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e918 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d202      	bcs.n	800e8fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8f6:	4a08      	ldr	r2, [pc, #32]	@ (800e918 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	6013      	str	r3, [r2, #0]
}
 800e8fc:	bf00      	nop
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	20001030 	.word	0x20001030
 800e908:	20000b58 	.word	0x20000b58
 800e90c:	20001018 	.word	0x20001018
 800e910:	20000fe8 	.word	0x20000fe8
 800e914:	20000fe4 	.word	0x20000fe4
 800e918:	2000104c 	.word	0x2000104c

0800e91c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b08a      	sub	sp, #40	@ 0x28
 800e920:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e922:	2300      	movs	r3, #0
 800e924:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e926:	f000 fb13 	bl	800ef50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e92a:	4b1d      	ldr	r3, [pc, #116]	@ (800e9a0 <xTimerCreateTimerTask+0x84>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d021      	beq.n	800e976 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e932:	2300      	movs	r3, #0
 800e934:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e936:	2300      	movs	r3, #0
 800e938:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e93a:	1d3a      	adds	r2, r7, #4
 800e93c:	f107 0108 	add.w	r1, r7, #8
 800e940:	f107 030c 	add.w	r3, r7, #12
 800e944:	4618      	mov	r0, r3
 800e946:	f7fd ff61 	bl	800c80c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e94a:	6879      	ldr	r1, [r7, #4]
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	9202      	str	r2, [sp, #8]
 800e952:	9301      	str	r3, [sp, #4]
 800e954:	2302      	movs	r3, #2
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	2300      	movs	r3, #0
 800e95a:	460a      	mov	r2, r1
 800e95c:	4911      	ldr	r1, [pc, #68]	@ (800e9a4 <xTimerCreateTimerTask+0x88>)
 800e95e:	4812      	ldr	r0, [pc, #72]	@ (800e9a8 <xTimerCreateTimerTask+0x8c>)
 800e960:	f7fe ffe8 	bl	800d934 <xTaskCreateStatic>
 800e964:	4603      	mov	r3, r0
 800e966:	4a11      	ldr	r2, [pc, #68]	@ (800e9ac <xTimerCreateTimerTask+0x90>)
 800e968:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e96a:	4b10      	ldr	r3, [pc, #64]	@ (800e9ac <xTimerCreateTimerTask+0x90>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e972:	2301      	movs	r3, #1
 800e974:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10b      	bne.n	800e994 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	613b      	str	r3, [r7, #16]
}
 800e98e:	bf00      	nop
 800e990:	bf00      	nop
 800e992:	e7fd      	b.n	800e990 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e994:	697b      	ldr	r3, [r7, #20]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3718      	adds	r7, #24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	20001088 	.word	0x20001088
 800e9a4:	080113cc 	.word	0x080113cc
 800e9a8:	0800eae9 	.word	0x0800eae9
 800e9ac:	2000108c 	.word	0x2000108c

0800e9b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b08a      	sub	sp, #40	@ 0x28
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
 800e9bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d10b      	bne.n	800e9e0 <xTimerGenericCommand+0x30>
	__asm volatile
 800e9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9cc:	f383 8811 	msr	BASEPRI, r3
 800e9d0:	f3bf 8f6f 	isb	sy
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	623b      	str	r3, [r7, #32]
}
 800e9da:	bf00      	nop
 800e9dc:	bf00      	nop
 800e9de:	e7fd      	b.n	800e9dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e9e0:	4b19      	ldr	r3, [pc, #100]	@ (800ea48 <xTimerGenericCommand+0x98>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d02a      	beq.n	800ea3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2b05      	cmp	r3, #5
 800e9f8:	dc18      	bgt.n	800ea2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9fa:	f7ff fe95 	bl	800e728 <xTaskGetSchedulerState>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b02      	cmp	r3, #2
 800ea02:	d109      	bne.n	800ea18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ea04:	4b10      	ldr	r3, [pc, #64]	@ (800ea48 <xTimerGenericCommand+0x98>)
 800ea06:	6818      	ldr	r0, [r3, #0]
 800ea08:	f107 0110 	add.w	r1, r7, #16
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea10:	f7fe fb1e 	bl	800d050 <xQueueGenericSend>
 800ea14:	6278      	str	r0, [r7, #36]	@ 0x24
 800ea16:	e012      	b.n	800ea3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ea18:	4b0b      	ldr	r3, [pc, #44]	@ (800ea48 <xTimerGenericCommand+0x98>)
 800ea1a:	6818      	ldr	r0, [r3, #0]
 800ea1c:	f107 0110 	add.w	r1, r7, #16
 800ea20:	2300      	movs	r3, #0
 800ea22:	2200      	movs	r2, #0
 800ea24:	f7fe fb14 	bl	800d050 <xQueueGenericSend>
 800ea28:	6278      	str	r0, [r7, #36]	@ 0x24
 800ea2a:	e008      	b.n	800ea3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea2c:	4b06      	ldr	r3, [pc, #24]	@ (800ea48 <xTimerGenericCommand+0x98>)
 800ea2e:	6818      	ldr	r0, [r3, #0]
 800ea30:	f107 0110 	add.w	r1, r7, #16
 800ea34:	2300      	movs	r3, #0
 800ea36:	683a      	ldr	r2, [r7, #0]
 800ea38:	f7fe fc0c 	bl	800d254 <xQueueGenericSendFromISR>
 800ea3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3728      	adds	r7, #40	@ 0x28
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	20001088 	.word	0x20001088

0800ea4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b088      	sub	sp, #32
 800ea50:	af02      	add	r7, sp, #8
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea56:	4b23      	ldr	r3, [pc, #140]	@ (800eae4 <prvProcessExpiredTimer+0x98>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	3304      	adds	r3, #4
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe f982 	bl	800cd6e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea70:	f003 0304 	and.w	r3, r3, #4
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d023      	beq.n	800eac0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	699a      	ldr	r2, [r3, #24]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	18d1      	adds	r1, r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	683a      	ldr	r2, [r7, #0]
 800ea84:	6978      	ldr	r0, [r7, #20]
 800ea86:	f000 f8d5 	bl	800ec34 <prvInsertTimerInActiveList>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d020      	beq.n	800ead2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea90:	2300      	movs	r3, #0
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	2300      	movs	r3, #0
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	2100      	movs	r1, #0
 800ea9a:	6978      	ldr	r0, [r7, #20]
 800ea9c:	f7ff ff88 	bl	800e9b0 <xTimerGenericCommand>
 800eaa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d114      	bne.n	800ead2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800eaa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaac:	f383 8811 	msr	BASEPRI, r3
 800eab0:	f3bf 8f6f 	isb	sy
 800eab4:	f3bf 8f4f 	dsb	sy
 800eab8:	60fb      	str	r3, [r7, #12]
}
 800eaba:	bf00      	nop
 800eabc:	bf00      	nop
 800eabe:	e7fd      	b.n	800eabc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eac6:	f023 0301 	bic.w	r3, r3, #1
 800eaca:	b2da      	uxtb	r2, r3
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	6a1b      	ldr	r3, [r3, #32]
 800ead6:	6978      	ldr	r0, [r7, #20]
 800ead8:	4798      	blx	r3
}
 800eada:	bf00      	nop
 800eadc:	3718      	adds	r7, #24
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	20001080 	.word	0x20001080

0800eae8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eaf0:	f107 0308 	add.w	r3, r7, #8
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f000 f859 	bl	800ebac <prvGetNextExpireTime>
 800eafa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	4619      	mov	r1, r3
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f000 f805 	bl	800eb10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eb06:	f000 f8d7 	bl	800ecb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb0a:	bf00      	nop
 800eb0c:	e7f0      	b.n	800eaf0 <prvTimerTask+0x8>
	...

0800eb10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eb1a:	f7ff f96f 	bl	800ddfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb1e:	f107 0308 	add.w	r3, r7, #8
 800eb22:	4618      	mov	r0, r3
 800eb24:	f000 f866 	bl	800ebf4 <prvSampleTimeNow>
 800eb28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d130      	bne.n	800eb92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d10a      	bne.n	800eb4c <prvProcessTimerOrBlockTask+0x3c>
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d806      	bhi.n	800eb4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb3e:	f7ff f96b 	bl	800de18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb42:	68f9      	ldr	r1, [r7, #12]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff ff81 	bl	800ea4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb4a:	e024      	b.n	800eb96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d008      	beq.n	800eb64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb52:	4b13      	ldr	r3, [pc, #76]	@ (800eba0 <prvProcessTimerOrBlockTask+0x90>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <prvProcessTimerOrBlockTask+0x50>
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e000      	b.n	800eb62 <prvProcessTimerOrBlockTask+0x52>
 800eb60:	2300      	movs	r3, #0
 800eb62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb64:	4b0f      	ldr	r3, [pc, #60]	@ (800eba4 <prvProcessTimerOrBlockTask+0x94>)
 800eb66:	6818      	ldr	r0, [r3, #0]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	4619      	mov	r1, r3
 800eb72:	f7fe feab 	bl	800d8cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb76:	f7ff f94f 	bl	800de18 <xTaskResumeAll>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d10a      	bne.n	800eb96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb80:	4b09      	ldr	r3, [pc, #36]	@ (800eba8 <prvProcessTimerOrBlockTask+0x98>)
 800eb82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb86:	601a      	str	r2, [r3, #0]
 800eb88:	f3bf 8f4f 	dsb	sy
 800eb8c:	f3bf 8f6f 	isb	sy
}
 800eb90:	e001      	b.n	800eb96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb92:	f7ff f941 	bl	800de18 <xTaskResumeAll>
}
 800eb96:	bf00      	nop
 800eb98:	3710      	adds	r7, #16
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	20001084 	.word	0x20001084
 800eba4:	20001088 	.word	0x20001088
 800eba8:	e000ed04 	.word	0xe000ed04

0800ebac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ebac:	b480      	push	{r7}
 800ebae:	b085      	sub	sp, #20
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ebb4:	4b0e      	ldr	r3, [pc, #56]	@ (800ebf0 <prvGetNextExpireTime+0x44>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d101      	bne.n	800ebc2 <prvGetNextExpireTime+0x16>
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	e000      	b.n	800ebc4 <prvGetNextExpireTime+0x18>
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d105      	bne.n	800ebdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebd0:	4b07      	ldr	r3, [pc, #28]	@ (800ebf0 <prvGetNextExpireTime+0x44>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	60fb      	str	r3, [r7, #12]
 800ebda:	e001      	b.n	800ebe0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	20001080 	.word	0x20001080

0800ebf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ebfc:	f7ff f9aa 	bl	800df54 <xTaskGetTickCount>
 800ec00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ec02:	4b0b      	ldr	r3, [pc, #44]	@ (800ec30 <prvSampleTimeNow+0x3c>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d205      	bcs.n	800ec18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec0c:	f000 f93a 	bl	800ee84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2201      	movs	r2, #1
 800ec14:	601a      	str	r2, [r3, #0]
 800ec16:	e002      	b.n	800ec1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ec1e:	4a04      	ldr	r2, [pc, #16]	@ (800ec30 <prvSampleTimeNow+0x3c>)
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec24:	68fb      	ldr	r3, [r7, #12]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	20001090 	.word	0x20001090

0800ec34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	607a      	str	r2, [r7, #4]
 800ec40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec42:	2300      	movs	r3, #0
 800ec44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d812      	bhi.n	800ec80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	1ad2      	subs	r2, r2, r3
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d302      	bcc.n	800ec6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	617b      	str	r3, [r7, #20]
 800ec6c:	e01b      	b.n	800eca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec6e:	4b10      	ldr	r3, [pc, #64]	@ (800ecb0 <prvInsertTimerInActiveList+0x7c>)
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	3304      	adds	r3, #4
 800ec76:	4619      	mov	r1, r3
 800ec78:	4610      	mov	r0, r2
 800ec7a:	f7fe f83f 	bl	800ccfc <vListInsert>
 800ec7e:	e012      	b.n	800eca6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d206      	bcs.n	800ec96 <prvInsertTimerInActiveList+0x62>
 800ec88:	68ba      	ldr	r2, [r7, #8]
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d302      	bcc.n	800ec96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec90:	2301      	movs	r3, #1
 800ec92:	617b      	str	r3, [r7, #20]
 800ec94:	e007      	b.n	800eca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec96:	4b07      	ldr	r3, [pc, #28]	@ (800ecb4 <prvInsertTimerInActiveList+0x80>)
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	4619      	mov	r1, r3
 800eca0:	4610      	mov	r0, r2
 800eca2:	f7fe f82b 	bl	800ccfc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eca6:	697b      	ldr	r3, [r7, #20]
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3718      	adds	r7, #24
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	20001084 	.word	0x20001084
 800ecb4:	20001080 	.word	0x20001080

0800ecb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b08e      	sub	sp, #56	@ 0x38
 800ecbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecbe:	e0ce      	b.n	800ee5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	da19      	bge.n	800ecfa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ecc6:	1d3b      	adds	r3, r7, #4
 800ecc8:	3304      	adds	r3, #4
 800ecca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d10b      	bne.n	800ecea <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ecd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd6:	f383 8811 	msr	BASEPRI, r3
 800ecda:	f3bf 8f6f 	isb	sy
 800ecde:	f3bf 8f4f 	dsb	sy
 800ece2:	61fb      	str	r3, [r7, #28]
}
 800ece4:	bf00      	nop
 800ece6:	bf00      	nop
 800ece8:	e7fd      	b.n	800ece6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ecea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecf0:	6850      	ldr	r0, [r2, #4]
 800ecf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecf4:	6892      	ldr	r2, [r2, #8]
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f2c0 80ae 	blt.w	800ee5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ed06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d004      	beq.n	800ed18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed10:	3304      	adds	r3, #4
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fe f82b 	bl	800cd6e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed18:	463b      	mov	r3, r7
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff ff6a 	bl	800ebf4 <prvSampleTimeNow>
 800ed20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2b09      	cmp	r3, #9
 800ed26:	f200 8097 	bhi.w	800ee58 <prvProcessReceivedCommands+0x1a0>
 800ed2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed30 <prvProcessReceivedCommands+0x78>)
 800ed2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed30:	0800ed59 	.word	0x0800ed59
 800ed34:	0800ed59 	.word	0x0800ed59
 800ed38:	0800ed59 	.word	0x0800ed59
 800ed3c:	0800edcf 	.word	0x0800edcf
 800ed40:	0800ede3 	.word	0x0800ede3
 800ed44:	0800ee2f 	.word	0x0800ee2f
 800ed48:	0800ed59 	.word	0x0800ed59
 800ed4c:	0800ed59 	.word	0x0800ed59
 800ed50:	0800edcf 	.word	0x0800edcf
 800ed54:	0800ede3 	.word	0x0800ede3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed5e:	f043 0301 	orr.w	r3, r3, #1
 800ed62:	b2da      	uxtb	r2, r3
 800ed64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed6a:	68ba      	ldr	r2, [r7, #8]
 800ed6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6e:	699b      	ldr	r3, [r3, #24]
 800ed70:	18d1      	adds	r1, r2, r3
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed78:	f7ff ff5c 	bl	800ec34 <prvInsertTimerInActiveList>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d06c      	beq.n	800ee5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed84:	6a1b      	ldr	r3, [r3, #32]
 800ed86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed90:	f003 0304 	and.w	r3, r3, #4
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d061      	beq.n	800ee5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed9c:	699b      	ldr	r3, [r3, #24]
 800ed9e:	441a      	add	r2, r3
 800eda0:	2300      	movs	r3, #0
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	2300      	movs	r3, #0
 800eda6:	2100      	movs	r1, #0
 800eda8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edaa:	f7ff fe01 	bl	800e9b0 <xTimerGenericCommand>
 800edae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800edb0:	6a3b      	ldr	r3, [r7, #32]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d152      	bne.n	800ee5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800edb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edba:	f383 8811 	msr	BASEPRI, r3
 800edbe:	f3bf 8f6f 	isb	sy
 800edc2:	f3bf 8f4f 	dsb	sy
 800edc6:	61bb      	str	r3, [r7, #24]
}
 800edc8:	bf00      	nop
 800edca:	bf00      	nop
 800edcc:	e7fd      	b.n	800edca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edd4:	f023 0301 	bic.w	r3, r3, #1
 800edd8:	b2da      	uxtb	r2, r3
 800edda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eddc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ede0:	e03d      	b.n	800ee5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ede2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ede8:	f043 0301 	orr.w	r3, r3, #1
 800edec:	b2da      	uxtb	r2, r3
 800edee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800edf4:	68ba      	ldr	r2, [r7, #8]
 800edf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edf8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfc:	699b      	ldr	r3, [r3, #24]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10b      	bne.n	800ee1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	617b      	str	r3, [r7, #20]
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop
 800ee18:	e7fd      	b.n	800ee16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee1c:	699a      	ldr	r2, [r3, #24]
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee20:	18d1      	adds	r1, r2, r3
 800ee22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee28:	f7ff ff04 	bl	800ec34 <prvInsertTimerInActiveList>
					break;
 800ee2c:	e017      	b.n	800ee5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee34:	f003 0302 	and.w	r3, r3, #2
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d103      	bne.n	800ee44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ee3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee3e:	f000 fbeb 	bl	800f618 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee42:	e00c      	b.n	800ee5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee4a:	f023 0301 	bic.w	r3, r3, #1
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ee56:	e002      	b.n	800ee5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ee58:	bf00      	nop
 800ee5a:	e000      	b.n	800ee5e <prvProcessReceivedCommands+0x1a6>
					break;
 800ee5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee5e:	4b08      	ldr	r3, [pc, #32]	@ (800ee80 <prvProcessReceivedCommands+0x1c8>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	1d39      	adds	r1, r7, #4
 800ee64:	2200      	movs	r2, #0
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7fe fa92 	bl	800d390 <xQueueReceive>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f47f af26 	bne.w	800ecc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ee74:	bf00      	nop
 800ee76:	bf00      	nop
 800ee78:	3730      	adds	r7, #48	@ 0x30
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	20001088 	.word	0x20001088

0800ee84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b088      	sub	sp, #32
 800ee88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee8a:	e049      	b.n	800ef20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee8c:	4b2e      	ldr	r3, [pc, #184]	@ (800ef48 <prvSwitchTimerLists+0xc4>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee96:	4b2c      	ldr	r3, [pc, #176]	@ (800ef48 <prvSwitchTimerLists+0xc4>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	3304      	adds	r3, #4
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7fd ff62 	bl	800cd6e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	6a1b      	ldr	r3, [r3, #32]
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eeb8:	f003 0304 	and.w	r3, r3, #4
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d02f      	beq.n	800ef20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	699b      	ldr	r3, [r3, #24]
 800eec4:	693a      	ldr	r2, [r7, #16]
 800eec6:	4413      	add	r3, r2
 800eec8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eeca:	68ba      	ldr	r2, [r7, #8]
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d90e      	bls.n	800eef0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	68ba      	ldr	r2, [r7, #8]
 800eed6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	68fa      	ldr	r2, [r7, #12]
 800eedc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eede:	4b1a      	ldr	r3, [pc, #104]	@ (800ef48 <prvSwitchTimerLists+0xc4>)
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	3304      	adds	r3, #4
 800eee6:	4619      	mov	r1, r3
 800eee8:	4610      	mov	r0, r2
 800eeea:	f7fd ff07 	bl	800ccfc <vListInsert>
 800eeee:	e017      	b.n	800ef20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eef0:	2300      	movs	r3, #0
 800eef2:	9300      	str	r3, [sp, #0]
 800eef4:	2300      	movs	r3, #0
 800eef6:	693a      	ldr	r2, [r7, #16]
 800eef8:	2100      	movs	r1, #0
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f7ff fd58 	bl	800e9b0 <xTimerGenericCommand>
 800ef00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d10b      	bne.n	800ef20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ef08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef0c:	f383 8811 	msr	BASEPRI, r3
 800ef10:	f3bf 8f6f 	isb	sy
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	603b      	str	r3, [r7, #0]
}
 800ef1a:	bf00      	nop
 800ef1c:	bf00      	nop
 800ef1e:	e7fd      	b.n	800ef1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef20:	4b09      	ldr	r3, [pc, #36]	@ (800ef48 <prvSwitchTimerLists+0xc4>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1b0      	bne.n	800ee8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef2a:	4b07      	ldr	r3, [pc, #28]	@ (800ef48 <prvSwitchTimerLists+0xc4>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef30:	4b06      	ldr	r3, [pc, #24]	@ (800ef4c <prvSwitchTimerLists+0xc8>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a04      	ldr	r2, [pc, #16]	@ (800ef48 <prvSwitchTimerLists+0xc4>)
 800ef36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef38:	4a04      	ldr	r2, [pc, #16]	@ (800ef4c <prvSwitchTimerLists+0xc8>)
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	6013      	str	r3, [r2, #0]
}
 800ef3e:	bf00      	nop
 800ef40:	3718      	adds	r7, #24
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	20001080 	.word	0x20001080
 800ef4c:	20001084 	.word	0x20001084

0800ef50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef56:	f000 f96f 	bl	800f238 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef5a:	4b15      	ldr	r3, [pc, #84]	@ (800efb0 <prvCheckForValidListAndQueue+0x60>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d120      	bne.n	800efa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef62:	4814      	ldr	r0, [pc, #80]	@ (800efb4 <prvCheckForValidListAndQueue+0x64>)
 800ef64:	f7fd fe79 	bl	800cc5a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef68:	4813      	ldr	r0, [pc, #76]	@ (800efb8 <prvCheckForValidListAndQueue+0x68>)
 800ef6a:	f7fd fe76 	bl	800cc5a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef6e:	4b13      	ldr	r3, [pc, #76]	@ (800efbc <prvCheckForValidListAndQueue+0x6c>)
 800ef70:	4a10      	ldr	r2, [pc, #64]	@ (800efb4 <prvCheckForValidListAndQueue+0x64>)
 800ef72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef74:	4b12      	ldr	r3, [pc, #72]	@ (800efc0 <prvCheckForValidListAndQueue+0x70>)
 800ef76:	4a10      	ldr	r2, [pc, #64]	@ (800efb8 <prvCheckForValidListAndQueue+0x68>)
 800ef78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	9300      	str	r3, [sp, #0]
 800ef7e:	4b11      	ldr	r3, [pc, #68]	@ (800efc4 <prvCheckForValidListAndQueue+0x74>)
 800ef80:	4a11      	ldr	r2, [pc, #68]	@ (800efc8 <prvCheckForValidListAndQueue+0x78>)
 800ef82:	2110      	movs	r1, #16
 800ef84:	200a      	movs	r0, #10
 800ef86:	f7fd ff87 	bl	800ce98 <xQueueGenericCreateStatic>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	4a08      	ldr	r2, [pc, #32]	@ (800efb0 <prvCheckForValidListAndQueue+0x60>)
 800ef8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef90:	4b07      	ldr	r3, [pc, #28]	@ (800efb0 <prvCheckForValidListAndQueue+0x60>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d005      	beq.n	800efa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef98:	4b05      	ldr	r3, [pc, #20]	@ (800efb0 <prvCheckForValidListAndQueue+0x60>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	490b      	ldr	r1, [pc, #44]	@ (800efcc <prvCheckForValidListAndQueue+0x7c>)
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fe fc6a 	bl	800d878 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efa4:	f000 f97a 	bl	800f29c <vPortExitCritical>
}
 800efa8:	bf00      	nop
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	20001088 	.word	0x20001088
 800efb4:	20001058 	.word	0x20001058
 800efb8:	2000106c 	.word	0x2000106c
 800efbc:	20001080 	.word	0x20001080
 800efc0:	20001084 	.word	0x20001084
 800efc4:	20001134 	.word	0x20001134
 800efc8:	20001094 	.word	0x20001094
 800efcc:	080113d4 	.word	0x080113d4

0800efd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	3b04      	subs	r3, #4
 800efe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800efe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	3b04      	subs	r3, #4
 800efee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	f023 0201 	bic.w	r2, r3, #1
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	3b04      	subs	r3, #4
 800effe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f000:	4a0c      	ldr	r2, [pc, #48]	@ (800f034 <pxPortInitialiseStack+0x64>)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3b14      	subs	r3, #20
 800f00a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	3b04      	subs	r3, #4
 800f016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f06f 0202 	mvn.w	r2, #2
 800f01e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	3b20      	subs	r3, #32
 800f024:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f026:	68fb      	ldr	r3, [r7, #12]
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3714      	adds	r7, #20
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	0800f039 	.word	0x0800f039

0800f038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f038:	b480      	push	{r7}
 800f03a:	b085      	sub	sp, #20
 800f03c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f03e:	2300      	movs	r3, #0
 800f040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f042:	4b13      	ldr	r3, [pc, #76]	@ (800f090 <prvTaskExitError+0x58>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f04a:	d00b      	beq.n	800f064 <prvTaskExitError+0x2c>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f050:	f383 8811 	msr	BASEPRI, r3
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	60fb      	str	r3, [r7, #12]
}
 800f05e:	bf00      	nop
 800f060:	bf00      	nop
 800f062:	e7fd      	b.n	800f060 <prvTaskExitError+0x28>
	__asm volatile
 800f064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f068:	f383 8811 	msr	BASEPRI, r3
 800f06c:	f3bf 8f6f 	isb	sy
 800f070:	f3bf 8f4f 	dsb	sy
 800f074:	60bb      	str	r3, [r7, #8]
}
 800f076:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f078:	bf00      	nop
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d0fc      	beq.n	800f07a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f080:	bf00      	nop
 800f082:	bf00      	nop
 800f084:	3714      	adds	r7, #20
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop
 800f090:	2000002c 	.word	0x2000002c
	...

0800f0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f0a0:	4b07      	ldr	r3, [pc, #28]	@ (800f0c0 <pxCurrentTCBConst2>)
 800f0a2:	6819      	ldr	r1, [r3, #0]
 800f0a4:	6808      	ldr	r0, [r1, #0]
 800f0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0aa:	f380 8809 	msr	PSP, r0
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f04f 0000 	mov.w	r0, #0
 800f0b6:	f380 8811 	msr	BASEPRI, r0
 800f0ba:	4770      	bx	lr
 800f0bc:	f3af 8000 	nop.w

0800f0c0 <pxCurrentTCBConst2>:
 800f0c0:	20000b58 	.word	0x20000b58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0c4:	bf00      	nop
 800f0c6:	bf00      	nop

0800f0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f0c8:	4808      	ldr	r0, [pc, #32]	@ (800f0ec <prvPortStartFirstTask+0x24>)
 800f0ca:	6800      	ldr	r0, [r0, #0]
 800f0cc:	6800      	ldr	r0, [r0, #0]
 800f0ce:	f380 8808 	msr	MSP, r0
 800f0d2:	f04f 0000 	mov.w	r0, #0
 800f0d6:	f380 8814 	msr	CONTROL, r0
 800f0da:	b662      	cpsie	i
 800f0dc:	b661      	cpsie	f
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	df00      	svc	0
 800f0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f0ea:	bf00      	nop
 800f0ec:	e000ed08 	.word	0xe000ed08

0800f0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b086      	sub	sp, #24
 800f0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f0f6:	4b47      	ldr	r3, [pc, #284]	@ (800f214 <xPortStartScheduler+0x124>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4a47      	ldr	r2, [pc, #284]	@ (800f218 <xPortStartScheduler+0x128>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d10b      	bne.n	800f118 <xPortStartScheduler+0x28>
	__asm volatile
 800f100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	60fb      	str	r3, [r7, #12]
}
 800f112:	bf00      	nop
 800f114:	bf00      	nop
 800f116:	e7fd      	b.n	800f114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f118:	4b3e      	ldr	r3, [pc, #248]	@ (800f214 <xPortStartScheduler+0x124>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a3f      	ldr	r2, [pc, #252]	@ (800f21c <xPortStartScheduler+0x12c>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d10b      	bne.n	800f13a <xPortStartScheduler+0x4a>
	__asm volatile
 800f122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	613b      	str	r3, [r7, #16]
}
 800f134:	bf00      	nop
 800f136:	bf00      	nop
 800f138:	e7fd      	b.n	800f136 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f13a:	4b39      	ldr	r3, [pc, #228]	@ (800f220 <xPortStartScheduler+0x130>)
 800f13c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	b2db      	uxtb	r3, r3
 800f144:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	22ff      	movs	r2, #255	@ 0xff
 800f14a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	b2db      	uxtb	r3, r3
 800f152:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f154:	78fb      	ldrb	r3, [r7, #3]
 800f156:	b2db      	uxtb	r3, r3
 800f158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f15c:	b2da      	uxtb	r2, r3
 800f15e:	4b31      	ldr	r3, [pc, #196]	@ (800f224 <xPortStartScheduler+0x134>)
 800f160:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f162:	4b31      	ldr	r3, [pc, #196]	@ (800f228 <xPortStartScheduler+0x138>)
 800f164:	2207      	movs	r2, #7
 800f166:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f168:	e009      	b.n	800f17e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f16a:	4b2f      	ldr	r3, [pc, #188]	@ (800f228 <xPortStartScheduler+0x138>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	3b01      	subs	r3, #1
 800f170:	4a2d      	ldr	r2, [pc, #180]	@ (800f228 <xPortStartScheduler+0x138>)
 800f172:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f174:	78fb      	ldrb	r3, [r7, #3]
 800f176:	b2db      	uxtb	r3, r3
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f17e:	78fb      	ldrb	r3, [r7, #3]
 800f180:	b2db      	uxtb	r3, r3
 800f182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f186:	2b80      	cmp	r3, #128	@ 0x80
 800f188:	d0ef      	beq.n	800f16a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f18a:	4b27      	ldr	r3, [pc, #156]	@ (800f228 <xPortStartScheduler+0x138>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f1c3 0307 	rsb	r3, r3, #7
 800f192:	2b04      	cmp	r3, #4
 800f194:	d00b      	beq.n	800f1ae <xPortStartScheduler+0xbe>
	__asm volatile
 800f196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f19a:	f383 8811 	msr	BASEPRI, r3
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	f3bf 8f4f 	dsb	sy
 800f1a6:	60bb      	str	r3, [r7, #8]
}
 800f1a8:	bf00      	nop
 800f1aa:	bf00      	nop
 800f1ac:	e7fd      	b.n	800f1aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f1ae:	4b1e      	ldr	r3, [pc, #120]	@ (800f228 <xPortStartScheduler+0x138>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	021b      	lsls	r3, r3, #8
 800f1b4:	4a1c      	ldr	r2, [pc, #112]	@ (800f228 <xPortStartScheduler+0x138>)
 800f1b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f1b8:	4b1b      	ldr	r3, [pc, #108]	@ (800f228 <xPortStartScheduler+0x138>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f1c0:	4a19      	ldr	r2, [pc, #100]	@ (800f228 <xPortStartScheduler+0x138>)
 800f1c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	b2da      	uxtb	r2, r3
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f1cc:	4b17      	ldr	r3, [pc, #92]	@ (800f22c <xPortStartScheduler+0x13c>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4a16      	ldr	r2, [pc, #88]	@ (800f22c <xPortStartScheduler+0x13c>)
 800f1d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f1d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f1d8:	4b14      	ldr	r3, [pc, #80]	@ (800f22c <xPortStartScheduler+0x13c>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4a13      	ldr	r2, [pc, #76]	@ (800f22c <xPortStartScheduler+0x13c>)
 800f1de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f1e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f1e4:	f000 f8da 	bl	800f39c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f1e8:	4b11      	ldr	r3, [pc, #68]	@ (800f230 <xPortStartScheduler+0x140>)
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f1ee:	f000 f8f9 	bl	800f3e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f1f2:	4b10      	ldr	r3, [pc, #64]	@ (800f234 <xPortStartScheduler+0x144>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4a0f      	ldr	r2, [pc, #60]	@ (800f234 <xPortStartScheduler+0x144>)
 800f1f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f1fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1fe:	f7ff ff63 	bl	800f0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f202:	f7fe ff71 	bl	800e0e8 <vTaskSwitchContext>
	prvTaskExitError();
 800f206:	f7ff ff17 	bl	800f038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	e000ed00 	.word	0xe000ed00
 800f218:	410fc271 	.word	0x410fc271
 800f21c:	410fc270 	.word	0x410fc270
 800f220:	e000e400 	.word	0xe000e400
 800f224:	20001184 	.word	0x20001184
 800f228:	20001188 	.word	0x20001188
 800f22c:	e000ed20 	.word	0xe000ed20
 800f230:	2000002c 	.word	0x2000002c
 800f234:	e000ef34 	.word	0xe000ef34

0800f238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
	__asm volatile
 800f23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f242:	f383 8811 	msr	BASEPRI, r3
 800f246:	f3bf 8f6f 	isb	sy
 800f24a:	f3bf 8f4f 	dsb	sy
 800f24e:	607b      	str	r3, [r7, #4]
}
 800f250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f252:	4b10      	ldr	r3, [pc, #64]	@ (800f294 <vPortEnterCritical+0x5c>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	3301      	adds	r3, #1
 800f258:	4a0e      	ldr	r2, [pc, #56]	@ (800f294 <vPortEnterCritical+0x5c>)
 800f25a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f25c:	4b0d      	ldr	r3, [pc, #52]	@ (800f294 <vPortEnterCritical+0x5c>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d110      	bne.n	800f286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f264:	4b0c      	ldr	r3, [pc, #48]	@ (800f298 <vPortEnterCritical+0x60>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00b      	beq.n	800f286 <vPortEnterCritical+0x4e>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	603b      	str	r3, [r7, #0]
}
 800f280:	bf00      	nop
 800f282:	bf00      	nop
 800f284:	e7fd      	b.n	800f282 <vPortEnterCritical+0x4a>
	}
}
 800f286:	bf00      	nop
 800f288:	370c      	adds	r7, #12
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	2000002c 	.word	0x2000002c
 800f298:	e000ed04 	.word	0xe000ed04

0800f29c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f2a2:	4b12      	ldr	r3, [pc, #72]	@ (800f2ec <vPortExitCritical+0x50>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10b      	bne.n	800f2c2 <vPortExitCritical+0x26>
	__asm volatile
 800f2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ae:	f383 8811 	msr	BASEPRI, r3
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	607b      	str	r3, [r7, #4]
}
 800f2bc:	bf00      	nop
 800f2be:	bf00      	nop
 800f2c0:	e7fd      	b.n	800f2be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f2c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f2ec <vPortExitCritical+0x50>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	3b01      	subs	r3, #1
 800f2c8:	4a08      	ldr	r2, [pc, #32]	@ (800f2ec <vPortExitCritical+0x50>)
 800f2ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f2cc:	4b07      	ldr	r3, [pc, #28]	@ (800f2ec <vPortExitCritical+0x50>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d105      	bne.n	800f2e0 <vPortExitCritical+0x44>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	f383 8811 	msr	BASEPRI, r3
}
 800f2de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr
 800f2ec:	2000002c 	.word	0x2000002c

0800f2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2f0:	f3ef 8009 	mrs	r0, PSP
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	4b15      	ldr	r3, [pc, #84]	@ (800f350 <pxCurrentTCBConst>)
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	f01e 0f10 	tst.w	lr, #16
 800f300:	bf08      	it	eq
 800f302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f30a:	6010      	str	r0, [r2, #0]
 800f30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f314:	f380 8811 	msr	BASEPRI, r0
 800f318:	f3bf 8f4f 	dsb	sy
 800f31c:	f3bf 8f6f 	isb	sy
 800f320:	f7fe fee2 	bl	800e0e8 <vTaskSwitchContext>
 800f324:	f04f 0000 	mov.w	r0, #0
 800f328:	f380 8811 	msr	BASEPRI, r0
 800f32c:	bc09      	pop	{r0, r3}
 800f32e:	6819      	ldr	r1, [r3, #0]
 800f330:	6808      	ldr	r0, [r1, #0]
 800f332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f336:	f01e 0f10 	tst.w	lr, #16
 800f33a:	bf08      	it	eq
 800f33c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f340:	f380 8809 	msr	PSP, r0
 800f344:	f3bf 8f6f 	isb	sy
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	f3af 8000 	nop.w

0800f350 <pxCurrentTCBConst>:
 800f350:	20000b58 	.word	0x20000b58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f354:	bf00      	nop
 800f356:	bf00      	nop

0800f358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
	__asm volatile
 800f35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	607b      	str	r3, [r7, #4]
}
 800f370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f372:	f7fe fdff 	bl	800df74 <xTaskIncrementTick>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d003      	beq.n	800f384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f37c:	4b06      	ldr	r3, [pc, #24]	@ (800f398 <xPortSysTickHandler+0x40>)
 800f37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f382:	601a      	str	r2, [r3, #0]
 800f384:	2300      	movs	r3, #0
 800f386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	f383 8811 	msr	BASEPRI, r3
}
 800f38e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f390:	bf00      	nop
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	e000ed04 	.word	0xe000ed04

0800f39c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f39c:	b480      	push	{r7}
 800f39e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f3d0 <vPortSetupTimerInterrupt+0x34>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f3d4 <vPortSetupTimerInterrupt+0x38>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f3d8 <vPortSetupTimerInterrupt+0x3c>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a0a      	ldr	r2, [pc, #40]	@ (800f3dc <vPortSetupTimerInterrupt+0x40>)
 800f3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3b6:	099b      	lsrs	r3, r3, #6
 800f3b8:	4a09      	ldr	r2, [pc, #36]	@ (800f3e0 <vPortSetupTimerInterrupt+0x44>)
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f3be:	4b04      	ldr	r3, [pc, #16]	@ (800f3d0 <vPortSetupTimerInterrupt+0x34>)
 800f3c0:	2207      	movs	r2, #7
 800f3c2:	601a      	str	r2, [r3, #0]
}
 800f3c4:	bf00      	nop
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	e000e010 	.word	0xe000e010
 800f3d4:	e000e018 	.word	0xe000e018
 800f3d8:	20000000 	.word	0x20000000
 800f3dc:	10624dd3 	.word	0x10624dd3
 800f3e0:	e000e014 	.word	0xe000e014

0800f3e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f3e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f3f4 <vPortEnableVFP+0x10>
 800f3e8:	6801      	ldr	r1, [r0, #0]
 800f3ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f3ee:	6001      	str	r1, [r0, #0]
 800f3f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3f2:	bf00      	nop
 800f3f4:	e000ed88 	.word	0xe000ed88

0800f3f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b085      	sub	sp, #20
 800f3fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f3fe:	f3ef 8305 	mrs	r3, IPSR
 800f402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2b0f      	cmp	r3, #15
 800f408:	d915      	bls.n	800f436 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f40a:	4a18      	ldr	r2, [pc, #96]	@ (800f46c <vPortValidateInterruptPriority+0x74>)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	4413      	add	r3, r2
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f414:	4b16      	ldr	r3, [pc, #88]	@ (800f470 <vPortValidateInterruptPriority+0x78>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	7afa      	ldrb	r2, [r7, #11]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d20b      	bcs.n	800f436 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f422:	f383 8811 	msr	BASEPRI, r3
 800f426:	f3bf 8f6f 	isb	sy
 800f42a:	f3bf 8f4f 	dsb	sy
 800f42e:	607b      	str	r3, [r7, #4]
}
 800f430:	bf00      	nop
 800f432:	bf00      	nop
 800f434:	e7fd      	b.n	800f432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f436:	4b0f      	ldr	r3, [pc, #60]	@ (800f474 <vPortValidateInterruptPriority+0x7c>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f43e:	4b0e      	ldr	r3, [pc, #56]	@ (800f478 <vPortValidateInterruptPriority+0x80>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	429a      	cmp	r2, r3
 800f444:	d90b      	bls.n	800f45e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f44a:	f383 8811 	msr	BASEPRI, r3
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	f3bf 8f4f 	dsb	sy
 800f456:	603b      	str	r3, [r7, #0]
}
 800f458:	bf00      	nop
 800f45a:	bf00      	nop
 800f45c:	e7fd      	b.n	800f45a <vPortValidateInterruptPriority+0x62>
	}
 800f45e:	bf00      	nop
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	e000e3f0 	.word	0xe000e3f0
 800f470:	20001184 	.word	0x20001184
 800f474:	e000ed0c 	.word	0xe000ed0c
 800f478:	20001188 	.word	0x20001188

0800f47c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b08a      	sub	sp, #40	@ 0x28
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f484:	2300      	movs	r3, #0
 800f486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f488:	f7fe fcb8 	bl	800ddfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f48c:	4b5c      	ldr	r3, [pc, #368]	@ (800f600 <pvPortMalloc+0x184>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d101      	bne.n	800f498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f494:	f000 f924 	bl	800f6e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f498:	4b5a      	ldr	r3, [pc, #360]	@ (800f604 <pvPortMalloc+0x188>)
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4013      	ands	r3, r2
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f040 8095 	bne.w	800f5d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d01e      	beq.n	800f4ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f4ac:	2208      	movs	r2, #8
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f003 0307 	and.w	r3, r3, #7
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d015      	beq.n	800f4ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f023 0307 	bic.w	r3, r3, #7
 800f4c4:	3308      	adds	r3, #8
 800f4c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f003 0307 	and.w	r3, r3, #7
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d00b      	beq.n	800f4ea <pvPortMalloc+0x6e>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	617b      	str	r3, [r7, #20]
}
 800f4e4:	bf00      	nop
 800f4e6:	bf00      	nop
 800f4e8:	e7fd      	b.n	800f4e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d06f      	beq.n	800f5d0 <pvPortMalloc+0x154>
 800f4f0:	4b45      	ldr	r3, [pc, #276]	@ (800f608 <pvPortMalloc+0x18c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	687a      	ldr	r2, [r7, #4]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d86a      	bhi.n	800f5d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f4fa:	4b44      	ldr	r3, [pc, #272]	@ (800f60c <pvPortMalloc+0x190>)
 800f4fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f4fe:	4b43      	ldr	r3, [pc, #268]	@ (800f60c <pvPortMalloc+0x190>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f504:	e004      	b.n	800f510 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	429a      	cmp	r2, r3
 800f518:	d903      	bls.n	800f522 <pvPortMalloc+0xa6>
 800f51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1f1      	bne.n	800f506 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f522:	4b37      	ldr	r3, [pc, #220]	@ (800f600 <pvPortMalloc+0x184>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f528:	429a      	cmp	r2, r3
 800f52a:	d051      	beq.n	800f5d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f52c:	6a3b      	ldr	r3, [r7, #32]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2208      	movs	r2, #8
 800f532:	4413      	add	r3, r2
 800f534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f540:	685a      	ldr	r2, [r3, #4]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	1ad2      	subs	r2, r2, r3
 800f546:	2308      	movs	r3, #8
 800f548:	005b      	lsls	r3, r3, #1
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d920      	bls.n	800f590 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f54e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4413      	add	r3, r2
 800f554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	f003 0307 	and.w	r3, r3, #7
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00b      	beq.n	800f578 <pvPortMalloc+0xfc>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	613b      	str	r3, [r7, #16]
}
 800f572:	bf00      	nop
 800f574:	bf00      	nop
 800f576:	e7fd      	b.n	800f574 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f57a:	685a      	ldr	r2, [r3, #4]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	1ad2      	subs	r2, r2, r3
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f58a:	69b8      	ldr	r0, [r7, #24]
 800f58c:	f000 f90a 	bl	800f7a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f590:	4b1d      	ldr	r3, [pc, #116]	@ (800f608 <pvPortMalloc+0x18c>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	1ad3      	subs	r3, r2, r3
 800f59a:	4a1b      	ldr	r2, [pc, #108]	@ (800f608 <pvPortMalloc+0x18c>)
 800f59c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f59e:	4b1a      	ldr	r3, [pc, #104]	@ (800f608 <pvPortMalloc+0x18c>)
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	4b1b      	ldr	r3, [pc, #108]	@ (800f610 <pvPortMalloc+0x194>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d203      	bcs.n	800f5b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f5aa:	4b17      	ldr	r3, [pc, #92]	@ (800f608 <pvPortMalloc+0x18c>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4a18      	ldr	r2, [pc, #96]	@ (800f610 <pvPortMalloc+0x194>)
 800f5b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	4b13      	ldr	r3, [pc, #76]	@ (800f604 <pvPortMalloc+0x188>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	431a      	orrs	r2, r3
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f5c6:	4b13      	ldr	r3, [pc, #76]	@ (800f614 <pvPortMalloc+0x198>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	4a11      	ldr	r2, [pc, #68]	@ (800f614 <pvPortMalloc+0x198>)
 800f5ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f5d0:	f7fe fc22 	bl	800de18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	f003 0307 	and.w	r3, r3, #7
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00b      	beq.n	800f5f6 <pvPortMalloc+0x17a>
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	60fb      	str	r3, [r7, #12]
}
 800f5f0:	bf00      	nop
 800f5f2:	bf00      	nop
 800f5f4:	e7fd      	b.n	800f5f2 <pvPortMalloc+0x176>
	return pvReturn;
 800f5f6:	69fb      	ldr	r3, [r7, #28]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3728      	adds	r7, #40	@ 0x28
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	20004d94 	.word	0x20004d94
 800f604:	20004da8 	.word	0x20004da8
 800f608:	20004d98 	.word	0x20004d98
 800f60c:	20004d8c 	.word	0x20004d8c
 800f610:	20004d9c 	.word	0x20004d9c
 800f614:	20004da0 	.word	0x20004da0

0800f618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b086      	sub	sp, #24
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d04f      	beq.n	800f6ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f62a:	2308      	movs	r3, #8
 800f62c:	425b      	negs	r3, r3
 800f62e:	697a      	ldr	r2, [r7, #20]
 800f630:	4413      	add	r3, r2
 800f632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	685a      	ldr	r2, [r3, #4]
 800f63c:	4b25      	ldr	r3, [pc, #148]	@ (800f6d4 <vPortFree+0xbc>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4013      	ands	r3, r2
 800f642:	2b00      	cmp	r3, #0
 800f644:	d10b      	bne.n	800f65e <vPortFree+0x46>
	__asm volatile
 800f646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64a:	f383 8811 	msr	BASEPRI, r3
 800f64e:	f3bf 8f6f 	isb	sy
 800f652:	f3bf 8f4f 	dsb	sy
 800f656:	60fb      	str	r3, [r7, #12]
}
 800f658:	bf00      	nop
 800f65a:	bf00      	nop
 800f65c:	e7fd      	b.n	800f65a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00b      	beq.n	800f67e <vPortFree+0x66>
	__asm volatile
 800f666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f66a:	f383 8811 	msr	BASEPRI, r3
 800f66e:	f3bf 8f6f 	isb	sy
 800f672:	f3bf 8f4f 	dsb	sy
 800f676:	60bb      	str	r3, [r7, #8]
}
 800f678:	bf00      	nop
 800f67a:	bf00      	nop
 800f67c:	e7fd      	b.n	800f67a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	685a      	ldr	r2, [r3, #4]
 800f682:	4b14      	ldr	r3, [pc, #80]	@ (800f6d4 <vPortFree+0xbc>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4013      	ands	r3, r2
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d01e      	beq.n	800f6ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d11a      	bne.n	800f6ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	685a      	ldr	r2, [r3, #4]
 800f698:	4b0e      	ldr	r3, [pc, #56]	@ (800f6d4 <vPortFree+0xbc>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	43db      	mvns	r3, r3
 800f69e:	401a      	ands	r2, r3
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f6a4:	f7fe fbaa 	bl	800ddfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	685a      	ldr	r2, [r3, #4]
 800f6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f6d8 <vPortFree+0xc0>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	4a09      	ldr	r2, [pc, #36]	@ (800f6d8 <vPortFree+0xc0>)
 800f6b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f6b6:	6938      	ldr	r0, [r7, #16]
 800f6b8:	f000 f874 	bl	800f7a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f6bc:	4b07      	ldr	r3, [pc, #28]	@ (800f6dc <vPortFree+0xc4>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	4a06      	ldr	r2, [pc, #24]	@ (800f6dc <vPortFree+0xc4>)
 800f6c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f6c6:	f7fe fba7 	bl	800de18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f6ca:	bf00      	nop
 800f6cc:	3718      	adds	r7, #24
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	20004da8 	.word	0x20004da8
 800f6d8:	20004d98 	.word	0x20004d98
 800f6dc:	20004da4 	.word	0x20004da4

0800f6e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f6e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f6ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f6ec:	4b27      	ldr	r3, [pc, #156]	@ (800f78c <prvHeapInit+0xac>)
 800f6ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f003 0307 	and.w	r3, r3, #7
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d00c      	beq.n	800f714 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	3307      	adds	r3, #7
 800f6fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f023 0307 	bic.w	r3, r3, #7
 800f706:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f708:	68ba      	ldr	r2, [r7, #8]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	1ad3      	subs	r3, r2, r3
 800f70e:	4a1f      	ldr	r2, [pc, #124]	@ (800f78c <prvHeapInit+0xac>)
 800f710:	4413      	add	r3, r2
 800f712:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f718:	4a1d      	ldr	r2, [pc, #116]	@ (800f790 <prvHeapInit+0xb0>)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f71e:	4b1c      	ldr	r3, [pc, #112]	@ (800f790 <prvHeapInit+0xb0>)
 800f720:	2200      	movs	r2, #0
 800f722:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	4413      	add	r3, r2
 800f72a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f72c:	2208      	movs	r2, #8
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	1a9b      	subs	r3, r3, r2
 800f732:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f023 0307 	bic.w	r3, r3, #7
 800f73a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	4a15      	ldr	r2, [pc, #84]	@ (800f794 <prvHeapInit+0xb4>)
 800f740:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f742:	4b14      	ldr	r3, [pc, #80]	@ (800f794 <prvHeapInit+0xb4>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2200      	movs	r2, #0
 800f748:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f74a:	4b12      	ldr	r3, [pc, #72]	@ (800f794 <prvHeapInit+0xb4>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2200      	movs	r2, #0
 800f750:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	1ad2      	subs	r2, r2, r3
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f760:	4b0c      	ldr	r3, [pc, #48]	@ (800f794 <prvHeapInit+0xb4>)
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	4a0a      	ldr	r2, [pc, #40]	@ (800f798 <prvHeapInit+0xb8>)
 800f76e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	4a09      	ldr	r2, [pc, #36]	@ (800f79c <prvHeapInit+0xbc>)
 800f776:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f778:	4b09      	ldr	r3, [pc, #36]	@ (800f7a0 <prvHeapInit+0xc0>)
 800f77a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f77e:	601a      	str	r2, [r3, #0]
}
 800f780:	bf00      	nop
 800f782:	3714      	adds	r7, #20
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr
 800f78c:	2000118c 	.word	0x2000118c
 800f790:	20004d8c 	.word	0x20004d8c
 800f794:	20004d94 	.word	0x20004d94
 800f798:	20004d9c 	.word	0x20004d9c
 800f79c:	20004d98 	.word	0x20004d98
 800f7a0:	20004da8 	.word	0x20004da8

0800f7a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f7ac:	4b28      	ldr	r3, [pc, #160]	@ (800f850 <prvInsertBlockIntoFreeList+0xac>)
 800f7ae:	60fb      	str	r3, [r7, #12]
 800f7b0:	e002      	b.n	800f7b8 <prvInsertBlockIntoFreeList+0x14>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	60fb      	str	r3, [r7, #12]
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d8f7      	bhi.n	800f7b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	68ba      	ldr	r2, [r7, #8]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d108      	bne.n	800f7e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	685a      	ldr	r2, [r3, #4]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	441a      	add	r2, r3
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	441a      	add	r2, r3
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d118      	bne.n	800f82c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681a      	ldr	r2, [r3, #0]
 800f7fe:	4b15      	ldr	r3, [pc, #84]	@ (800f854 <prvInsertBlockIntoFreeList+0xb0>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	429a      	cmp	r2, r3
 800f804:	d00d      	beq.n	800f822 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	685a      	ldr	r2, [r3, #4]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	441a      	add	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	601a      	str	r2, [r3, #0]
 800f820:	e008      	b.n	800f834 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f822:	4b0c      	ldr	r3, [pc, #48]	@ (800f854 <prvInsertBlockIntoFreeList+0xb0>)
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	601a      	str	r2, [r3, #0]
 800f82a:	e003      	b.n	800f834 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d002      	beq.n	800f842 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f842:	bf00      	nop
 800f844:	3714      	adds	r7, #20
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop
 800f850:	20004d8c 	.word	0x20004d8c
 800f854:	20004d94 	.word	0x20004d94

0800f858 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f85c:	2201      	movs	r2, #1
 800f85e:	490e      	ldr	r1, [pc, #56]	@ (800f898 <MX_USB_HOST_Init+0x40>)
 800f860:	480e      	ldr	r0, [pc, #56]	@ (800f89c <MX_USB_HOST_Init+0x44>)
 800f862:	f7fa fdf9 	bl	800a458 <USBH_Init>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f86c:	f7f2 ffa0 	bl	80027b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f870:	490b      	ldr	r1, [pc, #44]	@ (800f8a0 <MX_USB_HOST_Init+0x48>)
 800f872:	480a      	ldr	r0, [pc, #40]	@ (800f89c <MX_USB_HOST_Init+0x44>)
 800f874:	f7fa febf 	bl	800a5f6 <USBH_RegisterClass>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d001      	beq.n	800f882 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f87e:	f7f2 ff97 	bl	80027b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f882:	4806      	ldr	r0, [pc, #24]	@ (800f89c <MX_USB_HOST_Init+0x44>)
 800f884:	f7fa ff43 	bl	800a70e <USBH_Start>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f88e:	f7f2 ff8f 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f892:	bf00      	nop
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	0800f8a5 	.word	0x0800f8a5
 800f89c:	20004dac 	.word	0x20004dac
 800f8a0:	2000000c 	.word	0x2000000c

0800f8a4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f8b0:	78fb      	ldrb	r3, [r7, #3]
 800f8b2:	3b01      	subs	r3, #1
 800f8b4:	2b04      	cmp	r3, #4
 800f8b6:	d819      	bhi.n	800f8ec <USBH_UserProcess+0x48>
 800f8b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f8c0 <USBH_UserProcess+0x1c>)
 800f8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8be:	bf00      	nop
 800f8c0:	0800f8ed 	.word	0x0800f8ed
 800f8c4:	0800f8dd 	.word	0x0800f8dd
 800f8c8:	0800f8ed 	.word	0x0800f8ed
 800f8cc:	0800f8e5 	.word	0x0800f8e5
 800f8d0:	0800f8d5 	.word	0x0800f8d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f8d4:	4b09      	ldr	r3, [pc, #36]	@ (800f8fc <USBH_UserProcess+0x58>)
 800f8d6:	2203      	movs	r2, #3
 800f8d8:	701a      	strb	r2, [r3, #0]
  break;
 800f8da:	e008      	b.n	800f8ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f8dc:	4b07      	ldr	r3, [pc, #28]	@ (800f8fc <USBH_UserProcess+0x58>)
 800f8de:	2202      	movs	r2, #2
 800f8e0:	701a      	strb	r2, [r3, #0]
  break;
 800f8e2:	e004      	b.n	800f8ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f8e4:	4b05      	ldr	r3, [pc, #20]	@ (800f8fc <USBH_UserProcess+0x58>)
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	701a      	strb	r2, [r3, #0]
  break;
 800f8ea:	e000      	b.n	800f8ee <USBH_UserProcess+0x4a>

  default:
  break;
 800f8ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f8ee:	bf00      	nop
 800f8f0:	370c      	adds	r7, #12
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr
 800f8fa:	bf00      	nop
 800f8fc:	20005190 	.word	0x20005190

0800f900 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b08a      	sub	sp, #40	@ 0x28
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f908:	f107 0314 	add.w	r3, r7, #20
 800f90c:	2200      	movs	r2, #0
 800f90e:	601a      	str	r2, [r3, #0]
 800f910:	605a      	str	r2, [r3, #4]
 800f912:	609a      	str	r2, [r3, #8]
 800f914:	60da      	str	r2, [r3, #12]
 800f916:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f920:	d147      	bne.n	800f9b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f922:	2300      	movs	r3, #0
 800f924:	613b      	str	r3, [r7, #16]
 800f926:	4b25      	ldr	r3, [pc, #148]	@ (800f9bc <HAL_HCD_MspInit+0xbc>)
 800f928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f92a:	4a24      	ldr	r2, [pc, #144]	@ (800f9bc <HAL_HCD_MspInit+0xbc>)
 800f92c:	f043 0301 	orr.w	r3, r3, #1
 800f930:	6313      	str	r3, [r2, #48]	@ 0x30
 800f932:	4b22      	ldr	r3, [pc, #136]	@ (800f9bc <HAL_HCD_MspInit+0xbc>)
 800f934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f936:	f003 0301 	and.w	r3, r3, #1
 800f93a:	613b      	str	r3, [r7, #16]
 800f93c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f93e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f944:	2300      	movs	r3, #0
 800f946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f948:	2300      	movs	r3, #0
 800f94a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f94c:	f107 0314 	add.w	r3, r7, #20
 800f950:	4619      	mov	r1, r3
 800f952:	481b      	ldr	r0, [pc, #108]	@ (800f9c0 <HAL_HCD_MspInit+0xc0>)
 800f954:	f7f3 fcea 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f958:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800f95c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f95e:	2302      	movs	r3, #2
 800f960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f962:	2300      	movs	r3, #0
 800f964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f966:	2300      	movs	r3, #0
 800f968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f96a:	230a      	movs	r3, #10
 800f96c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f96e:	f107 0314 	add.w	r3, r7, #20
 800f972:	4619      	mov	r1, r3
 800f974:	4812      	ldr	r0, [pc, #72]	@ (800f9c0 <HAL_HCD_MspInit+0xc0>)
 800f976:	f7f3 fcd9 	bl	800332c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f97a:	4b10      	ldr	r3, [pc, #64]	@ (800f9bc <HAL_HCD_MspInit+0xbc>)
 800f97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f97e:	4a0f      	ldr	r2, [pc, #60]	@ (800f9bc <HAL_HCD_MspInit+0xbc>)
 800f980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f984:	6353      	str	r3, [r2, #52]	@ 0x34
 800f986:	2300      	movs	r3, #0
 800f988:	60fb      	str	r3, [r7, #12]
 800f98a:	4b0c      	ldr	r3, [pc, #48]	@ (800f9bc <HAL_HCD_MspInit+0xbc>)
 800f98c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f98e:	4a0b      	ldr	r2, [pc, #44]	@ (800f9bc <HAL_HCD_MspInit+0xbc>)
 800f990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f994:	6453      	str	r3, [r2, #68]	@ 0x44
 800f996:	4b09      	ldr	r3, [pc, #36]	@ (800f9bc <HAL_HCD_MspInit+0xbc>)
 800f998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f99a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f99e:	60fb      	str	r3, [r7, #12]
 800f9a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	2105      	movs	r1, #5
 800f9a6:	2043      	movs	r0, #67	@ 0x43
 800f9a8:	f7f3 fc04 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f9ac:	2043      	movs	r0, #67	@ 0x43
 800f9ae:	f7f3 fc1d 	bl	80031ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f9b2:	bf00      	nop
 800f9b4:	3728      	adds	r7, #40	@ 0x28
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	40023800 	.word	0x40023800
 800f9c0:	40020000 	.word	0x40020000

0800f9c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fb fb4d 	bl	800b072 <USBH_LL_IncTimer>
}
 800f9d8:	bf00      	nop
 800f9da:	3708      	adds	r7, #8
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fb fb91 	bl	800b116 <USBH_LL_Connect>
}
 800f9f4:	bf00      	nop
 800f9f6:	3708      	adds	r7, #8
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fb fba6 	bl	800b15c <USBH_LL_Disconnect>
}
 800fa10:	bf00      	nop
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	460b      	mov	r3, r1
 800fa22:	70fb      	strb	r3, [r7, #3]
 800fa24:	4613      	mov	r3, r2
 800fa26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fb fbdd 	bl	800b1ee <USBH_LL_NotifyURBChange>
#endif
}
 800fa34:	bf00      	nop
 800fa36:	3708      	adds	r7, #8
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fb fb3b 	bl	800b0c6 <USBH_LL_PortEnabled>
}
 800fa50:	bf00      	nop
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fb fb47 	bl	800b0fa <USBH_LL_PortDisabled>
}
 800fa6c:	bf00      	nop
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d12a      	bne.n	800fadc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fa86:	4a18      	ldr	r2, [pc, #96]	@ (800fae8 <USBH_LL_Init+0x74>)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a15      	ldr	r2, [pc, #84]	@ (800fae8 <USBH_LL_Init+0x74>)
 800fa92:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa96:	4b14      	ldr	r3, [pc, #80]	@ (800fae8 <USBH_LL_Init+0x74>)
 800fa98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fa9c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fa9e:	4b12      	ldr	r3, [pc, #72]	@ (800fae8 <USBH_LL_Init+0x74>)
 800faa0:	2208      	movs	r2, #8
 800faa2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800faa4:	4b10      	ldr	r3, [pc, #64]	@ (800fae8 <USBH_LL_Init+0x74>)
 800faa6:	2201      	movs	r2, #1
 800faa8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800faaa:	4b0f      	ldr	r3, [pc, #60]	@ (800fae8 <USBH_LL_Init+0x74>)
 800faac:	2200      	movs	r2, #0
 800faae:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fab0:	4b0d      	ldr	r3, [pc, #52]	@ (800fae8 <USBH_LL_Init+0x74>)
 800fab2:	2202      	movs	r2, #2
 800fab4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fab6:	4b0c      	ldr	r3, [pc, #48]	@ (800fae8 <USBH_LL_Init+0x74>)
 800fab8:	2200      	movs	r2, #0
 800faba:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fabc:	480a      	ldr	r0, [pc, #40]	@ (800fae8 <USBH_LL_Init+0x74>)
 800fabe:	f7f3 fe02 	bl	80036c6 <HAL_HCD_Init>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fac8:	f7f2 fe72 	bl	80027b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800facc:	4806      	ldr	r0, [pc, #24]	@ (800fae8 <USBH_LL_Init+0x74>)
 800face:	f7f4 fa63 	bl	8003f98 <HAL_HCD_GetCurrentFrame>
 800fad2:	4603      	mov	r3, r0
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7fb fabc 	bl	800b054 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	20005194 	.word	0x20005194

0800faec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faf4:	2300      	movs	r3, #0
 800faf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800faf8:	2300      	movs	r3, #0
 800fafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f4 f9d0 	bl	8003ea8 <HAL_HCD_Start>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb0c:	7bfb      	ldrb	r3, [r7, #15]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f000 f95e 	bl	800fdd0 <USBH_Get_USB_Status>
 800fb14:	4603      	mov	r3, r0
 800fb16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb18:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3710      	adds	r7, #16
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b084      	sub	sp, #16
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7f4 f9d8 	bl	8003eee <HAL_HCD_Stop>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb42:	7bfb      	ldrb	r3, [r7, #15]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f000 f943 	bl	800fdd0 <USBH_Get_USB_Status>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fb60:	2301      	movs	r3, #1
 800fb62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7f4 fa22 	bl	8003fb4 <HAL_HCD_GetCurrentSpeed>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b02      	cmp	r3, #2
 800fb74:	d00c      	beq.n	800fb90 <USBH_LL_GetSpeed+0x38>
 800fb76:	2b02      	cmp	r3, #2
 800fb78:	d80d      	bhi.n	800fb96 <USBH_LL_GetSpeed+0x3e>
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d002      	beq.n	800fb84 <USBH_LL_GetSpeed+0x2c>
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d003      	beq.n	800fb8a <USBH_LL_GetSpeed+0x32>
 800fb82:	e008      	b.n	800fb96 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fb84:	2300      	movs	r3, #0
 800fb86:	73fb      	strb	r3, [r7, #15]
    break;
 800fb88:	e008      	b.n	800fb9c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	73fb      	strb	r3, [r7, #15]
    break;
 800fb8e:	e005      	b.n	800fb9c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fb90:	2302      	movs	r3, #2
 800fb92:	73fb      	strb	r3, [r7, #15]
    break;
 800fb94:	e002      	b.n	800fb9c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fb96:	2301      	movs	r3, #1
 800fb98:	73fb      	strb	r3, [r7, #15]
    break;
 800fb9a:	bf00      	nop
  }
  return  speed;
 800fb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3710      	adds	r7, #16
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fba6:	b580      	push	{r7, lr}
 800fba8:	b084      	sub	sp, #16
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7f4 f9b3 	bl	8003f28 <HAL_HCD_ResetPort>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fbc6:	7bfb      	ldrb	r3, [r7, #15]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f000 f901 	bl	800fdd0 <USBH_Get_USB_Status>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fbee:	78fa      	ldrb	r2, [r7, #3]
 800fbf0:	4611      	mov	r1, r2
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7f4 f9bb 	bl	8003f6e <HAL_HCD_HC_GetXferCount>
 800fbf8:	4603      	mov	r3, r0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fc02:	b590      	push	{r4, r7, lr}
 800fc04:	b089      	sub	sp, #36	@ 0x24
 800fc06:	af04      	add	r7, sp, #16
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	4608      	mov	r0, r1
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4603      	mov	r3, r0
 800fc12:	70fb      	strb	r3, [r7, #3]
 800fc14:	460b      	mov	r3, r1
 800fc16:	70bb      	strb	r3, [r7, #2]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fc2a:	787c      	ldrb	r4, [r7, #1]
 800fc2c:	78ba      	ldrb	r2, [r7, #2]
 800fc2e:	78f9      	ldrb	r1, [r7, #3]
 800fc30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fc32:	9302      	str	r3, [sp, #8]
 800fc34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc38:	9301      	str	r3, [sp, #4]
 800fc3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	4623      	mov	r3, r4
 800fc42:	f7f3 fda7 	bl	8003794 <HAL_HCD_HC_Init>
 800fc46:	4603      	mov	r3, r0
 800fc48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc4a:	7bfb      	ldrb	r3, [r7, #15]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f000 f8bf 	bl	800fdd0 <USBH_Get_USB_Status>
 800fc52:	4603      	mov	r3, r0
 800fc54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc56:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3714      	adds	r7, #20
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd90      	pop	{r4, r7, pc}

0800fc60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	460b      	mov	r3, r1
 800fc6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc70:	2300      	movs	r3, #0
 800fc72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fc7a:	78fa      	ldrb	r2, [r7, #3]
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7f3 fe40 	bl	8003904 <HAL_HCD_HC_Halt>
 800fc84:	4603      	mov	r3, r0
 800fc86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc88:	7bfb      	ldrb	r3, [r7, #15]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f000 f8a0 	bl	800fdd0 <USBH_Get_USB_Status>
 800fc90:	4603      	mov	r3, r0
 800fc92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc94:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3710      	adds	r7, #16
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fc9e:	b590      	push	{r4, r7, lr}
 800fca0:	b089      	sub	sp, #36	@ 0x24
 800fca2:	af04      	add	r7, sp, #16
 800fca4:	6078      	str	r0, [r7, #4]
 800fca6:	4608      	mov	r0, r1
 800fca8:	4611      	mov	r1, r2
 800fcaa:	461a      	mov	r2, r3
 800fcac:	4603      	mov	r3, r0
 800fcae:	70fb      	strb	r3, [r7, #3]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70bb      	strb	r3, [r7, #2]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fcc6:	787c      	ldrb	r4, [r7, #1]
 800fcc8:	78ba      	ldrb	r2, [r7, #2]
 800fcca:	78f9      	ldrb	r1, [r7, #3]
 800fccc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fcd0:	9303      	str	r3, [sp, #12]
 800fcd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fcd4:	9302      	str	r3, [sp, #8]
 800fcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd8:	9301      	str	r3, [sp, #4]
 800fcda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcde:	9300      	str	r3, [sp, #0]
 800fce0:	4623      	mov	r3, r4
 800fce2:	f7f3 fe33 	bl	800394c <HAL_HCD_HC_SubmitRequest>
 800fce6:	4603      	mov	r3, r0
 800fce8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fcea:	7bfb      	ldrb	r3, [r7, #15]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f000 f86f 	bl	800fdd0 <USBH_Get_USB_Status>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3714      	adds	r7, #20
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd90      	pop	{r4, r7, pc}

0800fd00 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fd12:	78fa      	ldrb	r2, [r7, #3]
 800fd14:	4611      	mov	r1, r2
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7f4 f914 	bl	8003f44 <HAL_HCD_HC_GetURBState>
 800fd1c:	4603      	mov	r3, r0
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}

0800fd26 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fd26:	b580      	push	{r7, lr}
 800fd28:	b082      	sub	sp, #8
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
 800fd2e:	460b      	mov	r3, r1
 800fd30:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d103      	bne.n	800fd44 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fd3c:	78fb      	ldrb	r3, [r7, #3]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 f872 	bl	800fe28 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fd44:	20c8      	movs	r0, #200	@ 0xc8
 800fd46:	f7f3 f959 	bl	8002ffc <HAL_Delay>
  return USBH_OK;
 800fd4a:	2300      	movs	r3, #0
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3708      	adds	r7, #8
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b085      	sub	sp, #20
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	70fb      	strb	r3, [r7, #3]
 800fd60:	4613      	mov	r3, r2
 800fd62:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fd6a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fd6c:	78fa      	ldrb	r2, [r7, #3]
 800fd6e:	68f9      	ldr	r1, [r7, #12]
 800fd70:	4613      	mov	r3, r2
 800fd72:	011b      	lsls	r3, r3, #4
 800fd74:	1a9b      	subs	r3, r3, r2
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	440b      	add	r3, r1
 800fd7a:	3317      	adds	r3, #23
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00a      	beq.n	800fd98 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fd82:	78fa      	ldrb	r2, [r7, #3]
 800fd84:	68f9      	ldr	r1, [r7, #12]
 800fd86:	4613      	mov	r3, r2
 800fd88:	011b      	lsls	r3, r3, #4
 800fd8a:	1a9b      	subs	r3, r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	440b      	add	r3, r1
 800fd90:	333c      	adds	r3, #60	@ 0x3c
 800fd92:	78ba      	ldrb	r2, [r7, #2]
 800fd94:	701a      	strb	r2, [r3, #0]
 800fd96:	e009      	b.n	800fdac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fd98:	78fa      	ldrb	r2, [r7, #3]
 800fd9a:	68f9      	ldr	r1, [r7, #12]
 800fd9c:	4613      	mov	r3, r2
 800fd9e:	011b      	lsls	r3, r3, #4
 800fda0:	1a9b      	subs	r3, r3, r2
 800fda2:	009b      	lsls	r3, r3, #2
 800fda4:	440b      	add	r3, r1
 800fda6:	333d      	adds	r3, #61	@ 0x3d
 800fda8:	78ba      	ldrb	r2, [r7, #2]
 800fdaa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3714      	adds	r7, #20
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr

0800fdba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f7f3 f91a 	bl	8002ffc <HAL_Delay>
}
 800fdc8:	bf00      	nop
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fdda:	2300      	movs	r3, #0
 800fddc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fdde:	79fb      	ldrb	r3, [r7, #7]
 800fde0:	2b03      	cmp	r3, #3
 800fde2:	d817      	bhi.n	800fe14 <USBH_Get_USB_Status+0x44>
 800fde4:	a201      	add	r2, pc, #4	@ (adr r2, 800fdec <USBH_Get_USB_Status+0x1c>)
 800fde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdea:	bf00      	nop
 800fdec:	0800fdfd 	.word	0x0800fdfd
 800fdf0:	0800fe03 	.word	0x0800fe03
 800fdf4:	0800fe09 	.word	0x0800fe09
 800fdf8:	0800fe0f 	.word	0x0800fe0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	73fb      	strb	r3, [r7, #15]
    break;
 800fe00:	e00b      	b.n	800fe1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fe02:	2302      	movs	r3, #2
 800fe04:	73fb      	strb	r3, [r7, #15]
    break;
 800fe06:	e008      	b.n	800fe1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe0c:	e005      	b.n	800fe1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fe0e:	2302      	movs	r3, #2
 800fe10:	73fb      	strb	r3, [r7, #15]
    break;
 800fe12:	e002      	b.n	800fe1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fe14:	2302      	movs	r3, #2
 800fe16:	73fb      	strb	r3, [r7, #15]
    break;
 800fe18:	bf00      	nop
  }
  return usb_status;
 800fe1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3714      	adds	r7, #20
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr

0800fe28 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	4603      	mov	r3, r0
 800fe30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fe32:	79fb      	ldrb	r3, [r7, #7]
 800fe34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fe36:	79fb      	ldrb	r3, [r7, #7]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d102      	bne.n	800fe42 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	73fb      	strb	r3, [r7, #15]
 800fe40:	e001      	b.n	800fe46 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800fe42:	2301      	movs	r3, #1
 800fe44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fe46:	7bfb      	ldrb	r3, [r7, #15]
 800fe48:	461a      	mov	r2, r3
 800fe4a:	2101      	movs	r1, #1
 800fe4c:	4803      	ldr	r0, [pc, #12]	@ (800fe5c <MX_DriverVbusFS+0x34>)
 800fe4e:	f7f3 fc21 	bl	8003694 <HAL_GPIO_WritePin>
}
 800fe52:	bf00      	nop
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	40020800 	.word	0x40020800

0800fe60 <atoi>:
 800fe60:	220a      	movs	r2, #10
 800fe62:	2100      	movs	r1, #0
 800fe64:	f000 b938 	b.w	80100d8 <strtol>

0800fe68 <malloc>:
 800fe68:	4b02      	ldr	r3, [pc, #8]	@ (800fe74 <malloc+0xc>)
 800fe6a:	4601      	mov	r1, r0
 800fe6c:	6818      	ldr	r0, [r3, #0]
 800fe6e:	f000 b82d 	b.w	800fecc <_malloc_r>
 800fe72:	bf00      	nop
 800fe74:	2000003c 	.word	0x2000003c

0800fe78 <free>:
 800fe78:	4b02      	ldr	r3, [pc, #8]	@ (800fe84 <free+0xc>)
 800fe7a:	4601      	mov	r1, r0
 800fe7c:	6818      	ldr	r0, [r3, #0]
 800fe7e:	f000 bb9b 	b.w	80105b8 <_free_r>
 800fe82:	bf00      	nop
 800fe84:	2000003c 	.word	0x2000003c

0800fe88 <sbrk_aligned>:
 800fe88:	b570      	push	{r4, r5, r6, lr}
 800fe8a:	4e0f      	ldr	r6, [pc, #60]	@ (800fec8 <sbrk_aligned+0x40>)
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	6831      	ldr	r1, [r6, #0]
 800fe90:	4605      	mov	r5, r0
 800fe92:	b911      	cbnz	r1, 800fe9a <sbrk_aligned+0x12>
 800fe94:	f000 fb32 	bl	80104fc <_sbrk_r>
 800fe98:	6030      	str	r0, [r6, #0]
 800fe9a:	4621      	mov	r1, r4
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	f000 fb2d 	bl	80104fc <_sbrk_r>
 800fea2:	1c43      	adds	r3, r0, #1
 800fea4:	d103      	bne.n	800feae <sbrk_aligned+0x26>
 800fea6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800feaa:	4620      	mov	r0, r4
 800feac:	bd70      	pop	{r4, r5, r6, pc}
 800feae:	1cc4      	adds	r4, r0, #3
 800feb0:	f024 0403 	bic.w	r4, r4, #3
 800feb4:	42a0      	cmp	r0, r4
 800feb6:	d0f8      	beq.n	800feaa <sbrk_aligned+0x22>
 800feb8:	1a21      	subs	r1, r4, r0
 800feba:	4628      	mov	r0, r5
 800febc:	f000 fb1e 	bl	80104fc <_sbrk_r>
 800fec0:	3001      	adds	r0, #1
 800fec2:	d1f2      	bne.n	800feaa <sbrk_aligned+0x22>
 800fec4:	e7ef      	b.n	800fea6 <sbrk_aligned+0x1e>
 800fec6:	bf00      	nop
 800fec8:	20005574 	.word	0x20005574

0800fecc <_malloc_r>:
 800fecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fed0:	1ccd      	adds	r5, r1, #3
 800fed2:	f025 0503 	bic.w	r5, r5, #3
 800fed6:	3508      	adds	r5, #8
 800fed8:	2d0c      	cmp	r5, #12
 800feda:	bf38      	it	cc
 800fedc:	250c      	movcc	r5, #12
 800fede:	2d00      	cmp	r5, #0
 800fee0:	4606      	mov	r6, r0
 800fee2:	db01      	blt.n	800fee8 <_malloc_r+0x1c>
 800fee4:	42a9      	cmp	r1, r5
 800fee6:	d904      	bls.n	800fef2 <_malloc_r+0x26>
 800fee8:	230c      	movs	r3, #12
 800feea:	6033      	str	r3, [r6, #0]
 800feec:	2000      	movs	r0, #0
 800feee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ffc8 <_malloc_r+0xfc>
 800fef6:	f000 f869 	bl	800ffcc <__malloc_lock>
 800fefa:	f8d8 3000 	ldr.w	r3, [r8]
 800fefe:	461c      	mov	r4, r3
 800ff00:	bb44      	cbnz	r4, 800ff54 <_malloc_r+0x88>
 800ff02:	4629      	mov	r1, r5
 800ff04:	4630      	mov	r0, r6
 800ff06:	f7ff ffbf 	bl	800fe88 <sbrk_aligned>
 800ff0a:	1c43      	adds	r3, r0, #1
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	d158      	bne.n	800ffc2 <_malloc_r+0xf6>
 800ff10:	f8d8 4000 	ldr.w	r4, [r8]
 800ff14:	4627      	mov	r7, r4
 800ff16:	2f00      	cmp	r7, #0
 800ff18:	d143      	bne.n	800ffa2 <_malloc_r+0xd6>
 800ff1a:	2c00      	cmp	r4, #0
 800ff1c:	d04b      	beq.n	800ffb6 <_malloc_r+0xea>
 800ff1e:	6823      	ldr	r3, [r4, #0]
 800ff20:	4639      	mov	r1, r7
 800ff22:	4630      	mov	r0, r6
 800ff24:	eb04 0903 	add.w	r9, r4, r3
 800ff28:	f000 fae8 	bl	80104fc <_sbrk_r>
 800ff2c:	4581      	cmp	r9, r0
 800ff2e:	d142      	bne.n	800ffb6 <_malloc_r+0xea>
 800ff30:	6821      	ldr	r1, [r4, #0]
 800ff32:	1a6d      	subs	r5, r5, r1
 800ff34:	4629      	mov	r1, r5
 800ff36:	4630      	mov	r0, r6
 800ff38:	f7ff ffa6 	bl	800fe88 <sbrk_aligned>
 800ff3c:	3001      	adds	r0, #1
 800ff3e:	d03a      	beq.n	800ffb6 <_malloc_r+0xea>
 800ff40:	6823      	ldr	r3, [r4, #0]
 800ff42:	442b      	add	r3, r5
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	f8d8 3000 	ldr.w	r3, [r8]
 800ff4a:	685a      	ldr	r2, [r3, #4]
 800ff4c:	bb62      	cbnz	r2, 800ffa8 <_malloc_r+0xdc>
 800ff4e:	f8c8 7000 	str.w	r7, [r8]
 800ff52:	e00f      	b.n	800ff74 <_malloc_r+0xa8>
 800ff54:	6822      	ldr	r2, [r4, #0]
 800ff56:	1b52      	subs	r2, r2, r5
 800ff58:	d420      	bmi.n	800ff9c <_malloc_r+0xd0>
 800ff5a:	2a0b      	cmp	r2, #11
 800ff5c:	d917      	bls.n	800ff8e <_malloc_r+0xc2>
 800ff5e:	1961      	adds	r1, r4, r5
 800ff60:	42a3      	cmp	r3, r4
 800ff62:	6025      	str	r5, [r4, #0]
 800ff64:	bf18      	it	ne
 800ff66:	6059      	strne	r1, [r3, #4]
 800ff68:	6863      	ldr	r3, [r4, #4]
 800ff6a:	bf08      	it	eq
 800ff6c:	f8c8 1000 	streq.w	r1, [r8]
 800ff70:	5162      	str	r2, [r4, r5]
 800ff72:	604b      	str	r3, [r1, #4]
 800ff74:	4630      	mov	r0, r6
 800ff76:	f000 f82f 	bl	800ffd8 <__malloc_unlock>
 800ff7a:	f104 000b 	add.w	r0, r4, #11
 800ff7e:	1d23      	adds	r3, r4, #4
 800ff80:	f020 0007 	bic.w	r0, r0, #7
 800ff84:	1ac2      	subs	r2, r0, r3
 800ff86:	bf1c      	itt	ne
 800ff88:	1a1b      	subne	r3, r3, r0
 800ff8a:	50a3      	strne	r3, [r4, r2]
 800ff8c:	e7af      	b.n	800feee <_malloc_r+0x22>
 800ff8e:	6862      	ldr	r2, [r4, #4]
 800ff90:	42a3      	cmp	r3, r4
 800ff92:	bf0c      	ite	eq
 800ff94:	f8c8 2000 	streq.w	r2, [r8]
 800ff98:	605a      	strne	r2, [r3, #4]
 800ff9a:	e7eb      	b.n	800ff74 <_malloc_r+0xa8>
 800ff9c:	4623      	mov	r3, r4
 800ff9e:	6864      	ldr	r4, [r4, #4]
 800ffa0:	e7ae      	b.n	800ff00 <_malloc_r+0x34>
 800ffa2:	463c      	mov	r4, r7
 800ffa4:	687f      	ldr	r7, [r7, #4]
 800ffa6:	e7b6      	b.n	800ff16 <_malloc_r+0x4a>
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	42a3      	cmp	r3, r4
 800ffae:	d1fb      	bne.n	800ffa8 <_malloc_r+0xdc>
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	6053      	str	r3, [r2, #4]
 800ffb4:	e7de      	b.n	800ff74 <_malloc_r+0xa8>
 800ffb6:	230c      	movs	r3, #12
 800ffb8:	6033      	str	r3, [r6, #0]
 800ffba:	4630      	mov	r0, r6
 800ffbc:	f000 f80c 	bl	800ffd8 <__malloc_unlock>
 800ffc0:	e794      	b.n	800feec <_malloc_r+0x20>
 800ffc2:	6005      	str	r5, [r0, #0]
 800ffc4:	e7d6      	b.n	800ff74 <_malloc_r+0xa8>
 800ffc6:	bf00      	nop
 800ffc8:	20005578 	.word	0x20005578

0800ffcc <__malloc_lock>:
 800ffcc:	4801      	ldr	r0, [pc, #4]	@ (800ffd4 <__malloc_lock+0x8>)
 800ffce:	f000 bae2 	b.w	8010596 <__retarget_lock_acquire_recursive>
 800ffd2:	bf00      	nop
 800ffd4:	200056bc 	.word	0x200056bc

0800ffd8 <__malloc_unlock>:
 800ffd8:	4801      	ldr	r0, [pc, #4]	@ (800ffe0 <__malloc_unlock+0x8>)
 800ffda:	f000 badd 	b.w	8010598 <__retarget_lock_release_recursive>
 800ffde:	bf00      	nop
 800ffe0:	200056bc 	.word	0x200056bc

0800ffe4 <_strtol_l.isra.0>:
 800ffe4:	2b24      	cmp	r3, #36	@ 0x24
 800ffe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffea:	4686      	mov	lr, r0
 800ffec:	4690      	mov	r8, r2
 800ffee:	d801      	bhi.n	800fff4 <_strtol_l.isra.0+0x10>
 800fff0:	2b01      	cmp	r3, #1
 800fff2:	d106      	bne.n	8010002 <_strtol_l.isra.0+0x1e>
 800fff4:	f000 faa4 	bl	8010540 <__errno>
 800fff8:	2316      	movs	r3, #22
 800fffa:	6003      	str	r3, [r0, #0]
 800fffc:	2000      	movs	r0, #0
 800fffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010002:	4834      	ldr	r0, [pc, #208]	@ (80100d4 <_strtol_l.isra.0+0xf0>)
 8010004:	460d      	mov	r5, r1
 8010006:	462a      	mov	r2, r5
 8010008:	f815 4b01 	ldrb.w	r4, [r5], #1
 801000c:	5d06      	ldrb	r6, [r0, r4]
 801000e:	f016 0608 	ands.w	r6, r6, #8
 8010012:	d1f8      	bne.n	8010006 <_strtol_l.isra.0+0x22>
 8010014:	2c2d      	cmp	r4, #45	@ 0x2d
 8010016:	d110      	bne.n	801003a <_strtol_l.isra.0+0x56>
 8010018:	782c      	ldrb	r4, [r5, #0]
 801001a:	2601      	movs	r6, #1
 801001c:	1c95      	adds	r5, r2, #2
 801001e:	f033 0210 	bics.w	r2, r3, #16
 8010022:	d115      	bne.n	8010050 <_strtol_l.isra.0+0x6c>
 8010024:	2c30      	cmp	r4, #48	@ 0x30
 8010026:	d10d      	bne.n	8010044 <_strtol_l.isra.0+0x60>
 8010028:	782a      	ldrb	r2, [r5, #0]
 801002a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801002e:	2a58      	cmp	r2, #88	@ 0x58
 8010030:	d108      	bne.n	8010044 <_strtol_l.isra.0+0x60>
 8010032:	786c      	ldrb	r4, [r5, #1]
 8010034:	3502      	adds	r5, #2
 8010036:	2310      	movs	r3, #16
 8010038:	e00a      	b.n	8010050 <_strtol_l.isra.0+0x6c>
 801003a:	2c2b      	cmp	r4, #43	@ 0x2b
 801003c:	bf04      	itt	eq
 801003e:	782c      	ldrbeq	r4, [r5, #0]
 8010040:	1c95      	addeq	r5, r2, #2
 8010042:	e7ec      	b.n	801001e <_strtol_l.isra.0+0x3a>
 8010044:	2b00      	cmp	r3, #0
 8010046:	d1f6      	bne.n	8010036 <_strtol_l.isra.0+0x52>
 8010048:	2c30      	cmp	r4, #48	@ 0x30
 801004a:	bf14      	ite	ne
 801004c:	230a      	movne	r3, #10
 801004e:	2308      	moveq	r3, #8
 8010050:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010054:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8010058:	2200      	movs	r2, #0
 801005a:	fbbc f9f3 	udiv	r9, ip, r3
 801005e:	4610      	mov	r0, r2
 8010060:	fb03 ca19 	mls	sl, r3, r9, ip
 8010064:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010068:	2f09      	cmp	r7, #9
 801006a:	d80f      	bhi.n	801008c <_strtol_l.isra.0+0xa8>
 801006c:	463c      	mov	r4, r7
 801006e:	42a3      	cmp	r3, r4
 8010070:	dd1b      	ble.n	80100aa <_strtol_l.isra.0+0xc6>
 8010072:	1c57      	adds	r7, r2, #1
 8010074:	d007      	beq.n	8010086 <_strtol_l.isra.0+0xa2>
 8010076:	4581      	cmp	r9, r0
 8010078:	d314      	bcc.n	80100a4 <_strtol_l.isra.0+0xc0>
 801007a:	d101      	bne.n	8010080 <_strtol_l.isra.0+0x9c>
 801007c:	45a2      	cmp	sl, r4
 801007e:	db11      	blt.n	80100a4 <_strtol_l.isra.0+0xc0>
 8010080:	fb00 4003 	mla	r0, r0, r3, r4
 8010084:	2201      	movs	r2, #1
 8010086:	f815 4b01 	ldrb.w	r4, [r5], #1
 801008a:	e7eb      	b.n	8010064 <_strtol_l.isra.0+0x80>
 801008c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010090:	2f19      	cmp	r7, #25
 8010092:	d801      	bhi.n	8010098 <_strtol_l.isra.0+0xb4>
 8010094:	3c37      	subs	r4, #55	@ 0x37
 8010096:	e7ea      	b.n	801006e <_strtol_l.isra.0+0x8a>
 8010098:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801009c:	2f19      	cmp	r7, #25
 801009e:	d804      	bhi.n	80100aa <_strtol_l.isra.0+0xc6>
 80100a0:	3c57      	subs	r4, #87	@ 0x57
 80100a2:	e7e4      	b.n	801006e <_strtol_l.isra.0+0x8a>
 80100a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100a8:	e7ed      	b.n	8010086 <_strtol_l.isra.0+0xa2>
 80100aa:	1c53      	adds	r3, r2, #1
 80100ac:	d108      	bne.n	80100c0 <_strtol_l.isra.0+0xdc>
 80100ae:	2322      	movs	r3, #34	@ 0x22
 80100b0:	f8ce 3000 	str.w	r3, [lr]
 80100b4:	4660      	mov	r0, ip
 80100b6:	f1b8 0f00 	cmp.w	r8, #0
 80100ba:	d0a0      	beq.n	800fffe <_strtol_l.isra.0+0x1a>
 80100bc:	1e69      	subs	r1, r5, #1
 80100be:	e006      	b.n	80100ce <_strtol_l.isra.0+0xea>
 80100c0:	b106      	cbz	r6, 80100c4 <_strtol_l.isra.0+0xe0>
 80100c2:	4240      	negs	r0, r0
 80100c4:	f1b8 0f00 	cmp.w	r8, #0
 80100c8:	d099      	beq.n	800fffe <_strtol_l.isra.0+0x1a>
 80100ca:	2a00      	cmp	r2, #0
 80100cc:	d1f6      	bne.n	80100bc <_strtol_l.isra.0+0xd8>
 80100ce:	f8c8 1000 	str.w	r1, [r8]
 80100d2:	e794      	b.n	800fffe <_strtol_l.isra.0+0x1a>
 80100d4:	080115d1 	.word	0x080115d1

080100d8 <strtol>:
 80100d8:	4613      	mov	r3, r2
 80100da:	460a      	mov	r2, r1
 80100dc:	4601      	mov	r1, r0
 80100de:	4802      	ldr	r0, [pc, #8]	@ (80100e8 <strtol+0x10>)
 80100e0:	6800      	ldr	r0, [r0, #0]
 80100e2:	f7ff bf7f 	b.w	800ffe4 <_strtol_l.isra.0>
 80100e6:	bf00      	nop
 80100e8:	2000003c 	.word	0x2000003c

080100ec <std>:
 80100ec:	2300      	movs	r3, #0
 80100ee:	b510      	push	{r4, lr}
 80100f0:	4604      	mov	r4, r0
 80100f2:	e9c0 3300 	strd	r3, r3, [r0]
 80100f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100fa:	6083      	str	r3, [r0, #8]
 80100fc:	8181      	strh	r1, [r0, #12]
 80100fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8010100:	81c2      	strh	r2, [r0, #14]
 8010102:	6183      	str	r3, [r0, #24]
 8010104:	4619      	mov	r1, r3
 8010106:	2208      	movs	r2, #8
 8010108:	305c      	adds	r0, #92	@ 0x5c
 801010a:	f000 f93c 	bl	8010386 <memset>
 801010e:	4b0d      	ldr	r3, [pc, #52]	@ (8010144 <std+0x58>)
 8010110:	6263      	str	r3, [r4, #36]	@ 0x24
 8010112:	4b0d      	ldr	r3, [pc, #52]	@ (8010148 <std+0x5c>)
 8010114:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010116:	4b0d      	ldr	r3, [pc, #52]	@ (801014c <std+0x60>)
 8010118:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801011a:	4b0d      	ldr	r3, [pc, #52]	@ (8010150 <std+0x64>)
 801011c:	6323      	str	r3, [r4, #48]	@ 0x30
 801011e:	4b0d      	ldr	r3, [pc, #52]	@ (8010154 <std+0x68>)
 8010120:	6224      	str	r4, [r4, #32]
 8010122:	429c      	cmp	r4, r3
 8010124:	d006      	beq.n	8010134 <std+0x48>
 8010126:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801012a:	4294      	cmp	r4, r2
 801012c:	d002      	beq.n	8010134 <std+0x48>
 801012e:	33d0      	adds	r3, #208	@ 0xd0
 8010130:	429c      	cmp	r4, r3
 8010132:	d105      	bne.n	8010140 <std+0x54>
 8010134:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801013c:	f000 ba2a 	b.w	8010594 <__retarget_lock_init_recursive>
 8010140:	bd10      	pop	{r4, pc}
 8010142:	bf00      	nop
 8010144:	08010301 	.word	0x08010301
 8010148:	08010323 	.word	0x08010323
 801014c:	0801035b 	.word	0x0801035b
 8010150:	0801037f 	.word	0x0801037f
 8010154:	2000557c 	.word	0x2000557c

08010158 <stdio_exit_handler>:
 8010158:	4a02      	ldr	r2, [pc, #8]	@ (8010164 <stdio_exit_handler+0xc>)
 801015a:	4903      	ldr	r1, [pc, #12]	@ (8010168 <stdio_exit_handler+0x10>)
 801015c:	4803      	ldr	r0, [pc, #12]	@ (801016c <stdio_exit_handler+0x14>)
 801015e:	f000 b869 	b.w	8010234 <_fwalk_sglue>
 8010162:	bf00      	nop
 8010164:	20000030 	.word	0x20000030
 8010168:	08010fa1 	.word	0x08010fa1
 801016c:	20000040 	.word	0x20000040

08010170 <cleanup_stdio>:
 8010170:	6841      	ldr	r1, [r0, #4]
 8010172:	4b0c      	ldr	r3, [pc, #48]	@ (80101a4 <cleanup_stdio+0x34>)
 8010174:	4299      	cmp	r1, r3
 8010176:	b510      	push	{r4, lr}
 8010178:	4604      	mov	r4, r0
 801017a:	d001      	beq.n	8010180 <cleanup_stdio+0x10>
 801017c:	f000 ff10 	bl	8010fa0 <_fflush_r>
 8010180:	68a1      	ldr	r1, [r4, #8]
 8010182:	4b09      	ldr	r3, [pc, #36]	@ (80101a8 <cleanup_stdio+0x38>)
 8010184:	4299      	cmp	r1, r3
 8010186:	d002      	beq.n	801018e <cleanup_stdio+0x1e>
 8010188:	4620      	mov	r0, r4
 801018a:	f000 ff09 	bl	8010fa0 <_fflush_r>
 801018e:	68e1      	ldr	r1, [r4, #12]
 8010190:	4b06      	ldr	r3, [pc, #24]	@ (80101ac <cleanup_stdio+0x3c>)
 8010192:	4299      	cmp	r1, r3
 8010194:	d004      	beq.n	80101a0 <cleanup_stdio+0x30>
 8010196:	4620      	mov	r0, r4
 8010198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801019c:	f000 bf00 	b.w	8010fa0 <_fflush_r>
 80101a0:	bd10      	pop	{r4, pc}
 80101a2:	bf00      	nop
 80101a4:	2000557c 	.word	0x2000557c
 80101a8:	200055e4 	.word	0x200055e4
 80101ac:	2000564c 	.word	0x2000564c

080101b0 <global_stdio_init.part.0>:
 80101b0:	b510      	push	{r4, lr}
 80101b2:	4b0b      	ldr	r3, [pc, #44]	@ (80101e0 <global_stdio_init.part.0+0x30>)
 80101b4:	4c0b      	ldr	r4, [pc, #44]	@ (80101e4 <global_stdio_init.part.0+0x34>)
 80101b6:	4a0c      	ldr	r2, [pc, #48]	@ (80101e8 <global_stdio_init.part.0+0x38>)
 80101b8:	601a      	str	r2, [r3, #0]
 80101ba:	4620      	mov	r0, r4
 80101bc:	2200      	movs	r2, #0
 80101be:	2104      	movs	r1, #4
 80101c0:	f7ff ff94 	bl	80100ec <std>
 80101c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80101c8:	2201      	movs	r2, #1
 80101ca:	2109      	movs	r1, #9
 80101cc:	f7ff ff8e 	bl	80100ec <std>
 80101d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80101d4:	2202      	movs	r2, #2
 80101d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101da:	2112      	movs	r1, #18
 80101dc:	f7ff bf86 	b.w	80100ec <std>
 80101e0:	200056b4 	.word	0x200056b4
 80101e4:	2000557c 	.word	0x2000557c
 80101e8:	08010159 	.word	0x08010159

080101ec <__sfp_lock_acquire>:
 80101ec:	4801      	ldr	r0, [pc, #4]	@ (80101f4 <__sfp_lock_acquire+0x8>)
 80101ee:	f000 b9d2 	b.w	8010596 <__retarget_lock_acquire_recursive>
 80101f2:	bf00      	nop
 80101f4:	200056bd 	.word	0x200056bd

080101f8 <__sfp_lock_release>:
 80101f8:	4801      	ldr	r0, [pc, #4]	@ (8010200 <__sfp_lock_release+0x8>)
 80101fa:	f000 b9cd 	b.w	8010598 <__retarget_lock_release_recursive>
 80101fe:	bf00      	nop
 8010200:	200056bd 	.word	0x200056bd

08010204 <__sinit>:
 8010204:	b510      	push	{r4, lr}
 8010206:	4604      	mov	r4, r0
 8010208:	f7ff fff0 	bl	80101ec <__sfp_lock_acquire>
 801020c:	6a23      	ldr	r3, [r4, #32]
 801020e:	b11b      	cbz	r3, 8010218 <__sinit+0x14>
 8010210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010214:	f7ff bff0 	b.w	80101f8 <__sfp_lock_release>
 8010218:	4b04      	ldr	r3, [pc, #16]	@ (801022c <__sinit+0x28>)
 801021a:	6223      	str	r3, [r4, #32]
 801021c:	4b04      	ldr	r3, [pc, #16]	@ (8010230 <__sinit+0x2c>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1f5      	bne.n	8010210 <__sinit+0xc>
 8010224:	f7ff ffc4 	bl	80101b0 <global_stdio_init.part.0>
 8010228:	e7f2      	b.n	8010210 <__sinit+0xc>
 801022a:	bf00      	nop
 801022c:	08010171 	.word	0x08010171
 8010230:	200056b4 	.word	0x200056b4

08010234 <_fwalk_sglue>:
 8010234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010238:	4607      	mov	r7, r0
 801023a:	4688      	mov	r8, r1
 801023c:	4614      	mov	r4, r2
 801023e:	2600      	movs	r6, #0
 8010240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010244:	f1b9 0901 	subs.w	r9, r9, #1
 8010248:	d505      	bpl.n	8010256 <_fwalk_sglue+0x22>
 801024a:	6824      	ldr	r4, [r4, #0]
 801024c:	2c00      	cmp	r4, #0
 801024e:	d1f7      	bne.n	8010240 <_fwalk_sglue+0xc>
 8010250:	4630      	mov	r0, r6
 8010252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010256:	89ab      	ldrh	r3, [r5, #12]
 8010258:	2b01      	cmp	r3, #1
 801025a:	d907      	bls.n	801026c <_fwalk_sglue+0x38>
 801025c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010260:	3301      	adds	r3, #1
 8010262:	d003      	beq.n	801026c <_fwalk_sglue+0x38>
 8010264:	4629      	mov	r1, r5
 8010266:	4638      	mov	r0, r7
 8010268:	47c0      	blx	r8
 801026a:	4306      	orrs	r6, r0
 801026c:	3568      	adds	r5, #104	@ 0x68
 801026e:	e7e9      	b.n	8010244 <_fwalk_sglue+0x10>

08010270 <iprintf>:
 8010270:	b40f      	push	{r0, r1, r2, r3}
 8010272:	b507      	push	{r0, r1, r2, lr}
 8010274:	4906      	ldr	r1, [pc, #24]	@ (8010290 <iprintf+0x20>)
 8010276:	ab04      	add	r3, sp, #16
 8010278:	6808      	ldr	r0, [r1, #0]
 801027a:	f853 2b04 	ldr.w	r2, [r3], #4
 801027e:	6881      	ldr	r1, [r0, #8]
 8010280:	9301      	str	r3, [sp, #4]
 8010282:	f000 fb65 	bl	8010950 <_vfiprintf_r>
 8010286:	b003      	add	sp, #12
 8010288:	f85d eb04 	ldr.w	lr, [sp], #4
 801028c:	b004      	add	sp, #16
 801028e:	4770      	bx	lr
 8010290:	2000003c 	.word	0x2000003c

08010294 <sniprintf>:
 8010294:	b40c      	push	{r2, r3}
 8010296:	b530      	push	{r4, r5, lr}
 8010298:	4b18      	ldr	r3, [pc, #96]	@ (80102fc <sniprintf+0x68>)
 801029a:	1e0c      	subs	r4, r1, #0
 801029c:	681d      	ldr	r5, [r3, #0]
 801029e:	b09d      	sub	sp, #116	@ 0x74
 80102a0:	da08      	bge.n	80102b4 <sniprintf+0x20>
 80102a2:	238b      	movs	r3, #139	@ 0x8b
 80102a4:	602b      	str	r3, [r5, #0]
 80102a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80102aa:	b01d      	add	sp, #116	@ 0x74
 80102ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102b0:	b002      	add	sp, #8
 80102b2:	4770      	bx	lr
 80102b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80102b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80102bc:	f04f 0300 	mov.w	r3, #0
 80102c0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80102c2:	bf14      	ite	ne
 80102c4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80102c8:	4623      	moveq	r3, r4
 80102ca:	9304      	str	r3, [sp, #16]
 80102cc:	9307      	str	r3, [sp, #28]
 80102ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80102d2:	9002      	str	r0, [sp, #8]
 80102d4:	9006      	str	r0, [sp, #24]
 80102d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80102da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80102dc:	ab21      	add	r3, sp, #132	@ 0x84
 80102de:	a902      	add	r1, sp, #8
 80102e0:	4628      	mov	r0, r5
 80102e2:	9301      	str	r3, [sp, #4]
 80102e4:	f000 fa0e 	bl	8010704 <_svfiprintf_r>
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	bfbc      	itt	lt
 80102ec:	238b      	movlt	r3, #139	@ 0x8b
 80102ee:	602b      	strlt	r3, [r5, #0]
 80102f0:	2c00      	cmp	r4, #0
 80102f2:	d0da      	beq.n	80102aa <sniprintf+0x16>
 80102f4:	9b02      	ldr	r3, [sp, #8]
 80102f6:	2200      	movs	r2, #0
 80102f8:	701a      	strb	r2, [r3, #0]
 80102fa:	e7d6      	b.n	80102aa <sniprintf+0x16>
 80102fc:	2000003c 	.word	0x2000003c

08010300 <__sread>:
 8010300:	b510      	push	{r4, lr}
 8010302:	460c      	mov	r4, r1
 8010304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010308:	f000 f8e6 	bl	80104d8 <_read_r>
 801030c:	2800      	cmp	r0, #0
 801030e:	bfab      	itete	ge
 8010310:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010312:	89a3      	ldrhlt	r3, [r4, #12]
 8010314:	181b      	addge	r3, r3, r0
 8010316:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801031a:	bfac      	ite	ge
 801031c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801031e:	81a3      	strhlt	r3, [r4, #12]
 8010320:	bd10      	pop	{r4, pc}

08010322 <__swrite>:
 8010322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010326:	461f      	mov	r7, r3
 8010328:	898b      	ldrh	r3, [r1, #12]
 801032a:	05db      	lsls	r3, r3, #23
 801032c:	4605      	mov	r5, r0
 801032e:	460c      	mov	r4, r1
 8010330:	4616      	mov	r6, r2
 8010332:	d505      	bpl.n	8010340 <__swrite+0x1e>
 8010334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010338:	2302      	movs	r3, #2
 801033a:	2200      	movs	r2, #0
 801033c:	f000 f8ba 	bl	80104b4 <_lseek_r>
 8010340:	89a3      	ldrh	r3, [r4, #12]
 8010342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010346:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801034a:	81a3      	strh	r3, [r4, #12]
 801034c:	4632      	mov	r2, r6
 801034e:	463b      	mov	r3, r7
 8010350:	4628      	mov	r0, r5
 8010352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010356:	f000 b8e1 	b.w	801051c <_write_r>

0801035a <__sseek>:
 801035a:	b510      	push	{r4, lr}
 801035c:	460c      	mov	r4, r1
 801035e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010362:	f000 f8a7 	bl	80104b4 <_lseek_r>
 8010366:	1c43      	adds	r3, r0, #1
 8010368:	89a3      	ldrh	r3, [r4, #12]
 801036a:	bf15      	itete	ne
 801036c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801036e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010372:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010376:	81a3      	strheq	r3, [r4, #12]
 8010378:	bf18      	it	ne
 801037a:	81a3      	strhne	r3, [r4, #12]
 801037c:	bd10      	pop	{r4, pc}

0801037e <__sclose>:
 801037e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010382:	f000 b829 	b.w	80103d8 <_close_r>

08010386 <memset>:
 8010386:	4402      	add	r2, r0
 8010388:	4603      	mov	r3, r0
 801038a:	4293      	cmp	r3, r2
 801038c:	d100      	bne.n	8010390 <memset+0xa>
 801038e:	4770      	bx	lr
 8010390:	f803 1b01 	strb.w	r1, [r3], #1
 8010394:	e7f9      	b.n	801038a <memset+0x4>

08010396 <strchr>:
 8010396:	b2c9      	uxtb	r1, r1
 8010398:	4603      	mov	r3, r0
 801039a:	4618      	mov	r0, r3
 801039c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103a0:	b112      	cbz	r2, 80103a8 <strchr+0x12>
 80103a2:	428a      	cmp	r2, r1
 80103a4:	d1f9      	bne.n	801039a <strchr+0x4>
 80103a6:	4770      	bx	lr
 80103a8:	2900      	cmp	r1, #0
 80103aa:	bf18      	it	ne
 80103ac:	2000      	movne	r0, #0
 80103ae:	4770      	bx	lr

080103b0 <strlcpy>:
 80103b0:	b510      	push	{r4, lr}
 80103b2:	460b      	mov	r3, r1
 80103b4:	b962      	cbnz	r2, 80103d0 <strlcpy+0x20>
 80103b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103ba:	2a00      	cmp	r2, #0
 80103bc:	d1fb      	bne.n	80103b6 <strlcpy+0x6>
 80103be:	e004      	b.n	80103ca <strlcpy+0x1a>
 80103c0:	f813 4b01 	ldrb.w	r4, [r3], #1
 80103c4:	f800 4b01 	strb.w	r4, [r0], #1
 80103c8:	b914      	cbnz	r4, 80103d0 <strlcpy+0x20>
 80103ca:	1a58      	subs	r0, r3, r1
 80103cc:	3801      	subs	r0, #1
 80103ce:	bd10      	pop	{r4, pc}
 80103d0:	3a01      	subs	r2, #1
 80103d2:	d1f5      	bne.n	80103c0 <strlcpy+0x10>
 80103d4:	7002      	strb	r2, [r0, #0]
 80103d6:	e7ee      	b.n	80103b6 <strlcpy+0x6>

080103d8 <_close_r>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4d06      	ldr	r5, [pc, #24]	@ (80103f4 <_close_r+0x1c>)
 80103dc:	2300      	movs	r3, #0
 80103de:	4604      	mov	r4, r0
 80103e0:	4608      	mov	r0, r1
 80103e2:	602b      	str	r3, [r5, #0]
 80103e4:	f7f2 fd21 	bl	8002e2a <_close>
 80103e8:	1c43      	adds	r3, r0, #1
 80103ea:	d102      	bne.n	80103f2 <_close_r+0x1a>
 80103ec:	682b      	ldr	r3, [r5, #0]
 80103ee:	b103      	cbz	r3, 80103f2 <_close_r+0x1a>
 80103f0:	6023      	str	r3, [r4, #0]
 80103f2:	bd38      	pop	{r3, r4, r5, pc}
 80103f4:	200056b8 	.word	0x200056b8

080103f8 <_reclaim_reent>:
 80103f8:	4b2d      	ldr	r3, [pc, #180]	@ (80104b0 <_reclaim_reent+0xb8>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4283      	cmp	r3, r0
 80103fe:	b570      	push	{r4, r5, r6, lr}
 8010400:	4604      	mov	r4, r0
 8010402:	d053      	beq.n	80104ac <_reclaim_reent+0xb4>
 8010404:	69c3      	ldr	r3, [r0, #28]
 8010406:	b31b      	cbz	r3, 8010450 <_reclaim_reent+0x58>
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	b163      	cbz	r3, 8010426 <_reclaim_reent+0x2e>
 801040c:	2500      	movs	r5, #0
 801040e:	69e3      	ldr	r3, [r4, #28]
 8010410:	68db      	ldr	r3, [r3, #12]
 8010412:	5959      	ldr	r1, [r3, r5]
 8010414:	b9b1      	cbnz	r1, 8010444 <_reclaim_reent+0x4c>
 8010416:	3504      	adds	r5, #4
 8010418:	2d80      	cmp	r5, #128	@ 0x80
 801041a:	d1f8      	bne.n	801040e <_reclaim_reent+0x16>
 801041c:	69e3      	ldr	r3, [r4, #28]
 801041e:	4620      	mov	r0, r4
 8010420:	68d9      	ldr	r1, [r3, #12]
 8010422:	f000 f8c9 	bl	80105b8 <_free_r>
 8010426:	69e3      	ldr	r3, [r4, #28]
 8010428:	6819      	ldr	r1, [r3, #0]
 801042a:	b111      	cbz	r1, 8010432 <_reclaim_reent+0x3a>
 801042c:	4620      	mov	r0, r4
 801042e:	f000 f8c3 	bl	80105b8 <_free_r>
 8010432:	69e3      	ldr	r3, [r4, #28]
 8010434:	689d      	ldr	r5, [r3, #8]
 8010436:	b15d      	cbz	r5, 8010450 <_reclaim_reent+0x58>
 8010438:	4629      	mov	r1, r5
 801043a:	4620      	mov	r0, r4
 801043c:	682d      	ldr	r5, [r5, #0]
 801043e:	f000 f8bb 	bl	80105b8 <_free_r>
 8010442:	e7f8      	b.n	8010436 <_reclaim_reent+0x3e>
 8010444:	680e      	ldr	r6, [r1, #0]
 8010446:	4620      	mov	r0, r4
 8010448:	f000 f8b6 	bl	80105b8 <_free_r>
 801044c:	4631      	mov	r1, r6
 801044e:	e7e1      	b.n	8010414 <_reclaim_reent+0x1c>
 8010450:	6961      	ldr	r1, [r4, #20]
 8010452:	b111      	cbz	r1, 801045a <_reclaim_reent+0x62>
 8010454:	4620      	mov	r0, r4
 8010456:	f000 f8af 	bl	80105b8 <_free_r>
 801045a:	69e1      	ldr	r1, [r4, #28]
 801045c:	b111      	cbz	r1, 8010464 <_reclaim_reent+0x6c>
 801045e:	4620      	mov	r0, r4
 8010460:	f000 f8aa 	bl	80105b8 <_free_r>
 8010464:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010466:	b111      	cbz	r1, 801046e <_reclaim_reent+0x76>
 8010468:	4620      	mov	r0, r4
 801046a:	f000 f8a5 	bl	80105b8 <_free_r>
 801046e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010470:	b111      	cbz	r1, 8010478 <_reclaim_reent+0x80>
 8010472:	4620      	mov	r0, r4
 8010474:	f000 f8a0 	bl	80105b8 <_free_r>
 8010478:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801047a:	b111      	cbz	r1, 8010482 <_reclaim_reent+0x8a>
 801047c:	4620      	mov	r0, r4
 801047e:	f000 f89b 	bl	80105b8 <_free_r>
 8010482:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010484:	b111      	cbz	r1, 801048c <_reclaim_reent+0x94>
 8010486:	4620      	mov	r0, r4
 8010488:	f000 f896 	bl	80105b8 <_free_r>
 801048c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801048e:	b111      	cbz	r1, 8010496 <_reclaim_reent+0x9e>
 8010490:	4620      	mov	r0, r4
 8010492:	f000 f891 	bl	80105b8 <_free_r>
 8010496:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010498:	b111      	cbz	r1, 80104a0 <_reclaim_reent+0xa8>
 801049a:	4620      	mov	r0, r4
 801049c:	f000 f88c 	bl	80105b8 <_free_r>
 80104a0:	6a23      	ldr	r3, [r4, #32]
 80104a2:	b11b      	cbz	r3, 80104ac <_reclaim_reent+0xb4>
 80104a4:	4620      	mov	r0, r4
 80104a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104aa:	4718      	bx	r3
 80104ac:	bd70      	pop	{r4, r5, r6, pc}
 80104ae:	bf00      	nop
 80104b0:	2000003c 	.word	0x2000003c

080104b4 <_lseek_r>:
 80104b4:	b538      	push	{r3, r4, r5, lr}
 80104b6:	4d07      	ldr	r5, [pc, #28]	@ (80104d4 <_lseek_r+0x20>)
 80104b8:	4604      	mov	r4, r0
 80104ba:	4608      	mov	r0, r1
 80104bc:	4611      	mov	r1, r2
 80104be:	2200      	movs	r2, #0
 80104c0:	602a      	str	r2, [r5, #0]
 80104c2:	461a      	mov	r2, r3
 80104c4:	f7f2 fcd8 	bl	8002e78 <_lseek>
 80104c8:	1c43      	adds	r3, r0, #1
 80104ca:	d102      	bne.n	80104d2 <_lseek_r+0x1e>
 80104cc:	682b      	ldr	r3, [r5, #0]
 80104ce:	b103      	cbz	r3, 80104d2 <_lseek_r+0x1e>
 80104d0:	6023      	str	r3, [r4, #0]
 80104d2:	bd38      	pop	{r3, r4, r5, pc}
 80104d4:	200056b8 	.word	0x200056b8

080104d8 <_read_r>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4d07      	ldr	r5, [pc, #28]	@ (80104f8 <_read_r+0x20>)
 80104dc:	4604      	mov	r4, r0
 80104de:	4608      	mov	r0, r1
 80104e0:	4611      	mov	r1, r2
 80104e2:	2200      	movs	r2, #0
 80104e4:	602a      	str	r2, [r5, #0]
 80104e6:	461a      	mov	r2, r3
 80104e8:	f7f2 fc66 	bl	8002db8 <_read>
 80104ec:	1c43      	adds	r3, r0, #1
 80104ee:	d102      	bne.n	80104f6 <_read_r+0x1e>
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	b103      	cbz	r3, 80104f6 <_read_r+0x1e>
 80104f4:	6023      	str	r3, [r4, #0]
 80104f6:	bd38      	pop	{r3, r4, r5, pc}
 80104f8:	200056b8 	.word	0x200056b8

080104fc <_sbrk_r>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	4d06      	ldr	r5, [pc, #24]	@ (8010518 <_sbrk_r+0x1c>)
 8010500:	2300      	movs	r3, #0
 8010502:	4604      	mov	r4, r0
 8010504:	4608      	mov	r0, r1
 8010506:	602b      	str	r3, [r5, #0]
 8010508:	f7f2 fcc4 	bl	8002e94 <_sbrk>
 801050c:	1c43      	adds	r3, r0, #1
 801050e:	d102      	bne.n	8010516 <_sbrk_r+0x1a>
 8010510:	682b      	ldr	r3, [r5, #0]
 8010512:	b103      	cbz	r3, 8010516 <_sbrk_r+0x1a>
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	200056b8 	.word	0x200056b8

0801051c <_write_r>:
 801051c:	b538      	push	{r3, r4, r5, lr}
 801051e:	4d07      	ldr	r5, [pc, #28]	@ (801053c <_write_r+0x20>)
 8010520:	4604      	mov	r4, r0
 8010522:	4608      	mov	r0, r1
 8010524:	4611      	mov	r1, r2
 8010526:	2200      	movs	r2, #0
 8010528:	602a      	str	r2, [r5, #0]
 801052a:	461a      	mov	r2, r3
 801052c:	f7f2 fc61 	bl	8002df2 <_write>
 8010530:	1c43      	adds	r3, r0, #1
 8010532:	d102      	bne.n	801053a <_write_r+0x1e>
 8010534:	682b      	ldr	r3, [r5, #0]
 8010536:	b103      	cbz	r3, 801053a <_write_r+0x1e>
 8010538:	6023      	str	r3, [r4, #0]
 801053a:	bd38      	pop	{r3, r4, r5, pc}
 801053c:	200056b8 	.word	0x200056b8

08010540 <__errno>:
 8010540:	4b01      	ldr	r3, [pc, #4]	@ (8010548 <__errno+0x8>)
 8010542:	6818      	ldr	r0, [r3, #0]
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	2000003c 	.word	0x2000003c

0801054c <__libc_init_array>:
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	4d0d      	ldr	r5, [pc, #52]	@ (8010584 <__libc_init_array+0x38>)
 8010550:	4c0d      	ldr	r4, [pc, #52]	@ (8010588 <__libc_init_array+0x3c>)
 8010552:	1b64      	subs	r4, r4, r5
 8010554:	10a4      	asrs	r4, r4, #2
 8010556:	2600      	movs	r6, #0
 8010558:	42a6      	cmp	r6, r4
 801055a:	d109      	bne.n	8010570 <__libc_init_array+0x24>
 801055c:	4d0b      	ldr	r5, [pc, #44]	@ (801058c <__libc_init_array+0x40>)
 801055e:	4c0c      	ldr	r4, [pc, #48]	@ (8010590 <__libc_init_array+0x44>)
 8010560:	f000 feae 	bl	80112c0 <_init>
 8010564:	1b64      	subs	r4, r4, r5
 8010566:	10a4      	asrs	r4, r4, #2
 8010568:	2600      	movs	r6, #0
 801056a:	42a6      	cmp	r6, r4
 801056c:	d105      	bne.n	801057a <__libc_init_array+0x2e>
 801056e:	bd70      	pop	{r4, r5, r6, pc}
 8010570:	f855 3b04 	ldr.w	r3, [r5], #4
 8010574:	4798      	blx	r3
 8010576:	3601      	adds	r6, #1
 8010578:	e7ee      	b.n	8010558 <__libc_init_array+0xc>
 801057a:	f855 3b04 	ldr.w	r3, [r5], #4
 801057e:	4798      	blx	r3
 8010580:	3601      	adds	r6, #1
 8010582:	e7f2      	b.n	801056a <__libc_init_array+0x1e>
 8010584:	0801170c 	.word	0x0801170c
 8010588:	0801170c 	.word	0x0801170c
 801058c:	0801170c 	.word	0x0801170c
 8010590:	08011714 	.word	0x08011714

08010594 <__retarget_lock_init_recursive>:
 8010594:	4770      	bx	lr

08010596 <__retarget_lock_acquire_recursive>:
 8010596:	4770      	bx	lr

08010598 <__retarget_lock_release_recursive>:
 8010598:	4770      	bx	lr

0801059a <memcpy>:
 801059a:	440a      	add	r2, r1
 801059c:	4291      	cmp	r1, r2
 801059e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80105a2:	d100      	bne.n	80105a6 <memcpy+0xc>
 80105a4:	4770      	bx	lr
 80105a6:	b510      	push	{r4, lr}
 80105a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105b0:	4291      	cmp	r1, r2
 80105b2:	d1f9      	bne.n	80105a8 <memcpy+0xe>
 80105b4:	bd10      	pop	{r4, pc}
	...

080105b8 <_free_r>:
 80105b8:	b538      	push	{r3, r4, r5, lr}
 80105ba:	4605      	mov	r5, r0
 80105bc:	2900      	cmp	r1, #0
 80105be:	d041      	beq.n	8010644 <_free_r+0x8c>
 80105c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105c4:	1f0c      	subs	r4, r1, #4
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	bfb8      	it	lt
 80105ca:	18e4      	addlt	r4, r4, r3
 80105cc:	f7ff fcfe 	bl	800ffcc <__malloc_lock>
 80105d0:	4a1d      	ldr	r2, [pc, #116]	@ (8010648 <_free_r+0x90>)
 80105d2:	6813      	ldr	r3, [r2, #0]
 80105d4:	b933      	cbnz	r3, 80105e4 <_free_r+0x2c>
 80105d6:	6063      	str	r3, [r4, #4]
 80105d8:	6014      	str	r4, [r2, #0]
 80105da:	4628      	mov	r0, r5
 80105dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105e0:	f7ff bcfa 	b.w	800ffd8 <__malloc_unlock>
 80105e4:	42a3      	cmp	r3, r4
 80105e6:	d908      	bls.n	80105fa <_free_r+0x42>
 80105e8:	6820      	ldr	r0, [r4, #0]
 80105ea:	1821      	adds	r1, r4, r0
 80105ec:	428b      	cmp	r3, r1
 80105ee:	bf01      	itttt	eq
 80105f0:	6819      	ldreq	r1, [r3, #0]
 80105f2:	685b      	ldreq	r3, [r3, #4]
 80105f4:	1809      	addeq	r1, r1, r0
 80105f6:	6021      	streq	r1, [r4, #0]
 80105f8:	e7ed      	b.n	80105d6 <_free_r+0x1e>
 80105fa:	461a      	mov	r2, r3
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	b10b      	cbz	r3, 8010604 <_free_r+0x4c>
 8010600:	42a3      	cmp	r3, r4
 8010602:	d9fa      	bls.n	80105fa <_free_r+0x42>
 8010604:	6811      	ldr	r1, [r2, #0]
 8010606:	1850      	adds	r0, r2, r1
 8010608:	42a0      	cmp	r0, r4
 801060a:	d10b      	bne.n	8010624 <_free_r+0x6c>
 801060c:	6820      	ldr	r0, [r4, #0]
 801060e:	4401      	add	r1, r0
 8010610:	1850      	adds	r0, r2, r1
 8010612:	4283      	cmp	r3, r0
 8010614:	6011      	str	r1, [r2, #0]
 8010616:	d1e0      	bne.n	80105da <_free_r+0x22>
 8010618:	6818      	ldr	r0, [r3, #0]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	6053      	str	r3, [r2, #4]
 801061e:	4408      	add	r0, r1
 8010620:	6010      	str	r0, [r2, #0]
 8010622:	e7da      	b.n	80105da <_free_r+0x22>
 8010624:	d902      	bls.n	801062c <_free_r+0x74>
 8010626:	230c      	movs	r3, #12
 8010628:	602b      	str	r3, [r5, #0]
 801062a:	e7d6      	b.n	80105da <_free_r+0x22>
 801062c:	6820      	ldr	r0, [r4, #0]
 801062e:	1821      	adds	r1, r4, r0
 8010630:	428b      	cmp	r3, r1
 8010632:	bf04      	itt	eq
 8010634:	6819      	ldreq	r1, [r3, #0]
 8010636:	685b      	ldreq	r3, [r3, #4]
 8010638:	6063      	str	r3, [r4, #4]
 801063a:	bf04      	itt	eq
 801063c:	1809      	addeq	r1, r1, r0
 801063e:	6021      	streq	r1, [r4, #0]
 8010640:	6054      	str	r4, [r2, #4]
 8010642:	e7ca      	b.n	80105da <_free_r+0x22>
 8010644:	bd38      	pop	{r3, r4, r5, pc}
 8010646:	bf00      	nop
 8010648:	20005578 	.word	0x20005578

0801064c <__ssputs_r>:
 801064c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010650:	688e      	ldr	r6, [r1, #8]
 8010652:	461f      	mov	r7, r3
 8010654:	42be      	cmp	r6, r7
 8010656:	680b      	ldr	r3, [r1, #0]
 8010658:	4682      	mov	sl, r0
 801065a:	460c      	mov	r4, r1
 801065c:	4690      	mov	r8, r2
 801065e:	d82d      	bhi.n	80106bc <__ssputs_r+0x70>
 8010660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010664:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010668:	d026      	beq.n	80106b8 <__ssputs_r+0x6c>
 801066a:	6965      	ldr	r5, [r4, #20]
 801066c:	6909      	ldr	r1, [r1, #16]
 801066e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010672:	eba3 0901 	sub.w	r9, r3, r1
 8010676:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801067a:	1c7b      	adds	r3, r7, #1
 801067c:	444b      	add	r3, r9
 801067e:	106d      	asrs	r5, r5, #1
 8010680:	429d      	cmp	r5, r3
 8010682:	bf38      	it	cc
 8010684:	461d      	movcc	r5, r3
 8010686:	0553      	lsls	r3, r2, #21
 8010688:	d527      	bpl.n	80106da <__ssputs_r+0x8e>
 801068a:	4629      	mov	r1, r5
 801068c:	f7ff fc1e 	bl	800fecc <_malloc_r>
 8010690:	4606      	mov	r6, r0
 8010692:	b360      	cbz	r0, 80106ee <__ssputs_r+0xa2>
 8010694:	6921      	ldr	r1, [r4, #16]
 8010696:	464a      	mov	r2, r9
 8010698:	f7ff ff7f 	bl	801059a <memcpy>
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80106a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106a6:	81a3      	strh	r3, [r4, #12]
 80106a8:	6126      	str	r6, [r4, #16]
 80106aa:	6165      	str	r5, [r4, #20]
 80106ac:	444e      	add	r6, r9
 80106ae:	eba5 0509 	sub.w	r5, r5, r9
 80106b2:	6026      	str	r6, [r4, #0]
 80106b4:	60a5      	str	r5, [r4, #8]
 80106b6:	463e      	mov	r6, r7
 80106b8:	42be      	cmp	r6, r7
 80106ba:	d900      	bls.n	80106be <__ssputs_r+0x72>
 80106bc:	463e      	mov	r6, r7
 80106be:	6820      	ldr	r0, [r4, #0]
 80106c0:	4632      	mov	r2, r6
 80106c2:	4641      	mov	r1, r8
 80106c4:	f000 fd28 	bl	8011118 <memmove>
 80106c8:	68a3      	ldr	r3, [r4, #8]
 80106ca:	1b9b      	subs	r3, r3, r6
 80106cc:	60a3      	str	r3, [r4, #8]
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	4433      	add	r3, r6
 80106d2:	6023      	str	r3, [r4, #0]
 80106d4:	2000      	movs	r0, #0
 80106d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106da:	462a      	mov	r2, r5
 80106dc:	f000 fd36 	bl	801114c <_realloc_r>
 80106e0:	4606      	mov	r6, r0
 80106e2:	2800      	cmp	r0, #0
 80106e4:	d1e0      	bne.n	80106a8 <__ssputs_r+0x5c>
 80106e6:	6921      	ldr	r1, [r4, #16]
 80106e8:	4650      	mov	r0, sl
 80106ea:	f7ff ff65 	bl	80105b8 <_free_r>
 80106ee:	230c      	movs	r3, #12
 80106f0:	f8ca 3000 	str.w	r3, [sl]
 80106f4:	89a3      	ldrh	r3, [r4, #12]
 80106f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106fa:	81a3      	strh	r3, [r4, #12]
 80106fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010700:	e7e9      	b.n	80106d6 <__ssputs_r+0x8a>
	...

08010704 <_svfiprintf_r>:
 8010704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010708:	4698      	mov	r8, r3
 801070a:	898b      	ldrh	r3, [r1, #12]
 801070c:	061b      	lsls	r3, r3, #24
 801070e:	b09d      	sub	sp, #116	@ 0x74
 8010710:	4607      	mov	r7, r0
 8010712:	460d      	mov	r5, r1
 8010714:	4614      	mov	r4, r2
 8010716:	d510      	bpl.n	801073a <_svfiprintf_r+0x36>
 8010718:	690b      	ldr	r3, [r1, #16]
 801071a:	b973      	cbnz	r3, 801073a <_svfiprintf_r+0x36>
 801071c:	2140      	movs	r1, #64	@ 0x40
 801071e:	f7ff fbd5 	bl	800fecc <_malloc_r>
 8010722:	6028      	str	r0, [r5, #0]
 8010724:	6128      	str	r0, [r5, #16]
 8010726:	b930      	cbnz	r0, 8010736 <_svfiprintf_r+0x32>
 8010728:	230c      	movs	r3, #12
 801072a:	603b      	str	r3, [r7, #0]
 801072c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010730:	b01d      	add	sp, #116	@ 0x74
 8010732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010736:	2340      	movs	r3, #64	@ 0x40
 8010738:	616b      	str	r3, [r5, #20]
 801073a:	2300      	movs	r3, #0
 801073c:	9309      	str	r3, [sp, #36]	@ 0x24
 801073e:	2320      	movs	r3, #32
 8010740:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010744:	f8cd 800c 	str.w	r8, [sp, #12]
 8010748:	2330      	movs	r3, #48	@ 0x30
 801074a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80108e8 <_svfiprintf_r+0x1e4>
 801074e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010752:	f04f 0901 	mov.w	r9, #1
 8010756:	4623      	mov	r3, r4
 8010758:	469a      	mov	sl, r3
 801075a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801075e:	b10a      	cbz	r2, 8010764 <_svfiprintf_r+0x60>
 8010760:	2a25      	cmp	r2, #37	@ 0x25
 8010762:	d1f9      	bne.n	8010758 <_svfiprintf_r+0x54>
 8010764:	ebba 0b04 	subs.w	fp, sl, r4
 8010768:	d00b      	beq.n	8010782 <_svfiprintf_r+0x7e>
 801076a:	465b      	mov	r3, fp
 801076c:	4622      	mov	r2, r4
 801076e:	4629      	mov	r1, r5
 8010770:	4638      	mov	r0, r7
 8010772:	f7ff ff6b 	bl	801064c <__ssputs_r>
 8010776:	3001      	adds	r0, #1
 8010778:	f000 80a7 	beq.w	80108ca <_svfiprintf_r+0x1c6>
 801077c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801077e:	445a      	add	r2, fp
 8010780:	9209      	str	r2, [sp, #36]	@ 0x24
 8010782:	f89a 3000 	ldrb.w	r3, [sl]
 8010786:	2b00      	cmp	r3, #0
 8010788:	f000 809f 	beq.w	80108ca <_svfiprintf_r+0x1c6>
 801078c:	2300      	movs	r3, #0
 801078e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010796:	f10a 0a01 	add.w	sl, sl, #1
 801079a:	9304      	str	r3, [sp, #16]
 801079c:	9307      	str	r3, [sp, #28]
 801079e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80107a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80107a4:	4654      	mov	r4, sl
 80107a6:	2205      	movs	r2, #5
 80107a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ac:	484e      	ldr	r0, [pc, #312]	@ (80108e8 <_svfiprintf_r+0x1e4>)
 80107ae:	f7ef fd17 	bl	80001e0 <memchr>
 80107b2:	9a04      	ldr	r2, [sp, #16]
 80107b4:	b9d8      	cbnz	r0, 80107ee <_svfiprintf_r+0xea>
 80107b6:	06d0      	lsls	r0, r2, #27
 80107b8:	bf44      	itt	mi
 80107ba:	2320      	movmi	r3, #32
 80107bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107c0:	0711      	lsls	r1, r2, #28
 80107c2:	bf44      	itt	mi
 80107c4:	232b      	movmi	r3, #43	@ 0x2b
 80107c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107ca:	f89a 3000 	ldrb.w	r3, [sl]
 80107ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80107d0:	d015      	beq.n	80107fe <_svfiprintf_r+0xfa>
 80107d2:	9a07      	ldr	r2, [sp, #28]
 80107d4:	4654      	mov	r4, sl
 80107d6:	2000      	movs	r0, #0
 80107d8:	f04f 0c0a 	mov.w	ip, #10
 80107dc:	4621      	mov	r1, r4
 80107de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107e2:	3b30      	subs	r3, #48	@ 0x30
 80107e4:	2b09      	cmp	r3, #9
 80107e6:	d94b      	bls.n	8010880 <_svfiprintf_r+0x17c>
 80107e8:	b1b0      	cbz	r0, 8010818 <_svfiprintf_r+0x114>
 80107ea:	9207      	str	r2, [sp, #28]
 80107ec:	e014      	b.n	8010818 <_svfiprintf_r+0x114>
 80107ee:	eba0 0308 	sub.w	r3, r0, r8
 80107f2:	fa09 f303 	lsl.w	r3, r9, r3
 80107f6:	4313      	orrs	r3, r2
 80107f8:	9304      	str	r3, [sp, #16]
 80107fa:	46a2      	mov	sl, r4
 80107fc:	e7d2      	b.n	80107a4 <_svfiprintf_r+0xa0>
 80107fe:	9b03      	ldr	r3, [sp, #12]
 8010800:	1d19      	adds	r1, r3, #4
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	9103      	str	r1, [sp, #12]
 8010806:	2b00      	cmp	r3, #0
 8010808:	bfbb      	ittet	lt
 801080a:	425b      	neglt	r3, r3
 801080c:	f042 0202 	orrlt.w	r2, r2, #2
 8010810:	9307      	strge	r3, [sp, #28]
 8010812:	9307      	strlt	r3, [sp, #28]
 8010814:	bfb8      	it	lt
 8010816:	9204      	strlt	r2, [sp, #16]
 8010818:	7823      	ldrb	r3, [r4, #0]
 801081a:	2b2e      	cmp	r3, #46	@ 0x2e
 801081c:	d10a      	bne.n	8010834 <_svfiprintf_r+0x130>
 801081e:	7863      	ldrb	r3, [r4, #1]
 8010820:	2b2a      	cmp	r3, #42	@ 0x2a
 8010822:	d132      	bne.n	801088a <_svfiprintf_r+0x186>
 8010824:	9b03      	ldr	r3, [sp, #12]
 8010826:	1d1a      	adds	r2, r3, #4
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	9203      	str	r2, [sp, #12]
 801082c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010830:	3402      	adds	r4, #2
 8010832:	9305      	str	r3, [sp, #20]
 8010834:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80108f8 <_svfiprintf_r+0x1f4>
 8010838:	7821      	ldrb	r1, [r4, #0]
 801083a:	2203      	movs	r2, #3
 801083c:	4650      	mov	r0, sl
 801083e:	f7ef fccf 	bl	80001e0 <memchr>
 8010842:	b138      	cbz	r0, 8010854 <_svfiprintf_r+0x150>
 8010844:	9b04      	ldr	r3, [sp, #16]
 8010846:	eba0 000a 	sub.w	r0, r0, sl
 801084a:	2240      	movs	r2, #64	@ 0x40
 801084c:	4082      	lsls	r2, r0
 801084e:	4313      	orrs	r3, r2
 8010850:	3401      	adds	r4, #1
 8010852:	9304      	str	r3, [sp, #16]
 8010854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010858:	4824      	ldr	r0, [pc, #144]	@ (80108ec <_svfiprintf_r+0x1e8>)
 801085a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801085e:	2206      	movs	r2, #6
 8010860:	f7ef fcbe 	bl	80001e0 <memchr>
 8010864:	2800      	cmp	r0, #0
 8010866:	d036      	beq.n	80108d6 <_svfiprintf_r+0x1d2>
 8010868:	4b21      	ldr	r3, [pc, #132]	@ (80108f0 <_svfiprintf_r+0x1ec>)
 801086a:	bb1b      	cbnz	r3, 80108b4 <_svfiprintf_r+0x1b0>
 801086c:	9b03      	ldr	r3, [sp, #12]
 801086e:	3307      	adds	r3, #7
 8010870:	f023 0307 	bic.w	r3, r3, #7
 8010874:	3308      	adds	r3, #8
 8010876:	9303      	str	r3, [sp, #12]
 8010878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801087a:	4433      	add	r3, r6
 801087c:	9309      	str	r3, [sp, #36]	@ 0x24
 801087e:	e76a      	b.n	8010756 <_svfiprintf_r+0x52>
 8010880:	fb0c 3202 	mla	r2, ip, r2, r3
 8010884:	460c      	mov	r4, r1
 8010886:	2001      	movs	r0, #1
 8010888:	e7a8      	b.n	80107dc <_svfiprintf_r+0xd8>
 801088a:	2300      	movs	r3, #0
 801088c:	3401      	adds	r4, #1
 801088e:	9305      	str	r3, [sp, #20]
 8010890:	4619      	mov	r1, r3
 8010892:	f04f 0c0a 	mov.w	ip, #10
 8010896:	4620      	mov	r0, r4
 8010898:	f810 2b01 	ldrb.w	r2, [r0], #1
 801089c:	3a30      	subs	r2, #48	@ 0x30
 801089e:	2a09      	cmp	r2, #9
 80108a0:	d903      	bls.n	80108aa <_svfiprintf_r+0x1a6>
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d0c6      	beq.n	8010834 <_svfiprintf_r+0x130>
 80108a6:	9105      	str	r1, [sp, #20]
 80108a8:	e7c4      	b.n	8010834 <_svfiprintf_r+0x130>
 80108aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80108ae:	4604      	mov	r4, r0
 80108b0:	2301      	movs	r3, #1
 80108b2:	e7f0      	b.n	8010896 <_svfiprintf_r+0x192>
 80108b4:	ab03      	add	r3, sp, #12
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	462a      	mov	r2, r5
 80108ba:	4b0e      	ldr	r3, [pc, #56]	@ (80108f4 <_svfiprintf_r+0x1f0>)
 80108bc:	a904      	add	r1, sp, #16
 80108be:	4638      	mov	r0, r7
 80108c0:	f3af 8000 	nop.w
 80108c4:	1c42      	adds	r2, r0, #1
 80108c6:	4606      	mov	r6, r0
 80108c8:	d1d6      	bne.n	8010878 <_svfiprintf_r+0x174>
 80108ca:	89ab      	ldrh	r3, [r5, #12]
 80108cc:	065b      	lsls	r3, r3, #25
 80108ce:	f53f af2d 	bmi.w	801072c <_svfiprintf_r+0x28>
 80108d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108d4:	e72c      	b.n	8010730 <_svfiprintf_r+0x2c>
 80108d6:	ab03      	add	r3, sp, #12
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	462a      	mov	r2, r5
 80108dc:	4b05      	ldr	r3, [pc, #20]	@ (80108f4 <_svfiprintf_r+0x1f0>)
 80108de:	a904      	add	r1, sp, #16
 80108e0:	4638      	mov	r0, r7
 80108e2:	f000 f9bb 	bl	8010c5c <_printf_i>
 80108e6:	e7ed      	b.n	80108c4 <_svfiprintf_r+0x1c0>
 80108e8:	080116d1 	.word	0x080116d1
 80108ec:	080116db 	.word	0x080116db
 80108f0:	00000000 	.word	0x00000000
 80108f4:	0801064d 	.word	0x0801064d
 80108f8:	080116d7 	.word	0x080116d7

080108fc <__sfputc_r>:
 80108fc:	6893      	ldr	r3, [r2, #8]
 80108fe:	3b01      	subs	r3, #1
 8010900:	2b00      	cmp	r3, #0
 8010902:	b410      	push	{r4}
 8010904:	6093      	str	r3, [r2, #8]
 8010906:	da08      	bge.n	801091a <__sfputc_r+0x1e>
 8010908:	6994      	ldr	r4, [r2, #24]
 801090a:	42a3      	cmp	r3, r4
 801090c:	db01      	blt.n	8010912 <__sfputc_r+0x16>
 801090e:	290a      	cmp	r1, #10
 8010910:	d103      	bne.n	801091a <__sfputc_r+0x1e>
 8010912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010916:	f000 bb6b 	b.w	8010ff0 <__swbuf_r>
 801091a:	6813      	ldr	r3, [r2, #0]
 801091c:	1c58      	adds	r0, r3, #1
 801091e:	6010      	str	r0, [r2, #0]
 8010920:	7019      	strb	r1, [r3, #0]
 8010922:	4608      	mov	r0, r1
 8010924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010928:	4770      	bx	lr

0801092a <__sfputs_r>:
 801092a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801092c:	4606      	mov	r6, r0
 801092e:	460f      	mov	r7, r1
 8010930:	4614      	mov	r4, r2
 8010932:	18d5      	adds	r5, r2, r3
 8010934:	42ac      	cmp	r4, r5
 8010936:	d101      	bne.n	801093c <__sfputs_r+0x12>
 8010938:	2000      	movs	r0, #0
 801093a:	e007      	b.n	801094c <__sfputs_r+0x22>
 801093c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010940:	463a      	mov	r2, r7
 8010942:	4630      	mov	r0, r6
 8010944:	f7ff ffda 	bl	80108fc <__sfputc_r>
 8010948:	1c43      	adds	r3, r0, #1
 801094a:	d1f3      	bne.n	8010934 <__sfputs_r+0xa>
 801094c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010950 <_vfiprintf_r>:
 8010950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010954:	460d      	mov	r5, r1
 8010956:	b09d      	sub	sp, #116	@ 0x74
 8010958:	4614      	mov	r4, r2
 801095a:	4698      	mov	r8, r3
 801095c:	4606      	mov	r6, r0
 801095e:	b118      	cbz	r0, 8010968 <_vfiprintf_r+0x18>
 8010960:	6a03      	ldr	r3, [r0, #32]
 8010962:	b90b      	cbnz	r3, 8010968 <_vfiprintf_r+0x18>
 8010964:	f7ff fc4e 	bl	8010204 <__sinit>
 8010968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801096a:	07d9      	lsls	r1, r3, #31
 801096c:	d405      	bmi.n	801097a <_vfiprintf_r+0x2a>
 801096e:	89ab      	ldrh	r3, [r5, #12]
 8010970:	059a      	lsls	r2, r3, #22
 8010972:	d402      	bmi.n	801097a <_vfiprintf_r+0x2a>
 8010974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010976:	f7ff fe0e 	bl	8010596 <__retarget_lock_acquire_recursive>
 801097a:	89ab      	ldrh	r3, [r5, #12]
 801097c:	071b      	lsls	r3, r3, #28
 801097e:	d501      	bpl.n	8010984 <_vfiprintf_r+0x34>
 8010980:	692b      	ldr	r3, [r5, #16]
 8010982:	b99b      	cbnz	r3, 80109ac <_vfiprintf_r+0x5c>
 8010984:	4629      	mov	r1, r5
 8010986:	4630      	mov	r0, r6
 8010988:	f000 fb70 	bl	801106c <__swsetup_r>
 801098c:	b170      	cbz	r0, 80109ac <_vfiprintf_r+0x5c>
 801098e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010990:	07dc      	lsls	r4, r3, #31
 8010992:	d504      	bpl.n	801099e <_vfiprintf_r+0x4e>
 8010994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010998:	b01d      	add	sp, #116	@ 0x74
 801099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099e:	89ab      	ldrh	r3, [r5, #12]
 80109a0:	0598      	lsls	r0, r3, #22
 80109a2:	d4f7      	bmi.n	8010994 <_vfiprintf_r+0x44>
 80109a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109a6:	f7ff fdf7 	bl	8010598 <__retarget_lock_release_recursive>
 80109aa:	e7f3      	b.n	8010994 <_vfiprintf_r+0x44>
 80109ac:	2300      	movs	r3, #0
 80109ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80109b0:	2320      	movs	r3, #32
 80109b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80109ba:	2330      	movs	r3, #48	@ 0x30
 80109bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b6c <_vfiprintf_r+0x21c>
 80109c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109c4:	f04f 0901 	mov.w	r9, #1
 80109c8:	4623      	mov	r3, r4
 80109ca:	469a      	mov	sl, r3
 80109cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109d0:	b10a      	cbz	r2, 80109d6 <_vfiprintf_r+0x86>
 80109d2:	2a25      	cmp	r2, #37	@ 0x25
 80109d4:	d1f9      	bne.n	80109ca <_vfiprintf_r+0x7a>
 80109d6:	ebba 0b04 	subs.w	fp, sl, r4
 80109da:	d00b      	beq.n	80109f4 <_vfiprintf_r+0xa4>
 80109dc:	465b      	mov	r3, fp
 80109de:	4622      	mov	r2, r4
 80109e0:	4629      	mov	r1, r5
 80109e2:	4630      	mov	r0, r6
 80109e4:	f7ff ffa1 	bl	801092a <__sfputs_r>
 80109e8:	3001      	adds	r0, #1
 80109ea:	f000 80a7 	beq.w	8010b3c <_vfiprintf_r+0x1ec>
 80109ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109f0:	445a      	add	r2, fp
 80109f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80109f4:	f89a 3000 	ldrb.w	r3, [sl]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f000 809f 	beq.w	8010b3c <_vfiprintf_r+0x1ec>
 80109fe:	2300      	movs	r3, #0
 8010a00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a08:	f10a 0a01 	add.w	sl, sl, #1
 8010a0c:	9304      	str	r3, [sp, #16]
 8010a0e:	9307      	str	r3, [sp, #28]
 8010a10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a14:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a16:	4654      	mov	r4, sl
 8010a18:	2205      	movs	r2, #5
 8010a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a1e:	4853      	ldr	r0, [pc, #332]	@ (8010b6c <_vfiprintf_r+0x21c>)
 8010a20:	f7ef fbde 	bl	80001e0 <memchr>
 8010a24:	9a04      	ldr	r2, [sp, #16]
 8010a26:	b9d8      	cbnz	r0, 8010a60 <_vfiprintf_r+0x110>
 8010a28:	06d1      	lsls	r1, r2, #27
 8010a2a:	bf44      	itt	mi
 8010a2c:	2320      	movmi	r3, #32
 8010a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a32:	0713      	lsls	r3, r2, #28
 8010a34:	bf44      	itt	mi
 8010a36:	232b      	movmi	r3, #43	@ 0x2b
 8010a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8010a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a42:	d015      	beq.n	8010a70 <_vfiprintf_r+0x120>
 8010a44:	9a07      	ldr	r2, [sp, #28]
 8010a46:	4654      	mov	r4, sl
 8010a48:	2000      	movs	r0, #0
 8010a4a:	f04f 0c0a 	mov.w	ip, #10
 8010a4e:	4621      	mov	r1, r4
 8010a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a54:	3b30      	subs	r3, #48	@ 0x30
 8010a56:	2b09      	cmp	r3, #9
 8010a58:	d94b      	bls.n	8010af2 <_vfiprintf_r+0x1a2>
 8010a5a:	b1b0      	cbz	r0, 8010a8a <_vfiprintf_r+0x13a>
 8010a5c:	9207      	str	r2, [sp, #28]
 8010a5e:	e014      	b.n	8010a8a <_vfiprintf_r+0x13a>
 8010a60:	eba0 0308 	sub.w	r3, r0, r8
 8010a64:	fa09 f303 	lsl.w	r3, r9, r3
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	9304      	str	r3, [sp, #16]
 8010a6c:	46a2      	mov	sl, r4
 8010a6e:	e7d2      	b.n	8010a16 <_vfiprintf_r+0xc6>
 8010a70:	9b03      	ldr	r3, [sp, #12]
 8010a72:	1d19      	adds	r1, r3, #4
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	9103      	str	r1, [sp, #12]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	bfbb      	ittet	lt
 8010a7c:	425b      	neglt	r3, r3
 8010a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8010a82:	9307      	strge	r3, [sp, #28]
 8010a84:	9307      	strlt	r3, [sp, #28]
 8010a86:	bfb8      	it	lt
 8010a88:	9204      	strlt	r2, [sp, #16]
 8010a8a:	7823      	ldrb	r3, [r4, #0]
 8010a8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a8e:	d10a      	bne.n	8010aa6 <_vfiprintf_r+0x156>
 8010a90:	7863      	ldrb	r3, [r4, #1]
 8010a92:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a94:	d132      	bne.n	8010afc <_vfiprintf_r+0x1ac>
 8010a96:	9b03      	ldr	r3, [sp, #12]
 8010a98:	1d1a      	adds	r2, r3, #4
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	9203      	str	r2, [sp, #12]
 8010a9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010aa2:	3402      	adds	r4, #2
 8010aa4:	9305      	str	r3, [sp, #20]
 8010aa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b7c <_vfiprintf_r+0x22c>
 8010aaa:	7821      	ldrb	r1, [r4, #0]
 8010aac:	2203      	movs	r2, #3
 8010aae:	4650      	mov	r0, sl
 8010ab0:	f7ef fb96 	bl	80001e0 <memchr>
 8010ab4:	b138      	cbz	r0, 8010ac6 <_vfiprintf_r+0x176>
 8010ab6:	9b04      	ldr	r3, [sp, #16]
 8010ab8:	eba0 000a 	sub.w	r0, r0, sl
 8010abc:	2240      	movs	r2, #64	@ 0x40
 8010abe:	4082      	lsls	r2, r0
 8010ac0:	4313      	orrs	r3, r2
 8010ac2:	3401      	adds	r4, #1
 8010ac4:	9304      	str	r3, [sp, #16]
 8010ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aca:	4829      	ldr	r0, [pc, #164]	@ (8010b70 <_vfiprintf_r+0x220>)
 8010acc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ad0:	2206      	movs	r2, #6
 8010ad2:	f7ef fb85 	bl	80001e0 <memchr>
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d03f      	beq.n	8010b5a <_vfiprintf_r+0x20a>
 8010ada:	4b26      	ldr	r3, [pc, #152]	@ (8010b74 <_vfiprintf_r+0x224>)
 8010adc:	bb1b      	cbnz	r3, 8010b26 <_vfiprintf_r+0x1d6>
 8010ade:	9b03      	ldr	r3, [sp, #12]
 8010ae0:	3307      	adds	r3, #7
 8010ae2:	f023 0307 	bic.w	r3, r3, #7
 8010ae6:	3308      	adds	r3, #8
 8010ae8:	9303      	str	r3, [sp, #12]
 8010aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aec:	443b      	add	r3, r7
 8010aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8010af0:	e76a      	b.n	80109c8 <_vfiprintf_r+0x78>
 8010af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010af6:	460c      	mov	r4, r1
 8010af8:	2001      	movs	r0, #1
 8010afa:	e7a8      	b.n	8010a4e <_vfiprintf_r+0xfe>
 8010afc:	2300      	movs	r3, #0
 8010afe:	3401      	adds	r4, #1
 8010b00:	9305      	str	r3, [sp, #20]
 8010b02:	4619      	mov	r1, r3
 8010b04:	f04f 0c0a 	mov.w	ip, #10
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b0e:	3a30      	subs	r2, #48	@ 0x30
 8010b10:	2a09      	cmp	r2, #9
 8010b12:	d903      	bls.n	8010b1c <_vfiprintf_r+0x1cc>
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d0c6      	beq.n	8010aa6 <_vfiprintf_r+0x156>
 8010b18:	9105      	str	r1, [sp, #20]
 8010b1a:	e7c4      	b.n	8010aa6 <_vfiprintf_r+0x156>
 8010b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b20:	4604      	mov	r4, r0
 8010b22:	2301      	movs	r3, #1
 8010b24:	e7f0      	b.n	8010b08 <_vfiprintf_r+0x1b8>
 8010b26:	ab03      	add	r3, sp, #12
 8010b28:	9300      	str	r3, [sp, #0]
 8010b2a:	462a      	mov	r2, r5
 8010b2c:	4b12      	ldr	r3, [pc, #72]	@ (8010b78 <_vfiprintf_r+0x228>)
 8010b2e:	a904      	add	r1, sp, #16
 8010b30:	4630      	mov	r0, r6
 8010b32:	f3af 8000 	nop.w
 8010b36:	4607      	mov	r7, r0
 8010b38:	1c78      	adds	r0, r7, #1
 8010b3a:	d1d6      	bne.n	8010aea <_vfiprintf_r+0x19a>
 8010b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b3e:	07d9      	lsls	r1, r3, #31
 8010b40:	d405      	bmi.n	8010b4e <_vfiprintf_r+0x1fe>
 8010b42:	89ab      	ldrh	r3, [r5, #12]
 8010b44:	059a      	lsls	r2, r3, #22
 8010b46:	d402      	bmi.n	8010b4e <_vfiprintf_r+0x1fe>
 8010b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b4a:	f7ff fd25 	bl	8010598 <__retarget_lock_release_recursive>
 8010b4e:	89ab      	ldrh	r3, [r5, #12]
 8010b50:	065b      	lsls	r3, r3, #25
 8010b52:	f53f af1f 	bmi.w	8010994 <_vfiprintf_r+0x44>
 8010b56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b58:	e71e      	b.n	8010998 <_vfiprintf_r+0x48>
 8010b5a:	ab03      	add	r3, sp, #12
 8010b5c:	9300      	str	r3, [sp, #0]
 8010b5e:	462a      	mov	r2, r5
 8010b60:	4b05      	ldr	r3, [pc, #20]	@ (8010b78 <_vfiprintf_r+0x228>)
 8010b62:	a904      	add	r1, sp, #16
 8010b64:	4630      	mov	r0, r6
 8010b66:	f000 f879 	bl	8010c5c <_printf_i>
 8010b6a:	e7e4      	b.n	8010b36 <_vfiprintf_r+0x1e6>
 8010b6c:	080116d1 	.word	0x080116d1
 8010b70:	080116db 	.word	0x080116db
 8010b74:	00000000 	.word	0x00000000
 8010b78:	0801092b 	.word	0x0801092b
 8010b7c:	080116d7 	.word	0x080116d7

08010b80 <_printf_common>:
 8010b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b84:	4616      	mov	r6, r2
 8010b86:	4698      	mov	r8, r3
 8010b88:	688a      	ldr	r2, [r1, #8]
 8010b8a:	690b      	ldr	r3, [r1, #16]
 8010b8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010b90:	4293      	cmp	r3, r2
 8010b92:	bfb8      	it	lt
 8010b94:	4613      	movlt	r3, r2
 8010b96:	6033      	str	r3, [r6, #0]
 8010b98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010b9c:	4607      	mov	r7, r0
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	b10a      	cbz	r2, 8010ba6 <_printf_common+0x26>
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	6033      	str	r3, [r6, #0]
 8010ba6:	6823      	ldr	r3, [r4, #0]
 8010ba8:	0699      	lsls	r1, r3, #26
 8010baa:	bf42      	ittt	mi
 8010bac:	6833      	ldrmi	r3, [r6, #0]
 8010bae:	3302      	addmi	r3, #2
 8010bb0:	6033      	strmi	r3, [r6, #0]
 8010bb2:	6825      	ldr	r5, [r4, #0]
 8010bb4:	f015 0506 	ands.w	r5, r5, #6
 8010bb8:	d106      	bne.n	8010bc8 <_printf_common+0x48>
 8010bba:	f104 0a19 	add.w	sl, r4, #25
 8010bbe:	68e3      	ldr	r3, [r4, #12]
 8010bc0:	6832      	ldr	r2, [r6, #0]
 8010bc2:	1a9b      	subs	r3, r3, r2
 8010bc4:	42ab      	cmp	r3, r5
 8010bc6:	dc26      	bgt.n	8010c16 <_printf_common+0x96>
 8010bc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010bcc:	6822      	ldr	r2, [r4, #0]
 8010bce:	3b00      	subs	r3, #0
 8010bd0:	bf18      	it	ne
 8010bd2:	2301      	movne	r3, #1
 8010bd4:	0692      	lsls	r2, r2, #26
 8010bd6:	d42b      	bmi.n	8010c30 <_printf_common+0xb0>
 8010bd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010bdc:	4641      	mov	r1, r8
 8010bde:	4638      	mov	r0, r7
 8010be0:	47c8      	blx	r9
 8010be2:	3001      	adds	r0, #1
 8010be4:	d01e      	beq.n	8010c24 <_printf_common+0xa4>
 8010be6:	6823      	ldr	r3, [r4, #0]
 8010be8:	6922      	ldr	r2, [r4, #16]
 8010bea:	f003 0306 	and.w	r3, r3, #6
 8010bee:	2b04      	cmp	r3, #4
 8010bf0:	bf02      	ittt	eq
 8010bf2:	68e5      	ldreq	r5, [r4, #12]
 8010bf4:	6833      	ldreq	r3, [r6, #0]
 8010bf6:	1aed      	subeq	r5, r5, r3
 8010bf8:	68a3      	ldr	r3, [r4, #8]
 8010bfa:	bf0c      	ite	eq
 8010bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c00:	2500      	movne	r5, #0
 8010c02:	4293      	cmp	r3, r2
 8010c04:	bfc4      	itt	gt
 8010c06:	1a9b      	subgt	r3, r3, r2
 8010c08:	18ed      	addgt	r5, r5, r3
 8010c0a:	2600      	movs	r6, #0
 8010c0c:	341a      	adds	r4, #26
 8010c0e:	42b5      	cmp	r5, r6
 8010c10:	d11a      	bne.n	8010c48 <_printf_common+0xc8>
 8010c12:	2000      	movs	r0, #0
 8010c14:	e008      	b.n	8010c28 <_printf_common+0xa8>
 8010c16:	2301      	movs	r3, #1
 8010c18:	4652      	mov	r2, sl
 8010c1a:	4641      	mov	r1, r8
 8010c1c:	4638      	mov	r0, r7
 8010c1e:	47c8      	blx	r9
 8010c20:	3001      	adds	r0, #1
 8010c22:	d103      	bne.n	8010c2c <_printf_common+0xac>
 8010c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c2c:	3501      	adds	r5, #1
 8010c2e:	e7c6      	b.n	8010bbe <_printf_common+0x3e>
 8010c30:	18e1      	adds	r1, r4, r3
 8010c32:	1c5a      	adds	r2, r3, #1
 8010c34:	2030      	movs	r0, #48	@ 0x30
 8010c36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010c3a:	4422      	add	r2, r4
 8010c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010c40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010c44:	3302      	adds	r3, #2
 8010c46:	e7c7      	b.n	8010bd8 <_printf_common+0x58>
 8010c48:	2301      	movs	r3, #1
 8010c4a:	4622      	mov	r2, r4
 8010c4c:	4641      	mov	r1, r8
 8010c4e:	4638      	mov	r0, r7
 8010c50:	47c8      	blx	r9
 8010c52:	3001      	adds	r0, #1
 8010c54:	d0e6      	beq.n	8010c24 <_printf_common+0xa4>
 8010c56:	3601      	adds	r6, #1
 8010c58:	e7d9      	b.n	8010c0e <_printf_common+0x8e>
	...

08010c5c <_printf_i>:
 8010c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c60:	7e0f      	ldrb	r7, [r1, #24]
 8010c62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010c64:	2f78      	cmp	r7, #120	@ 0x78
 8010c66:	4691      	mov	r9, r2
 8010c68:	4680      	mov	r8, r0
 8010c6a:	460c      	mov	r4, r1
 8010c6c:	469a      	mov	sl, r3
 8010c6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010c72:	d807      	bhi.n	8010c84 <_printf_i+0x28>
 8010c74:	2f62      	cmp	r7, #98	@ 0x62
 8010c76:	d80a      	bhi.n	8010c8e <_printf_i+0x32>
 8010c78:	2f00      	cmp	r7, #0
 8010c7a:	f000 80d1 	beq.w	8010e20 <_printf_i+0x1c4>
 8010c7e:	2f58      	cmp	r7, #88	@ 0x58
 8010c80:	f000 80b8 	beq.w	8010df4 <_printf_i+0x198>
 8010c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010c8c:	e03a      	b.n	8010d04 <_printf_i+0xa8>
 8010c8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010c92:	2b15      	cmp	r3, #21
 8010c94:	d8f6      	bhi.n	8010c84 <_printf_i+0x28>
 8010c96:	a101      	add	r1, pc, #4	@ (adr r1, 8010c9c <_printf_i+0x40>)
 8010c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c9c:	08010cf5 	.word	0x08010cf5
 8010ca0:	08010d09 	.word	0x08010d09
 8010ca4:	08010c85 	.word	0x08010c85
 8010ca8:	08010c85 	.word	0x08010c85
 8010cac:	08010c85 	.word	0x08010c85
 8010cb0:	08010c85 	.word	0x08010c85
 8010cb4:	08010d09 	.word	0x08010d09
 8010cb8:	08010c85 	.word	0x08010c85
 8010cbc:	08010c85 	.word	0x08010c85
 8010cc0:	08010c85 	.word	0x08010c85
 8010cc4:	08010c85 	.word	0x08010c85
 8010cc8:	08010e07 	.word	0x08010e07
 8010ccc:	08010d33 	.word	0x08010d33
 8010cd0:	08010dc1 	.word	0x08010dc1
 8010cd4:	08010c85 	.word	0x08010c85
 8010cd8:	08010c85 	.word	0x08010c85
 8010cdc:	08010e29 	.word	0x08010e29
 8010ce0:	08010c85 	.word	0x08010c85
 8010ce4:	08010d33 	.word	0x08010d33
 8010ce8:	08010c85 	.word	0x08010c85
 8010cec:	08010c85 	.word	0x08010c85
 8010cf0:	08010dc9 	.word	0x08010dc9
 8010cf4:	6833      	ldr	r3, [r6, #0]
 8010cf6:	1d1a      	adds	r2, r3, #4
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	6032      	str	r2, [r6, #0]
 8010cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010d00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010d04:	2301      	movs	r3, #1
 8010d06:	e09c      	b.n	8010e42 <_printf_i+0x1e6>
 8010d08:	6833      	ldr	r3, [r6, #0]
 8010d0a:	6820      	ldr	r0, [r4, #0]
 8010d0c:	1d19      	adds	r1, r3, #4
 8010d0e:	6031      	str	r1, [r6, #0]
 8010d10:	0606      	lsls	r6, r0, #24
 8010d12:	d501      	bpl.n	8010d18 <_printf_i+0xbc>
 8010d14:	681d      	ldr	r5, [r3, #0]
 8010d16:	e003      	b.n	8010d20 <_printf_i+0xc4>
 8010d18:	0645      	lsls	r5, r0, #25
 8010d1a:	d5fb      	bpl.n	8010d14 <_printf_i+0xb8>
 8010d1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010d20:	2d00      	cmp	r5, #0
 8010d22:	da03      	bge.n	8010d2c <_printf_i+0xd0>
 8010d24:	232d      	movs	r3, #45	@ 0x2d
 8010d26:	426d      	negs	r5, r5
 8010d28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010d2c:	4858      	ldr	r0, [pc, #352]	@ (8010e90 <_printf_i+0x234>)
 8010d2e:	230a      	movs	r3, #10
 8010d30:	e011      	b.n	8010d56 <_printf_i+0xfa>
 8010d32:	6821      	ldr	r1, [r4, #0]
 8010d34:	6833      	ldr	r3, [r6, #0]
 8010d36:	0608      	lsls	r0, r1, #24
 8010d38:	f853 5b04 	ldr.w	r5, [r3], #4
 8010d3c:	d402      	bmi.n	8010d44 <_printf_i+0xe8>
 8010d3e:	0649      	lsls	r1, r1, #25
 8010d40:	bf48      	it	mi
 8010d42:	b2ad      	uxthmi	r5, r5
 8010d44:	2f6f      	cmp	r7, #111	@ 0x6f
 8010d46:	4852      	ldr	r0, [pc, #328]	@ (8010e90 <_printf_i+0x234>)
 8010d48:	6033      	str	r3, [r6, #0]
 8010d4a:	bf14      	ite	ne
 8010d4c:	230a      	movne	r3, #10
 8010d4e:	2308      	moveq	r3, #8
 8010d50:	2100      	movs	r1, #0
 8010d52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010d56:	6866      	ldr	r6, [r4, #4]
 8010d58:	60a6      	str	r6, [r4, #8]
 8010d5a:	2e00      	cmp	r6, #0
 8010d5c:	db05      	blt.n	8010d6a <_printf_i+0x10e>
 8010d5e:	6821      	ldr	r1, [r4, #0]
 8010d60:	432e      	orrs	r6, r5
 8010d62:	f021 0104 	bic.w	r1, r1, #4
 8010d66:	6021      	str	r1, [r4, #0]
 8010d68:	d04b      	beq.n	8010e02 <_printf_i+0x1a6>
 8010d6a:	4616      	mov	r6, r2
 8010d6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010d70:	fb03 5711 	mls	r7, r3, r1, r5
 8010d74:	5dc7      	ldrb	r7, [r0, r7]
 8010d76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010d7a:	462f      	mov	r7, r5
 8010d7c:	42bb      	cmp	r3, r7
 8010d7e:	460d      	mov	r5, r1
 8010d80:	d9f4      	bls.n	8010d6c <_printf_i+0x110>
 8010d82:	2b08      	cmp	r3, #8
 8010d84:	d10b      	bne.n	8010d9e <_printf_i+0x142>
 8010d86:	6823      	ldr	r3, [r4, #0]
 8010d88:	07df      	lsls	r7, r3, #31
 8010d8a:	d508      	bpl.n	8010d9e <_printf_i+0x142>
 8010d8c:	6923      	ldr	r3, [r4, #16]
 8010d8e:	6861      	ldr	r1, [r4, #4]
 8010d90:	4299      	cmp	r1, r3
 8010d92:	bfde      	ittt	le
 8010d94:	2330      	movle	r3, #48	@ 0x30
 8010d96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010d9a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010d9e:	1b92      	subs	r2, r2, r6
 8010da0:	6122      	str	r2, [r4, #16]
 8010da2:	f8cd a000 	str.w	sl, [sp]
 8010da6:	464b      	mov	r3, r9
 8010da8:	aa03      	add	r2, sp, #12
 8010daa:	4621      	mov	r1, r4
 8010dac:	4640      	mov	r0, r8
 8010dae:	f7ff fee7 	bl	8010b80 <_printf_common>
 8010db2:	3001      	adds	r0, #1
 8010db4:	d14a      	bne.n	8010e4c <_printf_i+0x1f0>
 8010db6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010dba:	b004      	add	sp, #16
 8010dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dc0:	6823      	ldr	r3, [r4, #0]
 8010dc2:	f043 0320 	orr.w	r3, r3, #32
 8010dc6:	6023      	str	r3, [r4, #0]
 8010dc8:	4832      	ldr	r0, [pc, #200]	@ (8010e94 <_printf_i+0x238>)
 8010dca:	2778      	movs	r7, #120	@ 0x78
 8010dcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010dd0:	6823      	ldr	r3, [r4, #0]
 8010dd2:	6831      	ldr	r1, [r6, #0]
 8010dd4:	061f      	lsls	r7, r3, #24
 8010dd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8010dda:	d402      	bmi.n	8010de2 <_printf_i+0x186>
 8010ddc:	065f      	lsls	r7, r3, #25
 8010dde:	bf48      	it	mi
 8010de0:	b2ad      	uxthmi	r5, r5
 8010de2:	6031      	str	r1, [r6, #0]
 8010de4:	07d9      	lsls	r1, r3, #31
 8010de6:	bf44      	itt	mi
 8010de8:	f043 0320 	orrmi.w	r3, r3, #32
 8010dec:	6023      	strmi	r3, [r4, #0]
 8010dee:	b11d      	cbz	r5, 8010df8 <_printf_i+0x19c>
 8010df0:	2310      	movs	r3, #16
 8010df2:	e7ad      	b.n	8010d50 <_printf_i+0xf4>
 8010df4:	4826      	ldr	r0, [pc, #152]	@ (8010e90 <_printf_i+0x234>)
 8010df6:	e7e9      	b.n	8010dcc <_printf_i+0x170>
 8010df8:	6823      	ldr	r3, [r4, #0]
 8010dfa:	f023 0320 	bic.w	r3, r3, #32
 8010dfe:	6023      	str	r3, [r4, #0]
 8010e00:	e7f6      	b.n	8010df0 <_printf_i+0x194>
 8010e02:	4616      	mov	r6, r2
 8010e04:	e7bd      	b.n	8010d82 <_printf_i+0x126>
 8010e06:	6833      	ldr	r3, [r6, #0]
 8010e08:	6825      	ldr	r5, [r4, #0]
 8010e0a:	6961      	ldr	r1, [r4, #20]
 8010e0c:	1d18      	adds	r0, r3, #4
 8010e0e:	6030      	str	r0, [r6, #0]
 8010e10:	062e      	lsls	r6, r5, #24
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	d501      	bpl.n	8010e1a <_printf_i+0x1be>
 8010e16:	6019      	str	r1, [r3, #0]
 8010e18:	e002      	b.n	8010e20 <_printf_i+0x1c4>
 8010e1a:	0668      	lsls	r0, r5, #25
 8010e1c:	d5fb      	bpl.n	8010e16 <_printf_i+0x1ba>
 8010e1e:	8019      	strh	r1, [r3, #0]
 8010e20:	2300      	movs	r3, #0
 8010e22:	6123      	str	r3, [r4, #16]
 8010e24:	4616      	mov	r6, r2
 8010e26:	e7bc      	b.n	8010da2 <_printf_i+0x146>
 8010e28:	6833      	ldr	r3, [r6, #0]
 8010e2a:	1d1a      	adds	r2, r3, #4
 8010e2c:	6032      	str	r2, [r6, #0]
 8010e2e:	681e      	ldr	r6, [r3, #0]
 8010e30:	6862      	ldr	r2, [r4, #4]
 8010e32:	2100      	movs	r1, #0
 8010e34:	4630      	mov	r0, r6
 8010e36:	f7ef f9d3 	bl	80001e0 <memchr>
 8010e3a:	b108      	cbz	r0, 8010e40 <_printf_i+0x1e4>
 8010e3c:	1b80      	subs	r0, r0, r6
 8010e3e:	6060      	str	r0, [r4, #4]
 8010e40:	6863      	ldr	r3, [r4, #4]
 8010e42:	6123      	str	r3, [r4, #16]
 8010e44:	2300      	movs	r3, #0
 8010e46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e4a:	e7aa      	b.n	8010da2 <_printf_i+0x146>
 8010e4c:	6923      	ldr	r3, [r4, #16]
 8010e4e:	4632      	mov	r2, r6
 8010e50:	4649      	mov	r1, r9
 8010e52:	4640      	mov	r0, r8
 8010e54:	47d0      	blx	sl
 8010e56:	3001      	adds	r0, #1
 8010e58:	d0ad      	beq.n	8010db6 <_printf_i+0x15a>
 8010e5a:	6823      	ldr	r3, [r4, #0]
 8010e5c:	079b      	lsls	r3, r3, #30
 8010e5e:	d413      	bmi.n	8010e88 <_printf_i+0x22c>
 8010e60:	68e0      	ldr	r0, [r4, #12]
 8010e62:	9b03      	ldr	r3, [sp, #12]
 8010e64:	4298      	cmp	r0, r3
 8010e66:	bfb8      	it	lt
 8010e68:	4618      	movlt	r0, r3
 8010e6a:	e7a6      	b.n	8010dba <_printf_i+0x15e>
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	4632      	mov	r2, r6
 8010e70:	4649      	mov	r1, r9
 8010e72:	4640      	mov	r0, r8
 8010e74:	47d0      	blx	sl
 8010e76:	3001      	adds	r0, #1
 8010e78:	d09d      	beq.n	8010db6 <_printf_i+0x15a>
 8010e7a:	3501      	adds	r5, #1
 8010e7c:	68e3      	ldr	r3, [r4, #12]
 8010e7e:	9903      	ldr	r1, [sp, #12]
 8010e80:	1a5b      	subs	r3, r3, r1
 8010e82:	42ab      	cmp	r3, r5
 8010e84:	dcf2      	bgt.n	8010e6c <_printf_i+0x210>
 8010e86:	e7eb      	b.n	8010e60 <_printf_i+0x204>
 8010e88:	2500      	movs	r5, #0
 8010e8a:	f104 0619 	add.w	r6, r4, #25
 8010e8e:	e7f5      	b.n	8010e7c <_printf_i+0x220>
 8010e90:	080116e2 	.word	0x080116e2
 8010e94:	080116f3 	.word	0x080116f3

08010e98 <__sflush_r>:
 8010e98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea0:	0716      	lsls	r6, r2, #28
 8010ea2:	4605      	mov	r5, r0
 8010ea4:	460c      	mov	r4, r1
 8010ea6:	d454      	bmi.n	8010f52 <__sflush_r+0xba>
 8010ea8:	684b      	ldr	r3, [r1, #4]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	dc02      	bgt.n	8010eb4 <__sflush_r+0x1c>
 8010eae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	dd48      	ble.n	8010f46 <__sflush_r+0xae>
 8010eb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010eb6:	2e00      	cmp	r6, #0
 8010eb8:	d045      	beq.n	8010f46 <__sflush_r+0xae>
 8010eba:	2300      	movs	r3, #0
 8010ebc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010ec0:	682f      	ldr	r7, [r5, #0]
 8010ec2:	6a21      	ldr	r1, [r4, #32]
 8010ec4:	602b      	str	r3, [r5, #0]
 8010ec6:	d030      	beq.n	8010f2a <__sflush_r+0x92>
 8010ec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010eca:	89a3      	ldrh	r3, [r4, #12]
 8010ecc:	0759      	lsls	r1, r3, #29
 8010ece:	d505      	bpl.n	8010edc <__sflush_r+0x44>
 8010ed0:	6863      	ldr	r3, [r4, #4]
 8010ed2:	1ad2      	subs	r2, r2, r3
 8010ed4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ed6:	b10b      	cbz	r3, 8010edc <__sflush_r+0x44>
 8010ed8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010eda:	1ad2      	subs	r2, r2, r3
 8010edc:	2300      	movs	r3, #0
 8010ede:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ee0:	6a21      	ldr	r1, [r4, #32]
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	47b0      	blx	r6
 8010ee6:	1c43      	adds	r3, r0, #1
 8010ee8:	89a3      	ldrh	r3, [r4, #12]
 8010eea:	d106      	bne.n	8010efa <__sflush_r+0x62>
 8010eec:	6829      	ldr	r1, [r5, #0]
 8010eee:	291d      	cmp	r1, #29
 8010ef0:	d82b      	bhi.n	8010f4a <__sflush_r+0xb2>
 8010ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8010f9c <__sflush_r+0x104>)
 8010ef4:	40ca      	lsrs	r2, r1
 8010ef6:	07d6      	lsls	r6, r2, #31
 8010ef8:	d527      	bpl.n	8010f4a <__sflush_r+0xb2>
 8010efa:	2200      	movs	r2, #0
 8010efc:	6062      	str	r2, [r4, #4]
 8010efe:	04d9      	lsls	r1, r3, #19
 8010f00:	6922      	ldr	r2, [r4, #16]
 8010f02:	6022      	str	r2, [r4, #0]
 8010f04:	d504      	bpl.n	8010f10 <__sflush_r+0x78>
 8010f06:	1c42      	adds	r2, r0, #1
 8010f08:	d101      	bne.n	8010f0e <__sflush_r+0x76>
 8010f0a:	682b      	ldr	r3, [r5, #0]
 8010f0c:	b903      	cbnz	r3, 8010f10 <__sflush_r+0x78>
 8010f0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f12:	602f      	str	r7, [r5, #0]
 8010f14:	b1b9      	cbz	r1, 8010f46 <__sflush_r+0xae>
 8010f16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f1a:	4299      	cmp	r1, r3
 8010f1c:	d002      	beq.n	8010f24 <__sflush_r+0x8c>
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f7ff fb4a 	bl	80105b8 <_free_r>
 8010f24:	2300      	movs	r3, #0
 8010f26:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f28:	e00d      	b.n	8010f46 <__sflush_r+0xae>
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	47b0      	blx	r6
 8010f30:	4602      	mov	r2, r0
 8010f32:	1c50      	adds	r0, r2, #1
 8010f34:	d1c9      	bne.n	8010eca <__sflush_r+0x32>
 8010f36:	682b      	ldr	r3, [r5, #0]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d0c6      	beq.n	8010eca <__sflush_r+0x32>
 8010f3c:	2b1d      	cmp	r3, #29
 8010f3e:	d001      	beq.n	8010f44 <__sflush_r+0xac>
 8010f40:	2b16      	cmp	r3, #22
 8010f42:	d11e      	bne.n	8010f82 <__sflush_r+0xea>
 8010f44:	602f      	str	r7, [r5, #0]
 8010f46:	2000      	movs	r0, #0
 8010f48:	e022      	b.n	8010f90 <__sflush_r+0xf8>
 8010f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f4e:	b21b      	sxth	r3, r3
 8010f50:	e01b      	b.n	8010f8a <__sflush_r+0xf2>
 8010f52:	690f      	ldr	r7, [r1, #16]
 8010f54:	2f00      	cmp	r7, #0
 8010f56:	d0f6      	beq.n	8010f46 <__sflush_r+0xae>
 8010f58:	0793      	lsls	r3, r2, #30
 8010f5a:	680e      	ldr	r6, [r1, #0]
 8010f5c:	bf08      	it	eq
 8010f5e:	694b      	ldreq	r3, [r1, #20]
 8010f60:	600f      	str	r7, [r1, #0]
 8010f62:	bf18      	it	ne
 8010f64:	2300      	movne	r3, #0
 8010f66:	eba6 0807 	sub.w	r8, r6, r7
 8010f6a:	608b      	str	r3, [r1, #8]
 8010f6c:	f1b8 0f00 	cmp.w	r8, #0
 8010f70:	dde9      	ble.n	8010f46 <__sflush_r+0xae>
 8010f72:	6a21      	ldr	r1, [r4, #32]
 8010f74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010f76:	4643      	mov	r3, r8
 8010f78:	463a      	mov	r2, r7
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	47b0      	blx	r6
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	dc08      	bgt.n	8010f94 <__sflush_r+0xfc>
 8010f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f8a:	81a3      	strh	r3, [r4, #12]
 8010f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f94:	4407      	add	r7, r0
 8010f96:	eba8 0800 	sub.w	r8, r8, r0
 8010f9a:	e7e7      	b.n	8010f6c <__sflush_r+0xd4>
 8010f9c:	20400001 	.word	0x20400001

08010fa0 <_fflush_r>:
 8010fa0:	b538      	push	{r3, r4, r5, lr}
 8010fa2:	690b      	ldr	r3, [r1, #16]
 8010fa4:	4605      	mov	r5, r0
 8010fa6:	460c      	mov	r4, r1
 8010fa8:	b913      	cbnz	r3, 8010fb0 <_fflush_r+0x10>
 8010faa:	2500      	movs	r5, #0
 8010fac:	4628      	mov	r0, r5
 8010fae:	bd38      	pop	{r3, r4, r5, pc}
 8010fb0:	b118      	cbz	r0, 8010fba <_fflush_r+0x1a>
 8010fb2:	6a03      	ldr	r3, [r0, #32]
 8010fb4:	b90b      	cbnz	r3, 8010fba <_fflush_r+0x1a>
 8010fb6:	f7ff f925 	bl	8010204 <__sinit>
 8010fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d0f3      	beq.n	8010faa <_fflush_r+0xa>
 8010fc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010fc4:	07d0      	lsls	r0, r2, #31
 8010fc6:	d404      	bmi.n	8010fd2 <_fflush_r+0x32>
 8010fc8:	0599      	lsls	r1, r3, #22
 8010fca:	d402      	bmi.n	8010fd2 <_fflush_r+0x32>
 8010fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010fce:	f7ff fae2 	bl	8010596 <__retarget_lock_acquire_recursive>
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	4621      	mov	r1, r4
 8010fd6:	f7ff ff5f 	bl	8010e98 <__sflush_r>
 8010fda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010fdc:	07da      	lsls	r2, r3, #31
 8010fde:	4605      	mov	r5, r0
 8010fe0:	d4e4      	bmi.n	8010fac <_fflush_r+0xc>
 8010fe2:	89a3      	ldrh	r3, [r4, #12]
 8010fe4:	059b      	lsls	r3, r3, #22
 8010fe6:	d4e1      	bmi.n	8010fac <_fflush_r+0xc>
 8010fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010fea:	f7ff fad5 	bl	8010598 <__retarget_lock_release_recursive>
 8010fee:	e7dd      	b.n	8010fac <_fflush_r+0xc>

08010ff0 <__swbuf_r>:
 8010ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ff2:	460e      	mov	r6, r1
 8010ff4:	4614      	mov	r4, r2
 8010ff6:	4605      	mov	r5, r0
 8010ff8:	b118      	cbz	r0, 8011002 <__swbuf_r+0x12>
 8010ffa:	6a03      	ldr	r3, [r0, #32]
 8010ffc:	b90b      	cbnz	r3, 8011002 <__swbuf_r+0x12>
 8010ffe:	f7ff f901 	bl	8010204 <__sinit>
 8011002:	69a3      	ldr	r3, [r4, #24]
 8011004:	60a3      	str	r3, [r4, #8]
 8011006:	89a3      	ldrh	r3, [r4, #12]
 8011008:	071a      	lsls	r2, r3, #28
 801100a:	d501      	bpl.n	8011010 <__swbuf_r+0x20>
 801100c:	6923      	ldr	r3, [r4, #16]
 801100e:	b943      	cbnz	r3, 8011022 <__swbuf_r+0x32>
 8011010:	4621      	mov	r1, r4
 8011012:	4628      	mov	r0, r5
 8011014:	f000 f82a 	bl	801106c <__swsetup_r>
 8011018:	b118      	cbz	r0, 8011022 <__swbuf_r+0x32>
 801101a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801101e:	4638      	mov	r0, r7
 8011020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011022:	6823      	ldr	r3, [r4, #0]
 8011024:	6922      	ldr	r2, [r4, #16]
 8011026:	1a98      	subs	r0, r3, r2
 8011028:	6963      	ldr	r3, [r4, #20]
 801102a:	b2f6      	uxtb	r6, r6
 801102c:	4283      	cmp	r3, r0
 801102e:	4637      	mov	r7, r6
 8011030:	dc05      	bgt.n	801103e <__swbuf_r+0x4e>
 8011032:	4621      	mov	r1, r4
 8011034:	4628      	mov	r0, r5
 8011036:	f7ff ffb3 	bl	8010fa0 <_fflush_r>
 801103a:	2800      	cmp	r0, #0
 801103c:	d1ed      	bne.n	801101a <__swbuf_r+0x2a>
 801103e:	68a3      	ldr	r3, [r4, #8]
 8011040:	3b01      	subs	r3, #1
 8011042:	60a3      	str	r3, [r4, #8]
 8011044:	6823      	ldr	r3, [r4, #0]
 8011046:	1c5a      	adds	r2, r3, #1
 8011048:	6022      	str	r2, [r4, #0]
 801104a:	701e      	strb	r6, [r3, #0]
 801104c:	6962      	ldr	r2, [r4, #20]
 801104e:	1c43      	adds	r3, r0, #1
 8011050:	429a      	cmp	r2, r3
 8011052:	d004      	beq.n	801105e <__swbuf_r+0x6e>
 8011054:	89a3      	ldrh	r3, [r4, #12]
 8011056:	07db      	lsls	r3, r3, #31
 8011058:	d5e1      	bpl.n	801101e <__swbuf_r+0x2e>
 801105a:	2e0a      	cmp	r6, #10
 801105c:	d1df      	bne.n	801101e <__swbuf_r+0x2e>
 801105e:	4621      	mov	r1, r4
 8011060:	4628      	mov	r0, r5
 8011062:	f7ff ff9d 	bl	8010fa0 <_fflush_r>
 8011066:	2800      	cmp	r0, #0
 8011068:	d0d9      	beq.n	801101e <__swbuf_r+0x2e>
 801106a:	e7d6      	b.n	801101a <__swbuf_r+0x2a>

0801106c <__swsetup_r>:
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4b29      	ldr	r3, [pc, #164]	@ (8011114 <__swsetup_r+0xa8>)
 8011070:	4605      	mov	r5, r0
 8011072:	6818      	ldr	r0, [r3, #0]
 8011074:	460c      	mov	r4, r1
 8011076:	b118      	cbz	r0, 8011080 <__swsetup_r+0x14>
 8011078:	6a03      	ldr	r3, [r0, #32]
 801107a:	b90b      	cbnz	r3, 8011080 <__swsetup_r+0x14>
 801107c:	f7ff f8c2 	bl	8010204 <__sinit>
 8011080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011084:	0719      	lsls	r1, r3, #28
 8011086:	d422      	bmi.n	80110ce <__swsetup_r+0x62>
 8011088:	06da      	lsls	r2, r3, #27
 801108a:	d407      	bmi.n	801109c <__swsetup_r+0x30>
 801108c:	2209      	movs	r2, #9
 801108e:	602a      	str	r2, [r5, #0]
 8011090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011094:	81a3      	strh	r3, [r4, #12]
 8011096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801109a:	e033      	b.n	8011104 <__swsetup_r+0x98>
 801109c:	0758      	lsls	r0, r3, #29
 801109e:	d512      	bpl.n	80110c6 <__swsetup_r+0x5a>
 80110a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110a2:	b141      	cbz	r1, 80110b6 <__swsetup_r+0x4a>
 80110a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110a8:	4299      	cmp	r1, r3
 80110aa:	d002      	beq.n	80110b2 <__swsetup_r+0x46>
 80110ac:	4628      	mov	r0, r5
 80110ae:	f7ff fa83 	bl	80105b8 <_free_r>
 80110b2:	2300      	movs	r3, #0
 80110b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80110b6:	89a3      	ldrh	r3, [r4, #12]
 80110b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80110bc:	81a3      	strh	r3, [r4, #12]
 80110be:	2300      	movs	r3, #0
 80110c0:	6063      	str	r3, [r4, #4]
 80110c2:	6923      	ldr	r3, [r4, #16]
 80110c4:	6023      	str	r3, [r4, #0]
 80110c6:	89a3      	ldrh	r3, [r4, #12]
 80110c8:	f043 0308 	orr.w	r3, r3, #8
 80110cc:	81a3      	strh	r3, [r4, #12]
 80110ce:	6923      	ldr	r3, [r4, #16]
 80110d0:	b94b      	cbnz	r3, 80110e6 <__swsetup_r+0x7a>
 80110d2:	89a3      	ldrh	r3, [r4, #12]
 80110d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80110d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110dc:	d003      	beq.n	80110e6 <__swsetup_r+0x7a>
 80110de:	4621      	mov	r1, r4
 80110e0:	4628      	mov	r0, r5
 80110e2:	f000 f887 	bl	80111f4 <__smakebuf_r>
 80110e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ea:	f013 0201 	ands.w	r2, r3, #1
 80110ee:	d00a      	beq.n	8011106 <__swsetup_r+0x9a>
 80110f0:	2200      	movs	r2, #0
 80110f2:	60a2      	str	r2, [r4, #8]
 80110f4:	6962      	ldr	r2, [r4, #20]
 80110f6:	4252      	negs	r2, r2
 80110f8:	61a2      	str	r2, [r4, #24]
 80110fa:	6922      	ldr	r2, [r4, #16]
 80110fc:	b942      	cbnz	r2, 8011110 <__swsetup_r+0xa4>
 80110fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011102:	d1c5      	bne.n	8011090 <__swsetup_r+0x24>
 8011104:	bd38      	pop	{r3, r4, r5, pc}
 8011106:	0799      	lsls	r1, r3, #30
 8011108:	bf58      	it	pl
 801110a:	6962      	ldrpl	r2, [r4, #20]
 801110c:	60a2      	str	r2, [r4, #8]
 801110e:	e7f4      	b.n	80110fa <__swsetup_r+0x8e>
 8011110:	2000      	movs	r0, #0
 8011112:	e7f7      	b.n	8011104 <__swsetup_r+0x98>
 8011114:	2000003c 	.word	0x2000003c

08011118 <memmove>:
 8011118:	4288      	cmp	r0, r1
 801111a:	b510      	push	{r4, lr}
 801111c:	eb01 0402 	add.w	r4, r1, r2
 8011120:	d902      	bls.n	8011128 <memmove+0x10>
 8011122:	4284      	cmp	r4, r0
 8011124:	4623      	mov	r3, r4
 8011126:	d807      	bhi.n	8011138 <memmove+0x20>
 8011128:	1e43      	subs	r3, r0, #1
 801112a:	42a1      	cmp	r1, r4
 801112c:	d008      	beq.n	8011140 <memmove+0x28>
 801112e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011136:	e7f8      	b.n	801112a <memmove+0x12>
 8011138:	4402      	add	r2, r0
 801113a:	4601      	mov	r1, r0
 801113c:	428a      	cmp	r2, r1
 801113e:	d100      	bne.n	8011142 <memmove+0x2a>
 8011140:	bd10      	pop	{r4, pc}
 8011142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801114a:	e7f7      	b.n	801113c <memmove+0x24>

0801114c <_realloc_r>:
 801114c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011150:	4607      	mov	r7, r0
 8011152:	4614      	mov	r4, r2
 8011154:	460d      	mov	r5, r1
 8011156:	b921      	cbnz	r1, 8011162 <_realloc_r+0x16>
 8011158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801115c:	4611      	mov	r1, r2
 801115e:	f7fe beb5 	b.w	800fecc <_malloc_r>
 8011162:	b92a      	cbnz	r2, 8011170 <_realloc_r+0x24>
 8011164:	f7ff fa28 	bl	80105b8 <_free_r>
 8011168:	4625      	mov	r5, r4
 801116a:	4628      	mov	r0, r5
 801116c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011170:	f000 f89e 	bl	80112b0 <_malloc_usable_size_r>
 8011174:	4284      	cmp	r4, r0
 8011176:	4606      	mov	r6, r0
 8011178:	d802      	bhi.n	8011180 <_realloc_r+0x34>
 801117a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801117e:	d8f4      	bhi.n	801116a <_realloc_r+0x1e>
 8011180:	4621      	mov	r1, r4
 8011182:	4638      	mov	r0, r7
 8011184:	f7fe fea2 	bl	800fecc <_malloc_r>
 8011188:	4680      	mov	r8, r0
 801118a:	b908      	cbnz	r0, 8011190 <_realloc_r+0x44>
 801118c:	4645      	mov	r5, r8
 801118e:	e7ec      	b.n	801116a <_realloc_r+0x1e>
 8011190:	42b4      	cmp	r4, r6
 8011192:	4622      	mov	r2, r4
 8011194:	4629      	mov	r1, r5
 8011196:	bf28      	it	cs
 8011198:	4632      	movcs	r2, r6
 801119a:	f7ff f9fe 	bl	801059a <memcpy>
 801119e:	4629      	mov	r1, r5
 80111a0:	4638      	mov	r0, r7
 80111a2:	f7ff fa09 	bl	80105b8 <_free_r>
 80111a6:	e7f1      	b.n	801118c <_realloc_r+0x40>

080111a8 <__swhatbuf_r>:
 80111a8:	b570      	push	{r4, r5, r6, lr}
 80111aa:	460c      	mov	r4, r1
 80111ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111b0:	2900      	cmp	r1, #0
 80111b2:	b096      	sub	sp, #88	@ 0x58
 80111b4:	4615      	mov	r5, r2
 80111b6:	461e      	mov	r6, r3
 80111b8:	da0d      	bge.n	80111d6 <__swhatbuf_r+0x2e>
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80111c0:	f04f 0100 	mov.w	r1, #0
 80111c4:	bf14      	ite	ne
 80111c6:	2340      	movne	r3, #64	@ 0x40
 80111c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80111cc:	2000      	movs	r0, #0
 80111ce:	6031      	str	r1, [r6, #0]
 80111d0:	602b      	str	r3, [r5, #0]
 80111d2:	b016      	add	sp, #88	@ 0x58
 80111d4:	bd70      	pop	{r4, r5, r6, pc}
 80111d6:	466a      	mov	r2, sp
 80111d8:	f000 f848 	bl	801126c <_fstat_r>
 80111dc:	2800      	cmp	r0, #0
 80111de:	dbec      	blt.n	80111ba <__swhatbuf_r+0x12>
 80111e0:	9901      	ldr	r1, [sp, #4]
 80111e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80111e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80111ea:	4259      	negs	r1, r3
 80111ec:	4159      	adcs	r1, r3
 80111ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111f2:	e7eb      	b.n	80111cc <__swhatbuf_r+0x24>

080111f4 <__smakebuf_r>:
 80111f4:	898b      	ldrh	r3, [r1, #12]
 80111f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111f8:	079d      	lsls	r5, r3, #30
 80111fa:	4606      	mov	r6, r0
 80111fc:	460c      	mov	r4, r1
 80111fe:	d507      	bpl.n	8011210 <__smakebuf_r+0x1c>
 8011200:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011204:	6023      	str	r3, [r4, #0]
 8011206:	6123      	str	r3, [r4, #16]
 8011208:	2301      	movs	r3, #1
 801120a:	6163      	str	r3, [r4, #20]
 801120c:	b003      	add	sp, #12
 801120e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011210:	ab01      	add	r3, sp, #4
 8011212:	466a      	mov	r2, sp
 8011214:	f7ff ffc8 	bl	80111a8 <__swhatbuf_r>
 8011218:	9f00      	ldr	r7, [sp, #0]
 801121a:	4605      	mov	r5, r0
 801121c:	4639      	mov	r1, r7
 801121e:	4630      	mov	r0, r6
 8011220:	f7fe fe54 	bl	800fecc <_malloc_r>
 8011224:	b948      	cbnz	r0, 801123a <__smakebuf_r+0x46>
 8011226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801122a:	059a      	lsls	r2, r3, #22
 801122c:	d4ee      	bmi.n	801120c <__smakebuf_r+0x18>
 801122e:	f023 0303 	bic.w	r3, r3, #3
 8011232:	f043 0302 	orr.w	r3, r3, #2
 8011236:	81a3      	strh	r3, [r4, #12]
 8011238:	e7e2      	b.n	8011200 <__smakebuf_r+0xc>
 801123a:	89a3      	ldrh	r3, [r4, #12]
 801123c:	6020      	str	r0, [r4, #0]
 801123e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011242:	81a3      	strh	r3, [r4, #12]
 8011244:	9b01      	ldr	r3, [sp, #4]
 8011246:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801124a:	b15b      	cbz	r3, 8011264 <__smakebuf_r+0x70>
 801124c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011250:	4630      	mov	r0, r6
 8011252:	f000 f81d 	bl	8011290 <_isatty_r>
 8011256:	b128      	cbz	r0, 8011264 <__smakebuf_r+0x70>
 8011258:	89a3      	ldrh	r3, [r4, #12]
 801125a:	f023 0303 	bic.w	r3, r3, #3
 801125e:	f043 0301 	orr.w	r3, r3, #1
 8011262:	81a3      	strh	r3, [r4, #12]
 8011264:	89a3      	ldrh	r3, [r4, #12]
 8011266:	431d      	orrs	r5, r3
 8011268:	81a5      	strh	r5, [r4, #12]
 801126a:	e7cf      	b.n	801120c <__smakebuf_r+0x18>

0801126c <_fstat_r>:
 801126c:	b538      	push	{r3, r4, r5, lr}
 801126e:	4d07      	ldr	r5, [pc, #28]	@ (801128c <_fstat_r+0x20>)
 8011270:	2300      	movs	r3, #0
 8011272:	4604      	mov	r4, r0
 8011274:	4608      	mov	r0, r1
 8011276:	4611      	mov	r1, r2
 8011278:	602b      	str	r3, [r5, #0]
 801127a:	f7f1 fde2 	bl	8002e42 <_fstat>
 801127e:	1c43      	adds	r3, r0, #1
 8011280:	d102      	bne.n	8011288 <_fstat_r+0x1c>
 8011282:	682b      	ldr	r3, [r5, #0]
 8011284:	b103      	cbz	r3, 8011288 <_fstat_r+0x1c>
 8011286:	6023      	str	r3, [r4, #0]
 8011288:	bd38      	pop	{r3, r4, r5, pc}
 801128a:	bf00      	nop
 801128c:	200056b8 	.word	0x200056b8

08011290 <_isatty_r>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	4d06      	ldr	r5, [pc, #24]	@ (80112ac <_isatty_r+0x1c>)
 8011294:	2300      	movs	r3, #0
 8011296:	4604      	mov	r4, r0
 8011298:	4608      	mov	r0, r1
 801129a:	602b      	str	r3, [r5, #0]
 801129c:	f7f1 fde1 	bl	8002e62 <_isatty>
 80112a0:	1c43      	adds	r3, r0, #1
 80112a2:	d102      	bne.n	80112aa <_isatty_r+0x1a>
 80112a4:	682b      	ldr	r3, [r5, #0]
 80112a6:	b103      	cbz	r3, 80112aa <_isatty_r+0x1a>
 80112a8:	6023      	str	r3, [r4, #0]
 80112aa:	bd38      	pop	{r3, r4, r5, pc}
 80112ac:	200056b8 	.word	0x200056b8

080112b0 <_malloc_usable_size_r>:
 80112b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112b4:	1f18      	subs	r0, r3, #4
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	bfbc      	itt	lt
 80112ba:	580b      	ldrlt	r3, [r1, r0]
 80112bc:	18c0      	addlt	r0, r0, r3
 80112be:	4770      	bx	lr

080112c0 <_init>:
 80112c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c2:	bf00      	nop
 80112c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112c6:	bc08      	pop	{r3}
 80112c8:	469e      	mov	lr, r3
 80112ca:	4770      	bx	lr

080112cc <_fini>:
 80112cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ce:	bf00      	nop
 80112d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112d2:	bc08      	pop	{r3}
 80112d4:	469e      	mov	lr, r3
 80112d6:	4770      	bx	lr
