
STM32_CHORES_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  0800ac40  0800ac40  0000bc40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b31c  0800b31c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b31c  0800b31c  0000c31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b324  0800b324  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b324  0800b324  0000c324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b32c  0800b32c  0000c32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b330  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          000002f8  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015420  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032d4  00000000  00000000  00022624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  000258f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9a  00000000  00000000  00026938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024176  00000000  00000000  000275d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013028  00000000  00000000  0004b748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d25a6  00000000  00000000  0005e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130d16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c40  00000000  00000000  00130d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013699c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac24 	.word	0x0800ac24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ac24 	.word	0x0800ac24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_ZN3SCSC1Ev>:
#include "SCS.h"
#include <stdio.h>
#include <cstdint>
#include <stdint.h>

SCS::SCS()
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <_ZN3SCSC1Ev+0x28>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
{
	Level = 1; // All commands except broadcast commands return responses
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	711a      	strb	r2, [r3, #4]
	Error = 0;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	719a      	strb	r2, [r3, #6]
}
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	0800adc8 	.word	0x0800adc8

0800104c <_ZN3SCS8Host2SCSEPhS0_t>:
}

// Split a 16-bit number into two 8-bit numbers
// DataL is the low bit, DataH is the high bit
void SCS::Host2SCS(u8 *DataL, u8* DataH, u16 Data)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	807b      	strh	r3, [r7, #2]
	if(End){
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	795b      	ldrb	r3, [r3, #5]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00a      	beq.n	8001078 <_ZN3SCS8Host2SCSEPhS0_t+0x2c>
		*DataL = (Data>>8);
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	b29b      	uxth	r3, r3
 8001068:	b2da      	uxtb	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	701a      	strb	r2, [r3, #0]
		*DataH = (Data&0xff);
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	701a      	strb	r2, [r3, #0]
	}else{
		*DataH = (Data>>8);
		*DataL = (Data&0xff);
	}
}
 8001076:	e009      	b.n	800108c <_ZN3SCS8Host2SCSEPhS0_t+0x40>
		*DataH = (Data>>8);
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	b29b      	uxth	r3, r3
 800107e:	b2da      	uxtb	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	701a      	strb	r2, [r3, #0]
		*DataL = (Data&0xff);
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	701a      	strb	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_ZN3SCS8SCS2HostEhh>:

// 8-bit numbers are combined into a 16-bit number
// DataL is the low bit, DataH is the high bit
u16 SCS::SCS2Host(u8 DataL, u8 DataH)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
 80010a4:	4613      	mov	r3, r2
 80010a6:	70bb      	strb	r3, [r7, #2]
	u16 Data;
	if(End){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	795b      	ldrb	r3, [r3, #5]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00a      	beq.n	80010c6 <_ZN3SCS8SCS2HostEhh+0x2e>
		Data = DataL;
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	81fb      	strh	r3, [r7, #14]
		Data<<=8;
 80010b4:	89fb      	ldrh	r3, [r7, #14]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	81fb      	strh	r3, [r7, #14]
		Data |= DataH;
 80010ba:	78bb      	ldrb	r3, [r7, #2]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	81fb      	strh	r3, [r7, #14]
 80010c4:	e009      	b.n	80010da <_ZN3SCS8SCS2HostEhh+0x42>
	}else{
		Data = DataH;
 80010c6:	78bb      	ldrb	r3, [r7, #2]
 80010c8:	81fb      	strh	r3, [r7, #14]
		Data<<=8;
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	81fb      	strh	r3, [r7, #14]
		Data |= DataL;
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	81fb      	strh	r3, [r7, #14]
	}
	return Data;
 80010da:	89fb      	ldrh	r3, [r7, #14]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_ZN3SCS8writeBufEhhPhhh>:

void SCS::writeBuf(u8 ID, u8 MemAddr, u8 *nDat, u8 nLen, u8 Fun)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	72fb      	strb	r3, [r7, #11]
 80010f6:	4613      	mov	r3, r2
 80010f8:	72bb      	strb	r3, [r7, #10]
    u8 msgLen = 2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	76fb      	strb	r3, [r7, #27]
    u8 bBuf[6];
    u8 CheckSum = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    bBuf[0] = 0xFF;
 8001104:	23ff      	movs	r3, #255	@ 0xff
 8001106:	753b      	strb	r3, [r7, #20]
    bBuf[1] = 0xFF;
 8001108:	23ff      	movs	r3, #255	@ 0xff
 800110a:	757b      	strb	r3, [r7, #21]
    bBuf[2] = ID;
 800110c:	7afb      	ldrb	r3, [r7, #11]
 800110e:	75bb      	strb	r3, [r7, #22]
    bBuf[4] = Fun;
 8001110:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001114:	763b      	strb	r3, [r7, #24]

    if (nDat) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <_ZN3SCS8writeBufEhhPhhh+0x4c>
        msgLen += nLen + 1;
 800111c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001120:	7efb      	ldrb	r3, [r7, #27]
 8001122:	4413      	add	r3, r2
 8001124:	b2db      	uxtb	r3, r3
 8001126:	3301      	adds	r3, #1
 8001128:	76fb      	strb	r3, [r7, #27]
        bBuf[3] = msgLen;
 800112a:	7efb      	ldrb	r3, [r7, #27]
 800112c:	75fb      	strb	r3, [r7, #23]
        bBuf[5] = MemAddr;
 800112e:	7abb      	ldrb	r3, [r7, #10]
 8001130:	767b      	strb	r3, [r7, #25]
 8001132:	e001      	b.n	8001138 <_ZN3SCS8writeBufEhhPhhh+0x50>
    } else {
        bBuf[3] = msgLen;
 8001134:	7efb      	ldrb	r3, [r7, #27]
 8001136:	75fb      	strb	r3, [r7, #23]
    }

    // ✅ 디버깅: 전체 TX 패킷 출력
    printf("[writeBuf] TX: ");
 8001138:	483c      	ldr	r0, [pc, #240]	@ (800122c <_ZN3SCS8writeBufEhhPhhh+0x144>)
 800113a:	f005 fc35 	bl	80069a8 <iprintf>
    for (int i = 0; i < (nDat ? 6 : 5); i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
 8001142:	e00b      	b.n	800115c <_ZN3SCS8writeBufEhhPhhh+0x74>
        printf("%02X ", bBuf[i]);
 8001144:	f107 0214 	add.w	r2, r7, #20
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	4413      	add	r3, r2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	4837      	ldr	r0, [pc, #220]	@ (8001230 <_ZN3SCS8writeBufEhhPhhh+0x148>)
 8001152:	f005 fc29 	bl	80069a8 <iprintf>
    for (int i = 0; i < (nDat ? 6 : 5); i++) {
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	3301      	adds	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <_ZN3SCS8writeBufEhhPhhh+0x7e>
 8001162:	2206      	movs	r2, #6
 8001164:	e000      	b.n	8001168 <_ZN3SCS8writeBufEhhPhhh+0x80>
 8001166:	2205      	movs	r2, #5
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	429a      	cmp	r2, r3
 800116c:	dcea      	bgt.n	8001144 <_ZN3SCS8writeBufEhhPhhh+0x5c>
    }

    CheckSum = ID + bBuf[3] + Fun + MemAddr;
 800116e:	7dfa      	ldrb	r2, [r7, #23]
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	4413      	add	r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800117a:	4413      	add	r3, r2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	4413      	add	r3, r2
 8001182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (nDat) {
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d01b      	beq.n	80011c4 <_ZN3SCS8writeBufEhhPhhh+0xdc>
        for (int i = 0; i < nLen; i++) {
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	e013      	b.n	80011ba <_ZN3SCS8writeBufEhhPhhh+0xd2>
            CheckSum += nDat[i];
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800119e:	4413      	add	r3, r2
 80011a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            printf("%02X ", nDat[i]);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4820      	ldr	r0, [pc, #128]	@ (8001230 <_ZN3SCS8writeBufEhhPhhh+0x148>)
 80011b0:	f005 fbfa 	bl	80069a8 <iprintf>
        for (int i = 0; i < nLen; i++) {
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3301      	adds	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbe6      	blt.n	8001192 <_ZN3SCS8writeBufEhhPhhh+0xaa>
        }
    }

    printf("%02X\r\n", (uint8_t)(~CheckSum));  // 체크섬도 출력
 80011c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011c8:	43db      	mvns	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4619      	mov	r1, r3
 80011ce:	4819      	ldr	r0, [pc, #100]	@ (8001234 <_ZN3SCS8writeBufEhhPhhh+0x14c>)
 80011d0:	f005 fbea 	bl	80069a8 <iprintf>

    // 실제 전송
    if (nDat) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d010      	beq.n	80011fc <_ZN3SCS8writeBufEhhPhhh+0x114>
        writeSCS(bBuf, 6);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f107 0114 	add.w	r1, r7, #20
 80011e4:	2206      	movs	r2, #6
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	4798      	blx	r3
        writeSCS(nDat, nLen);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	4798      	blx	r3
 80011fa:	e007      	b.n	800120c <_ZN3SCS8writeBufEhhPhhh+0x124>
    } else {
        writeSCS(bBuf, 5);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f107 0114 	add.w	r1, r7, #20
 8001206:	2205      	movs	r2, #5
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	4798      	blx	r3
    }
    writeSCS((uint8_t)(~CheckSum));
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3308      	adds	r3, #8
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001218:	43d2      	mvns	r2, r2
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	4611      	mov	r1, r2
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	4798      	blx	r3
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	@ 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	0800ac40 	.word	0x0800ac40
 8001230:	0800ac50 	.word	0x0800ac50
 8001234:	0800ac58 	.word	0x0800ac58

08001238 <_ZN3SCS8genWriteEhhPhh>:

// Normal write command
// Servo ID, MemAddr memory table address, write data, write length
int SCS::genWrite(u8 ID, u8 MemAddr, u8 *nDat, u8 nLen)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	72fb      	strb	r3, [r7, #11]
 8001246:	4613      	mov	r3, r2
 8001248:	72bb      	strb	r3, [r7, #10]
	printf("[genWrite] ID: %d, Addr: %02x, Len: %d\r\n", ID, MemAddr, nLen);
 800124a:	7af9      	ldrb	r1, [r7, #11]
 800124c:	7aba      	ldrb	r2, [r7, #10]
 800124e:	7e3b      	ldrb	r3, [r7, #24]
 8001250:	4811      	ldr	r0, [pc, #68]	@ (8001298 <_ZN3SCS8genWriteEhhPhh+0x60>)
 8001252:	f005 fba9 	bl	80069a8 <iprintf>

	rFlushSCS();
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	330c      	adds	r3, #12
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	4798      	blx	r3
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 8001262:	7aba      	ldrb	r2, [r7, #10]
 8001264:	7af9      	ldrb	r1, [r7, #11]
 8001266:	2303      	movs	r3, #3
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	7e3b      	ldrb	r3, [r7, #24]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff ff39 	bl	80010e8 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3310      	adds	r3, #16
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	4798      	blx	r3
	return Ack(ID);
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	4619      	mov	r1, r3
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f9fc 	bl	8001684 <_ZN3SCS3AckEh>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	0800ac60 	.word	0x0800ac60

0800129c <_ZN3SCS8regWriteEhhPhh>:

// Asynchronous write command
// Servo ID, MemAddr memory table address, write data, write length
int SCS::regWrite(u8 ID, u8 MemAddr, u8 *nDat, u8 nLen)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	72fb      	strb	r3, [r7, #11]
 80012aa:	4613      	mov	r3, r2
 80012ac:	72bb      	strb	r3, [r7, #10]
	rFlushSCS();
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	330c      	adds	r3, #12
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	4798      	blx	r3
	writeBuf(ID, MemAddr, nDat, nLen, INST_REG_WRITE);
 80012ba:	7aba      	ldrb	r2, [r7, #10]
 80012bc:	7af9      	ldrb	r1, [r7, #11]
 80012be:	2304      	movs	r3, #4
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	7e3b      	ldrb	r3, [r7, #24]
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff ff0d 	bl	80010e8 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3310      	adds	r3, #16
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	4798      	blx	r3
	return Ack(ID);
 80012da:	7afb      	ldrb	r3, [r7, #11]
 80012dc:	4619      	mov	r1, r3
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f9d0 	bl	8001684 <_ZN3SCS3AckEh>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_ZN3SCS9syncWriteEPhhhS0_h>:
}

// Synchronous write command
// Servo ID[] array, IDN array length, MemAddr memory table address, write data, write length
void SCS::syncWrite(u8 ID[], u8 IDN, u8 MemAddr, u8 *nDat, u8 nLen)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b088      	sub	sp, #32
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	4611      	mov	r1, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	460b      	mov	r3, r1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	4613      	mov	r3, r2
 8001302:	71bb      	strb	r3, [r7, #6]
	rFlushSCS();
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	330c      	adds	r3, #12
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	4798      	blx	r3
	u8 mesLen = ((nLen+1)*IDN+4);
 8001310:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001314:	3301      	adds	r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	79fa      	ldrb	r2, [r7, #7]
 800131a:	fb12 f303 	smulbb	r3, r2, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	3304      	adds	r3, #4
 8001322:	773b      	strb	r3, [r7, #28]
	u8 Sum = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	77fb      	strb	r3, [r7, #31]
	u8 bBuf[7];
	bBuf[0] = 0xff;
 8001328:	23ff      	movs	r3, #255	@ 0xff
 800132a:	753b      	strb	r3, [r7, #20]
	bBuf[1] = 0xff;
 800132c:	23ff      	movs	r3, #255	@ 0xff
 800132e:	757b      	strb	r3, [r7, #21]
	bBuf[2] = 0xfe;
 8001330:	23fe      	movs	r3, #254	@ 0xfe
 8001332:	75bb      	strb	r3, [r7, #22]
	bBuf[3] = mesLen;
 8001334:	7f3b      	ldrb	r3, [r7, #28]
 8001336:	75fb      	strb	r3, [r7, #23]
	bBuf[4] = INST_SYNC_WRITE;
 8001338:	2383      	movs	r3, #131	@ 0x83
 800133a:	763b      	strb	r3, [r7, #24]
	bBuf[5] = MemAddr;
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	767b      	strb	r3, [r7, #25]
	bBuf[6] = nLen;
 8001340:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001344:	76bb      	strb	r3, [r7, #26]
	writeSCS(bBuf, 7);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f107 0114 	add.w	r1, r7, #20
 8001350:	2207      	movs	r2, #7
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	4798      	blx	r3

	Sum = 0xfe + mesLen + INST_SYNC_WRITE + MemAddr + nLen;
 8001356:	7f3a      	ldrb	r2, [r7, #28]
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	4413      	add	r3, r2
 800135c:	b2da      	uxtb	r2, r3
 800135e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001362:	4413      	add	r3, r2
 8001364:	b2db      	uxtb	r3, r3
 8001366:	3b7f      	subs	r3, #127	@ 0x7f
 8001368:	77fb      	strb	r3, [r7, #31]
	u8 i, j;
	for(i=0; i<IDN; i++){
 800136a:	2300      	movs	r3, #0
 800136c:	77bb      	strb	r3, [r7, #30]
 800136e:	e03c      	b.n	80013ea <_ZN3SCS9syncWriteEPhhhS0_h+0xfc>
		writeSCS(ID[i]);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3308      	adds	r3, #8
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	7fba      	ldrb	r2, [r7, #30]
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	440a      	add	r2, r1
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	4611      	mov	r1, r2
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	4798      	blx	r3
		writeSCS(nDat+i*nLen, nLen);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	7fba      	ldrb	r2, [r7, #30]
 800138e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001392:	fb01 f202 	mul.w	r2, r1, r2
 8001396:	4611      	mov	r1, r2
 8001398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800139a:	4411      	add	r1, r2
 800139c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	4798      	blx	r3
		Sum += ID[i];
 80013a4:	7fbb      	ldrb	r3, [r7, #30]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	7ffb      	ldrb	r3, [r7, #31]
 80013ae:	4413      	add	r3, r2
 80013b0:	77fb      	strb	r3, [r7, #31]
		for(j=0; j<nLen; j++){
 80013b2:	2300      	movs	r3, #0
 80013b4:	777b      	strb	r3, [r7, #29]
 80013b6:	e010      	b.n	80013da <_ZN3SCS9syncWriteEPhhhS0_h+0xec>
			Sum += nDat[i*nLen+j];
 80013b8:	7fbb      	ldrb	r3, [r7, #30]
 80013ba:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80013be:	fb03 f202 	mul.w	r2, r3, r2
 80013c2:	7f7b      	ldrb	r3, [r7, #29]
 80013c4:	4413      	add	r3, r2
 80013c6:	461a      	mov	r2, r3
 80013c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ca:	4413      	add	r3, r2
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	4413      	add	r3, r2
 80013d2:	77fb      	strb	r3, [r7, #31]
		for(j=0; j<nLen; j++){
 80013d4:	7f7b      	ldrb	r3, [r7, #29]
 80013d6:	3301      	adds	r3, #1
 80013d8:	777b      	strb	r3, [r7, #29]
 80013da:	7f7a      	ldrb	r2, [r7, #29]
 80013dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3e9      	bcc.n	80013b8 <_ZN3SCS9syncWriteEPhhhS0_h+0xca>
	for(i=0; i<IDN; i++){
 80013e4:	7fbb      	ldrb	r3, [r7, #30]
 80013e6:	3301      	adds	r3, #1
 80013e8:	77bb      	strb	r3, [r7, #30]
 80013ea:	7fba      	ldrb	r2, [r7, #30]
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d3be      	bcc.n	8001370 <_ZN3SCS9syncWriteEPhhhS0_h+0x82>
		}
	}
	writeSCS(~Sum);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3308      	adds	r3, #8
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	7ffa      	ldrb	r2, [r7, #31]
 80013fc:	43d2      	mvns	r2, r2
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	4611      	mov	r1, r2
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	4798      	blx	r3
	wFlushSCS();
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3310      	adds	r3, #16
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	4798      	blx	r3
}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZN3SCS9writeByteEhhh>:

int SCS::writeByte(u8 ID, u8 MemAddr, u8 bDat)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af02      	add	r7, sp, #8
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	4608      	mov	r0, r1
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	4603      	mov	r3, r0
 800142a:	70fb      	strb	r3, [r7, #3]
 800142c:	460b      	mov	r3, r1
 800142e:	70bb      	strb	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
	rFlushSCS();
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	330c      	adds	r3, #12
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
	writeBuf(ID, MemAddr, &bDat, 1, INST_WRITE);
 8001440:	1c7b      	adds	r3, r7, #1
 8001442:	78ba      	ldrb	r2, [r7, #2]
 8001444:	78f9      	ldrb	r1, [r7, #3]
 8001446:	2003      	movs	r0, #3
 8001448:	9001      	str	r0, [sp, #4]
 800144a:	2001      	movs	r0, #1
 800144c:	9000      	str	r0, [sp, #0]
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fe4a 	bl	80010e8 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3310      	adds	r3, #16
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
	return Ack(ID);
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f90d 	bl	8001684 <_ZN3SCS3AckEh>
 800146a:	4603      	mov	r3, r0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN3SCS4ReadEhhPhh>:
}

// Read command
// Servo ID, MemAddr memory table address, return data nData, data length nLen
int SCS::Read(u8 ID, u8 MemAddr, u8 *nData, u8 nLen)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b08b      	sub	sp, #44	@ 0x2c
 8001478:	af02      	add	r7, sp, #8
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	72fb      	strb	r3, [r7, #11]
 8001482:	4613      	mov	r3, r2
 8001484:	72bb      	strb	r3, [r7, #10]
	rFlushSCS();
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	330c      	adds	r3, #12
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	4798      	blx	r3
	writeBuf(ID, MemAddr, &nLen, 1, INST_READ);
 8001492:	7aba      	ldrb	r2, [r7, #10]
 8001494:	7af9      	ldrb	r1, [r7, #11]
 8001496:	2302      	movs	r3, #2
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	2301      	movs	r3, #1
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff fe20 	bl	80010e8 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3310      	adds	r3, #16
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	4798      	blx	r3
	if(!checkHead()){
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 f8b2 	bl	800161e <_ZN3SCS9checkHeadEv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <_ZN3SCS4ReadEhhPhh+0x5a>
		return 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e061      	b.n	8001592 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	u8 bBuf[4];
	Error = 0;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	719a      	strb	r2, [r3, #6]
	if(readSCS(bBuf, 3)!=3){
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3304      	adds	r3, #4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f107 0114 	add.w	r1, r7, #20
 80014e0:	2203      	movs	r2, #3
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	4798      	blx	r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <_ZN3SCS4ReadEhhPhh+0x86>
		return 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e04b      	b.n	8001592 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	int Size = readSCS(nData, nLen);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3304      	adds	r3, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	4798      	blx	r3
 800150c:	61b8      	str	r0, [r7, #24]
	if(Size!=nLen){
 800150e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001512:	461a      	mov	r2, r3
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	4293      	cmp	r3, r2
 8001518:	d001      	beq.n	800151e <_ZN3SCS4ReadEhhPhh+0xaa>
		return 0;
 800151a:	2300      	movs	r3, #0
 800151c:	e039      	b.n	8001592 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	if(readSCS(bBuf+3, 1)!=1){
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3304      	adds	r3, #4
 8001524:	681c      	ldr	r4, [r3, #0]
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	3303      	adds	r3, #3
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	47a0      	blx	r4
 8001534:	4603      	mov	r3, r0
 8001536:	2b01      	cmp	r3, #1
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <_ZN3SCS4ReadEhhPhh+0xd4>
		return 0;
 8001544:	2300      	movs	r3, #0
 8001546:	e024      	b.n	8001592 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	u8 calSum = bBuf[0]+bBuf[1]+bBuf[2];
 8001548:	7d3a      	ldrb	r2, [r7, #20]
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	4413      	add	r3, r2
 800154e:	b2da      	uxtb	r2, r3
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	4413      	add	r3, r2
 8001554:	77fb      	strb	r3, [r7, #31]
	u8 i;
	for(i=0; i<Size; i++){
 8001556:	2300      	movs	r3, #0
 8001558:	77bb      	strb	r3, [r7, #30]
 800155a:	e009      	b.n	8001570 <_ZN3SCS4ReadEhhPhh+0xfc>
		calSum += nData[i];
 800155c:	7fbb      	ldrb	r3, [r7, #30]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	7ffb      	ldrb	r3, [r7, #31]
 8001566:	4413      	add	r3, r2
 8001568:	77fb      	strb	r3, [r7, #31]
	for(i=0; i<Size; i++){
 800156a:	7fbb      	ldrb	r3, [r7, #30]
 800156c:	3301      	adds	r3, #1
 800156e:	77bb      	strb	r3, [r7, #30]
 8001570:	7fbb      	ldrb	r3, [r7, #30]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	429a      	cmp	r2, r3
 8001576:	dcf1      	bgt.n	800155c <_ZN3SCS4ReadEhhPhh+0xe8>
	}
	calSum = ~calSum;
 8001578:	7ffb      	ldrb	r3, [r7, #31]
 800157a:	43db      	mvns	r3, r3
 800157c:	77fb      	strb	r3, [r7, #31]
	if(calSum!=bBuf[3]){
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	7ffa      	ldrb	r2, [r7, #31]
 8001582:	429a      	cmp	r2, r3
 8001584:	d001      	beq.n	800158a <_ZN3SCS4ReadEhhPhh+0x116>
		return 0;
 8001586:	2300      	movs	r3, #0
 8001588:	e003      	b.n	8001592 <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	Error = bBuf[2];
 800158a:	7dba      	ldrb	r2, [r7, #22]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	719a      	strb	r2, [r3, #6]
	return Size;
 8001590:	69bb      	ldr	r3, [r7, #24]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}

0800159a <_ZN3SCS8readByteEhh>:

// Read 1 byte, return -1 if timeout
int SCS::readByte(u8 ID, u8 MemAddr)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af02      	add	r7, sp, #8
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
 80015a6:	4613      	mov	r3, r2
 80015a8:	70bb      	strb	r3, [r7, #2]
	u8 bDat;
	int Size = Read(ID, MemAddr, &bDat, 1);
 80015aa:	f107 030b 	add.w	r3, r7, #11
 80015ae:	78ba      	ldrb	r2, [r7, #2]
 80015b0:	78f9      	ldrb	r1, [r7, #3]
 80015b2:	2001      	movs	r0, #1
 80015b4:	9000      	str	r0, [sp, #0]
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff5c 	bl	8001474 <_ZN3SCS4ReadEhhPhh>
 80015bc:	60f8      	str	r0, [r7, #12]
	if(Size!=1){
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d002      	beq.n	80015ca <_ZN3SCS8readByteEhh+0x30>
		return -1;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	e000      	b.n	80015cc <_ZN3SCS8readByteEhh+0x32>
	}else{
		return bDat;
 80015ca:	7afb      	ldrb	r3, [r7, #11]
	}
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZN3SCS8readWordEhh>:

// Read 2 bytes, return -1 if timeout
int SCS::readWord(u8 ID, u8 MemAddr)
{	
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
 80015e0:	4613      	mov	r3, r2
 80015e2:	70bb      	strb	r3, [r7, #2]
	u8 nDat[2];
	int Size;
	u16 wDat;
	Size = Read(ID, MemAddr, nDat, 2);
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	78ba      	ldrb	r2, [r7, #2]
 80015ea:	78f9      	ldrb	r1, [r7, #3]
 80015ec:	2002      	movs	r0, #2
 80015ee:	9000      	str	r0, [sp, #0]
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff3f 	bl	8001474 <_ZN3SCS4ReadEhhPhh>
 80015f6:	60f8      	str	r0, [r7, #12]
	if(Size!=2)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d002      	beq.n	8001604 <_ZN3SCS8readWordEhh+0x30>
		return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e008      	b.n	8001616 <_ZN3SCS8readWordEhh+0x42>
	wDat = SCS2Host(nDat[0], nDat[1]);
 8001604:	7a3b      	ldrb	r3, [r7, #8]
 8001606:	7a7a      	ldrb	r2, [r7, #9]
 8001608:	4619      	mov	r1, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fd44 	bl	8001098 <_ZN3SCS8SCS2HostEhh>
 8001610:	4603      	mov	r3, r0
 8001612:	817b      	strh	r3, [r7, #10]
	return wDat;
 8001614:	897b      	ldrh	r3, [r7, #10]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_ZN3SCS9checkHeadEv>:
	Error = bBuf[2];
	return bBuf[0];
}

int SCS::checkHead()
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
	u8 bDat;
	u8 bBuf[2] = {0, 0};
 8001626:	2300      	movs	r3, #0
 8001628:	81bb      	strh	r3, [r7, #12]
	u8 Cnt = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
	while(1){
		if(!readSCS(&bDat, 1)){
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3304      	adds	r3, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f107 010e 	add.w	r1, r7, #14
 800163a:	2201      	movs	r2, #1
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	4798      	blx	r3
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf0c      	ite	eq
 8001646:	2301      	moveq	r3, #1
 8001648:	2300      	movne	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <_ZN3SCS9checkHeadEv+0x36>
			return 0;
 8001650:	2300      	movs	r3, #0
 8001652:	e013      	b.n	800167c <_ZN3SCS9checkHeadEv+0x5e>
		}
		bBuf[1] = bBuf[0];
 8001654:	7b3b      	ldrb	r3, [r7, #12]
 8001656:	737b      	strb	r3, [r7, #13]
		bBuf[0] = bDat;
 8001658:	7bbb      	ldrb	r3, [r7, #14]
 800165a:	733b      	strb	r3, [r7, #12]
		if(bBuf[0]==0xff && bBuf[1]==0xff){
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	2bff      	cmp	r3, #255	@ 0xff
 8001660:	d102      	bne.n	8001668 <_ZN3SCS9checkHeadEv+0x4a>
 8001662:	7b7b      	ldrb	r3, [r7, #13]
 8001664:	2bff      	cmp	r3, #255	@ 0xff
 8001666:	d007      	beq.n	8001678 <_ZN3SCS9checkHeadEv+0x5a>
			break;
		}
		Cnt++;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	3301      	adds	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
		if(Cnt>10){
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	2b0a      	cmp	r3, #10
 8001672:	d9dc      	bls.n	800162e <_ZN3SCS9checkHeadEv+0x10>
			return 0;
 8001674:	2300      	movs	r3, #0
 8001676:	e001      	b.n	800167c <_ZN3SCS9checkHeadEv+0x5e>
			break;
 8001678:	bf00      	nop
		}
	}
	return 1;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_ZN3SCS3AckEh>:

int	SCS::Ack(u8 ID)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
	Error = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	719a      	strb	r2, [r3, #6]
	if(ID!=0xfe && Level){
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	2bfe      	cmp	r3, #254	@ 0xfe
 800169a:	d040      	beq.n	800171e <_ZN3SCS3AckEh+0x9a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d03c      	beq.n	800171e <_ZN3SCS3AckEh+0x9a>
		if(!checkHead()){
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffba 	bl	800161e <_ZN3SCS9checkHeadEv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <_ZN3SCS3AckEh+0x3a>
			return 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e030      	b.n	8001720 <_ZN3SCS3AckEh+0x9c>
		}
		u8 bBuf[4];
		if(readSCS(bBuf, 4)!=4){
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f107 0108 	add.w	r1, r7, #8
 80016ca:	2204      	movs	r2, #4
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf14      	ite	ne
 80016d6:	2301      	movne	r3, #1
 80016d8:	2300      	moveq	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <_ZN3SCS3AckEh+0x60>
			return 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e01d      	b.n	8001720 <_ZN3SCS3AckEh+0x9c>
		}
		if(bBuf[0]!=ID){
 80016e4:	7a3b      	ldrb	r3, [r7, #8]
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <_ZN3SCS3AckEh+0x6c>
			return 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e017      	b.n	8001720 <_ZN3SCS3AckEh+0x9c>
		}
		if(bBuf[1]!=2){
 80016f0:	7a7b      	ldrb	r3, [r7, #9]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d001      	beq.n	80016fa <_ZN3SCS3AckEh+0x76>
			return 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e012      	b.n	8001720 <_ZN3SCS3AckEh+0x9c>
		}
		u8 calSum = ~(bBuf[0]+bBuf[1]+bBuf[2]);
 80016fa:	7a3a      	ldrb	r2, [r7, #8]
 80016fc:	7a7b      	ldrb	r3, [r7, #9]
 80016fe:	4413      	add	r3, r2
 8001700:	b2da      	uxtb	r2, r3
 8001702:	7abb      	ldrb	r3, [r7, #10]
 8001704:	4413      	add	r3, r2
 8001706:	b2db      	uxtb	r3, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	73fb      	strb	r3, [r7, #15]
		if(calSum!=bBuf[3]){
 800170c:	7afb      	ldrb	r3, [r7, #11]
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <_ZN3SCS3AckEh+0x94>
			return 0;			
 8001714:	2300      	movs	r3, #0
 8001716:	e003      	b.n	8001720 <_ZN3SCS3AckEh+0x9c>
		}
		Error = bBuf[2];
 8001718:	7aba      	ldrb	r2, [r7, #10]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	719a      	strb	r2, [r3, #6]
	}
	return 1;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZN8SCSerial6getErrEv>:
public:
	unsigned long int IOTimeOut; // Input and output timeout
	UART_HandleTypeDef *pUart; // Serial port pointer
	int Err;
public:
	virtual int getErr(){  return Err;  }
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_ZN8SCSerialC1Ev>:
#include "SCSerial.h"

SCSerial::SCSerial(): SCS()
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fc68 	bl	8001020 <_ZN3SCSC1Ev>
 8001750:	4a06      	ldr	r2, [pc, #24]	@ (800176c <_ZN8SCSerialC1Ev+0x2c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	601a      	str	r2, [r3, #0]
{
	IOTimeOut = 100;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2264      	movs	r2, #100	@ 0x64
 800175a:	611a      	str	r2, [r3, #16]
	pUart = nullptr;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
}
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	0800ade4 	.word	0x0800ade4

08001770 <_ZN8SCSerial5beginEP20__UART_HandleTypeDef>:
	IOTimeOut = 100;
	pUart = nullptr;
}

void SCSerial::begin(UART_HandleTypeDef *huart)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	pUart = huart;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	615a      	str	r2, [r3, #20]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_ZN8SCSerial7readSCSEPhi>:

int SCSerial::readSCS(unsigned char *nDat, int nLen)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
	uint32_t startTick = HAL_GetTick();
 8001798:	f001 fb36 	bl	8002e08 <HAL_GetTick>
 800179c:	61b8      	str	r0, [r7, #24]
	int received = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]

	while ((HAL_GetTick() - startTick) < IOTimeOut) {
 80017a2:	e01e      	b.n	80017e2 <_ZN8SCSerial7readSCSEPhi+0x56>
		uint8_t byte;
		if (HAL_UART_Receive(pUart, &byte, 1, 1) == HAL_OK) {
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6958      	ldr	r0, [r3, #20]
 80017a8:	f107 0117 	add.w	r1, r7, #23
 80017ac:	2301      	movs	r3, #1
 80017ae:	2201      	movs	r2, #1
 80017b0:	f003 f972 	bl	8004a98 <HAL_UART_Receive>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf0c      	ite	eq
 80017ba:	2301      	moveq	r3, #1
 80017bc:	2300      	movne	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <_ZN8SCSerial7readSCSEPhi+0x56>
			if (nDat) nDat[received] = byte;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d004      	beq.n	80017d4 <_ZN8SCSerial7readSCSEPhi+0x48>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	4413      	add	r3, r2
 80017d0:	7dfa      	ldrb	r2, [r7, #23]
 80017d2:	701a      	strb	r2, [r3, #0]
			received++;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
			if (received >= nLen) break;
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	429a      	cmp	r2, r3
 80017e0:	da0e      	bge.n	8001800 <_ZN8SCSerial7readSCSEPhi+0x74>
	while ((HAL_GetTick() - startTick) < IOTimeOut) {
 80017e2:	f001 fb11 	bl	8002e08 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1ad2      	subs	r2, r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	bf34      	ite	cc
 80017f4:	2301      	movcc	r3, #1
 80017f6:	2300      	movcs	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1d2      	bne.n	80017a4 <_ZN8SCSerial7readSCSEPhi+0x18>
 80017fe:	e000      	b.n	8001802 <_ZN8SCSerial7readSCSEPhi+0x76>
			if (received >= nLen) break;
 8001800:	bf00      	nop
		}
	}

	return received;
 8001802:	69fb      	ldr	r3, [r7, #28]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_ZN8SCSerial8writeSCSEPhi>:

int SCSerial::writeSCS(unsigned char *nDat, int nLen)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
	if (pUart == nullptr || nDat == nullptr) return 0;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <_ZN8SCSerial8writeSCSEPhi+0x1a>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <_ZN8SCSerial8writeSCSEPhi+0x1e>
 8001826:	2300      	movs	r3, #0
 8001828:	e009      	b.n	800183e <_ZN8SCSerial8writeSCSEPhi+0x32>
	HAL_UART_Transmit(pUart, nDat, nLen, HAL_MAX_DELAY);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6958      	ldr	r0, [r3, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	b29a      	uxth	r2, r3
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	f003 f8a3 	bl	8004982 <HAL_UART_Transmit>
	return nLen;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_ZN8SCSerial8writeSCSEh>:

int SCSerial::writeSCS(unsigned char bDat)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	70fb      	strb	r3, [r7, #3]
	if (pUart == nullptr) return 0;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <_ZN8SCSerial8writeSCSEh+0x18>
 800185a:	2300      	movs	r3, #0
 800185c:	e00e      	b.n	800187c <_ZN8SCSerial8writeSCSEh+0x36>
	return HAL_UART_Transmit(pUart, &bDat, 1, HAL_MAX_DELAY) == HAL_OK ? 1 : 0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6958      	ldr	r0, [r3, #20]
 8001862:	1cf9      	adds	r1, r7, #3
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	2201      	movs	r2, #1
 800186a:	f003 f88a 	bl	8004982 <HAL_UART_Transmit>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <_ZN8SCSerial8writeSCSEh+0x32>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <_ZN8SCSerial8writeSCSEh+0x34>
 8001878:	2300      	movs	r3, #0
 800187a:	bf00      	nop
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_ZN8SCSerial9rFlushSCSEv>:

void SCSerial::rFlushSCS()
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(pUart); // 수신 버퍼 플러시
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_ZN8SCSerial9wFlushSCSEv>:

void SCSerial::wFlushSCS()
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	// STM32 HAL은 전송 대기 없음
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_ZN7SMS_STSC1Ev>:
 */

#include "SMS_STS.h"
#include <cstdio>

SMS_STS::SMS_STS()
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff3e 	bl	8001740 <_ZN8SCSerialC1Ev>
 80018c4:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <_ZN7SMS_STSC1Ev+0x28>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	601a      	str	r2, [r3, #0]
{
	End = 0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	715a      	strb	r2, [r3, #5]
}
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	0800ae04 	.word	0x0800ae04

080018e0 <_ZN7SMS_STS10WritePosExEhsth>:
SMS_STS::SMS_STS(u8 End, u8 Level):SCSerial(End, Level)
{
}

int SMS_STS::WritePosEx(u8 ID, s16 Position, u16 Speed, u8 ACC)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	72fb      	strb	r3, [r7, #11]
 80018f2:	460b      	mov	r3, r1
 80018f4:	813b      	strh	r3, [r7, #8]
 80018f6:	4613      	mov	r3, r2
 80018f8:	80fb      	strh	r3, [r7, #6]
	if(Position<0){
 80018fa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da09      	bge.n	8001916 <_ZN7SMS_STS10WritePosExEhsth+0x36>
		Position = -Position;
 8001902:	893b      	ldrh	r3, [r7, #8]
 8001904:	425b      	negs	r3, r3
 8001906:	b29b      	uxth	r3, r3
 8001908:	813b      	strh	r3, [r7, #8]
		Position |= (1<<15);
 800190a:	893b      	ldrh	r3, [r7, #8]
 800190c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001914:	813b      	strh	r3, [r7, #8]
	}
	u8 bBuf[7];
	bBuf[0] = ACC;
 8001916:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800191a:	753b      	strb	r3, [r7, #20]
	Host2SCS(bBuf+1, bBuf+2, Position);
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f107 0114 	add.w	r1, r7, #20
 8001922:	3101      	adds	r1, #1
 8001924:	f107 0214 	add.w	r2, r7, #20
 8001928:	3202      	adds	r2, #2
 800192a:	893b      	ldrh	r3, [r7, #8]
 800192c:	f7ff fb8e 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+3, bBuf+4, 0);
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f107 0114 	add.w	r1, r7, #20
 8001936:	3103      	adds	r1, #3
 8001938:	f107 0214 	add.w	r2, r7, #20
 800193c:	3204      	adds	r2, #4
 800193e:	2300      	movs	r3, #0
 8001940:	f7ff fb84 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+5, bBuf+6, Speed);
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f107 0114 	add.w	r1, r7, #20
 800194a:	3105      	adds	r1, #5
 800194c:	f107 0214 	add.w	r2, r7, #20
 8001950:	3206      	adds	r2, #6
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	f7ff fb7a 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
	
	// 🟨 디버깅용 출력 추가
	printf("TX Buf: ");
 8001958:	4818      	ldr	r0, [pc, #96]	@ (80019bc <_ZN7SMS_STS10WritePosExEhsth+0xdc>)
 800195a:	f005 f825 	bl	80069a8 <iprintf>
	for (int i = 0; i < 7; i++) {
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e00b      	b.n	800197c <_ZN7SMS_STS10WritePosExEhsth+0x9c>
	    printf("%02X ", bBuf[i]);
 8001964:	f107 0214 	add.w	r2, r7, #20
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	4813      	ldr	r0, [pc, #76]	@ (80019c0 <_ZN7SMS_STS10WritePosExEhsth+0xe0>)
 8001972:	f005 f819 	bl	80069a8 <iprintf>
	for (int i = 0; i < 7; i++) {
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b06      	cmp	r3, #6
 8001980:	ddf0      	ble.n	8001964 <_ZN7SMS_STS10WritePosExEhsth+0x84>
	}
	printf("\r\n");
 8001982:	4810      	ldr	r0, [pc, #64]	@ (80019c4 <_ZN7SMS_STS10WritePosExEhsth+0xe4>)
 8001984:	f005 f878 	bl	8006a78 <puts>

	printf("[WritePosEx] ID: %d, Pos: %d, Speed: %d, ACC: %d\r\n", ID, Position, Speed, ACC);
 8001988:	7af9      	ldrb	r1, [r7, #11]
 800198a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800198e:	88f8      	ldrh	r0, [r7, #6]
 8001990:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	4603      	mov	r3, r0
 8001998:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <_ZN7SMS_STS10WritePosExEhsth+0xe8>)
 800199a:	f005 f805 	bl	80069a8 <iprintf>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	7af9      	ldrb	r1, [r7, #11]
 80019a6:	2207      	movs	r2, #7
 80019a8:	9200      	str	r2, [sp, #0]
 80019aa:	2229      	movs	r2, #41	@ 0x29
 80019ac:	f7ff fc44 	bl	8001238 <_ZN3SCS8genWriteEhhPhh>
 80019b0:	4603      	mov	r3, r0


}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	0800ac8c 	.word	0x0800ac8c
 80019c0:	0800ac98 	.word	0x0800ac98
 80019c4:	0800aca0 	.word	0x0800aca0
 80019c8:	0800aca4 	.word	0x0800aca4

080019cc <_ZN7SMS_STS13RegWritePosExEhsth>:

int SMS_STS::RegWritePosEx(u8 ID, s16 Position, u16 Speed, u8 ACC)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	72fb      	strb	r3, [r7, #11]
 80019de:	460b      	mov	r3, r1
 80019e0:	813b      	strh	r3, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
	if(Position<0){
 80019e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da09      	bge.n	8001a02 <_ZN7SMS_STS13RegWritePosExEhsth+0x36>
		Position = -Position;
 80019ee:	893b      	ldrh	r3, [r7, #8]
 80019f0:	425b      	negs	r3, r3
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	813b      	strh	r3, [r7, #8]
		Position |= (1<<15);
 80019f6:	893b      	ldrh	r3, [r7, #8]
 80019f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a00:	813b      	strh	r3, [r7, #8]
	}
	u8 bBuf[7];
	bBuf[0] = ACC;
 8001a02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a06:	743b      	strb	r3, [r7, #16]
	Host2SCS(bBuf+1, bBuf+2, Position);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f107 0110 	add.w	r1, r7, #16
 8001a0e:	3101      	adds	r1, #1
 8001a10:	f107 0210 	add.w	r2, r7, #16
 8001a14:	3202      	adds	r2, #2
 8001a16:	893b      	ldrh	r3, [r7, #8]
 8001a18:	f7ff fb18 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+3, bBuf+4, 0);
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f107 0110 	add.w	r1, r7, #16
 8001a22:	3103      	adds	r1, #3
 8001a24:	f107 0210 	add.w	r2, r7, #16
 8001a28:	3204      	adds	r2, #4
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f7ff fb0e 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+5, bBuf+6, Speed);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f107 0110 	add.w	r1, r7, #16
 8001a36:	3105      	adds	r1, #5
 8001a38:	f107 0210 	add.w	r2, r7, #16
 8001a3c:	3206      	adds	r2, #6
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	f7ff fb04 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
	
	printf("[RegWritePosEx] ID: %d, Pos: %d, Speed: %d, ACC: %d\r\n", ID, Position, Speed, ACC);
 8001a44:	7af9      	ldrb	r1, [r7, #11]
 8001a46:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a4a:	88f8      	ldrh	r0, [r7, #6]
 8001a4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	4603      	mov	r3, r0
 8001a54:	4808      	ldr	r0, [pc, #32]	@ (8001a78 <_ZN7SMS_STS13RegWritePosExEhsth+0xac>)
 8001a56:	f004 ffa7 	bl	80069a8 <iprintf>

	return regWrite(ID, SMS_STS_ACC, bBuf, 7);
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	7af9      	ldrb	r1, [r7, #11]
 8001a62:	2207      	movs	r2, #7
 8001a64:	9200      	str	r2, [sp, #0]
 8001a66:	2229      	movs	r2, #41	@ 0x29
 8001a68:	f7ff fc18 	bl	800129c <_ZN3SCS8regWriteEhhPhh>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	0800acd8 	.word	0x0800acd8

08001a7c <_ZN7SMS_STS6ActionEv>:

void SMS_STS::Action()
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    buf[0] = 0xFF;
 8001a84:	23ff      	movs	r3, #255	@ 0xff
 8001a86:	723b      	strb	r3, [r7, #8]
    buf[1] = 0xFF;
 8001a88:	23ff      	movs	r3, #255	@ 0xff
 8001a8a:	727b      	strb	r3, [r7, #9]
    buf[2] = 0xFE;     // Broadcast ID
 8001a8c:	23fe      	movs	r3, #254	@ 0xfe
 8001a8e:	72bb      	strb	r3, [r7, #10]
    buf[3] = 0x02;     // Length
 8001a90:	2302      	movs	r3, #2
 8001a92:	72fb      	strb	r3, [r7, #11]
    buf[4] = 0x05;     // ACTION Command
 8001a94:	2305      	movs	r3, #5
 8001a96:	733b      	strb	r3, [r7, #12]
    buf[5] = ~(buf[2] + buf[3] + buf[4]) & 0xFF;  // Checksum
 8001a98:	7aba      	ldrb	r2, [r7, #10]
 8001a9a:	7afb      	ldrb	r3, [r7, #11]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	7b3b      	ldrb	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	737b      	strb	r3, [r7, #13]

    writeSCS(buf, 6);  // 실제 UART 전송
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f107 0108 	add.w	r1, r7, #8
 8001ab8:	2206      	movs	r2, #6
 8001aba:	4798      	blx	r3
    printf("[Action] sent\r\n");  // 디버그 로그
 8001abc:	4803      	ldr	r0, [pc, #12]	@ (8001acc <_ZN7SMS_STS6ActionEv+0x50>)
 8001abe:	f004 ffdb 	bl	8006a78 <puts>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0800ad10 	.word	0x0800ad10

08001ad0 <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_>:




void SMS_STS::SyncWritePosEx(u8 ID[], u8 IDN, s16 Position[], u16 Speed[], u8 ACC[])
{
 8001ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ad4:	b08b      	sub	sp, #44	@ 0x2c
 8001ad6:	af02      	add	r7, sp, #8
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
        Host2SCS(offbuf+i*7+1, offbuf+i*7+2, Position[i]);
        Host2SCS(offbuf+i*7+3, offbuf+i*7+4, 0);
        Host2SCS(offbuf+i*7+5, offbuf+i*7+6, V);
    }
    syncWrite(ID, IDN, SMS_STS_ACC, offbuf, 7);
}
 8001ae2:	466b      	mov	r3, sp
 8001ae4:	461e      	mov	r6, r3
    u8 offbuf[7*IDN];
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1a99      	subs	r1, r3, r2
 8001aee:	1e4b      	subs	r3, r1, #1
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	460a      	mov	r2, r1
 8001af4:	2300      	movs	r3, #0
 8001af6:	4690      	mov	r8, r2
 8001af8:	4699      	mov	r9, r3
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b0e:	460a      	mov	r2, r1
 8001b10:	2300      	movs	r3, #0
 8001b12:	4614      	mov	r4, r2
 8001b14:	461d      	mov	r5, r3
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	00eb      	lsls	r3, r5, #3
 8001b20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b24:	00e2      	lsls	r2, r4, #3
 8001b26:	460b      	mov	r3, r1
 8001b28:	3307      	adds	r3, #7
 8001b2a:	08db      	lsrs	r3, r3, #3
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	ebad 0d03 	sub.w	sp, sp, r3
 8001b32:	ab02      	add	r3, sp, #8
 8001b34:	3300      	adds	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
    for(u8 i = 0; i<IDN; i++){
 8001b38:	2300      	movs	r3, #0
 8001b3a:	77fb      	strb	r3, [r7, #31]
 8001b3c:	e087      	b.n	8001c4e <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0x17e>
		if(Position[i]<0){
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da1e      	bge.n	8001b8c <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xbc>
			Position[i] = -Position[i];
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	7ffb      	ldrb	r3, [r7, #31]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	b20a      	sxth	r2, r1
 8001b6a:	801a      	strh	r2, [r3, #0]
			Position[i] |= (1<<15);
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	7ffa      	ldrb	r2, [r7, #31]
 8001b7a:	0052      	lsls	r2, r2, #1
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	440a      	add	r2, r1
 8001b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	8013      	strh	r3, [r2, #0]
		if(Speed){
 8001b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xd0>
			V = Speed[i];
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b98:	4413      	add	r3, r2
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	83bb      	strh	r3, [r7, #28]
 8001b9e:	e001      	b.n	8001ba4 <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xd4>
			V = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	83bb      	strh	r3, [r7, #28]
		if(ACC){
 8001ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00a      	beq.n	8001bc0 <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xf0>
			offbuf[i*7] = ACC[i];
 8001baa:	7ffb      	ldrb	r3, [r7, #31]
 8001bac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bae:	18d1      	adds	r1, r2, r3
 8001bb0:	7ffa      	ldrb	r2, [r7, #31]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	7809      	ldrb	r1, [r1, #0]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	54d1      	strb	r1, [r2, r3]
 8001bbe:	e006      	b.n	8001bce <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xfe>
			offbuf[i*7] = 0;
 8001bc0:	7ffa      	ldrb	r2, [r7, #31]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	2100      	movs	r1, #0
 8001bcc:	54d1      	strb	r1, [r2, r3]
        Host2SCS(offbuf+i*7+1, offbuf+i*7+2, Position[i]);
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	7ffa      	ldrb	r2, [r7, #31]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	3301      	adds	r3, #1
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	18d1      	adds	r1, r2, r3
 8001bde:	7ffa      	ldrb	r2, [r7, #31]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	3302      	adds	r3, #2
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	18d4      	adds	r4, r2, r3
 8001bec:	7ffb      	ldrb	r3, [r7, #31]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	f7ff fa26 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
        Host2SCS(offbuf+i*7+3, offbuf+i*7+4, 0);
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	7ffa      	ldrb	r2, [r7, #31]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	3303      	adds	r3, #3
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	18d1      	adds	r1, r2, r3
 8001c10:	7ffa      	ldrb	r2, [r7, #31]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	3304      	adds	r3, #4
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f7ff fa14 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
        Host2SCS(offbuf+i*7+5, offbuf+i*7+6, V);
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	7ffa      	ldrb	r2, [r7, #31]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	3305      	adds	r3, #5
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	18d1      	adds	r1, r2, r3
 8001c34:	7ffa      	ldrb	r2, [r7, #31]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	3306      	adds	r3, #6
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	441a      	add	r2, r3
 8001c42:	8bbb      	ldrh	r3, [r7, #28]
 8001c44:	f7ff fa02 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
    for(u8 i = 0; i<IDN; i++){
 8001c48:	7ffb      	ldrb	r3, [r7, #31]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	77fb      	strb	r3, [r7, #31]
 8001c4e:	7ffa      	ldrb	r2, [r7, #31]
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	f4ff af73 	bcc.w	8001b3e <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0x6e>
    syncWrite(ID, IDN, SMS_STS_ACC, offbuf, 7);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	79fa      	ldrb	r2, [r7, #7]
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2329      	movs	r3, #41	@ 0x29
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	f7ff fb41 	bl	80012ee <_ZN3SCS9syncWriteEPhhhS0_h>
 8001c6c:	46b5      	mov	sp, r6
}
 8001c6e:	bf00      	nop
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c78 <_ZN7SMS_STS9WheelModeEh>:

int SMS_STS::WheelMode(u8 ID)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SMS_STS_MODE, 1);		
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	78f9      	ldrb	r1, [r7, #3]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	2221      	movs	r2, #33	@ 0x21
 8001c8c:	f7ff fbc5 	bl	800141a <_ZN3SCS9writeByteEhhh>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_ZN7SMS_STS8WriteSpeEhsh>:

int SMS_STS::WriteSpe(u8 ID, s16 Speed, u8 ACC)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af02      	add	r7, sp, #8
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	4608      	mov	r0, r1
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4603      	mov	r3, r0
 8001caa:	70fb      	strb	r3, [r7, #3]
 8001cac:	460b      	mov	r3, r1
 8001cae:	803b      	strh	r3, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	70bb      	strb	r3, [r7, #2]
	if(Speed<0){
 8001cb4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da09      	bge.n	8001cd0 <_ZN7SMS_STS8WriteSpeEhsh+0x36>
		Speed = -Speed;
 8001cbc:	883b      	ldrh	r3, [r7, #0]
 8001cbe:	425b      	negs	r3, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	803b      	strh	r3, [r7, #0]
		Speed |= (1<<15);
 8001cc4:	883b      	ldrh	r3, [r7, #0]
 8001cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cce:	803b      	strh	r3, [r7, #0]
	}
	u8 bBuf[2];
	bBuf[0] = ACC;
 8001cd0:	78bb      	ldrb	r3, [r7, #2]
 8001cd2:	733b      	strb	r3, [r7, #12]
	genWrite(ID, SMS_STS_ACC, bBuf, 1);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	78f9      	ldrb	r1, [r7, #3]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	9200      	str	r2, [sp, #0]
 8001ce0:	2229      	movs	r2, #41	@ 0x29
 8001ce2:	f7ff faa9 	bl	8001238 <_ZN3SCS8genWriteEhhPhh>
	Host2SCS(bBuf+0, bBuf+1, Speed);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f107 020c 	add.w	r2, r7, #12
 8001cec:	3201      	adds	r2, #1
 8001cee:	883b      	ldrh	r3, [r7, #0]
 8001cf0:	f107 010c 	add.w	r1, r7, #12
 8001cf4:	f7ff f9aa 	bl	800104c <_ZN3SCS8Host2SCSEPhS0_t>
	
	return genWrite(ID, SMS_STS_GOAL_SPEED_L, bBuf, 2);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	78f9      	ldrb	r1, [r7, #3]
 8001d00:	2202      	movs	r2, #2
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	222e      	movs	r2, #46	@ 0x2e
 8001d06:	f7ff fa97 	bl	8001238 <_ZN3SCS8genWriteEhhPhh>
 8001d0a:	4603      	mov	r3, r0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_ZN7SMS_STS12EnableTorqueEhh>:

int SMS_STS::EnableTorque(u8 ID, u8 Enable)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
 8001d20:	4613      	mov	r3, r2
 8001d22:	70bb      	strb	r3, [r7, #2]
	return writeByte(ID, SMS_STS_TORQUE_ENABLE, Enable);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	78bb      	ldrb	r3, [r7, #2]
 8001d28:	78f9      	ldrb	r1, [r7, #3]
 8001d2a:	2228      	movs	r2, #40	@ 0x28
 8001d2c:	f7ff fb75 	bl	800141a <_ZN3SCS9writeByteEhhh>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_ZN7SMS_STS11unLockEpromEh>:

int SMS_STS::unLockEprom(u8 ID)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SMS_STS_LOCK, 0);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	78f9      	ldrb	r1, [r7, #3]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2237      	movs	r2, #55	@ 0x37
 8001d4e:	f7ff fb64 	bl	800141a <_ZN3SCS9writeByteEhhh>
 8001d52:	4603      	mov	r3, r0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZN7SMS_STS9LockEpromEh>:

int SMS_STS::LockEprom(u8 ID)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SMS_STS_LOCK, 1);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	78f9      	ldrb	r1, [r7, #3]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	2237      	movs	r2, #55	@ 0x37
 8001d70:	f7ff fb53 	bl	800141a <_ZN3SCS9writeByteEhhh>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_ZN7SMS_STS14CalibrationOfsEh>:

int SMS_STS::CalibrationOfs(u8 ID)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SMS_STS_TORQUE_ENABLE, 128);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	78f9      	ldrb	r1, [r7, #3]
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	2228      	movs	r2, #40	@ 0x28
 8001d92:	f7ff fb42 	bl	800141a <_ZN3SCS9writeByteEhhh>
 8001d96:	4603      	mov	r3, r0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_ZN7SMS_STS8FeedBackEi>:

int SMS_STS::FeedBack(int ID)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	int nLen = Read(ID, SMS_STS_PRESENT_POSITION_L, Mem, sizeof(Mem));
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2d9      	uxtb	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	331c      	adds	r3, #28
 8001db4:	220f      	movs	r2, #15
 8001db6:	9200      	str	r2, [sp, #0]
 8001db8:	2238      	movs	r2, #56	@ 0x38
 8001dba:	f7ff fb5b 	bl	8001474 <_ZN3SCS4ReadEhhPhh>
 8001dbe:	60f8      	str	r0, [r7, #12]
	if(nLen!=sizeof(Mem)){
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	d005      	beq.n	8001dd2 <_ZN7SMS_STS8FeedBackEi+0x32>
		Err = 1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	619a      	str	r2, [r3, #24]
		return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd0:	e003      	b.n	8001dda <_ZN7SMS_STS8FeedBackEi+0x3a>
	}
	Err = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
	return nLen;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_ZN7SMS_STS7ReadPosEi>:

int SMS_STS::ReadPos(int ID)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
	int Pos = -1;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d10c      	bne.n	8001e14 <_ZN7SMS_STS7ReadPosEi+0x32>
		Pos = Mem[SMS_STS_PRESENT_POSITION_H-SMS_STS_PRESENT_POSITION_L];
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7f5b      	ldrb	r3, [r3, #29]
 8001dfe:	60fb      	str	r3, [r7, #12]
		Pos <<= 8;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	60fb      	str	r3, [r7, #12]
		Pos |= Mem[SMS_STS_PRESENT_POSITION_L-SMS_STS_PRESENT_POSITION_L];
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7f1b      	ldrb	r3, [r3, #28]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e011      	b.n	8001e38 <_ZN7SMS_STS7ReadPosEi+0x56>
	}else{
		Err = 0;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
		Pos = readWord(ID, SMS_STS_PRESENT_POSITION_L);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	b2d1      	uxtb	r1, r2
 8001e20:	2238      	movs	r2, #56	@ 0x38
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fbd6 	bl	80015d4 <_ZN3SCS8readWordEhh>
 8001e28:	60f8      	str	r0, [r7, #12]
		if(Pos==-1){
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d102      	bne.n	8001e38 <_ZN7SMS_STS7ReadPosEi+0x56>
			Err = 1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	619a      	str	r2, [r3, #24]
		}
	}
	if(!Err && (Pos&(1<<15))){
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <_ZN7SMS_STS7ReadPosEi+0x72>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <_ZN7SMS_STS7ReadPosEi+0x72>
		Pos = -(Pos&~(1<<15));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001e50:	425b      	negs	r3, r3
 8001e52:	60fb      	str	r3, [r7, #12]
	}
	
	return Pos;
 8001e54:	68fb      	ldr	r3, [r7, #12]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_ZN7SMS_STS9ReadSpeedEi>:

int SMS_STS::ReadSpeed(int ID)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
	int Speed = -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d10c      	bne.n	8001e90 <_ZN7SMS_STS9ReadSpeedEi+0x32>
		Speed = Mem[SMS_STS_PRESENT_SPEED_H-SMS_STS_PRESENT_POSITION_L];
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7fdb      	ldrb	r3, [r3, #31]
 8001e7a:	60fb      	str	r3, [r7, #12]
		Speed <<= 8;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	60fb      	str	r3, [r7, #12]
		Speed |= Mem[SMS_STS_PRESENT_SPEED_L-SMS_STS_PRESENT_POSITION_L];
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7f9b      	ldrb	r3, [r3, #30]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e014      	b.n	8001eba <_ZN7SMS_STS9ReadSpeedEi+0x5c>
	}else{
		Err = 0;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
		Speed = readWord(ID, SMS_STS_PRESENT_SPEED_L);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	b2d1      	uxtb	r1, r2
 8001e9c:	223a      	movs	r2, #58	@ 0x3a
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fb98 	bl	80015d4 <_ZN3SCS8readWordEhh>
 8001ea4:	60f8      	str	r0, [r7, #12]
		if(Speed==-1){
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d105      	bne.n	8001eba <_ZN7SMS_STS9ReadSpeedEi+0x5c>
			Err = 1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	619a      	str	r2, [r3, #24]
			return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	e00e      	b.n	8001ed8 <_ZN7SMS_STS9ReadSpeedEi+0x7a>
		}
	}
	if(!Err && (Speed&(1<<15))){
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <_ZN7SMS_STS9ReadSpeedEi+0x78>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <_ZN7SMS_STS9ReadSpeedEi+0x78>
		Speed = -(Speed&~(1<<15));
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	60fb      	str	r3, [r7, #12]
	}	
	return Speed;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_ZN7SMS_STS8ReadLoadEi>:

int SMS_STS::ReadLoad(int ID)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
	int Load = -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d10e      	bne.n	8001f16 <_ZN7SMS_STS8ReadLoadEi+0x36>
		Load = Mem[SMS_STS_PRESENT_LOAD_H-SMS_STS_PRESENT_POSITION_L];
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001efe:	60fb      	str	r3, [r7, #12]
		Load <<= 8;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	60fb      	str	r3, [r7, #12]
		Load |= Mem[SMS_STS_PRESENT_LOAD_L-SMS_STS_PRESENT_POSITION_L];
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e011      	b.n	8001f3a <_ZN7SMS_STS8ReadLoadEi+0x5a>
	}else{
		Err = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
		Load = readWord(ID, SMS_STS_PRESENT_LOAD_L);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	b2d1      	uxtb	r1, r2
 8001f22:	223c      	movs	r2, #60	@ 0x3c
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fb55 	bl	80015d4 <_ZN3SCS8readWordEhh>
 8001f2a:	60f8      	str	r0, [r7, #12]
		if(Load==-1){
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d102      	bne.n	8001f3a <_ZN7SMS_STS8ReadLoadEi+0x5a>
			Err = 1;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	619a      	str	r2, [r3, #24]
		}
	}
	if(!Err && (Load&(1<<10))){
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <_ZN7SMS_STS8ReadLoadEi+0x76>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <_ZN7SMS_STS8ReadLoadEi+0x76>
		Load = -(Load&~(1<<10));
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f52:	425b      	negs	r3, r3
 8001f54:	60fb      	str	r3, [r7, #12]
	}
	return Load;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_ZN7SMS_STS11ReadVoltageEi>:

int SMS_STS::ReadVoltage(int ID)
{	
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
	int Voltage = -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d104      	bne.n	8001f82 <_ZN7SMS_STS11ReadVoltageEi+0x22>
		Voltage = Mem[SMS_STS_PRESENT_VOLTAGE-SMS_STS_PRESENT_POSITION_L];	
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e011      	b.n	8001fa6 <_ZN7SMS_STS11ReadVoltageEi+0x46>
	}else{
		Err = 0;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
		Voltage = readByte(ID, SMS_STS_PRESENT_VOLTAGE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	b2d1      	uxtb	r1, r2
 8001f8e:	223e      	movs	r2, #62	@ 0x3e
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fb02 	bl	800159a <_ZN3SCS8readByteEhh>
 8001f96:	60f8      	str	r0, [r7, #12]
		if(Voltage==-1){
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9e:	d102      	bne.n	8001fa6 <_ZN7SMS_STS11ReadVoltageEi+0x46>
			Err = 1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	619a      	str	r2, [r3, #24]
		}
	}
	return Voltage;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZN7SMS_STS10ReadTemperEi>:

int SMS_STS::ReadTemper(int ID)
{	
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
	int Temper = -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc6:	d104      	bne.n	8001fd2 <_ZN7SMS_STS10ReadTemperEi+0x22>
		Temper = Mem[SMS_STS_PRESENT_TEMPERATURE-SMS_STS_PRESENT_POSITION_L];	
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e011      	b.n	8001ff6 <_ZN7SMS_STS10ReadTemperEi+0x46>
	}else{
		Err = 0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
		Temper = readByte(ID, SMS_STS_PRESENT_TEMPERATURE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	b2d1      	uxtb	r1, r2
 8001fde:	223f      	movs	r2, #63	@ 0x3f
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fada 	bl	800159a <_ZN3SCS8readByteEhh>
 8001fe6:	60f8      	str	r0, [r7, #12]
		if(Temper==-1){
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fee:	d102      	bne.n	8001ff6 <_ZN7SMS_STS10ReadTemperEi+0x46>
			Err = 1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	619a      	str	r2, [r3, #24]
		}
	}
	return Temper;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_ZN7SMS_STS8ReadMoveEi>:

int SMS_STS::ReadMove(int ID)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	int Move = -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002016:	d104      	bne.n	8002022 <_ZN7SMS_STS8ReadMoveEi+0x22>
		Move = Mem[SMS_STS_MOVING-SMS_STS_PRESENT_POSITION_L];	
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e011      	b.n	8002046 <_ZN7SMS_STS8ReadMoveEi+0x46>
	}else{
		Err = 0;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
		Move = readByte(ID, SMS_STS_MOVING);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	b2d1      	uxtb	r1, r2
 800202e:	2242      	movs	r2, #66	@ 0x42
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fab2 	bl	800159a <_ZN3SCS8readByteEhh>
 8002036:	60f8      	str	r0, [r7, #12]
		if(Move==-1){
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d102      	bne.n	8002046 <_ZN7SMS_STS8ReadMoveEi+0x46>
			Err = 1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	619a      	str	r2, [r3, #24]
		}
	}
	return Move;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_ZN7SMS_STS8ReadModeEi>:

int SMS_STS::ReadMode(int ID)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
	int Mode = -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002066:	d103      	bne.n	8002070 <_ZN7SMS_STS8ReadModeEi+0x20>
		Mode = Mem[SMS_STS_MODE-SMS_STS_PRESENT_POSITION_L];	
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	795b      	ldrb	r3, [r3, #5]
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e011      	b.n	8002094 <_ZN7SMS_STS8ReadModeEi+0x44>
	}else{
		Err = 0;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
		Mode = readByte(ID, SMS_STS_MODE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	b2d1      	uxtb	r1, r2
 800207c:	2221      	movs	r2, #33	@ 0x21
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fa8b 	bl	800159a <_ZN3SCS8readByteEhh>
 8002084:	60f8      	str	r0, [r7, #12]
		if(Mode==-1){
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d102      	bne.n	8002094 <_ZN7SMS_STS8ReadModeEi+0x44>
			Err = 1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	619a      	str	r2, [r3, #24]
		}
	}
	return Mode;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_ZN7SMS_STS11ReadCurrentEi>:

int SMS_STS::ReadCurrent(int ID)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
	int Current = -1;
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295
 80020ac:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d10e      	bne.n	80020d4 <_ZN7SMS_STS11ReadCurrentEi+0x36>
		Current = Mem[SMS_STS_PRESENT_CURRENT_H-SMS_STS_PRESENT_POSITION_L];
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80020bc:	60fb      	str	r3, [r7, #12]
		Current <<= 8;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	60fb      	str	r3, [r7, #12]
		Current |= Mem[SMS_STS_PRESENT_CURRENT_L-SMS_STS_PRESENT_POSITION_L];
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e014      	b.n	80020fe <_ZN7SMS_STS11ReadCurrentEi+0x60>
	}else{
		Err = 0;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
		Current = readWord(ID, SMS_STS_PRESENT_CURRENT_L);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	b2d1      	uxtb	r1, r2
 80020e0:	2245      	movs	r2, #69	@ 0x45
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fa76 	bl	80015d4 <_ZN3SCS8readWordEhh>
 80020e8:	60f8      	str	r0, [r7, #12]
		if(Current==-1){
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d105      	bne.n	80020fe <_ZN7SMS_STS11ReadCurrentEi+0x60>
			Err = 1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	619a      	str	r2, [r3, #24]
			return -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	e00e      	b.n	800211c <_ZN7SMS_STS11ReadCurrentEi+0x7e>
		}
	}
	if(!Err && (Current&(1<<15))){
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <_ZN7SMS_STS11ReadCurrentEi+0x7c>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <_ZN7SMS_STS11ReadCurrentEi+0x7c>
		Current = -(Current&~(1<<15));
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002116:	425b      	negs	r3, r3
 8002118:	60fb      	str	r3, [r7, #12]
	}	
	return Current;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
extern "C" int main(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800212a:	f000 fe07 	bl	8002d3c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800212e:	f000 f84d 	bl	80021cc <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002132:	f000 f8b3 	bl	800229c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002136:	f000 fd83 	bl	8002c40 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800213a:	f000 fdab 	bl	8002c94 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800213e:	f000 fd1d 	bl	8002b7c <MX_TIM4_Init>


  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002142:	2104      	movs	r1, #4
 8002144:	481a      	ldr	r0, [pc, #104]	@ (80021b0 <main+0x8c>)
 8002146:	f001 fe91 	bl	8003e6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800214a:	2108      	movs	r1, #8
 800214c:	4818      	ldr	r0, [pc, #96]	@ (80021b0 <main+0x8c>)
 800214e:	f001 fe8d 	bl	8003e6c <HAL_TIM_PWM_Start>
   servo.begin(&huart2); // ← 실제 UART 핸들 등록
 8002152:	4918      	ldr	r1, [pc, #96]	@ (80021b4 <main+0x90>)
 8002154:	4818      	ldr	r0, [pc, #96]	@ (80021b8 <main+0x94>)
 8002156:	f7ff fb0b 	bl	8001770 <_ZN8SCSerial5beginEP20__UART_HandleTypeDef>
   for (int i = 1; i <= 6; i++) {
 800215a:	2301      	movs	r3, #1
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	e009      	b.n	8002174 <main+0x50>
       servo.EnableTorque(i, 1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2201      	movs	r2, #1
 8002166:	4619      	mov	r1, r3
 8002168:	4813      	ldr	r0, [pc, #76]	@ (80021b8 <main+0x94>)
 800216a:	f7ff fdd3 	bl	8001d14 <_ZN7SMS_STS12EnableTorqueEhh>
   for (int i = 1; i <= 6; i++) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3301      	adds	r3, #1
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b06      	cmp	r3, #6
 8002178:	ddf2      	ble.n	8002160 <main+0x3c>
   }
   HAL_UART_Receive_IT(&huart3, &rx_byte, 1);  // 인터럽트 기반 수신 시작
 800217a:	2201      	movs	r2, #1
 800217c:	490f      	ldr	r1, [pc, #60]	@ (80021bc <main+0x98>)
 800217e:	4810      	ldr	r0, [pc, #64]	@ (80021c0 <main+0x9c>)
 8002180:	f002 fd21 	bl	8004bc6 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (command_ready == 1) {
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <main+0xa0>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f5      	beq.n	8002184 <main+0x60>
	    command_ready = 0;  // 플래그 클리어
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <main+0xa0>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
	    process_command((char*)rx_buf);
 800219e:	480a      	ldr	r0, [pc, #40]	@ (80021c8 <main+0xa4>)
 80021a0:	f000 f948 	bl	8002434 <_Z15process_commandPc>
	    memset(rx_buf, 0, sizeof(rx_buf));  // 버퍼 클리어
 80021a4:	2280      	movs	r2, #128	@ 0x80
 80021a6:	2100      	movs	r1, #0
 80021a8:	4807      	ldr	r0, [pc, #28]	@ (80021c8 <main+0xa4>)
 80021aa:	f004 fd95 	bl	8006cd8 <memset>
	if (command_ready == 1) {
 80021ae:	e7e9      	b.n	8002184 <main+0x60>
 80021b0:	200002a4 	.word	0x200002a4
 80021b4:	200002ec 	.word	0x200002ec
 80021b8:	200001f0 	.word	0x200001f0
 80021bc:	2000029d 	.word	0x2000029d
 80021c0:	20000334 	.word	0x20000334
 80021c4:	2000029e 	.word	0x2000029e
 80021c8:	2000021c 	.word	0x2000021c

080021cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b094      	sub	sp, #80	@ 0x50
 80021d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d2:	f107 0320 	add.w	r3, r7, #32
 80021d6:	2230      	movs	r2, #48	@ 0x30
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 fd7c 	bl	8006cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	4b27      	ldr	r3, [pc, #156]	@ (8002294 <_Z18SystemClock_Configv+0xc8>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	4a26      	ldr	r2, [pc, #152]	@ (8002294 <_Z18SystemClock_Configv+0xc8>)
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002200:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <_Z18SystemClock_Configv+0xc8>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	4b21      	ldr	r3, [pc, #132]	@ (8002298 <_Z18SystemClock_Configv+0xcc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a20      	ldr	r2, [pc, #128]	@ (8002298 <_Z18SystemClock_Configv+0xcc>)
 8002216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <_Z18SystemClock_Configv+0xcc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002228:	2302      	movs	r3, #2
 800222a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800222c:	2301      	movs	r3, #1
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002230:	2310      	movs	r3, #16
 8002232:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002234:	2300      	movs	r3, #0
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4618      	mov	r0, r3
 800223e:	f001 f96d 	bl	800351c <HAL_RCC_OscConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8002252:	f000 fa33 	bl	80026bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002256:	230f      	movs	r3, #15
 8002258:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fbcb 	bl	8003a0c <HAL_RCC_ClockConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8002286:	f000 fa19 	bl	80026bc <Error_Handler>
  }
}
 800228a:	bf00      	nop
 800228c:	3750      	adds	r7, #80	@ 0x50
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000

0800229c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	@ 0x28
 80022a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b38      	ldr	r3, [pc, #224]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a37      	ldr	r2, [pc, #220]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 80022bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b35      	ldr	r3, [pc, #212]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b31      	ldr	r3, [pc, #196]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a30      	ldr	r2, [pc, #192]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b2e      	ldr	r3, [pc, #184]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	4a29      	ldr	r2, [pc, #164]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fa:	4b27      	ldr	r3, [pc, #156]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	4a22      	ldr	r2, [pc, #136]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6313      	str	r3, [r2, #48]	@ 0x30
 8002316:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	4a1b      	ldr	r2, [pc, #108]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	6313      	str	r3, [r2, #48]	@ 0x30
 8002332:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <_ZL12MX_GPIO_Initv+0xfc>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_Custom */

  // Right 모터 방향 제어: PD9, PD10
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 800233e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4811      	ldr	r0, [pc, #68]	@ (800239c <_ZL12MX_GPIO_Initv+0x100>)
 8002358:	f000 ff2a 	bl	80031b0 <HAL_GPIO_Init>

  // Left 모터 방향 제어 또는 기타 출력: PB0, PB1
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800235c:	2303      	movs	r3, #3
 800235e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	480b      	ldr	r0, [pc, #44]	@ (80023a0 <_ZL12MX_GPIO_Initv+0x104>)
 8002374:	f000 ff1c 	bl	80031b0 <HAL_GPIO_Init>

  // 전방 적외선 센서 입력: PC0, PC1
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002378:	2303      	movs	r3, #3
 800237a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	@ (80023a4 <_ZL12MX_GPIO_Initv+0x108>)
 800238c:	f000 ff10 	bl	80031b0 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_Custom */
}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	@ 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40020800 	.word	0x40020800

080023a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a19      	ldr	r2, [pc, #100]	@ (800241c <HAL_UART_RxCpltCallback+0x74>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12c      	bne.n	8002414 <HAL_UART_RxCpltCallback+0x6c>
        if (rx_byte == '\n' || rx_byte == '\r') {
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_UART_RxCpltCallback+0x78>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b0a      	cmp	r3, #10
 80023c0:	d003      	beq.n	80023ca <HAL_UART_RxCpltCallback+0x22>
 80023c2:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_UART_RxCpltCallback+0x78>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b0d      	cmp	r3, #13
 80023c8:	d10c      	bne.n	80023e4 <HAL_UART_RxCpltCallback+0x3c>
            rx_buf[rx_index] = '\0';
 80023ca:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <HAL_UART_RxCpltCallback+0x7c>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_UART_RxCpltCallback+0x80>)
 80023d2:	2100      	movs	r1, #0
 80023d4:	5499      	strb	r1, [r3, r2]
            command_ready = 1;  //  플래그만 세움
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_UART_RxCpltCallback+0x84>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_UART_RxCpltCallback+0x7c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e012      	b.n	800240a <HAL_UART_RxCpltCallback+0x62>
        } else {
            if (rx_index < RX_BUF_SIZE - 1) {
 80023e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <HAL_UART_RxCpltCallback+0x7c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b7e      	cmp	r3, #126	@ 0x7e
 80023ea:	d80b      	bhi.n	8002404 <HAL_UART_RxCpltCallback+0x5c>
                rx_buf[rx_index++] = rx_byte;
 80023ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_UART_RxCpltCallback+0x7c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	b2d1      	uxtb	r1, r2
 80023f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002424 <HAL_UART_RxCpltCallback+0x7c>)
 80023f6:	7011      	strb	r1, [r2, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <HAL_UART_RxCpltCallback+0x78>)
 80023fc:	7819      	ldrb	r1, [r3, #0]
 80023fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <HAL_UART_RxCpltCallback+0x80>)
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	e002      	b.n	800240a <HAL_UART_RxCpltCallback+0x62>
            } else {
                rx_index = 0;  // 오버플로우 방지
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <HAL_UART_RxCpltCallback+0x7c>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 800240a:	2201      	movs	r2, #1
 800240c:	4904      	ldr	r1, [pc, #16]	@ (8002420 <HAL_UART_RxCpltCallback+0x78>)
 800240e:	4808      	ldr	r0, [pc, #32]	@ (8002430 <HAL_UART_RxCpltCallback+0x88>)
 8002410:	f002 fbd9 	bl	8004bc6 <HAL_UART_Receive_IT>
    }
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40004800 	.word	0x40004800
 8002420:	2000029d 	.word	0x2000029d
 8002424:	2000029c 	.word	0x2000029c
 8002428:	2000021c 	.word	0x2000021c
 800242c:	2000029e 	.word	0x2000029e
 8002430:	20000334 	.word	0x20000334

08002434 <_Z15process_commandPc>:


void process_command(char* raw_cmd) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b09a      	sub	sp, #104	@ 0x68
 8002438:	af02      	add	r7, sp, #8
 800243a:	6078      	str	r0, [r7, #4]
    const int fixed_speed = 100;
 800243c:	2364      	movs	r3, #100	@ 0x64
 800243e:	653b      	str	r3, [r7, #80]	@ 0x50
    const int fixed_acc = 50;
 8002440:	2332      	movs	r3, #50	@ 0x32
 8002442:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* AGV 모터 명령인지 확인 후 동작*/
    int left = 0, right = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002448:	2300      	movs	r3, #0
 800244a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (sscanf(raw_cmd, "L%dR%d", &left, &right) == 2) {
 800244c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002450:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002454:	4943      	ldr	r1, [pc, #268]	@ (8002564 <_Z15process_commandPc+0x130>)
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f004 fb38 	bl	8006acc <siscanf>
 800245c:	4603      	mov	r3, r0
 800245e:	2b02      	cmp	r3, #2
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00c      	beq.n	8002486 <_Z15process_commandPc+0x52>
        printf("[AGV] Parsed → L=%d, R=%d\n", left, right);
 800246c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800246e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002470:	4619      	mov	r1, r3
 8002472:	483d      	ldr	r0, [pc, #244]	@ (8002568 <_Z15process_commandPc+0x134>)
 8002474:	f004 fa98 	bl	80069a8 <iprintf>
        set_motor_pwm((int)left,(int)right);  // AGV 모터 동작
 8002478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800247a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f880 	bl	8002584 <_Z13set_motor_pwmii>
 8002484:	e06a      	b.n	800255c <_Z15process_commandPc+0x128>
        return;  // AGV 명령이면 여기서 끝
    }

    /* 로봇 암 명령 처리 */
    ServoCommand commands[MAX_COMMANDS];
    int command_count = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	65fb      	str	r3, [r7, #92]	@ 0x5c

    for (char* token = strtok(raw_cmd, ",");
 800248a:	4938      	ldr	r1, [pc, #224]	@ (800256c <_Z15process_commandPc+0x138>)
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f004 fc2b 	bl	8006ce8 <strtok>
 8002492:	65b8      	str	r0, [r7, #88]	@ 0x58
 8002494:	e032      	b.n	80024fc <_Z15process_commandPc+0xc8>
         token && command_count < MAX_COMMANDS;
         token = strtok(NULL, ","))
    {
        int id = 0, pos = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
        if (sscanf(token, "%d:%d", &id, &pos) == 2) {
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	f107 0210 	add.w	r2, r7, #16
 80024a6:	4932      	ldr	r1, [pc, #200]	@ (8002570 <_Z15process_commandPc+0x13c>)
 80024a8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80024aa:	f004 fb0f 	bl	8006acc <siscanf>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <_Z15process_commandPc+0xb6>
            commands[command_count++] = (ServoCommand){id, pos};
 80024be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80024c4:	6938      	ldr	r0, [r7, #16]
 80024c6:	68f9      	ldr	r1, [r7, #12]
 80024c8:	00da      	lsls	r2, r3, #3
 80024ca:	3260      	adds	r2, #96	@ 0x60
 80024cc:	443a      	add	r2, r7
 80024ce:	f842 0c4c 	str.w	r0, [r2, #-76]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	3360      	adds	r3, #96	@ 0x60
 80024d6:	443b      	add	r3, r7
 80024d8:	f843 1c48 	str.w	r1, [r3, #-72]
            printf("Parsed → ID=%d, POS=%d\r\n", id, pos);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4619      	mov	r1, r3
 80024e2:	4824      	ldr	r0, [pc, #144]	@ (8002574 <_Z15process_commandPc+0x140>)
 80024e4:	f004 fa60 	bl	80069a8 <iprintf>
 80024e8:	e003      	b.n	80024f2 <_Z15process_commandPc+0xbe>
        } else {
            printf("⚠️ Parse error: %s\r\n", token);
 80024ea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80024ec:	4822      	ldr	r0, [pc, #136]	@ (8002578 <_Z15process_commandPc+0x144>)
 80024ee:	f004 fa5b 	bl	80069a8 <iprintf>
         token = strtok(NULL, ","))
 80024f2:	491e      	ldr	r1, [pc, #120]	@ (800256c <_Z15process_commandPc+0x138>)
 80024f4:	2000      	movs	r0, #0
 80024f6:	f004 fbf7 	bl	8006ce8 <strtok>
 80024fa:	65b8      	str	r0, [r7, #88]	@ 0x58
         token && command_count < MAX_COMMANDS;
 80024fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <_Z15process_commandPc+0xd4>
 8002502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002504:	2b05      	cmp	r3, #5
 8002506:	ddc6      	ble.n	8002496 <_Z15process_commandPc+0x62>
        }
    }

    for (int i = 0; i < command_count; i++) {
 8002508:	2300      	movs	r3, #0
 800250a:	657b      	str	r3, [r7, #84]	@ 0x54
 800250c:	e019      	b.n	8002542 <_Z15process_commandPc+0x10e>
        servo.RegWritePosEx(commands[i].id, commands[i].pos, fixed_speed, fixed_acc);
 800250e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	3360      	adds	r3, #96	@ 0x60
 8002514:	443b      	add	r3, r7
 8002516:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800251a:	b2d9      	uxtb	r1, r3
 800251c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	3360      	adds	r3, #96	@ 0x60
 8002522:	443b      	add	r3, r7
 8002524:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002528:	b21a      	sxth	r2, r3
 800252a:	2332      	movs	r3, #50	@ 0x32
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2364      	movs	r3, #100	@ 0x64
 8002530:	4812      	ldr	r0, [pc, #72]	@ (800257c <_Z15process_commandPc+0x148>)
 8002532:	f7ff fa4b 	bl	80019cc <_ZN7SMS_STS13RegWritePosExEhsth>
        HAL_Delay(50);
 8002536:	2032      	movs	r0, #50	@ 0x32
 8002538:	f000 fc72 	bl	8002e20 <HAL_Delay>
    for (int i = 0; i < command_count; i++) {
 800253c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253e:	3301      	adds	r3, #1
 8002540:	657b      	str	r3, [r7, #84]	@ 0x54
 8002542:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002546:	429a      	cmp	r2, r3
 8002548:	dbe1      	blt.n	800250e <_Z15process_commandPc+0xda>
    }

    HAL_Delay(100);
 800254a:	2064      	movs	r0, #100	@ 0x64
 800254c:	f000 fc68 	bl	8002e20 <HAL_Delay>
    printf("[ACT] Executing Action()\r\n");
 8002550:	480b      	ldr	r0, [pc, #44]	@ (8002580 <_Z15process_commandPc+0x14c>)
 8002552:	f004 fa91 	bl	8006a78 <puts>
    servo.Action();
 8002556:	4809      	ldr	r0, [pc, #36]	@ (800257c <_Z15process_commandPc+0x148>)
 8002558:	f7ff fa90 	bl	8001a7c <_ZN7SMS_STS6ActionEv>
}
 800255c:	3760      	adds	r7, #96	@ 0x60
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	0800ad20 	.word	0x0800ad20
 8002568:	0800ad28 	.word	0x0800ad28
 800256c:	0800ad48 	.word	0x0800ad48
 8002570:	0800ad4c 	.word	0x0800ad4c
 8002574:	0800ad54 	.word	0x0800ad54
 8002578:	0800ad70 	.word	0x0800ad70
 800257c:	200001f0 	.word	0x200001f0
 8002580:	0800ad8c 	.word	0x0800ad8c

08002584 <_Z13set_motor_pwmii>:


/* --- 모터 PWM + 방향 제어 함수 --- */
void set_motor_pwm(int left, int right)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
    // 1) PWM 듀티 계산 (0 ~ 1000)
    uint16_t pwm_L = (uint16_t)(fminf(fabsf(left)  * 10.0f, 1000.0f));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002598:	eef0 7ae7 	vabs.f32	s15, s15
 800259c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80025a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a4:	eddf 0a41 	vldr	s1, [pc, #260]	@ 80026ac <_Z13set_motor_pwmii+0x128>
 80025a8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ac:	f003 fa9c 	bl	8005ae8 <fminf>
 80025b0:	eef0 7a40 	vmov.f32	s15, s0
 80025b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b8:	ee17 3a90 	vmov	r3, s15
 80025bc:	81fb      	strh	r3, [r7, #14]
    uint16_t pwm_R = (uint16_t)(fminf(fabsf(right) * 10.0f, 1000.0f));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c8:	eef0 7ae7 	vabs.f32	s15, s15
 80025cc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80025d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d4:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80026ac <_Z13set_motor_pwmii+0x128>
 80025d8:	eeb0 0a67 	vmov.f32	s0, s15
 80025dc:	f003 fa84 	bl	8005ae8 <fminf>
 80025e0:	eef0 7a40 	vmov.f32	s15, s0
 80025e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e8:	ee17 3a90 	vmov	r3, s15
 80025ec:	81bb      	strh	r3, [r7, #12]

    // 2) 방향 제어 (IN1/IN2)
    // Left
    if (left > 0) {
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	dd0a      	ble.n	800260a <_Z13set_motor_pwmii+0x86>
        // 전진
        HAL_GPIO_WritePin(Left_GPIO_Port, Left_Motor_In1_Pin, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	2101      	movs	r1, #1
 80025f8:	482d      	ldr	r0, [pc, #180]	@ (80026b0 <_Z13set_motor_pwmii+0x12c>)
 80025fa:	f000 ff75 	bl	80034e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Left_GPIO_Port, Left_Motor_In2_Pin, GPIO_PIN_RESET);
 80025fe:	2200      	movs	r2, #0
 8002600:	2102      	movs	r1, #2
 8002602:	482b      	ldr	r0, [pc, #172]	@ (80026b0 <_Z13set_motor_pwmii+0x12c>)
 8002604:	f000 ff70 	bl	80034e8 <HAL_GPIO_WritePin>
 8002608:	e017      	b.n	800263a <_Z13set_motor_pwmii+0xb6>
    } else if (left < 0) {
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	da0a      	bge.n	8002626 <_Z13set_motor_pwmii+0xa2>
        // 후진
        HAL_GPIO_WritePin(Left_GPIO_Port, Left_Motor_In1_Pin, GPIO_PIN_RESET);
 8002610:	2200      	movs	r2, #0
 8002612:	2101      	movs	r1, #1
 8002614:	4826      	ldr	r0, [pc, #152]	@ (80026b0 <_Z13set_motor_pwmii+0x12c>)
 8002616:	f000 ff67 	bl	80034e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Left_GPIO_Port, Left_Motor_In2_Pin, GPIO_PIN_SET);
 800261a:	2201      	movs	r2, #1
 800261c:	2102      	movs	r1, #2
 800261e:	4824      	ldr	r0, [pc, #144]	@ (80026b0 <_Z13set_motor_pwmii+0x12c>)
 8002620:	f000 ff62 	bl	80034e8 <HAL_GPIO_WritePin>
 8002624:	e009      	b.n	800263a <_Z13set_motor_pwmii+0xb6>
    } else {
        // 정지→Coast
        HAL_GPIO_WritePin(Left_GPIO_Port, Left_Motor_In1_Pin, GPIO_PIN_RESET);
 8002626:	2200      	movs	r2, #0
 8002628:	2101      	movs	r1, #1
 800262a:	4821      	ldr	r0, [pc, #132]	@ (80026b0 <_Z13set_motor_pwmii+0x12c>)
 800262c:	f000 ff5c 	bl	80034e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Left_GPIO_Port, Left_Motor_In2_Pin, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	2102      	movs	r1, #2
 8002634:	481e      	ldr	r0, [pc, #120]	@ (80026b0 <_Z13set_motor_pwmii+0x12c>)
 8002636:	f000 ff57 	bl	80034e8 <HAL_GPIO_WritePin>
    }

    // Right
    if (right > 0) {
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	dd0c      	ble.n	800265a <_Z13set_motor_pwmii+0xd6>
        // 전진
        HAL_GPIO_WritePin(Right_GPIO_Port, Right_Motor_In1_Pin, GPIO_PIN_SET);
 8002640:	2201      	movs	r2, #1
 8002642:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002646:	481b      	ldr	r0, [pc, #108]	@ (80026b4 <_Z13set_motor_pwmii+0x130>)
 8002648:	f000 ff4e 	bl	80034e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Right_GPIO_Port, Right_Motor_In2_Pin, GPIO_PIN_RESET);
 800264c:	2200      	movs	r2, #0
 800264e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002652:	4818      	ldr	r0, [pc, #96]	@ (80026b4 <_Z13set_motor_pwmii+0x130>)
 8002654:	f000 ff48 	bl	80034e8 <HAL_GPIO_WritePin>
 8002658:	e01b      	b.n	8002692 <_Z13set_motor_pwmii+0x10e>
    } else if (right < 0) {
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da0c      	bge.n	800267a <_Z13set_motor_pwmii+0xf6>
        // 후진
        HAL_GPIO_WritePin(Right_GPIO_Port, Right_Motor_In1_Pin, GPIO_PIN_RESET);
 8002660:	2200      	movs	r2, #0
 8002662:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002666:	4813      	ldr	r0, [pc, #76]	@ (80026b4 <_Z13set_motor_pwmii+0x130>)
 8002668:	f000 ff3e 	bl	80034e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Right_GPIO_Port, Right_Motor_In2_Pin, GPIO_PIN_SET);
 800266c:	2201      	movs	r2, #1
 800266e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002672:	4810      	ldr	r0, [pc, #64]	@ (80026b4 <_Z13set_motor_pwmii+0x130>)
 8002674:	f000 ff38 	bl	80034e8 <HAL_GPIO_WritePin>
 8002678:	e00b      	b.n	8002692 <_Z13set_motor_pwmii+0x10e>
    } else {
        // 정지→Coast
        HAL_GPIO_WritePin(Right_GPIO_Port, Right_Motor_In1_Pin, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002680:	480c      	ldr	r0, [pc, #48]	@ (80026b4 <_Z13set_motor_pwmii+0x130>)
 8002682:	f000 ff31 	bl	80034e8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Right_GPIO_Port, Right_Motor_In2_Pin, GPIO_PIN_RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800268c:	4809      	ldr	r0, [pc, #36]	@ (80026b4 <_Z13set_motor_pwmii+0x130>)
 800268e:	f000 ff2b 	bl	80034e8 <HAL_GPIO_WritePin>
    }

    // 3) PWM 출력 (ENA/ENB)
    // TIM_CHANNEL_2 → Left_PWM (PD13)
    // TIM_CHANNEL_3 → Right_PWM (PD14)
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_L);
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <_Z13set_motor_pwmii+0x134>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	89fa      	ldrh	r2, [r7, #14]
 8002698:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_R);
 800269a:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <_Z13set_motor_pwmii+0x134>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	89ba      	ldrh	r2, [r7, #12]
 80026a0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	447a0000 	.word	0x447a0000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	200002a4 	.word	0x200002a4

080026bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c0:	b672      	cpsid	i
}
 80026c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <Error_Handler+0x8>

080026c8 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
SMS_STS servo;
 80026cc:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80026ce:	f7ff f8f1 	bl	80018b4 <_ZN7SMS_STSC1Ev>
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200001f0 	.word	0x200001f0

080026dc <_GLOBAL__sub_I_servo>:
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
 80026e0:	f7ff fff2 	bl	80026c8 <_Z41__static_initialization_and_destruction_0v>
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <HAL_MspInit+0x58>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	4a12      	ldr	r2, [pc, #72]	@ (8002740 <HAL_MspInit+0x58>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fe:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_MspInit+0x58>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <HAL_MspInit+0x58>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4a0b      	ldr	r2, [pc, #44]	@ (8002740 <HAL_MspInit+0x58>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	@ 0x40
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <HAL_MspInit+0x58>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	2005      	movs	r0, #5
 800272c:	f000 fc77 	bl	800301e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002730:	2005      	movs	r0, #5
 8002732:	f000 fc90 	bl	8003056 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800

08002744 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <HAL_TIM_PWM_MspInit+0x48>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d115      	bne.n	8002782 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <HAL_TIM_PWM_MspInit+0x4c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a0c      	ldr	r2, [pc, #48]	@ (8002790 <HAL_TIM_PWM_MspInit+0x4c>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <HAL_TIM_PWM_MspInit+0x4c>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	201e      	movs	r0, #30
 8002778:	f000 fc51 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800277c:	201e      	movs	r0, #30
 800277e:	f000 fc6a 	bl	8003056 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40000800 	.word	0x40000800
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <HAL_TIM_MspPostInit+0x68>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d11e      	bne.n	80027f4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <HAL_TIM_MspPostInit+0x6c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a10      	ldr	r2, [pc, #64]	@ (8002800 <HAL_TIM_MspPostInit+0x6c>)
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <HAL_TIM_MspPostInit+0x6c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = Left_PWM_Pin|Right_PWM_Pin;
 80027d2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80027d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027e4:	2302      	movs	r3, #2
 80027e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	4805      	ldr	r0, [pc, #20]	@ (8002804 <HAL_TIM_MspPostInit+0x70>)
 80027f0:	f000 fcde 	bl	80031b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80027f4:	bf00      	nop
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40000800 	.word	0x40000800
 8002800:	40023800 	.word	0x40023800
 8002804:	40020c00 	.word	0x40020c00

08002808 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	@ 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a3a      	ldr	r2, [pc, #232]	@ (8002910 <HAL_UART_MspInit+0x108>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d134      	bne.n	8002894 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	4b39      	ldr	r3, [pc, #228]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	4a38      	ldr	r2, [pc, #224]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	6413      	str	r3, [r2, #64]	@ 0x40
 800283a:	4b36      	ldr	r3, [pc, #216]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	4b32      	ldr	r3, [pc, #200]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4a31      	ldr	r2, [pc, #196]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4b2f      	ldr	r3, [pc, #188]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002862:	230c      	movs	r3, #12
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	2303      	movs	r3, #3
 8002870:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002872:	2307      	movs	r3, #7
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	4826      	ldr	r0, [pc, #152]	@ (8002918 <HAL_UART_MspInit+0x110>)
 800287e:	f000 fc97 	bl	80031b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2100      	movs	r1, #0
 8002886:	2026      	movs	r0, #38	@ 0x26
 8002888:	f000 fbc9 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800288c:	2026      	movs	r0, #38	@ 0x26
 800288e:	f000 fbe2 	bl	8003056 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002892:	e039      	b.n	8002908 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a20      	ldr	r2, [pc, #128]	@ (800291c <HAL_UART_MspInit+0x114>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d134      	bne.n	8002908 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	4a14      	ldr	r2, [pc, #80]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ca:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <HAL_UART_MspInit+0x10c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028e8:	2307      	movs	r3, #7
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4619      	mov	r1, r3
 80028f2:	480b      	ldr	r0, [pc, #44]	@ (8002920 <HAL_UART_MspInit+0x118>)
 80028f4:	f000 fc5c 	bl	80031b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	2027      	movs	r0, #39	@ 0x27
 80028fe:	f000 fb8e 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002902:	2027      	movs	r0, #39	@ 0x27
 8002904:	f000 fba7 	bl	8003056 <HAL_NVIC_EnableIRQ>
}
 8002908:	bf00      	nop
 800290a:	3730      	adds	r7, #48	@ 0x30
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40004400 	.word	0x40004400
 8002914:	40023800 	.word	0x40023800
 8002918:	40020000 	.word	0x40020000
 800291c:	40004800 	.word	0x40004800
 8002920:	40020400 	.word	0x40020400

08002924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <NMI_Handler+0x4>

0800292c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <HardFault_Handler+0x4>

08002934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <MemManage_Handler+0x4>

0800293c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <BusFault_Handler+0x4>

08002944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <UsageFault_Handler+0x4>

0800294c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800297a:	f000 fa31 	bl	8002de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}

08002982 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002994:	4802      	ldr	r0, [pc, #8]	@ (80029a0 <TIM4_IRQHandler+0x10>)
 8002996:	f001 fb31 	bl	8003ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200002a4 	.word	0x200002a4

080029a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <USART2_IRQHandler+0x10>)
 80029aa:	f002 f931 	bl	8004c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200002ec 	.word	0x200002ec

080029b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <USART3_IRQHandler+0x10>)
 80029be:	f002 f927 	bl	8004c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000334 	.word	0x20000334

080029cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return 1;
 80029d0:	2301      	movs	r3, #1
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_kill>:

int _kill(int pid, int sig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029e6:	f004 fa25 	bl	8006e34 <__errno>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2216      	movs	r2, #22
 80029ee:	601a      	str	r2, [r3, #0]
  return -1;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_exit>:

void _exit (int status)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ffe7 	bl	80029dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a0e:	bf00      	nop
 8002a10:	e7fd      	b.n	8002a0e <_exit+0x12>

08002a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e00a      	b.n	8002a3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a24:	f3af 8000 	nop.w
 8002a28:	4601      	mov	r1, r0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	60ba      	str	r2, [r7, #8]
 8002a30:	b2ca      	uxtb	r2, r1
 8002a32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3301      	adds	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	dbf0      	blt.n	8002a24 <_read+0x12>
  }

  return len;
 8002a42:	687b      	ldr	r3, [r7, #4]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	e009      	b.n	8002a72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	60ba      	str	r2, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f8d8 	bl	8002c1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	dbf1      	blt.n	8002a5e <_write+0x12>
  }
  return len;
 8002a7a:	687b      	ldr	r3, [r7, #4]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_close>:

int _close(int file)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aac:	605a      	str	r2, [r3, #4]
  return 0;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_isatty>:

int _isatty(int file)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ac4:	2301      	movs	r3, #1
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af4:	4a14      	ldr	r2, [pc, #80]	@ (8002b48 <_sbrk+0x5c>)
 8002af6:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <_sbrk+0x60>)
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b00:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <_sbrk+0x64>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b08:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <_sbrk+0x64>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	@ (8002b54 <_sbrk+0x68>)
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0e:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <_sbrk+0x64>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d207      	bcs.n	8002b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b1c:	f004 f98a 	bl	8006e34 <__errno>
 8002b20:	4603      	mov	r3, r0
 8002b22:	220c      	movs	r2, #12
 8002b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	e009      	b.n	8002b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b2c:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b32:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	4a05      	ldr	r2, [pc, #20]	@ (8002b50 <_sbrk+0x64>)
 8002b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20020000 	.word	0x20020000
 8002b4c:	00000400 	.word	0x00000400
 8002b50:	200002a0 	.word	0x200002a0
 8002b54:	200004d0 	.word	0x200004d0

08002b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <SystemInit+0x20>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b62:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <SystemInit+0x20>)
 8002b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <MX_TIM4_Init>:
#include "tim.h"

TIM_HandleTypeDef htim4;

void MX_TIM4_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
 8002b90:	615a      	str	r2, [r3, #20]
 8002b92:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002b94:	4b1f      	ldr	r3, [pc, #124]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002b96:	4a20      	ldr	r2, [pc, #128]	@ (8002c18 <MX_TIM4_Init+0x9c>)
 8002b98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84 - 1;     // 84MHz / 84 = 1MHz timer clock
 8002b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002b9c:	2253      	movs	r2, #83	@ 0x53
 8002b9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;      // PWM period = 1ms (1kHz)
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002ba8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bae:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb4:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002bba:	4816      	ldr	r0, [pc, #88]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002bbc:	f001 f906 	bl	8003dcc <HAL_TIM_PWM_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM4_Init+0x4e>
  {
    Error_Handler();
 8002bc6:	f7ff fd79 	bl	80026bc <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bca:	2360      	movs	r3, #96	@ 0x60
 8002bcc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	480c      	ldr	r0, [pc, #48]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002be2:	f001 fafb 	bl	80041dc <HAL_TIM_PWM_ConfigChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002bec:	f7ff fd66 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4807      	ldr	r0, [pc, #28]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002bf8:	f001 faf0 	bl	80041dc <HAL_TIM_PWM_ConfigChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002c02:	f7ff fd5b 	bl	80026bc <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim4);
 8002c06:	4803      	ldr	r0, [pc, #12]	@ (8002c14 <MX_TIM4_Init+0x98>)
 8002c08:	f7ff fdc4 	bl	8002794 <HAL_TIM_MspPostInit>
}
 8002c0c:	bf00      	nop
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200002a4 	.word	0x200002a4
 8002c18:	40000800 	.word	0x40000800

08002c1c <__io_putchar>:
UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart3;


int __io_putchar(int ch)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002c24:	1d39      	adds	r1, r7, #4
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4803      	ldr	r0, [pc, #12]	@ (8002c3c <__io_putchar+0x20>)
 8002c2e:	f001 fea8 	bl	8004982 <HAL_UART_Transmit>
    return ch;
 8002c32:	687b      	ldr	r3, [r7, #4]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000334 	.word	0x20000334

08002c40 <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002c44:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <MX_USART2_UART_Init+0x48>)
 8002c46:	4a11      	ldr	r2, [pc, #68]	@ (8002c8c <MX_USART2_UART_Init+0x4c>)
 8002c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <MX_USART2_UART_Init+0x48>)
 8002c4c:	4a10      	ldr	r2, [pc, #64]	@ (8002c90 <MX_USART2_UART_Init+0x50>)
 8002c4e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c50:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <MX_USART2_UART_Init+0x48>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <MX_USART2_UART_Init+0x48>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <MX_USART2_UART_Init+0x48>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <MX_USART2_UART_Init+0x48>)
 8002c64:	220c      	movs	r2, #12
 8002c66:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c68:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <MX_USART2_UART_Init+0x48>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <MX_USART2_UART_Init+0x48>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	61da      	str	r2, [r3, #28]

  // Full-Duplex 초기화
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c74:	4804      	ldr	r0, [pc, #16]	@ (8002c88 <MX_USART2_UART_Init+0x48>)
 8002c76:	f001 fe34 	bl	80048e2 <HAL_UART_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002c80:	f7ff fd1c 	bl	80026bc <Error_Handler>
  }
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200002ec 	.word	0x200002ec
 8002c8c:	40004400 	.word	0x40004400
 8002c90:	000f4240 	.word	0x000f4240

08002c94 <MX_USART3_UART_Init>:

void MX_USART3_UART_Init(void)
 {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
   huart3.Instance = USART3;
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <MX_USART3_UART_Init+0x4c>)
 8002c9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ce4 <MX_USART3_UART_Init+0x50>)
 8002c9c:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 115200;
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <MX_USART3_UART_Init+0x4c>)
 8002ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ca4:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <MX_USART3_UART_Init+0x4c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <MX_USART3_UART_Init+0x4c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <MX_USART3_UART_Init+0x4c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <MX_USART3_UART_Init+0x4c>)
 8002cba:	220c      	movs	r2, #12
 8002cbc:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <MX_USART3_UART_Init+0x4c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <MX_USART3_UART_Init+0x4c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
   if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cca:	4805      	ldr	r0, [pc, #20]	@ (8002ce0 <MX_USART3_UART_Init+0x4c>)
 8002ccc:	f001 fe09 	bl	80048e2 <HAL_UART_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_USART3_UART_Init+0x46>
   {
     Error_Handler();
 8002cd6:	f7ff fcf1 	bl	80026bc <Error_Handler>
    }
  }
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000334 	.word	0x20000334
 8002ce4:	40004800 	.word	0x40004800

08002ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002cec:	f7ff ff34 	bl	8002b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cf0:	480c      	ldr	r0, [pc, #48]	@ (8002d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cf2:	490d      	ldr	r1, [pc, #52]	@ (8002d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf8:	e002      	b.n	8002d00 <LoopCopyDataInit>

08002cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfe:	3304      	adds	r3, #4

08002d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d04:	d3f9      	bcc.n	8002cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d06:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d08:	4c0a      	ldr	r4, [pc, #40]	@ (8002d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d0c:	e001      	b.n	8002d12 <LoopFillZerobss>

08002d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d10:	3204      	adds	r2, #4

08002d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d14:	d3fb      	bcc.n	8002d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d16:	f004 f893 	bl	8006e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d1a:	f7ff fa03 	bl	8002124 <main>
  bx  lr    
 8002d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d28:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002d2c:	0800b330 	.word	0x0800b330
  ldr r2, =_sbss
 8002d30:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002d34:	200004cc 	.word	0x200004cc

08002d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC_IRQHandler>
	...

08002d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d40:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_Init+0x40>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <HAL_Init+0x40>)
 8002d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <HAL_Init+0x40>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0a      	ldr	r2, [pc, #40]	@ (8002d7c <HAL_Init+0x40>)
 8002d52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d58:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <HAL_Init+0x40>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a07      	ldr	r2, [pc, #28]	@ (8002d7c <HAL_Init+0x40>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d64:	2003      	movs	r0, #3
 8002d66:	f000 f94f 	bl	8003008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6a:	200f      	movs	r0, #15
 8002d6c:	f000 f808 	bl	8002d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d70:	f7ff fcba 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00

08002d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d88:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <HAL_InitTick+0x54>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_InitTick+0x58>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f967 	bl	8003072 <HAL_SYSTICK_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00e      	b.n	8002dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b0f      	cmp	r3, #15
 8002db2:	d80a      	bhi.n	8002dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db4:	2200      	movs	r2, #0
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f000 f92f 	bl	800301e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc0:	4a06      	ldr	r2, [pc, #24]	@ (8002ddc <HAL_InitTick+0x5c>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000008 	.word	0x20000008
 8002ddc:	20000004 	.word	0x20000004

08002de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_IncTick+0x20>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_IncTick+0x24>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <HAL_IncTick+0x24>)
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000008 	.word	0x20000008
 8002e04:	2000037c 	.word	0x2000037c

08002e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <HAL_GetTick+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	2000037c 	.word	0x2000037c

08002e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff ffee 	bl	8002e08 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d005      	beq.n	8002e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <HAL_Delay+0x44>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e46:	bf00      	nop
 8002e48:	f7ff ffde 	bl	8002e08 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d8f7      	bhi.n	8002e48 <HAL_Delay+0x28>
  {
  }
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000008 	.word	0x20000008

08002e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e78:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e84:	4013      	ands	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9a:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	60d3      	str	r3, [r2, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb4:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	f003 0307 	and.w	r3, r3, #7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	db0b      	blt.n	8002ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	4907      	ldr	r1, [pc, #28]	@ (8002f04 <__NVIC_EnableIRQ+0x38>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2001      	movs	r0, #1
 8002eee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000e100 	.word	0xe000e100

08002f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	db0a      	blt.n	8002f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	490c      	ldr	r1, [pc, #48]	@ (8002f54 <__NVIC_SetPriority+0x4c>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f30:	e00a      	b.n	8002f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4908      	ldr	r1, [pc, #32]	@ (8002f58 <__NVIC_SetPriority+0x50>)
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	3b04      	subs	r3, #4
 8002f40:	0112      	lsls	r2, r2, #4
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	440b      	add	r3, r1
 8002f46:	761a      	strb	r2, [r3, #24]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000e100 	.word	0xe000e100
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	@ 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f1c3 0307 	rsb	r3, r3, #7
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	bf28      	it	cs
 8002f7a:	2304      	movcs	r3, #4
 8002f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d902      	bls.n	8002f8c <NVIC_EncodePriority+0x30>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3b03      	subs	r3, #3
 8002f8a:	e000      	b.n	8002f8e <NVIC_EncodePriority+0x32>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	f04f 32ff 	mov.w	r2, #4294967295
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	43d9      	mvns	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	4313      	orrs	r3, r2
         );
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	@ 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd4:	d301      	bcc.n	8002fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00f      	b.n	8002ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fda:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <SysTick_Config+0x40>)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe2:	210f      	movs	r1, #15
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe8:	f7ff ff8e 	bl	8002f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <SysTick_Config+0x40>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff2:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <SysTick_Config+0x40>)
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	e000e010 	.word	0xe000e010

08003008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff29 	bl	8002e68 <__NVIC_SetPriorityGrouping>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003030:	f7ff ff3e 	bl	8002eb0 <__NVIC_GetPriorityGrouping>
 8003034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f7ff ff8e 	bl	8002f5c <NVIC_EncodePriority>
 8003040:	4602      	mov	r2, r0
 8003042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff5d 	bl	8002f08 <__NVIC_SetPriority>
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff31 	bl	8002ecc <__NVIC_EnableIRQ>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ffa2 	bl	8002fc4 <SysTick_Config>
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003096:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff feb6 	bl	8002e08 <HAL_GetTick>
 800309c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d008      	beq.n	80030bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2280      	movs	r2, #128	@ 0x80
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e052      	b.n	8003162 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0216 	bic.w	r2, r2, #22
 80030ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d103      	bne.n	80030ec <HAL_DMA_Abort+0x62>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0208 	bic.w	r2, r2, #8
 80030fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800310c:	e013      	b.n	8003136 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800310e:	f7ff fe7b 	bl	8002e08 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b05      	cmp	r3, #5
 800311a:	d90c      	bls.n	8003136 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2203      	movs	r2, #3
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e015      	b.n	8003162 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e4      	bne.n	800310e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	223f      	movs	r2, #63	@ 0x3f
 800314a:	409a      	lsls	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d004      	beq.n	8003188 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2280      	movs	r2, #128	@ 0x80
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e00c      	b.n	80031a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2205      	movs	r2, #5
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	@ 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e16b      	b.n	80034a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031cc:	2201      	movs	r2, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 815a 	bne.w	800349e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d005      	beq.n	8003202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80b4 	beq.w	800349e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b60      	ldr	r3, [pc, #384]	@ (80034bc <HAL_GPIO_Init+0x30c>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	4a5f      	ldr	r2, [pc, #380]	@ (80034bc <HAL_GPIO_Init+0x30c>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003344:	6453      	str	r3, [r2, #68]	@ 0x44
 8003346:	4b5d      	ldr	r3, [pc, #372]	@ (80034bc <HAL_GPIO_Init+0x30c>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003352:	4a5b      	ldr	r2, [pc, #364]	@ (80034c0 <HAL_GPIO_Init+0x310>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a52      	ldr	r2, [pc, #328]	@ (80034c4 <HAL_GPIO_Init+0x314>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d02b      	beq.n	80033d6 <HAL_GPIO_Init+0x226>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a51      	ldr	r2, [pc, #324]	@ (80034c8 <HAL_GPIO_Init+0x318>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d025      	beq.n	80033d2 <HAL_GPIO_Init+0x222>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a50      	ldr	r2, [pc, #320]	@ (80034cc <HAL_GPIO_Init+0x31c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01f      	beq.n	80033ce <HAL_GPIO_Init+0x21e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4f      	ldr	r2, [pc, #316]	@ (80034d0 <HAL_GPIO_Init+0x320>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d019      	beq.n	80033ca <HAL_GPIO_Init+0x21a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4e      	ldr	r2, [pc, #312]	@ (80034d4 <HAL_GPIO_Init+0x324>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_GPIO_Init+0x216>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4d      	ldr	r2, [pc, #308]	@ (80034d8 <HAL_GPIO_Init+0x328>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00d      	beq.n	80033c2 <HAL_GPIO_Init+0x212>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4c      	ldr	r2, [pc, #304]	@ (80034dc <HAL_GPIO_Init+0x32c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d007      	beq.n	80033be <HAL_GPIO_Init+0x20e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a4b      	ldr	r2, [pc, #300]	@ (80034e0 <HAL_GPIO_Init+0x330>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_GPIO_Init+0x20a>
 80033b6:	2307      	movs	r3, #7
 80033b8:	e00e      	b.n	80033d8 <HAL_GPIO_Init+0x228>
 80033ba:	2308      	movs	r3, #8
 80033bc:	e00c      	b.n	80033d8 <HAL_GPIO_Init+0x228>
 80033be:	2306      	movs	r3, #6
 80033c0:	e00a      	b.n	80033d8 <HAL_GPIO_Init+0x228>
 80033c2:	2305      	movs	r3, #5
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x228>
 80033c6:	2304      	movs	r3, #4
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x228>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x228>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x228>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x228>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	@ (80034c0 <HAL_GPIO_Init+0x310>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f6:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <HAL_GPIO_Init+0x334>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341a:	4a32      	ldr	r2, [pc, #200]	@ (80034e4 <HAL_GPIO_Init+0x334>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003420:	4b30      	ldr	r3, [pc, #192]	@ (80034e4 <HAL_GPIO_Init+0x334>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003444:	4a27      	ldr	r2, [pc, #156]	@ (80034e4 <HAL_GPIO_Init+0x334>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800344a:	4b26      	ldr	r3, [pc, #152]	@ (80034e4 <HAL_GPIO_Init+0x334>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346e:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <HAL_GPIO_Init+0x334>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <HAL_GPIO_Init+0x334>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003498:	4a12      	ldr	r2, [pc, #72]	@ (80034e4 <HAL_GPIO_Init+0x334>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f ae90 	bls.w	80031cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40021400 	.word	0x40021400
 80034dc:	40021800 	.word	0x40021800
 80034e0:	40021c00 	.word	0x40021c00
 80034e4:	40013c00 	.word	0x40013c00

080034e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	807b      	strh	r3, [r7, #2]
 80034f4:	4613      	mov	r3, r2
 80034f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f8:	787b      	ldrb	r3, [r7, #1]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003504:	e003      	b.n	800350e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	041a      	lsls	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	619a      	str	r2, [r3, #24]
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e267      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d075      	beq.n	8003626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800353a:	4b88      	ldr	r3, [pc, #544]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b04      	cmp	r3, #4
 8003544:	d00c      	beq.n	8003560 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003546:	4b85      	ldr	r3, [pc, #532]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800354e:	2b08      	cmp	r3, #8
 8003550:	d112      	bne.n	8003578 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003552:	4b82      	ldr	r3, [pc, #520]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800355a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800355e:	d10b      	bne.n	8003578 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	4b7e      	ldr	r3, [pc, #504]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d05b      	beq.n	8003624 <HAL_RCC_OscConfig+0x108>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d157      	bne.n	8003624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e242      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003580:	d106      	bne.n	8003590 <HAL_RCC_OscConfig+0x74>
 8003582:	4b76      	ldr	r3, [pc, #472]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a75      	ldr	r2, [pc, #468]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e01d      	b.n	80035cc <HAL_RCC_OscConfig+0xb0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x98>
 800359a:	4b70      	ldr	r3, [pc, #448]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6f      	ldr	r2, [pc, #444]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b6d      	ldr	r3, [pc, #436]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6c      	ldr	r2, [pc, #432]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0xb0>
 80035b4:	4b69      	ldr	r3, [pc, #420]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a68      	ldr	r2, [pc, #416]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80035ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	4b66      	ldr	r3, [pc, #408]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a65      	ldr	r2, [pc, #404]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80035c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d013      	beq.n	80035fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7ff fc18 	bl	8002e08 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035dc:	f7ff fc14 	bl	8002e08 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	@ 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e207      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b5b      	ldr	r3, [pc, #364]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0xc0>
 80035fa:	e014      	b.n	8003626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7ff fc04 	bl	8002e08 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7ff fc00 	bl	8002e08 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	@ 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e1f3      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	4b51      	ldr	r3, [pc, #324]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0xe8>
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d063      	beq.n	80036fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003632:	4b4a      	ldr	r3, [pc, #296]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b47      	ldr	r3, [pc, #284]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003646:	2b08      	cmp	r3, #8
 8003648:	d11c      	bne.n	8003684 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b44      	ldr	r3, [pc, #272]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	4b41      	ldr	r3, [pc, #260]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x152>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e1c7      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b3b      	ldr	r3, [pc, #236]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4937      	ldr	r1, [pc, #220]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	e03a      	b.n	80036fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368c:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <HAL_RCC_OscConfig+0x244>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7ff fbb9 	bl	8002e08 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369a:	f7ff fbb5 	bl	8002e08 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1a8      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	4b2b      	ldr	r3, [pc, #172]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b28      	ldr	r3, [pc, #160]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4925      	ldr	r1, [pc, #148]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ce:	4b24      	ldr	r3, [pc, #144]	@ (8003760 <HAL_RCC_OscConfig+0x244>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7ff fb98 	bl	8002e08 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036dc:	f7ff fb94 	bl	8002e08 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e187      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	4b1b      	ldr	r3, [pc, #108]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d036      	beq.n	8003774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370e:	4b15      	ldr	r3, [pc, #84]	@ (8003764 <HAL_RCC_OscConfig+0x248>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7ff fb78 	bl	8002e08 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371c:	f7ff fb74 	bl	8002e08 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e167      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	4b0b      	ldr	r3, [pc, #44]	@ (800375c <HAL_RCC_OscConfig+0x240>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x200>
 800373a:	e01b      	b.n	8003774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373c:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <HAL_RCC_OscConfig+0x248>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7ff fb61 	bl	8002e08 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	e00e      	b.n	8003768 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374a:	f7ff fb5d 	bl	8002e08 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d907      	bls.n	8003768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e150      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
 800375c:	40023800 	.word	0x40023800
 8003760:	42470000 	.word	0x42470000
 8003764:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b88      	ldr	r3, [pc, #544]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ea      	bne.n	800374a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8097 	beq.w	80038b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b81      	ldr	r3, [pc, #516]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b7d      	ldr	r3, [pc, #500]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	4a7c      	ldr	r2, [pc, #496]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037a2:	4b7a      	ldr	r3, [pc, #488]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b77      	ldr	r3, [pc, #476]	@ (8003990 <HAL_RCC_OscConfig+0x474>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b74      	ldr	r3, [pc, #464]	@ (8003990 <HAL_RCC_OscConfig+0x474>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a73      	ldr	r2, [pc, #460]	@ (8003990 <HAL_RCC_OscConfig+0x474>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7ff fb1d 	bl	8002e08 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7ff fb19 	bl	8002e08 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e10c      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003990 <HAL_RCC_OscConfig+0x474>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x2ea>
 80037f8:	4b64      	ldr	r3, [pc, #400]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	4a63      	ldr	r2, [pc, #396]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x324>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x30c>
 800380e:	4b5f      	ldr	r3, [pc, #380]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	4a5e      	ldr	r2, [pc, #376]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6713      	str	r3, [r2, #112]	@ 0x70
 800381a:	4b5c      	ldr	r3, [pc, #368]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381e:	4a5b      	ldr	r2, [pc, #364]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	@ 0x70
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x324>
 8003828:	4b58      	ldr	r3, [pc, #352]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382c:	4a57      	ldr	r2, [pc, #348]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	@ 0x70
 8003834:	4b55      	ldr	r3, [pc, #340]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003838:	4a54      	ldr	r2, [pc, #336]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7ff fade 	bl	8002e08 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7ff fada 	bl	8002e08 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0cb      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	4b49      	ldr	r3, [pc, #292]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0ee      	beq.n	8003850 <HAL_RCC_OscConfig+0x334>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7ff fac8 	bl	8002e08 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7ff fac4 	bl	8002e08 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0b5      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	4b3e      	ldr	r3, [pc, #248]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ee      	bne.n	800387c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b39      	ldr	r3, [pc, #228]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	4a38      	ldr	r2, [pc, #224]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a1 	beq.w	80039fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ba:	4b34      	ldr	r3, [pc, #208]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d05c      	beq.n	8003980 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d141      	bne.n	8003952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <HAL_RCC_OscConfig+0x478>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7ff fa98 	bl	8002e08 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7ff fa94 	bl	8002e08 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e087      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b27      	ldr	r3, [pc, #156]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	3b01      	subs	r3, #1
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	491b      	ldr	r1, [pc, #108]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003924:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <HAL_RCC_OscConfig+0x478>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7ff fa6d 	bl	8002e08 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003932:	f7ff fa69 	bl	8002e08 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e05c      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003944:	4b11      	ldr	r3, [pc, #68]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x416>
 8003950:	e054      	b.n	80039fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <HAL_RCC_OscConfig+0x478>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7ff fa56 	bl	8002e08 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7ff fa52 	bl	8002e08 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e045      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCC_OscConfig+0x470>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x444>
 800397e:	e03d      	b.n	80039fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d107      	bne.n	8003998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e038      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000
 8003994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003998:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <HAL_RCC_OscConfig+0x4ec>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d028      	beq.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d121      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d11a      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039c8:	4013      	ands	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d111      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	3b01      	subs	r3, #1
 80039e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800

08003a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0cc      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a20:	4b68      	ldr	r3, [pc, #416]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d90c      	bls.n	8003a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b65      	ldr	r3, [pc, #404]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b63      	ldr	r3, [pc, #396]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0b8      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d020      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a60:	4b59      	ldr	r3, [pc, #356]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a58      	ldr	r2, [pc, #352]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a78:	4b53      	ldr	r3, [pc, #332]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a52      	ldr	r2, [pc, #328]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4b50      	ldr	r3, [pc, #320]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	494d      	ldr	r1, [pc, #308]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d044      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b47      	ldr	r3, [pc, #284]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d119      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e07f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d107      	bne.n	8003ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ada:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e067      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aea:	4b37      	ldr	r3, [pc, #220]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f023 0203 	bic.w	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4934      	ldr	r1, [pc, #208]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003afc:	f7ff f984 	bl	8002e08 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b04:	f7ff f980 	bl	8002e08 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e04f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 020c 	and.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1eb      	bne.n	8003b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b25      	ldr	r3, [pc, #148]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d20c      	bcs.n	8003b54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b22      	ldr	r3, [pc, #136]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e032      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b60:	4b19      	ldr	r3, [pc, #100]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4916      	ldr	r1, [pc, #88]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7e:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	490e      	ldr	r1, [pc, #56]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b92:	f000 f821 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 8003b96:	4602      	mov	r2, r0
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	490a      	ldr	r1, [pc, #40]	@ (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	5ccb      	ldrb	r3, [r1, r3]
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	4a09      	ldr	r2, [pc, #36]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bae:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff f8e4 	bl	8002d80 <HAL_InitTick>

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023c00 	.word	0x40023c00
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	0800ae68 	.word	0x0800ae68
 8003bd0:	20000000 	.word	0x20000000
 8003bd4:	20000004 	.word	0x20000004

08003bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bdc:	b090      	sub	sp, #64	@ 0x40
 8003bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf0:	4b59      	ldr	r3, [pc, #356]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d00d      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x40>
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	f200 80a1 	bhi.w	8003d44 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x34>
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d003      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c0a:	e09b      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b53      	ldr	r3, [pc, #332]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c10:	e09b      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c12:	4b53      	ldr	r3, [pc, #332]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c16:	e098      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c18:	4b4f      	ldr	r3, [pc, #316]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c22:	4b4d      	ldr	r3, [pc, #308]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d028      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	099b      	lsrs	r3, r3, #6
 8003c34:	2200      	movs	r2, #0
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c40:	2100      	movs	r1, #0
 8003c42:	4b47      	ldr	r3, [pc, #284]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c44:	fb03 f201 	mul.w	r2, r3, r1
 8003c48:	2300      	movs	r3, #0
 8003c4a:	fb00 f303 	mul.w	r3, r0, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	4a43      	ldr	r2, [pc, #268]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c52:	fba0 1202 	umull	r1, r2, r0, r2
 8003c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c58:	460a      	mov	r2, r1
 8003c5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c5e:	4413      	add	r3, r2
 8003c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c64:	2200      	movs	r2, #0
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	61fa      	str	r2, [r7, #28]
 8003c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c72:	f7fd f809 	bl	8000c88 <__aeabi_uldivmod>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c7e:	e053      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c80:	4b35      	ldr	r3, [pc, #212]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	2200      	movs	r2, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	617a      	str	r2, [r7, #20]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c92:	f04f 0b00 	mov.w	fp, #0
 8003c96:	4652      	mov	r2, sl
 8003c98:	465b      	mov	r3, fp
 8003c9a:	f04f 0000 	mov.w	r0, #0
 8003c9e:	f04f 0100 	mov.w	r1, #0
 8003ca2:	0159      	lsls	r1, r3, #5
 8003ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca8:	0150      	lsls	r0, r2, #5
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	ebb2 080a 	subs.w	r8, r2, sl
 8003cb2:	eb63 090b 	sbc.w	r9, r3, fp
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cca:	ebb2 0408 	subs.w	r4, r2, r8
 8003cce:	eb63 0509 	sbc.w	r5, r3, r9
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	00eb      	lsls	r3, r5, #3
 8003cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce0:	00e2      	lsls	r2, r4, #3
 8003ce2:	4614      	mov	r4, r2
 8003ce4:	461d      	mov	r5, r3
 8003ce6:	eb14 030a 	adds.w	r3, r4, sl
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	eb45 030b 	adc.w	r3, r5, fp
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfe:	4629      	mov	r1, r5
 8003d00:	028b      	lsls	r3, r1, #10
 8003d02:	4621      	mov	r1, r4
 8003d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d08:	4621      	mov	r1, r4
 8003d0a:	028a      	lsls	r2, r1, #10
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d12:	2200      	movs	r2, #0
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	60fa      	str	r2, [r7, #12]
 8003d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d1c:	f7fc ffb4 	bl	8000c88 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3740      	adds	r7, #64	@ 0x40
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	017d7840 	.word	0x017d7840

08003d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d68:	4b03      	ldr	r3, [pc, #12]	@ (8003d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000000 	.word	0x20000000

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	@ (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	0800ae78 	.word	0x0800ae78

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffdc 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0b5b      	lsrs	r3, r3, #13
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	@ (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	0800ae78 	.word	0x0800ae78

08003dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fe fca6 	bl	8002744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 fada 	bl	80043c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_TIM_PWM_Start+0x24>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e022      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d109      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x3e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	e015      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d109      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0x58>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e008      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x6a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e07c      	b.n	8003fd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <HAL_TIM_PWM_Start+0x82>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eec:	e013      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_PWM_Start+0x92>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003efc:	e00b      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d104      	bne.n	8003f0e <HAL_TIM_PWM_Start+0xa2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f0c:	e003      	b.n	8003f16 <HAL_TIM_PWM_Start+0xaa>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fca6 	bl	8004870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe0 <HAL_TIM_PWM_Start+0x174>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_TIM_PWM_Start+0xcc>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe4 <HAL_TIM_PWM_Start+0x178>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <HAL_TIM_PWM_Start+0xd0>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <HAL_TIM_PWM_Start+0xd2>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a22      	ldr	r2, [pc, #136]	@ (8003fe0 <HAL_TIM_PWM_Start+0x174>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0x136>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f64:	d01d      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0x136>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe8 <HAL_TIM_PWM_Start+0x17c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0x136>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1d      	ldr	r2, [pc, #116]	@ (8003fec <HAL_TIM_PWM_Start+0x180>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0x136>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff0 <HAL_TIM_PWM_Start+0x184>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0x136>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a16      	ldr	r2, [pc, #88]	@ (8003fe4 <HAL_TIM_PWM_Start+0x178>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0x136>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a18      	ldr	r2, [pc, #96]	@ (8003ff4 <HAL_TIM_PWM_Start+0x188>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0x136>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a16      	ldr	r2, [pc, #88]	@ (8003ff8 <HAL_TIM_PWM_Start+0x18c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d111      	bne.n	8003fc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b06      	cmp	r3, #6
 8003fb2:	d010      	beq.n	8003fd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc4:	e007      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0201 	orr.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40000c00 	.word	0x40000c00
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40001800 	.word	0x40001800

08003ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d020      	beq.n	8004060 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01b      	beq.n	8004060 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0202 	mvn.w	r2, #2
 8004030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f99e 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f990 	bl	8004374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f9a1 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d020      	beq.n	80040ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01b      	beq.n	80040ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0204 	mvn.w	r2, #4
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2202      	movs	r2, #2
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f978 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f96a 	bl	8004374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f97b 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d020      	beq.n	80040f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01b      	beq.n	80040f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0208 	mvn.w	r2, #8
 80040c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2204      	movs	r2, #4
 80040ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f952 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 80040e4:	e005      	b.n	80040f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f944 	bl	8004374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f955 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d020      	beq.n	8004144 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01b      	beq.n	8004144 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0210 	mvn.w	r2, #16
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2208      	movs	r2, #8
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f92c 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f91e 	bl	8004374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f92f 	bl	800439c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0201 	mvn.w	r2, #1
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8fc 	bl	8004360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fba1 	bl	80048ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00c      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f900 	bl	80043b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0220 	mvn.w	r2, #32
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fb73 	bl	80048ba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e0ae      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b0c      	cmp	r3, #12
 8004206:	f200 809f 	bhi.w	8004348 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800420a:	a201      	add	r2, pc, #4	@ (adr r2, 8004210 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004245 	.word	0x08004245
 8004214:	08004349 	.word	0x08004349
 8004218:	08004349 	.word	0x08004349
 800421c:	08004349 	.word	0x08004349
 8004220:	08004285 	.word	0x08004285
 8004224:	08004349 	.word	0x08004349
 8004228:	08004349 	.word	0x08004349
 800422c:	08004349 	.word	0x08004349
 8004230:	080042c7 	.word	0x080042c7
 8004234:	08004349 	.word	0x08004349
 8004238:	08004349 	.word	0x08004349
 800423c:	08004349 	.word	0x08004349
 8004240:	08004307 	.word	0x08004307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f960 	bl	8004510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0208 	orr.w	r2, r2, #8
 800425e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0204 	bic.w	r2, r2, #4
 800426e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6999      	ldr	r1, [r3, #24]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	619a      	str	r2, [r3, #24]
      break;
 8004282:	e064      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f9b0 	bl	80045f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800429e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6999      	ldr	r1, [r3, #24]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	021a      	lsls	r2, r3, #8
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	619a      	str	r2, [r3, #24]
      break;
 80042c4:	e043      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fa05 	bl	80046dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0208 	orr.w	r2, r2, #8
 80042e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0204 	bic.w	r2, r2, #4
 80042f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69d9      	ldr	r1, [r3, #28]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	61da      	str	r2, [r3, #28]
      break;
 8004304:	e023      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fa59 	bl	80047c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69da      	ldr	r2, [r3, #28]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69d9      	ldr	r1, [r3, #28]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	021a      	lsls	r2, r3, #8
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	61da      	str	r2, [r3, #28]
      break;
 8004346:	e002      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
      break;
 800434c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a43      	ldr	r2, [pc, #268]	@ (80044e4 <TIM_Base_SetConfig+0x120>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e2:	d00f      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a40      	ldr	r2, [pc, #256]	@ (80044e8 <TIM_Base_SetConfig+0x124>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00b      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a3f      	ldr	r2, [pc, #252]	@ (80044ec <TIM_Base_SetConfig+0x128>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d007      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a3e      	ldr	r2, [pc, #248]	@ (80044f0 <TIM_Base_SetConfig+0x12c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a3d      	ldr	r2, [pc, #244]	@ (80044f4 <TIM_Base_SetConfig+0x130>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a32      	ldr	r2, [pc, #200]	@ (80044e4 <TIM_Base_SetConfig+0x120>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02b      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004424:	d027      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2f      	ldr	r2, [pc, #188]	@ (80044e8 <TIM_Base_SetConfig+0x124>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d023      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2e      	ldr	r2, [pc, #184]	@ (80044ec <TIM_Base_SetConfig+0x128>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01f      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2d      	ldr	r2, [pc, #180]	@ (80044f0 <TIM_Base_SetConfig+0x12c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01b      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2c      	ldr	r2, [pc, #176]	@ (80044f4 <TIM_Base_SetConfig+0x130>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d017      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2b      	ldr	r2, [pc, #172]	@ (80044f8 <TIM_Base_SetConfig+0x134>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a2a      	ldr	r2, [pc, #168]	@ (80044fc <TIM_Base_SetConfig+0x138>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00f      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a29      	ldr	r2, [pc, #164]	@ (8004500 <TIM_Base_SetConfig+0x13c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a28      	ldr	r2, [pc, #160]	@ (8004504 <TIM_Base_SetConfig+0x140>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a27      	ldr	r2, [pc, #156]	@ (8004508 <TIM_Base_SetConfig+0x144>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a26      	ldr	r2, [pc, #152]	@ (800450c <TIM_Base_SetConfig+0x148>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d108      	bne.n	8004488 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a0e      	ldr	r2, [pc, #56]	@ (80044e4 <TIM_Base_SetConfig+0x120>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d003      	beq.n	80044b6 <TIM_Base_SetConfig+0xf2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a10      	ldr	r2, [pc, #64]	@ (80044f4 <TIM_Base_SetConfig+0x130>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d103      	bne.n	80044be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f043 0204 	orr.w	r2, r3, #4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40010400 	.word	0x40010400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40014400 	.word	0x40014400
 8004500:	40014800 	.word	0x40014800
 8004504:	40001800 	.word	0x40001800
 8004508:	40001c00 	.word	0x40001c00
 800450c:	40002000 	.word	0x40002000

08004510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f023 0201 	bic.w	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f023 0302 	bic.w	r3, r3, #2
 8004558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a20      	ldr	r2, [pc, #128]	@ (80045e8 <TIM_OC1_SetConfig+0xd8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC1_SetConfig+0x64>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a1f      	ldr	r2, [pc, #124]	@ (80045ec <TIM_OC1_SetConfig+0xdc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10c      	bne.n	800458e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0308 	bic.w	r3, r3, #8
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a15      	ldr	r2, [pc, #84]	@ (80045e8 <TIM_OC1_SetConfig+0xd8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_OC1_SetConfig+0x8e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a14      	ldr	r2, [pc, #80]	@ (80045ec <TIM_OC1_SetConfig+0xdc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d111      	bne.n	80045c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	621a      	str	r2, [r3, #32]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40010400 	.word	0x40010400

080045f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f023 0210 	bic.w	r2, r3, #16
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f023 0320 	bic.w	r3, r3, #32
 800463a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a22      	ldr	r2, [pc, #136]	@ (80046d4 <TIM_OC2_SetConfig+0xe4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_OC2_SetConfig+0x68>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a21      	ldr	r2, [pc, #132]	@ (80046d8 <TIM_OC2_SetConfig+0xe8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10d      	bne.n	8004674 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a17      	ldr	r2, [pc, #92]	@ (80046d4 <TIM_OC2_SetConfig+0xe4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_OC2_SetConfig+0x94>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a16      	ldr	r2, [pc, #88]	@ (80046d8 <TIM_OC2_SetConfig+0xe8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d113      	bne.n	80046ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800468a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40010400 	.word	0x40010400

080046dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0303 	bic.w	r3, r3, #3
 8004712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a21      	ldr	r2, [pc, #132]	@ (80047bc <TIM_OC3_SetConfig+0xe0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <TIM_OC3_SetConfig+0x66>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a20      	ldr	r2, [pc, #128]	@ (80047c0 <TIM_OC3_SetConfig+0xe4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10d      	bne.n	800475e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800475c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a16      	ldr	r2, [pc, #88]	@ (80047bc <TIM_OC3_SetConfig+0xe0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_OC3_SetConfig+0x92>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a15      	ldr	r2, [pc, #84]	@ (80047c0 <TIM_OC3_SetConfig+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d113      	bne.n	8004796 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800477c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	621a      	str	r2, [r3, #32]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40010400 	.word	0x40010400

080047c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800480e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	031b      	lsls	r3, r3, #12
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a12      	ldr	r2, [pc, #72]	@ (8004868 <TIM_OC4_SetConfig+0xa4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_OC4_SetConfig+0x68>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a11      	ldr	r2, [pc, #68]	@ (800486c <TIM_OC4_SetConfig+0xa8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d109      	bne.n	8004840 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40010400 	.word	0x40010400

08004870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	2201      	movs	r2, #1
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1a      	ldr	r2, [r3, #32]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	43db      	mvns	r3, r3
 8004892:	401a      	ands	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e042      	b.n	800497a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d106      	bne.n	800490e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fd ff7d 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2224      	movs	r2, #36	@ 0x24
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004924:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fe6a 	bl	8005600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800493a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800494a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800495a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08a      	sub	sp, #40	@ 0x28
 8004986:	af02      	add	r7, sp, #8
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d175      	bne.n	8004a8e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_UART_Transmit+0x2c>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e06e      	b.n	8004a90 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2221      	movs	r2, #33	@ 0x21
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c0:	f7fe fa22 	bl	8002e08 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049da:	d108      	bne.n	80049ee <HAL_UART_Transmit+0x6c>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	e003      	b.n	80049f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049f6:	e02e      	b.n	8004a56 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2200      	movs	r2, #0
 8004a00:	2180      	movs	r1, #128	@ 0x80
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fbce 	bl	80051a4 <UART_WaitOnFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e03a      	b.n	8004a90 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a2e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	3302      	adds	r3, #2
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e007      	b.n	8004a48 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3301      	adds	r3, #1
 8004a46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1cb      	bne.n	80049f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2200      	movs	r2, #0
 8004a68:	2140      	movs	r1, #64	@ 0x40
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 fb9a 	bl	80051a4 <UART_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e006      	b.n	8004a90 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e000      	b.n	8004a90 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
  }
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3720      	adds	r7, #32
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	@ 0x28
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	f040 8081 	bne.w	8004bbc <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_Receive+0x2e>
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e079      	b.n	8004bbe <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2222      	movs	r2, #34	@ 0x22
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ade:	f7fe f993 	bl	8002e08 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	88fa      	ldrh	r2, [r7, #6]
 8004ae8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af8:	d108      	bne.n	8004b0c <HAL_UART_Receive+0x74>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e003      	b.n	8004b14 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b14:	e047      	b.n	8004ba6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2120      	movs	r1, #32
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fb3f 	bl	80051a4 <UART_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e042      	b.n	8004bbe <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10c      	bne.n	8004b58 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	3302      	adds	r3, #2
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e01f      	b.n	8004b98 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b60:	d007      	beq.n	8004b72 <HAL_UART_Receive+0xda>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <HAL_UART_Receive+0xe8>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e008      	b.n	8004b92 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3301      	adds	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1b2      	bne.n	8004b16 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d112      	bne.n	8004c06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_UART_Receive_IT+0x26>
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e00b      	b.n	8004c08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fb2a 	bl	8005256 <UART_Start_Receive_IT>
 8004c02:	4603      	mov	r3, r0
 8004c04:	e000      	b.n	8004c08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
  }
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b0ba      	sub	sp, #232	@ 0xe8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10f      	bne.n	8004c76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <HAL_UART_IRQHandler+0x66>
 8004c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fc07 	bl	8005482 <UART_Receive_IT>
      return;
 8004c74:	e273      	b.n	800515e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 80de 	beq.w	8004e3c <HAL_UART_IRQHandler+0x22c>
 8004c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80d1 	beq.w	8004e3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_UART_IRQHandler+0xae>
 8004ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb6:	f043 0201 	orr.w	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00b      	beq.n	8004ce2 <HAL_UART_IRQHandler+0xd2>
 8004cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cda:	f043 0202 	orr.w	r2, r3, #2
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_UART_IRQHandler+0xf6>
 8004cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d011      	beq.n	8004d36 <HAL_UART_IRQHandler+0x126>
 8004d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d105      	bne.n	8004d2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	f043 0208 	orr.w	r2, r3, #8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 820a 	beq.w	8005154 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_UART_IRQHandler+0x14e>
 8004d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fb92 	bl	8005482 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d68:	2b40      	cmp	r3, #64	@ 0x40
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <HAL_UART_IRQHandler+0x17a>
 8004d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d04f      	beq.n	8004e2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fa9d 	bl	80052ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9a:	2b40      	cmp	r3, #64	@ 0x40
 8004d9c:	d141      	bne.n	8004e22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3314      	adds	r3, #20
 8004dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1d9      	bne.n	8004d9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d013      	beq.n	8004e1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df6:	4a8a      	ldr	r2, [pc, #552]	@ (8005020 <HAL_UART_IRQHandler+0x410>)
 8004df8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe f9b3 	bl	800316a <HAL_DMA_Abort_IT>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e14:	4610      	mov	r0, r2
 8004e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	e00e      	b.n	8004e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f9ac 	bl	8005178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e20:	e00a      	b.n	8004e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f9a8 	bl	8005178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	e006      	b.n	8004e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f9a4 	bl	8005178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e36:	e18d      	b.n	8005154 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	bf00      	nop
    return;
 8004e3a:	e18b      	b.n	8005154 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	f040 8167 	bne.w	8005114 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8160 	beq.w	8005114 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8159 	beq.w	8005114 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e82:	2b40      	cmp	r3, #64	@ 0x40
 8004e84:	f040 80ce 	bne.w	8005024 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a9 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	f080 80a2 	bcs.w	8004ff0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ebe:	f000 8088 	beq.w	8004fd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004efa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1d9      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3314      	adds	r3, #20
 8004f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e1      	bne.n	8004f0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3314      	adds	r3, #20
 8004f6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e3      	bne.n	8004f4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fa2:	f023 0310 	bic.w	r3, r3, #16
 8004fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fb4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fb6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e3      	bne.n	8004f90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe f85c 	bl	800308a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8cf 	bl	800518c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004fee:	e0b3      	b.n	8005158 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ff4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	f040 80ad 	bne.w	8005158 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005008:	f040 80a6 	bne.w	8005158 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8b7 	bl	800518c <HAL_UARTEx_RxEventCallback>
      return;
 800501e:	e09b      	b.n	8005158 <HAL_UART_IRQHandler+0x548>
 8005020:	08005391 	.word	0x08005391
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800502c:	b29b      	uxth	r3, r3
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 808e 	beq.w	800515c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8089 	beq.w	800515c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	330c      	adds	r3, #12
 8005050:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800505a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005060:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800506e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005070:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005074:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800507c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e3      	bne.n	800504a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3314      	adds	r3, #20
 8005088:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	623b      	str	r3, [r7, #32]
   return(result);
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3314      	adds	r3, #20
 80050a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e3      	bne.n	8005082 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0310 	bic.w	r3, r3, #16
 80050de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050ec:	61fa      	str	r2, [r7, #28]
 80050ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	617b      	str	r3, [r7, #20]
   return(result);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e3      	bne.n	80050c8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f83d 	bl	800518c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005112:	e023      	b.n	800515c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511c:	2b00      	cmp	r3, #0
 800511e:	d009      	beq.n	8005134 <HAL_UART_IRQHandler+0x524>
 8005120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f940 	bl	80053b2 <UART_Transmit_IT>
    return;
 8005132:	e014      	b.n	800515e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00e      	beq.n	800515e <HAL_UART_IRQHandler+0x54e>
 8005140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f980 	bl	8005452 <UART_EndTransmit_IT>
    return;
 8005152:	e004      	b.n	800515e <HAL_UART_IRQHandler+0x54e>
    return;
 8005154:	bf00      	nop
 8005156:	e002      	b.n	800515e <HAL_UART_IRQHandler+0x54e>
      return;
 8005158:	bf00      	nop
 800515a:	e000      	b.n	800515e <HAL_UART_IRQHandler+0x54e>
      return;
 800515c:	bf00      	nop
  }
}
 800515e:	37e8      	adds	r7, #232	@ 0xe8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b4:	e03b      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d037      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051be:	f7fd fe23 	bl	8002e08 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	6a3a      	ldr	r2, [r7, #32]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e03a      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d023      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b80      	cmp	r3, #128	@ 0x80
 80051ea:	d020      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b40      	cmp	r3, #64	@ 0x40
 80051f0:	d01d      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d116      	bne.n	800522e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f857 	bl	80052ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2208      	movs	r2, #8
 8005220:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e00f      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4013      	ands	r3, r2
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	429a      	cmp	r2, r3
 800524a:	d0b4      	beq.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	4613      	mov	r3, r2
 8005262:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	88fa      	ldrh	r2, [r7, #6]
 800526e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2222      	movs	r2, #34	@ 0x22
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800529a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0220 	orr.w	r2, r2, #32
 80052ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b095      	sub	sp, #84	@ 0x54
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80052f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e5      	bne.n	80052d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3314      	adds	r3, #20
 800530c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	61fb      	str	r3, [r7, #28]
   return(result);
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005328:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800532c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533e:	2b01      	cmp	r3, #1
 8005340:	d119      	bne.n	8005376 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	330c      	adds	r3, #12
 8005348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	60bb      	str	r3, [r7, #8]
   return(result);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 0310 	bic.w	r3, r3, #16
 8005358:	647b      	str	r3, [r7, #68]	@ 0x44
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	330c      	adds	r3, #12
 8005360:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005362:	61ba      	str	r2, [r7, #24]
 8005364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6979      	ldr	r1, [r7, #20]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	613b      	str	r3, [r7, #16]
   return(result);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e5      	bne.n	8005342 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005384:	bf00      	nop
 8005386:	3754      	adds	r7, #84	@ 0x54
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff fee7 	bl	8005178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b21      	cmp	r3, #33	@ 0x21
 80053c4:	d13e      	bne.n	8005444 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ce:	d114      	bne.n	80053fa <UART_Transmit_IT+0x48>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d110      	bne.n	80053fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	1c9a      	adds	r2, r3, #2
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	621a      	str	r2, [r3, #32]
 80053f8:	e008      	b.n	800540c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	1c59      	adds	r1, r3, #1
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6211      	str	r1, [r2, #32]
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29b      	uxth	r3, r3
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4619      	mov	r1, r3
 800541a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10f      	bne.n	8005440 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800542e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800543e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	e000      	b.n	8005446 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005444:	2302      	movs	r3, #2
  }
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005468:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fe76 	bl	8005164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b08c      	sub	sp, #48	@ 0x30
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b22      	cmp	r3, #34	@ 0x22
 800549c:	f040 80aa 	bne.w	80055f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a8:	d115      	bne.n	80054d6 <UART_Receive_IT+0x54>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d111      	bne.n	80054d6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	1c9a      	adds	r2, r3, #2
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80054d4:	e024      	b.n	8005520 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e4:	d007      	beq.n	80054f6 <UART_Receive_IT+0x74>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <UART_Receive_IT+0x82>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e008      	b.n	8005516 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005510:	b2da      	uxtb	r2, r3
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29b      	uxth	r3, r3
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4619      	mov	r1, r3
 800552e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005530:	2b00      	cmp	r3, #0
 8005532:	d15d      	bne.n	80055f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0220 	bic.w	r2, r2, #32
 8005542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	2b01      	cmp	r3, #1
 8005578:	d135      	bne.n	80055e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	613b      	str	r3, [r7, #16]
   return(result);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f023 0310 	bic.w	r3, r3, #16
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a0:	623a      	str	r2, [r7, #32]
 80055a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	69f9      	ldr	r1, [r7, #28]
 80055a6:	6a3a      	ldr	r2, [r7, #32]
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e5      	bne.n	8005580 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d10a      	bne.n	80055d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fdd4 	bl	800518c <HAL_UARTEx_RxEventCallback>
 80055e4:	e002      	b.n	80055ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc fede 	bl	80023a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e002      	b.n	80055f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e000      	b.n	80055f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3730      	adds	r7, #48	@ 0x30
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005604:	b0c0      	sub	sp, #256	@ 0x100
 8005606:	af00      	add	r7, sp, #0
 8005608:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561c:	68d9      	ldr	r1, [r3, #12]
 800561e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	ea40 0301 	orr.w	r3, r0, r1
 8005628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	431a      	orrs	r2, r3
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	431a      	orrs	r2, r3
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005658:	f021 010c 	bic.w	r1, r1, #12
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005666:	430b      	orrs	r3, r1
 8005668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567a:	6999      	ldr	r1, [r3, #24]
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	ea40 0301 	orr.w	r3, r0, r1
 8005686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b8f      	ldr	r3, [pc, #572]	@ (80058cc <UART_SetConfig+0x2cc>)
 8005690:	429a      	cmp	r2, r3
 8005692:	d005      	beq.n	80056a0 <UART_SetConfig+0xa0>
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b8d      	ldr	r3, [pc, #564]	@ (80058d0 <UART_SetConfig+0x2d0>)
 800569c:	429a      	cmp	r2, r3
 800569e:	d104      	bne.n	80056aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a0:	f7fe fb80 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 80056a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056a8:	e003      	b.n	80056b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056aa:	f7fe fb67 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 80056ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056bc:	f040 810c 	bne.w	80058d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056d2:	4622      	mov	r2, r4
 80056d4:	462b      	mov	r3, r5
 80056d6:	1891      	adds	r1, r2, r2
 80056d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056da:	415b      	adcs	r3, r3
 80056dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056e2:	4621      	mov	r1, r4
 80056e4:	eb12 0801 	adds.w	r8, r2, r1
 80056e8:	4629      	mov	r1, r5
 80056ea:	eb43 0901 	adc.w	r9, r3, r1
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005702:	4690      	mov	r8, r2
 8005704:	4699      	mov	r9, r3
 8005706:	4623      	mov	r3, r4
 8005708:	eb18 0303 	adds.w	r3, r8, r3
 800570c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005710:	462b      	mov	r3, r5
 8005712:	eb49 0303 	adc.w	r3, r9, r3
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005726:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800572a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800572e:	460b      	mov	r3, r1
 8005730:	18db      	adds	r3, r3, r3
 8005732:	653b      	str	r3, [r7, #80]	@ 0x50
 8005734:	4613      	mov	r3, r2
 8005736:	eb42 0303 	adc.w	r3, r2, r3
 800573a:	657b      	str	r3, [r7, #84]	@ 0x54
 800573c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005744:	f7fb faa0 	bl	8000c88 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4b61      	ldr	r3, [pc, #388]	@ (80058d4 <UART_SetConfig+0x2d4>)
 800574e:	fba3 2302 	umull	r2, r3, r3, r2
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	011c      	lsls	r4, r3, #4
 8005756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575a:	2200      	movs	r2, #0
 800575c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005760:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005768:	4642      	mov	r2, r8
 800576a:	464b      	mov	r3, r9
 800576c:	1891      	adds	r1, r2, r2
 800576e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005770:	415b      	adcs	r3, r3
 8005772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005778:	4641      	mov	r1, r8
 800577a:	eb12 0a01 	adds.w	sl, r2, r1
 800577e:	4649      	mov	r1, r9
 8005780:	eb43 0b01 	adc.w	fp, r3, r1
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005798:	4692      	mov	sl, r2
 800579a:	469b      	mov	fp, r3
 800579c:	4643      	mov	r3, r8
 800579e:	eb1a 0303 	adds.w	r3, sl, r3
 80057a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057a6:	464b      	mov	r3, r9
 80057a8:	eb4b 0303 	adc.w	r3, fp, r3
 80057ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057c4:	460b      	mov	r3, r1
 80057c6:	18db      	adds	r3, r3, r3
 80057c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ca:	4613      	mov	r3, r2
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057da:	f7fb fa55 	bl	8000c88 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	4b3b      	ldr	r3, [pc, #236]	@ (80058d4 <UART_SetConfig+0x2d4>)
 80057e6:	fba3 2301 	umull	r2, r3, r3, r1
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2264      	movs	r2, #100	@ 0x64
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	1acb      	subs	r3, r1, r3
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057fa:	4b36      	ldr	r3, [pc, #216]	@ (80058d4 <UART_SetConfig+0x2d4>)
 80057fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005808:	441c      	add	r4, r3
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005814:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	1891      	adds	r1, r2, r2
 8005822:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005824:	415b      	adcs	r3, r3
 8005826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800582c:	4641      	mov	r1, r8
 800582e:	1851      	adds	r1, r2, r1
 8005830:	6339      	str	r1, [r7, #48]	@ 0x30
 8005832:	4649      	mov	r1, r9
 8005834:	414b      	adcs	r3, r1
 8005836:	637b      	str	r3, [r7, #52]	@ 0x34
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005844:	4659      	mov	r1, fp
 8005846:	00cb      	lsls	r3, r1, #3
 8005848:	4651      	mov	r1, sl
 800584a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800584e:	4651      	mov	r1, sl
 8005850:	00ca      	lsls	r2, r1, #3
 8005852:	4610      	mov	r0, r2
 8005854:	4619      	mov	r1, r3
 8005856:	4603      	mov	r3, r0
 8005858:	4642      	mov	r2, r8
 800585a:	189b      	adds	r3, r3, r2
 800585c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005860:	464b      	mov	r3, r9
 8005862:	460a      	mov	r2, r1
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005878:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800587c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005880:	460b      	mov	r3, r1
 8005882:	18db      	adds	r3, r3, r3
 8005884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005886:	4613      	mov	r3, r2
 8005888:	eb42 0303 	adc.w	r3, r2, r3
 800588c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800588e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005896:	f7fb f9f7 	bl	8000c88 <__aeabi_uldivmod>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <UART_SetConfig+0x2d4>)
 80058a0:	fba3 1302 	umull	r1, r3, r3, r2
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	2164      	movs	r1, #100	@ 0x64
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	3332      	adds	r3, #50	@ 0x32
 80058b2:	4a08      	ldr	r2, [pc, #32]	@ (80058d4 <UART_SetConfig+0x2d4>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	f003 0207 	and.w	r2, r3, #7
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4422      	add	r2, r4
 80058c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c8:	e106      	b.n	8005ad8 <UART_SetConfig+0x4d8>
 80058ca:	bf00      	nop
 80058cc:	40011000 	.word	0x40011000
 80058d0:	40011400 	.word	0x40011400
 80058d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058ea:	4642      	mov	r2, r8
 80058ec:	464b      	mov	r3, r9
 80058ee:	1891      	adds	r1, r2, r2
 80058f0:	6239      	str	r1, [r7, #32]
 80058f2:	415b      	adcs	r3, r3
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058fa:	4641      	mov	r1, r8
 80058fc:	1854      	adds	r4, r2, r1
 80058fe:	4649      	mov	r1, r9
 8005900:	eb43 0501 	adc.w	r5, r3, r1
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	00eb      	lsls	r3, r5, #3
 800590e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005912:	00e2      	lsls	r2, r4, #3
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	4643      	mov	r3, r8
 800591a:	18e3      	adds	r3, r4, r3
 800591c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005920:	464b      	mov	r3, r9
 8005922:	eb45 0303 	adc.w	r3, r5, r3
 8005926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005936:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005946:	4629      	mov	r1, r5
 8005948:	008b      	lsls	r3, r1, #2
 800594a:	4621      	mov	r1, r4
 800594c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005950:	4621      	mov	r1, r4
 8005952:	008a      	lsls	r2, r1, #2
 8005954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005958:	f7fb f996 	bl	8000c88 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4b60      	ldr	r3, [pc, #384]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005962:	fba3 2302 	umull	r2, r3, r3, r2
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	011c      	lsls	r4, r3, #4
 800596a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800596e:	2200      	movs	r2, #0
 8005970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005974:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800597c:	4642      	mov	r2, r8
 800597e:	464b      	mov	r3, r9
 8005980:	1891      	adds	r1, r2, r2
 8005982:	61b9      	str	r1, [r7, #24]
 8005984:	415b      	adcs	r3, r3
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800598c:	4641      	mov	r1, r8
 800598e:	1851      	adds	r1, r2, r1
 8005990:	6139      	str	r1, [r7, #16]
 8005992:	4649      	mov	r1, r9
 8005994:	414b      	adcs	r3, r1
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a4:	4659      	mov	r1, fp
 80059a6:	00cb      	lsls	r3, r1, #3
 80059a8:	4651      	mov	r1, sl
 80059aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ae:	4651      	mov	r1, sl
 80059b0:	00ca      	lsls	r2, r1, #3
 80059b2:	4610      	mov	r0, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	4642      	mov	r2, r8
 80059ba:	189b      	adds	r3, r3, r2
 80059bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059c0:	464b      	mov	r3, r9
 80059c2:	460a      	mov	r2, r1
 80059c4:	eb42 0303 	adc.w	r3, r2, r3
 80059c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059e4:	4649      	mov	r1, r9
 80059e6:	008b      	lsls	r3, r1, #2
 80059e8:	4641      	mov	r1, r8
 80059ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ee:	4641      	mov	r1, r8
 80059f0:	008a      	lsls	r2, r1, #2
 80059f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059f6:	f7fb f947 	bl	8000c88 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	4b38      	ldr	r3, [pc, #224]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005a02:	fba3 2301 	umull	r2, r3, r3, r1
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	2264      	movs	r2, #100	@ 0x64
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	1acb      	subs	r3, r1, r3
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	3332      	adds	r3, #50	@ 0x32
 8005a14:	4a33      	ldr	r2, [pc, #204]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a20:	441c      	add	r4, r3
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a40:	4641      	mov	r1, r8
 8005a42:	1851      	adds	r1, r2, r1
 8005a44:	6039      	str	r1, [r7, #0]
 8005a46:	4649      	mov	r1, r9
 8005a48:	414b      	adcs	r3, r1
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a58:	4659      	mov	r1, fp
 8005a5a:	00cb      	lsls	r3, r1, #3
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a62:	4651      	mov	r1, sl
 8005a64:	00ca      	lsls	r2, r1, #3
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a72:	464b      	mov	r3, r9
 8005a74:	460a      	mov	r2, r1
 8005a76:	eb42 0303 	adc.w	r3, r2, r3
 8005a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a86:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a94:	4649      	mov	r1, r9
 8005a96:	008b      	lsls	r3, r1, #2
 8005a98:	4641      	mov	r1, r8
 8005a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a9e:	4641      	mov	r1, r8
 8005aa0:	008a      	lsls	r2, r1, #2
 8005aa2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005aa6:	f7fb f8ef 	bl	8000c88 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	@ 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	3332      	adds	r3, #50	@ 0x32
 8005ac2:	4a08      	ldr	r2, [pc, #32]	@ (8005ae4 <UART_SetConfig+0x4e4>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4422      	add	r2, r4
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae4:	51eb851f 	.word	0x51eb851f

08005ae8 <fminf>:
 8005ae8:	b508      	push	{r3, lr}
 8005aea:	ed2d 8b02 	vpush	{d8}
 8005aee:	eeb0 8a40 	vmov.f32	s16, s0
 8005af2:	eef0 8a60 	vmov.f32	s17, s1
 8005af6:	f000 f815 	bl	8005b24 <__fpclassifyf>
 8005afa:	b930      	cbnz	r0, 8005b0a <fminf+0x22>
 8005afc:	eeb0 8a68 	vmov.f32	s16, s17
 8005b00:	eeb0 0a48 	vmov.f32	s0, s16
 8005b04:	ecbd 8b02 	vpop	{d8}
 8005b08:	bd08      	pop	{r3, pc}
 8005b0a:	eeb0 0a68 	vmov.f32	s0, s17
 8005b0e:	f000 f809 	bl	8005b24 <__fpclassifyf>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d0f4      	beq.n	8005b00 <fminf+0x18>
 8005b16:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1e:	d5ed      	bpl.n	8005afc <fminf+0x14>
 8005b20:	e7ee      	b.n	8005b00 <fminf+0x18>
	...

08005b24 <__fpclassifyf>:
 8005b24:	ee10 3a10 	vmov	r3, s0
 8005b28:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8005b2c:	d00d      	beq.n	8005b4a <__fpclassifyf+0x26>
 8005b2e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8005b32:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8005b36:	d30a      	bcc.n	8005b4e <__fpclassifyf+0x2a>
 8005b38:	4b07      	ldr	r3, [pc, #28]	@ (8005b58 <__fpclassifyf+0x34>)
 8005b3a:	1e42      	subs	r2, r0, #1
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d908      	bls.n	8005b52 <__fpclassifyf+0x2e>
 8005b40:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8005b44:	4258      	negs	r0, r3
 8005b46:	4158      	adcs	r0, r3
 8005b48:	4770      	bx	lr
 8005b4a:	2002      	movs	r0, #2
 8005b4c:	4770      	bx	lr
 8005b4e:	2004      	movs	r0, #4
 8005b50:	4770      	bx	lr
 8005b52:	2003      	movs	r0, #3
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	007ffffe 	.word	0x007ffffe

08005b5c <__cvt>:
 8005b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b60:	ec57 6b10 	vmov	r6, r7, d0
 8005b64:	2f00      	cmp	r7, #0
 8005b66:	460c      	mov	r4, r1
 8005b68:	4619      	mov	r1, r3
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	bfbb      	ittet	lt
 8005b6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b72:	461f      	movlt	r7, r3
 8005b74:	2300      	movge	r3, #0
 8005b76:	232d      	movlt	r3, #45	@ 0x2d
 8005b78:	700b      	strb	r3, [r1, #0]
 8005b7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b80:	4691      	mov	r9, r2
 8005b82:	f023 0820 	bic.w	r8, r3, #32
 8005b86:	bfbc      	itt	lt
 8005b88:	4632      	movlt	r2, r6
 8005b8a:	4616      	movlt	r6, r2
 8005b8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b90:	d005      	beq.n	8005b9e <__cvt+0x42>
 8005b92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b96:	d100      	bne.n	8005b9a <__cvt+0x3e>
 8005b98:	3401      	adds	r4, #1
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	e000      	b.n	8005ba0 <__cvt+0x44>
 8005b9e:	2103      	movs	r1, #3
 8005ba0:	ab03      	add	r3, sp, #12
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	ab02      	add	r3, sp, #8
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	ec47 6b10 	vmov	d0, r6, r7
 8005bac:	4653      	mov	r3, sl
 8005bae:	4622      	mov	r2, r4
 8005bb0:	f001 fa1a 	bl	8006fe8 <_dtoa_r>
 8005bb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bb8:	4605      	mov	r5, r0
 8005bba:	d119      	bne.n	8005bf0 <__cvt+0x94>
 8005bbc:	f019 0f01 	tst.w	r9, #1
 8005bc0:	d00e      	beq.n	8005be0 <__cvt+0x84>
 8005bc2:	eb00 0904 	add.w	r9, r0, r4
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	4639      	mov	r1, r7
 8005bce:	f7fa ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bd2:	b108      	cbz	r0, 8005bd8 <__cvt+0x7c>
 8005bd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bd8:	2230      	movs	r2, #48	@ 0x30
 8005bda:	9b03      	ldr	r3, [sp, #12]
 8005bdc:	454b      	cmp	r3, r9
 8005bde:	d31e      	bcc.n	8005c1e <__cvt+0xc2>
 8005be0:	9b03      	ldr	r3, [sp, #12]
 8005be2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005be4:	1b5b      	subs	r3, r3, r5
 8005be6:	4628      	mov	r0, r5
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	b004      	add	sp, #16
 8005bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bf4:	eb00 0904 	add.w	r9, r0, r4
 8005bf8:	d1e5      	bne.n	8005bc6 <__cvt+0x6a>
 8005bfa:	7803      	ldrb	r3, [r0, #0]
 8005bfc:	2b30      	cmp	r3, #48	@ 0x30
 8005bfe:	d10a      	bne.n	8005c16 <__cvt+0xba>
 8005c00:	2200      	movs	r2, #0
 8005c02:	2300      	movs	r3, #0
 8005c04:	4630      	mov	r0, r6
 8005c06:	4639      	mov	r1, r7
 8005c08:	f7fa ff5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c0c:	b918      	cbnz	r0, 8005c16 <__cvt+0xba>
 8005c0e:	f1c4 0401 	rsb	r4, r4, #1
 8005c12:	f8ca 4000 	str.w	r4, [sl]
 8005c16:	f8da 3000 	ldr.w	r3, [sl]
 8005c1a:	4499      	add	r9, r3
 8005c1c:	e7d3      	b.n	8005bc6 <__cvt+0x6a>
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	9103      	str	r1, [sp, #12]
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	e7d9      	b.n	8005bda <__cvt+0x7e>

08005c26 <__exponent>:
 8005c26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c28:	2900      	cmp	r1, #0
 8005c2a:	bfba      	itte	lt
 8005c2c:	4249      	neglt	r1, r1
 8005c2e:	232d      	movlt	r3, #45	@ 0x2d
 8005c30:	232b      	movge	r3, #43	@ 0x2b
 8005c32:	2909      	cmp	r1, #9
 8005c34:	7002      	strb	r2, [r0, #0]
 8005c36:	7043      	strb	r3, [r0, #1]
 8005c38:	dd29      	ble.n	8005c8e <__exponent+0x68>
 8005c3a:	f10d 0307 	add.w	r3, sp, #7
 8005c3e:	461d      	mov	r5, r3
 8005c40:	270a      	movs	r7, #10
 8005c42:	461a      	mov	r2, r3
 8005c44:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c48:	fb07 1416 	mls	r4, r7, r6, r1
 8005c4c:	3430      	adds	r4, #48	@ 0x30
 8005c4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c52:	460c      	mov	r4, r1
 8005c54:	2c63      	cmp	r4, #99	@ 0x63
 8005c56:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	dcf1      	bgt.n	8005c42 <__exponent+0x1c>
 8005c5e:	3130      	adds	r1, #48	@ 0x30
 8005c60:	1e94      	subs	r4, r2, #2
 8005c62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c66:	1c41      	adds	r1, r0, #1
 8005c68:	4623      	mov	r3, r4
 8005c6a:	42ab      	cmp	r3, r5
 8005c6c:	d30a      	bcc.n	8005c84 <__exponent+0x5e>
 8005c6e:	f10d 0309 	add.w	r3, sp, #9
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	42ac      	cmp	r4, r5
 8005c76:	bf88      	it	hi
 8005c78:	2300      	movhi	r3, #0
 8005c7a:	3302      	adds	r3, #2
 8005c7c:	4403      	add	r3, r0
 8005c7e:	1a18      	subs	r0, r3, r0
 8005c80:	b003      	add	sp, #12
 8005c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c8c:	e7ed      	b.n	8005c6a <__exponent+0x44>
 8005c8e:	2330      	movs	r3, #48	@ 0x30
 8005c90:	3130      	adds	r1, #48	@ 0x30
 8005c92:	7083      	strb	r3, [r0, #2]
 8005c94:	70c1      	strb	r1, [r0, #3]
 8005c96:	1d03      	adds	r3, r0, #4
 8005c98:	e7f1      	b.n	8005c7e <__exponent+0x58>
	...

08005c9c <_printf_float>:
 8005c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	b08d      	sub	sp, #52	@ 0x34
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005ca8:	4616      	mov	r6, r2
 8005caa:	461f      	mov	r7, r3
 8005cac:	4605      	mov	r5, r0
 8005cae:	f001 f877 	bl	8006da0 <_localeconv_r>
 8005cb2:	6803      	ldr	r3, [r0, #0]
 8005cb4:	9304      	str	r3, [sp, #16]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fa fada 	bl	8000270 <strlen>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8005cc4:	9005      	str	r0, [sp, #20]
 8005cc6:	3307      	adds	r3, #7
 8005cc8:	f023 0307 	bic.w	r3, r3, #7
 8005ccc:	f103 0208 	add.w	r2, r3, #8
 8005cd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cd4:	f8d4 b000 	ldr.w	fp, [r4]
 8005cd8:	f8c8 2000 	str.w	r2, [r8]
 8005cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ce0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ce4:	9307      	str	r3, [sp, #28]
 8005ce6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cf2:	4b9c      	ldr	r3, [pc, #624]	@ (8005f64 <_printf_float+0x2c8>)
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf8:	f7fa ff18 	bl	8000b2c <__aeabi_dcmpun>
 8005cfc:	bb70      	cbnz	r0, 8005d5c <_printf_float+0xc0>
 8005cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d02:	4b98      	ldr	r3, [pc, #608]	@ (8005f64 <_printf_float+0x2c8>)
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	f7fa fef2 	bl	8000af0 <__aeabi_dcmple>
 8005d0c:	bb30      	cbnz	r0, 8005d5c <_printf_float+0xc0>
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2300      	movs	r3, #0
 8005d12:	4640      	mov	r0, r8
 8005d14:	4649      	mov	r1, r9
 8005d16:	f7fa fee1 	bl	8000adc <__aeabi_dcmplt>
 8005d1a:	b110      	cbz	r0, 8005d22 <_printf_float+0x86>
 8005d1c:	232d      	movs	r3, #45	@ 0x2d
 8005d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d22:	4a91      	ldr	r2, [pc, #580]	@ (8005f68 <_printf_float+0x2cc>)
 8005d24:	4b91      	ldr	r3, [pc, #580]	@ (8005f6c <_printf_float+0x2d0>)
 8005d26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d2a:	bf8c      	ite	hi
 8005d2c:	4690      	movhi	r8, r2
 8005d2e:	4698      	movls	r8, r3
 8005d30:	2303      	movs	r3, #3
 8005d32:	6123      	str	r3, [r4, #16]
 8005d34:	f02b 0304 	bic.w	r3, fp, #4
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	9700      	str	r7, [sp, #0]
 8005d40:	4633      	mov	r3, r6
 8005d42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d44:	4621      	mov	r1, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f9d2 	bl	80060f0 <_printf_common>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f040 808d 	bne.w	8005e6c <_printf_float+0x1d0>
 8005d52:	f04f 30ff 	mov.w	r0, #4294967295
 8005d56:	b00d      	add	sp, #52	@ 0x34
 8005d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	4640      	mov	r0, r8
 8005d62:	4649      	mov	r1, r9
 8005d64:	f7fa fee2 	bl	8000b2c <__aeabi_dcmpun>
 8005d68:	b140      	cbz	r0, 8005d7c <_printf_float+0xe0>
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bfbc      	itt	lt
 8005d70:	232d      	movlt	r3, #45	@ 0x2d
 8005d72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d76:	4a7e      	ldr	r2, [pc, #504]	@ (8005f70 <_printf_float+0x2d4>)
 8005d78:	4b7e      	ldr	r3, [pc, #504]	@ (8005f74 <_printf_float+0x2d8>)
 8005d7a:	e7d4      	b.n	8005d26 <_printf_float+0x8a>
 8005d7c:	6863      	ldr	r3, [r4, #4]
 8005d7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d82:	9206      	str	r2, [sp, #24]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	d13b      	bne.n	8005e00 <_printf_float+0x164>
 8005d88:	2306      	movs	r3, #6
 8005d8a:	6063      	str	r3, [r4, #4]
 8005d8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d90:	2300      	movs	r3, #0
 8005d92:	6022      	str	r2, [r4, #0]
 8005d94:	9303      	str	r3, [sp, #12]
 8005d96:	ab0a      	add	r3, sp, #40	@ 0x28
 8005d98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005d9c:	ab09      	add	r3, sp, #36	@ 0x24
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	6861      	ldr	r1, [r4, #4]
 8005da2:	ec49 8b10 	vmov	d0, r8, r9
 8005da6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005daa:	4628      	mov	r0, r5
 8005dac:	f7ff fed6 	bl	8005b5c <__cvt>
 8005db0:	9b06      	ldr	r3, [sp, #24]
 8005db2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005db4:	2b47      	cmp	r3, #71	@ 0x47
 8005db6:	4680      	mov	r8, r0
 8005db8:	d129      	bne.n	8005e0e <_printf_float+0x172>
 8005dba:	1cc8      	adds	r0, r1, #3
 8005dbc:	db02      	blt.n	8005dc4 <_printf_float+0x128>
 8005dbe:	6863      	ldr	r3, [r4, #4]
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	dd41      	ble.n	8005e48 <_printf_float+0x1ac>
 8005dc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005dc8:	fa5f fa8a 	uxtb.w	sl, sl
 8005dcc:	3901      	subs	r1, #1
 8005dce:	4652      	mov	r2, sl
 8005dd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005dd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dd6:	f7ff ff26 	bl	8005c26 <__exponent>
 8005dda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ddc:	1813      	adds	r3, r2, r0
 8005dde:	2a01      	cmp	r2, #1
 8005de0:	4681      	mov	r9, r0
 8005de2:	6123      	str	r3, [r4, #16]
 8005de4:	dc02      	bgt.n	8005dec <_printf_float+0x150>
 8005de6:	6822      	ldr	r2, [r4, #0]
 8005de8:	07d2      	lsls	r2, r2, #31
 8005dea:	d501      	bpl.n	8005df0 <_printf_float+0x154>
 8005dec:	3301      	adds	r3, #1
 8005dee:	6123      	str	r3, [r4, #16]
 8005df0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0a2      	beq.n	8005d3e <_printf_float+0xa2>
 8005df8:	232d      	movs	r3, #45	@ 0x2d
 8005dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dfe:	e79e      	b.n	8005d3e <_printf_float+0xa2>
 8005e00:	9a06      	ldr	r2, [sp, #24]
 8005e02:	2a47      	cmp	r2, #71	@ 0x47
 8005e04:	d1c2      	bne.n	8005d8c <_printf_float+0xf0>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1c0      	bne.n	8005d8c <_printf_float+0xf0>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e7bd      	b.n	8005d8a <_printf_float+0xee>
 8005e0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e12:	d9db      	bls.n	8005dcc <_printf_float+0x130>
 8005e14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e18:	d118      	bne.n	8005e4c <_printf_float+0x1b0>
 8005e1a:	2900      	cmp	r1, #0
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	dd0b      	ble.n	8005e38 <_printf_float+0x19c>
 8005e20:	6121      	str	r1, [r4, #16]
 8005e22:	b913      	cbnz	r3, 8005e2a <_printf_float+0x18e>
 8005e24:	6822      	ldr	r2, [r4, #0]
 8005e26:	07d0      	lsls	r0, r2, #31
 8005e28:	d502      	bpl.n	8005e30 <_printf_float+0x194>
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	440b      	add	r3, r1
 8005e2e:	6123      	str	r3, [r4, #16]
 8005e30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e32:	f04f 0900 	mov.w	r9, #0
 8005e36:	e7db      	b.n	8005df0 <_printf_float+0x154>
 8005e38:	b913      	cbnz	r3, 8005e40 <_printf_float+0x1a4>
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	07d2      	lsls	r2, r2, #31
 8005e3e:	d501      	bpl.n	8005e44 <_printf_float+0x1a8>
 8005e40:	3302      	adds	r3, #2
 8005e42:	e7f4      	b.n	8005e2e <_printf_float+0x192>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e7f2      	b.n	8005e2e <_printf_float+0x192>
 8005e48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e4e:	4299      	cmp	r1, r3
 8005e50:	db05      	blt.n	8005e5e <_printf_float+0x1c2>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	6121      	str	r1, [r4, #16]
 8005e56:	07d8      	lsls	r0, r3, #31
 8005e58:	d5ea      	bpl.n	8005e30 <_printf_float+0x194>
 8005e5a:	1c4b      	adds	r3, r1, #1
 8005e5c:	e7e7      	b.n	8005e2e <_printf_float+0x192>
 8005e5e:	2900      	cmp	r1, #0
 8005e60:	bfd4      	ite	le
 8005e62:	f1c1 0202 	rsble	r2, r1, #2
 8005e66:	2201      	movgt	r2, #1
 8005e68:	4413      	add	r3, r2
 8005e6a:	e7e0      	b.n	8005e2e <_printf_float+0x192>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	055a      	lsls	r2, r3, #21
 8005e70:	d407      	bmi.n	8005e82 <_printf_float+0x1e6>
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	4642      	mov	r2, r8
 8005e76:	4631      	mov	r1, r6
 8005e78:	4628      	mov	r0, r5
 8005e7a:	47b8      	blx	r7
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d12b      	bne.n	8005ed8 <_printf_float+0x23c>
 8005e80:	e767      	b.n	8005d52 <_printf_float+0xb6>
 8005e82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e86:	f240 80dd 	bls.w	8006044 <_printf_float+0x3a8>
 8005e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2300      	movs	r3, #0
 8005e92:	f7fa fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d033      	beq.n	8005f02 <_printf_float+0x266>
 8005e9a:	4a37      	ldr	r2, [pc, #220]	@ (8005f78 <_printf_float+0x2dc>)
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f43f af54 	beq.w	8005d52 <_printf_float+0xb6>
 8005eaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005eae:	4543      	cmp	r3, r8
 8005eb0:	db02      	blt.n	8005eb8 <_printf_float+0x21c>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	07d8      	lsls	r0, r3, #31
 8005eb6:	d50f      	bpl.n	8005ed8 <_printf_float+0x23c>
 8005eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	f43f af45 	beq.w	8005d52 <_printf_float+0xb6>
 8005ec8:	f04f 0900 	mov.w	r9, #0
 8005ecc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ed0:	f104 0a1a 	add.w	sl, r4, #26
 8005ed4:	45c8      	cmp	r8, r9
 8005ed6:	dc09      	bgt.n	8005eec <_printf_float+0x250>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	079b      	lsls	r3, r3, #30
 8005edc:	f100 8103 	bmi.w	80060e6 <_printf_float+0x44a>
 8005ee0:	68e0      	ldr	r0, [r4, #12]
 8005ee2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ee4:	4298      	cmp	r0, r3
 8005ee6:	bfb8      	it	lt
 8005ee8:	4618      	movlt	r0, r3
 8005eea:	e734      	b.n	8005d56 <_printf_float+0xba>
 8005eec:	2301      	movs	r3, #1
 8005eee:	4652      	mov	r2, sl
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	47b8      	blx	r7
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	f43f af2b 	beq.w	8005d52 <_printf_float+0xb6>
 8005efc:	f109 0901 	add.w	r9, r9, #1
 8005f00:	e7e8      	b.n	8005ed4 <_printf_float+0x238>
 8005f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	dc39      	bgt.n	8005f7c <_printf_float+0x2e0>
 8005f08:	4a1b      	ldr	r2, [pc, #108]	@ (8005f78 <_printf_float+0x2dc>)
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af1d 	beq.w	8005d52 <_printf_float+0xb6>
 8005f18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f1c:	ea59 0303 	orrs.w	r3, r9, r3
 8005f20:	d102      	bne.n	8005f28 <_printf_float+0x28c>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	07d9      	lsls	r1, r3, #31
 8005f26:	d5d7      	bpl.n	8005ed8 <_printf_float+0x23c>
 8005f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	f43f af0d 	beq.w	8005d52 <_printf_float+0xb6>
 8005f38:	f04f 0a00 	mov.w	sl, #0
 8005f3c:	f104 0b1a 	add.w	fp, r4, #26
 8005f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f42:	425b      	negs	r3, r3
 8005f44:	4553      	cmp	r3, sl
 8005f46:	dc01      	bgt.n	8005f4c <_printf_float+0x2b0>
 8005f48:	464b      	mov	r3, r9
 8005f4a:	e793      	b.n	8005e74 <_printf_float+0x1d8>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	465a      	mov	r2, fp
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	f43f aefb 	beq.w	8005d52 <_printf_float+0xb6>
 8005f5c:	f10a 0a01 	add.w	sl, sl, #1
 8005f60:	e7ee      	b.n	8005f40 <_printf_float+0x2a4>
 8005f62:	bf00      	nop
 8005f64:	7fefffff 	.word	0x7fefffff
 8005f68:	0800ae84 	.word	0x0800ae84
 8005f6c:	0800ae80 	.word	0x0800ae80
 8005f70:	0800ae8c 	.word	0x0800ae8c
 8005f74:	0800ae88 	.word	0x0800ae88
 8005f78:	0800b05c 	.word	0x0800b05c
 8005f7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f82:	4553      	cmp	r3, sl
 8005f84:	bfa8      	it	ge
 8005f86:	4653      	movge	r3, sl
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	4699      	mov	r9, r3
 8005f8c:	dc36      	bgt.n	8005ffc <_printf_float+0x360>
 8005f8e:	f04f 0b00 	mov.w	fp, #0
 8005f92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f96:	f104 021a 	add.w	r2, r4, #26
 8005f9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f9c:	9306      	str	r3, [sp, #24]
 8005f9e:	eba3 0309 	sub.w	r3, r3, r9
 8005fa2:	455b      	cmp	r3, fp
 8005fa4:	dc31      	bgt.n	800600a <_printf_float+0x36e>
 8005fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa8:	459a      	cmp	sl, r3
 8005faa:	dc3a      	bgt.n	8006022 <_printf_float+0x386>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	07da      	lsls	r2, r3, #31
 8005fb0:	d437      	bmi.n	8006022 <_printf_float+0x386>
 8005fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb4:	ebaa 0903 	sub.w	r9, sl, r3
 8005fb8:	9b06      	ldr	r3, [sp, #24]
 8005fba:	ebaa 0303 	sub.w	r3, sl, r3
 8005fbe:	4599      	cmp	r9, r3
 8005fc0:	bfa8      	it	ge
 8005fc2:	4699      	movge	r9, r3
 8005fc4:	f1b9 0f00 	cmp.w	r9, #0
 8005fc8:	dc33      	bgt.n	8006032 <_printf_float+0x396>
 8005fca:	f04f 0800 	mov.w	r8, #0
 8005fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fd2:	f104 0b1a 	add.w	fp, r4, #26
 8005fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8005fdc:	eba3 0309 	sub.w	r3, r3, r9
 8005fe0:	4543      	cmp	r3, r8
 8005fe2:	f77f af79 	ble.w	8005ed8 <_printf_float+0x23c>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	465a      	mov	r2, fp
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	f43f aeae 	beq.w	8005d52 <_printf_float+0xb6>
 8005ff6:	f108 0801 	add.w	r8, r8, #1
 8005ffa:	e7ec      	b.n	8005fd6 <_printf_float+0x33a>
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	d1c2      	bne.n	8005f8e <_printf_float+0x2f2>
 8006008:	e6a3      	b.n	8005d52 <_printf_float+0xb6>
 800600a:	2301      	movs	r3, #1
 800600c:	4631      	mov	r1, r6
 800600e:	4628      	mov	r0, r5
 8006010:	9206      	str	r2, [sp, #24]
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	f43f ae9c 	beq.w	8005d52 <_printf_float+0xb6>
 800601a:	9a06      	ldr	r2, [sp, #24]
 800601c:	f10b 0b01 	add.w	fp, fp, #1
 8006020:	e7bb      	b.n	8005f9a <_printf_float+0x2fe>
 8006022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006026:	4631      	mov	r1, r6
 8006028:	4628      	mov	r0, r5
 800602a:	47b8      	blx	r7
 800602c:	3001      	adds	r0, #1
 800602e:	d1c0      	bne.n	8005fb2 <_printf_float+0x316>
 8006030:	e68f      	b.n	8005d52 <_printf_float+0xb6>
 8006032:	9a06      	ldr	r2, [sp, #24]
 8006034:	464b      	mov	r3, r9
 8006036:	4442      	add	r2, r8
 8006038:	4631      	mov	r1, r6
 800603a:	4628      	mov	r0, r5
 800603c:	47b8      	blx	r7
 800603e:	3001      	adds	r0, #1
 8006040:	d1c3      	bne.n	8005fca <_printf_float+0x32e>
 8006042:	e686      	b.n	8005d52 <_printf_float+0xb6>
 8006044:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006048:	f1ba 0f01 	cmp.w	sl, #1
 800604c:	dc01      	bgt.n	8006052 <_printf_float+0x3b6>
 800604e:	07db      	lsls	r3, r3, #31
 8006050:	d536      	bpl.n	80060c0 <_printf_float+0x424>
 8006052:	2301      	movs	r3, #1
 8006054:	4642      	mov	r2, r8
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	f43f ae78 	beq.w	8005d52 <_printf_float+0xb6>
 8006062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006066:	4631      	mov	r1, r6
 8006068:	4628      	mov	r0, r5
 800606a:	47b8      	blx	r7
 800606c:	3001      	adds	r0, #1
 800606e:	f43f ae70 	beq.w	8005d52 <_printf_float+0xb6>
 8006072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006076:	2200      	movs	r2, #0
 8006078:	2300      	movs	r3, #0
 800607a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800607e:	f7fa fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006082:	b9c0      	cbnz	r0, 80060b6 <_printf_float+0x41a>
 8006084:	4653      	mov	r3, sl
 8006086:	f108 0201 	add.w	r2, r8, #1
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	d10c      	bne.n	80060ae <_printf_float+0x412>
 8006094:	e65d      	b.n	8005d52 <_printf_float+0xb6>
 8006096:	2301      	movs	r3, #1
 8006098:	465a      	mov	r2, fp
 800609a:	4631      	mov	r1, r6
 800609c:	4628      	mov	r0, r5
 800609e:	47b8      	blx	r7
 80060a0:	3001      	adds	r0, #1
 80060a2:	f43f ae56 	beq.w	8005d52 <_printf_float+0xb6>
 80060a6:	f108 0801 	add.w	r8, r8, #1
 80060aa:	45d0      	cmp	r8, sl
 80060ac:	dbf3      	blt.n	8006096 <_printf_float+0x3fa>
 80060ae:	464b      	mov	r3, r9
 80060b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060b4:	e6df      	b.n	8005e76 <_printf_float+0x1da>
 80060b6:	f04f 0800 	mov.w	r8, #0
 80060ba:	f104 0b1a 	add.w	fp, r4, #26
 80060be:	e7f4      	b.n	80060aa <_printf_float+0x40e>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4642      	mov	r2, r8
 80060c4:	e7e1      	b.n	800608a <_printf_float+0x3ee>
 80060c6:	2301      	movs	r3, #1
 80060c8:	464a      	mov	r2, r9
 80060ca:	4631      	mov	r1, r6
 80060cc:	4628      	mov	r0, r5
 80060ce:	47b8      	blx	r7
 80060d0:	3001      	adds	r0, #1
 80060d2:	f43f ae3e 	beq.w	8005d52 <_printf_float+0xb6>
 80060d6:	f108 0801 	add.w	r8, r8, #1
 80060da:	68e3      	ldr	r3, [r4, #12]
 80060dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060de:	1a5b      	subs	r3, r3, r1
 80060e0:	4543      	cmp	r3, r8
 80060e2:	dcf0      	bgt.n	80060c6 <_printf_float+0x42a>
 80060e4:	e6fc      	b.n	8005ee0 <_printf_float+0x244>
 80060e6:	f04f 0800 	mov.w	r8, #0
 80060ea:	f104 0919 	add.w	r9, r4, #25
 80060ee:	e7f4      	b.n	80060da <_printf_float+0x43e>

080060f0 <_printf_common>:
 80060f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	4616      	mov	r6, r2
 80060f6:	4698      	mov	r8, r3
 80060f8:	688a      	ldr	r2, [r1, #8]
 80060fa:	690b      	ldr	r3, [r1, #16]
 80060fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006100:	4293      	cmp	r3, r2
 8006102:	bfb8      	it	lt
 8006104:	4613      	movlt	r3, r2
 8006106:	6033      	str	r3, [r6, #0]
 8006108:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800610c:	4607      	mov	r7, r0
 800610e:	460c      	mov	r4, r1
 8006110:	b10a      	cbz	r2, 8006116 <_printf_common+0x26>
 8006112:	3301      	adds	r3, #1
 8006114:	6033      	str	r3, [r6, #0]
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	0699      	lsls	r1, r3, #26
 800611a:	bf42      	ittt	mi
 800611c:	6833      	ldrmi	r3, [r6, #0]
 800611e:	3302      	addmi	r3, #2
 8006120:	6033      	strmi	r3, [r6, #0]
 8006122:	6825      	ldr	r5, [r4, #0]
 8006124:	f015 0506 	ands.w	r5, r5, #6
 8006128:	d106      	bne.n	8006138 <_printf_common+0x48>
 800612a:	f104 0a19 	add.w	sl, r4, #25
 800612e:	68e3      	ldr	r3, [r4, #12]
 8006130:	6832      	ldr	r2, [r6, #0]
 8006132:	1a9b      	subs	r3, r3, r2
 8006134:	42ab      	cmp	r3, r5
 8006136:	dc26      	bgt.n	8006186 <_printf_common+0x96>
 8006138:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800613c:	6822      	ldr	r2, [r4, #0]
 800613e:	3b00      	subs	r3, #0
 8006140:	bf18      	it	ne
 8006142:	2301      	movne	r3, #1
 8006144:	0692      	lsls	r2, r2, #26
 8006146:	d42b      	bmi.n	80061a0 <_printf_common+0xb0>
 8006148:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800614c:	4641      	mov	r1, r8
 800614e:	4638      	mov	r0, r7
 8006150:	47c8      	blx	r9
 8006152:	3001      	adds	r0, #1
 8006154:	d01e      	beq.n	8006194 <_printf_common+0xa4>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	6922      	ldr	r2, [r4, #16]
 800615a:	f003 0306 	and.w	r3, r3, #6
 800615e:	2b04      	cmp	r3, #4
 8006160:	bf02      	ittt	eq
 8006162:	68e5      	ldreq	r5, [r4, #12]
 8006164:	6833      	ldreq	r3, [r6, #0]
 8006166:	1aed      	subeq	r5, r5, r3
 8006168:	68a3      	ldr	r3, [r4, #8]
 800616a:	bf0c      	ite	eq
 800616c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006170:	2500      	movne	r5, #0
 8006172:	4293      	cmp	r3, r2
 8006174:	bfc4      	itt	gt
 8006176:	1a9b      	subgt	r3, r3, r2
 8006178:	18ed      	addgt	r5, r5, r3
 800617a:	2600      	movs	r6, #0
 800617c:	341a      	adds	r4, #26
 800617e:	42b5      	cmp	r5, r6
 8006180:	d11a      	bne.n	80061b8 <_printf_common+0xc8>
 8006182:	2000      	movs	r0, #0
 8006184:	e008      	b.n	8006198 <_printf_common+0xa8>
 8006186:	2301      	movs	r3, #1
 8006188:	4652      	mov	r2, sl
 800618a:	4641      	mov	r1, r8
 800618c:	4638      	mov	r0, r7
 800618e:	47c8      	blx	r9
 8006190:	3001      	adds	r0, #1
 8006192:	d103      	bne.n	800619c <_printf_common+0xac>
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800619c:	3501      	adds	r5, #1
 800619e:	e7c6      	b.n	800612e <_printf_common+0x3e>
 80061a0:	18e1      	adds	r1, r4, r3
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	2030      	movs	r0, #48	@ 0x30
 80061a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061aa:	4422      	add	r2, r4
 80061ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061b4:	3302      	adds	r3, #2
 80061b6:	e7c7      	b.n	8006148 <_printf_common+0x58>
 80061b8:	2301      	movs	r3, #1
 80061ba:	4622      	mov	r2, r4
 80061bc:	4641      	mov	r1, r8
 80061be:	4638      	mov	r0, r7
 80061c0:	47c8      	blx	r9
 80061c2:	3001      	adds	r0, #1
 80061c4:	d0e6      	beq.n	8006194 <_printf_common+0xa4>
 80061c6:	3601      	adds	r6, #1
 80061c8:	e7d9      	b.n	800617e <_printf_common+0x8e>
	...

080061cc <_printf_i>:
 80061cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d0:	7e0f      	ldrb	r7, [r1, #24]
 80061d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061d4:	2f78      	cmp	r7, #120	@ 0x78
 80061d6:	4691      	mov	r9, r2
 80061d8:	4680      	mov	r8, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	469a      	mov	sl, r3
 80061de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061e2:	d807      	bhi.n	80061f4 <_printf_i+0x28>
 80061e4:	2f62      	cmp	r7, #98	@ 0x62
 80061e6:	d80a      	bhi.n	80061fe <_printf_i+0x32>
 80061e8:	2f00      	cmp	r7, #0
 80061ea:	f000 80d1 	beq.w	8006390 <_printf_i+0x1c4>
 80061ee:	2f58      	cmp	r7, #88	@ 0x58
 80061f0:	f000 80b8 	beq.w	8006364 <_printf_i+0x198>
 80061f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061fc:	e03a      	b.n	8006274 <_printf_i+0xa8>
 80061fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006202:	2b15      	cmp	r3, #21
 8006204:	d8f6      	bhi.n	80061f4 <_printf_i+0x28>
 8006206:	a101      	add	r1, pc, #4	@ (adr r1, 800620c <_printf_i+0x40>)
 8006208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800620c:	08006265 	.word	0x08006265
 8006210:	08006279 	.word	0x08006279
 8006214:	080061f5 	.word	0x080061f5
 8006218:	080061f5 	.word	0x080061f5
 800621c:	080061f5 	.word	0x080061f5
 8006220:	080061f5 	.word	0x080061f5
 8006224:	08006279 	.word	0x08006279
 8006228:	080061f5 	.word	0x080061f5
 800622c:	080061f5 	.word	0x080061f5
 8006230:	080061f5 	.word	0x080061f5
 8006234:	080061f5 	.word	0x080061f5
 8006238:	08006377 	.word	0x08006377
 800623c:	080062a3 	.word	0x080062a3
 8006240:	08006331 	.word	0x08006331
 8006244:	080061f5 	.word	0x080061f5
 8006248:	080061f5 	.word	0x080061f5
 800624c:	08006399 	.word	0x08006399
 8006250:	080061f5 	.word	0x080061f5
 8006254:	080062a3 	.word	0x080062a3
 8006258:	080061f5 	.word	0x080061f5
 800625c:	080061f5 	.word	0x080061f5
 8006260:	08006339 	.word	0x08006339
 8006264:	6833      	ldr	r3, [r6, #0]
 8006266:	1d1a      	adds	r2, r3, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6032      	str	r2, [r6, #0]
 800626c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006270:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006274:	2301      	movs	r3, #1
 8006276:	e09c      	b.n	80063b2 <_printf_i+0x1e6>
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	1d19      	adds	r1, r3, #4
 800627e:	6031      	str	r1, [r6, #0]
 8006280:	0606      	lsls	r6, r0, #24
 8006282:	d501      	bpl.n	8006288 <_printf_i+0xbc>
 8006284:	681d      	ldr	r5, [r3, #0]
 8006286:	e003      	b.n	8006290 <_printf_i+0xc4>
 8006288:	0645      	lsls	r5, r0, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0xb8>
 800628c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006290:	2d00      	cmp	r5, #0
 8006292:	da03      	bge.n	800629c <_printf_i+0xd0>
 8006294:	232d      	movs	r3, #45	@ 0x2d
 8006296:	426d      	negs	r5, r5
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629c:	4858      	ldr	r0, [pc, #352]	@ (8006400 <_printf_i+0x234>)
 800629e:	230a      	movs	r3, #10
 80062a0:	e011      	b.n	80062c6 <_printf_i+0xfa>
 80062a2:	6821      	ldr	r1, [r4, #0]
 80062a4:	6833      	ldr	r3, [r6, #0]
 80062a6:	0608      	lsls	r0, r1, #24
 80062a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80062ac:	d402      	bmi.n	80062b4 <_printf_i+0xe8>
 80062ae:	0649      	lsls	r1, r1, #25
 80062b0:	bf48      	it	mi
 80062b2:	b2ad      	uxthmi	r5, r5
 80062b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80062b6:	4852      	ldr	r0, [pc, #328]	@ (8006400 <_printf_i+0x234>)
 80062b8:	6033      	str	r3, [r6, #0]
 80062ba:	bf14      	ite	ne
 80062bc:	230a      	movne	r3, #10
 80062be:	2308      	moveq	r3, #8
 80062c0:	2100      	movs	r1, #0
 80062c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062c6:	6866      	ldr	r6, [r4, #4]
 80062c8:	60a6      	str	r6, [r4, #8]
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	db05      	blt.n	80062da <_printf_i+0x10e>
 80062ce:	6821      	ldr	r1, [r4, #0]
 80062d0:	432e      	orrs	r6, r5
 80062d2:	f021 0104 	bic.w	r1, r1, #4
 80062d6:	6021      	str	r1, [r4, #0]
 80062d8:	d04b      	beq.n	8006372 <_printf_i+0x1a6>
 80062da:	4616      	mov	r6, r2
 80062dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80062e0:	fb03 5711 	mls	r7, r3, r1, r5
 80062e4:	5dc7      	ldrb	r7, [r0, r7]
 80062e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062ea:	462f      	mov	r7, r5
 80062ec:	42bb      	cmp	r3, r7
 80062ee:	460d      	mov	r5, r1
 80062f0:	d9f4      	bls.n	80062dc <_printf_i+0x110>
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d10b      	bne.n	800630e <_printf_i+0x142>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	07df      	lsls	r7, r3, #31
 80062fa:	d508      	bpl.n	800630e <_printf_i+0x142>
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	6861      	ldr	r1, [r4, #4]
 8006300:	4299      	cmp	r1, r3
 8006302:	bfde      	ittt	le
 8006304:	2330      	movle	r3, #48	@ 0x30
 8006306:	f806 3c01 	strble.w	r3, [r6, #-1]
 800630a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800630e:	1b92      	subs	r2, r2, r6
 8006310:	6122      	str	r2, [r4, #16]
 8006312:	f8cd a000 	str.w	sl, [sp]
 8006316:	464b      	mov	r3, r9
 8006318:	aa03      	add	r2, sp, #12
 800631a:	4621      	mov	r1, r4
 800631c:	4640      	mov	r0, r8
 800631e:	f7ff fee7 	bl	80060f0 <_printf_common>
 8006322:	3001      	adds	r0, #1
 8006324:	d14a      	bne.n	80063bc <_printf_i+0x1f0>
 8006326:	f04f 30ff 	mov.w	r0, #4294967295
 800632a:	b004      	add	sp, #16
 800632c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	f043 0320 	orr.w	r3, r3, #32
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	4832      	ldr	r0, [pc, #200]	@ (8006404 <_printf_i+0x238>)
 800633a:	2778      	movs	r7, #120	@ 0x78
 800633c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	6831      	ldr	r1, [r6, #0]
 8006344:	061f      	lsls	r7, r3, #24
 8006346:	f851 5b04 	ldr.w	r5, [r1], #4
 800634a:	d402      	bmi.n	8006352 <_printf_i+0x186>
 800634c:	065f      	lsls	r7, r3, #25
 800634e:	bf48      	it	mi
 8006350:	b2ad      	uxthmi	r5, r5
 8006352:	6031      	str	r1, [r6, #0]
 8006354:	07d9      	lsls	r1, r3, #31
 8006356:	bf44      	itt	mi
 8006358:	f043 0320 	orrmi.w	r3, r3, #32
 800635c:	6023      	strmi	r3, [r4, #0]
 800635e:	b11d      	cbz	r5, 8006368 <_printf_i+0x19c>
 8006360:	2310      	movs	r3, #16
 8006362:	e7ad      	b.n	80062c0 <_printf_i+0xf4>
 8006364:	4826      	ldr	r0, [pc, #152]	@ (8006400 <_printf_i+0x234>)
 8006366:	e7e9      	b.n	800633c <_printf_i+0x170>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	f023 0320 	bic.w	r3, r3, #32
 800636e:	6023      	str	r3, [r4, #0]
 8006370:	e7f6      	b.n	8006360 <_printf_i+0x194>
 8006372:	4616      	mov	r6, r2
 8006374:	e7bd      	b.n	80062f2 <_printf_i+0x126>
 8006376:	6833      	ldr	r3, [r6, #0]
 8006378:	6825      	ldr	r5, [r4, #0]
 800637a:	6961      	ldr	r1, [r4, #20]
 800637c:	1d18      	adds	r0, r3, #4
 800637e:	6030      	str	r0, [r6, #0]
 8006380:	062e      	lsls	r6, r5, #24
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	d501      	bpl.n	800638a <_printf_i+0x1be>
 8006386:	6019      	str	r1, [r3, #0]
 8006388:	e002      	b.n	8006390 <_printf_i+0x1c4>
 800638a:	0668      	lsls	r0, r5, #25
 800638c:	d5fb      	bpl.n	8006386 <_printf_i+0x1ba>
 800638e:	8019      	strh	r1, [r3, #0]
 8006390:	2300      	movs	r3, #0
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	4616      	mov	r6, r2
 8006396:	e7bc      	b.n	8006312 <_printf_i+0x146>
 8006398:	6833      	ldr	r3, [r6, #0]
 800639a:	1d1a      	adds	r2, r3, #4
 800639c:	6032      	str	r2, [r6, #0]
 800639e:	681e      	ldr	r6, [r3, #0]
 80063a0:	6862      	ldr	r2, [r4, #4]
 80063a2:	2100      	movs	r1, #0
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7f9 ff13 	bl	80001d0 <memchr>
 80063aa:	b108      	cbz	r0, 80063b0 <_printf_i+0x1e4>
 80063ac:	1b80      	subs	r0, r0, r6
 80063ae:	6060      	str	r0, [r4, #4]
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	6123      	str	r3, [r4, #16]
 80063b4:	2300      	movs	r3, #0
 80063b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ba:	e7aa      	b.n	8006312 <_printf_i+0x146>
 80063bc:	6923      	ldr	r3, [r4, #16]
 80063be:	4632      	mov	r2, r6
 80063c0:	4649      	mov	r1, r9
 80063c2:	4640      	mov	r0, r8
 80063c4:	47d0      	blx	sl
 80063c6:	3001      	adds	r0, #1
 80063c8:	d0ad      	beq.n	8006326 <_printf_i+0x15a>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	079b      	lsls	r3, r3, #30
 80063ce:	d413      	bmi.n	80063f8 <_printf_i+0x22c>
 80063d0:	68e0      	ldr	r0, [r4, #12]
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	4298      	cmp	r0, r3
 80063d6:	bfb8      	it	lt
 80063d8:	4618      	movlt	r0, r3
 80063da:	e7a6      	b.n	800632a <_printf_i+0x15e>
 80063dc:	2301      	movs	r3, #1
 80063de:	4632      	mov	r2, r6
 80063e0:	4649      	mov	r1, r9
 80063e2:	4640      	mov	r0, r8
 80063e4:	47d0      	blx	sl
 80063e6:	3001      	adds	r0, #1
 80063e8:	d09d      	beq.n	8006326 <_printf_i+0x15a>
 80063ea:	3501      	adds	r5, #1
 80063ec:	68e3      	ldr	r3, [r4, #12]
 80063ee:	9903      	ldr	r1, [sp, #12]
 80063f0:	1a5b      	subs	r3, r3, r1
 80063f2:	42ab      	cmp	r3, r5
 80063f4:	dcf2      	bgt.n	80063dc <_printf_i+0x210>
 80063f6:	e7eb      	b.n	80063d0 <_printf_i+0x204>
 80063f8:	2500      	movs	r5, #0
 80063fa:	f104 0619 	add.w	r6, r4, #25
 80063fe:	e7f5      	b.n	80063ec <_printf_i+0x220>
 8006400:	0800ae90 	.word	0x0800ae90
 8006404:	0800aea1 	.word	0x0800aea1

08006408 <_scanf_float>:
 8006408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	b087      	sub	sp, #28
 800640e:	4691      	mov	r9, r2
 8006410:	9303      	str	r3, [sp, #12]
 8006412:	688b      	ldr	r3, [r1, #8]
 8006414:	1e5a      	subs	r2, r3, #1
 8006416:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800641a:	bf81      	itttt	hi
 800641c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006420:	eb03 0b05 	addhi.w	fp, r3, r5
 8006424:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006428:	608b      	strhi	r3, [r1, #8]
 800642a:	680b      	ldr	r3, [r1, #0]
 800642c:	460a      	mov	r2, r1
 800642e:	f04f 0500 	mov.w	r5, #0
 8006432:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006436:	f842 3b1c 	str.w	r3, [r2], #28
 800643a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800643e:	4680      	mov	r8, r0
 8006440:	460c      	mov	r4, r1
 8006442:	bf98      	it	ls
 8006444:	f04f 0b00 	movls.w	fp, #0
 8006448:	9201      	str	r2, [sp, #4]
 800644a:	4616      	mov	r6, r2
 800644c:	46aa      	mov	sl, r5
 800644e:	462f      	mov	r7, r5
 8006450:	9502      	str	r5, [sp, #8]
 8006452:	68a2      	ldr	r2, [r4, #8]
 8006454:	b15a      	cbz	r2, 800646e <_scanf_float+0x66>
 8006456:	f8d9 3000 	ldr.w	r3, [r9]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b4e      	cmp	r3, #78	@ 0x4e
 800645e:	d863      	bhi.n	8006528 <_scanf_float+0x120>
 8006460:	2b40      	cmp	r3, #64	@ 0x40
 8006462:	d83b      	bhi.n	80064dc <_scanf_float+0xd4>
 8006464:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006468:	b2c8      	uxtb	r0, r1
 800646a:	280e      	cmp	r0, #14
 800646c:	d939      	bls.n	80064e2 <_scanf_float+0xda>
 800646e:	b11f      	cbz	r7, 8006478 <_scanf_float+0x70>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	f10a 3aff 	add.w	sl, sl, #4294967295
 800647c:	f1ba 0f01 	cmp.w	sl, #1
 8006480:	f200 8114 	bhi.w	80066ac <_scanf_float+0x2a4>
 8006484:	9b01      	ldr	r3, [sp, #4]
 8006486:	429e      	cmp	r6, r3
 8006488:	f200 8105 	bhi.w	8006696 <_scanf_float+0x28e>
 800648c:	2001      	movs	r0, #1
 800648e:	b007      	add	sp, #28
 8006490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006494:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006498:	2a0d      	cmp	r2, #13
 800649a:	d8e8      	bhi.n	800646e <_scanf_float+0x66>
 800649c:	a101      	add	r1, pc, #4	@ (adr r1, 80064a4 <_scanf_float+0x9c>)
 800649e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080065ed 	.word	0x080065ed
 80064a8:	0800646f 	.word	0x0800646f
 80064ac:	0800646f 	.word	0x0800646f
 80064b0:	0800646f 	.word	0x0800646f
 80064b4:	08006649 	.word	0x08006649
 80064b8:	08006623 	.word	0x08006623
 80064bc:	0800646f 	.word	0x0800646f
 80064c0:	0800646f 	.word	0x0800646f
 80064c4:	080065fb 	.word	0x080065fb
 80064c8:	0800646f 	.word	0x0800646f
 80064cc:	0800646f 	.word	0x0800646f
 80064d0:	0800646f 	.word	0x0800646f
 80064d4:	0800646f 	.word	0x0800646f
 80064d8:	080065b7 	.word	0x080065b7
 80064dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80064e0:	e7da      	b.n	8006498 <_scanf_float+0x90>
 80064e2:	290e      	cmp	r1, #14
 80064e4:	d8c3      	bhi.n	800646e <_scanf_float+0x66>
 80064e6:	a001      	add	r0, pc, #4	@ (adr r0, 80064ec <_scanf_float+0xe4>)
 80064e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80064ec:	080065a7 	.word	0x080065a7
 80064f0:	0800646f 	.word	0x0800646f
 80064f4:	080065a7 	.word	0x080065a7
 80064f8:	08006637 	.word	0x08006637
 80064fc:	0800646f 	.word	0x0800646f
 8006500:	08006549 	.word	0x08006549
 8006504:	0800658d 	.word	0x0800658d
 8006508:	0800658d 	.word	0x0800658d
 800650c:	0800658d 	.word	0x0800658d
 8006510:	0800658d 	.word	0x0800658d
 8006514:	0800658d 	.word	0x0800658d
 8006518:	0800658d 	.word	0x0800658d
 800651c:	0800658d 	.word	0x0800658d
 8006520:	0800658d 	.word	0x0800658d
 8006524:	0800658d 	.word	0x0800658d
 8006528:	2b6e      	cmp	r3, #110	@ 0x6e
 800652a:	d809      	bhi.n	8006540 <_scanf_float+0x138>
 800652c:	2b60      	cmp	r3, #96	@ 0x60
 800652e:	d8b1      	bhi.n	8006494 <_scanf_float+0x8c>
 8006530:	2b54      	cmp	r3, #84	@ 0x54
 8006532:	d07b      	beq.n	800662c <_scanf_float+0x224>
 8006534:	2b59      	cmp	r3, #89	@ 0x59
 8006536:	d19a      	bne.n	800646e <_scanf_float+0x66>
 8006538:	2d07      	cmp	r5, #7
 800653a:	d198      	bne.n	800646e <_scanf_float+0x66>
 800653c:	2508      	movs	r5, #8
 800653e:	e02f      	b.n	80065a0 <_scanf_float+0x198>
 8006540:	2b74      	cmp	r3, #116	@ 0x74
 8006542:	d073      	beq.n	800662c <_scanf_float+0x224>
 8006544:	2b79      	cmp	r3, #121	@ 0x79
 8006546:	e7f6      	b.n	8006536 <_scanf_float+0x12e>
 8006548:	6821      	ldr	r1, [r4, #0]
 800654a:	05c8      	lsls	r0, r1, #23
 800654c:	d51e      	bpl.n	800658c <_scanf_float+0x184>
 800654e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006552:	6021      	str	r1, [r4, #0]
 8006554:	3701      	adds	r7, #1
 8006556:	f1bb 0f00 	cmp.w	fp, #0
 800655a:	d003      	beq.n	8006564 <_scanf_float+0x15c>
 800655c:	3201      	adds	r2, #1
 800655e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006562:	60a2      	str	r2, [r4, #8]
 8006564:	68a3      	ldr	r3, [r4, #8]
 8006566:	3b01      	subs	r3, #1
 8006568:	60a3      	str	r3, [r4, #8]
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	3301      	adds	r3, #1
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006574:	3b01      	subs	r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	f8c9 3004 	str.w	r3, [r9, #4]
 800657c:	f340 8082 	ble.w	8006684 <_scanf_float+0x27c>
 8006580:	f8d9 3000 	ldr.w	r3, [r9]
 8006584:	3301      	adds	r3, #1
 8006586:	f8c9 3000 	str.w	r3, [r9]
 800658a:	e762      	b.n	8006452 <_scanf_float+0x4a>
 800658c:	eb1a 0105 	adds.w	r1, sl, r5
 8006590:	f47f af6d 	bne.w	800646e <_scanf_float+0x66>
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800659a:	6022      	str	r2, [r4, #0]
 800659c:	460d      	mov	r5, r1
 800659e:	468a      	mov	sl, r1
 80065a0:	f806 3b01 	strb.w	r3, [r6], #1
 80065a4:	e7de      	b.n	8006564 <_scanf_float+0x15c>
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	0610      	lsls	r0, r2, #24
 80065aa:	f57f af60 	bpl.w	800646e <_scanf_float+0x66>
 80065ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065b2:	6022      	str	r2, [r4, #0]
 80065b4:	e7f4      	b.n	80065a0 <_scanf_float+0x198>
 80065b6:	f1ba 0f00 	cmp.w	sl, #0
 80065ba:	d10c      	bne.n	80065d6 <_scanf_float+0x1ce>
 80065bc:	b977      	cbnz	r7, 80065dc <_scanf_float+0x1d4>
 80065be:	6822      	ldr	r2, [r4, #0]
 80065c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80065c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80065c8:	d108      	bne.n	80065dc <_scanf_float+0x1d4>
 80065ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065ce:	6022      	str	r2, [r4, #0]
 80065d0:	f04f 0a01 	mov.w	sl, #1
 80065d4:	e7e4      	b.n	80065a0 <_scanf_float+0x198>
 80065d6:	f1ba 0f02 	cmp.w	sl, #2
 80065da:	d050      	beq.n	800667e <_scanf_float+0x276>
 80065dc:	2d01      	cmp	r5, #1
 80065de:	d002      	beq.n	80065e6 <_scanf_float+0x1de>
 80065e0:	2d04      	cmp	r5, #4
 80065e2:	f47f af44 	bne.w	800646e <_scanf_float+0x66>
 80065e6:	3501      	adds	r5, #1
 80065e8:	b2ed      	uxtb	r5, r5
 80065ea:	e7d9      	b.n	80065a0 <_scanf_float+0x198>
 80065ec:	f1ba 0f01 	cmp.w	sl, #1
 80065f0:	f47f af3d 	bne.w	800646e <_scanf_float+0x66>
 80065f4:	f04f 0a02 	mov.w	sl, #2
 80065f8:	e7d2      	b.n	80065a0 <_scanf_float+0x198>
 80065fa:	b975      	cbnz	r5, 800661a <_scanf_float+0x212>
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	f47f af37 	bne.w	8006470 <_scanf_float+0x68>
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006608:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800660c:	f040 8103 	bne.w	8006816 <_scanf_float+0x40e>
 8006610:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006614:	6022      	str	r2, [r4, #0]
 8006616:	2501      	movs	r5, #1
 8006618:	e7c2      	b.n	80065a0 <_scanf_float+0x198>
 800661a:	2d03      	cmp	r5, #3
 800661c:	d0e3      	beq.n	80065e6 <_scanf_float+0x1de>
 800661e:	2d05      	cmp	r5, #5
 8006620:	e7df      	b.n	80065e2 <_scanf_float+0x1da>
 8006622:	2d02      	cmp	r5, #2
 8006624:	f47f af23 	bne.w	800646e <_scanf_float+0x66>
 8006628:	2503      	movs	r5, #3
 800662a:	e7b9      	b.n	80065a0 <_scanf_float+0x198>
 800662c:	2d06      	cmp	r5, #6
 800662e:	f47f af1e 	bne.w	800646e <_scanf_float+0x66>
 8006632:	2507      	movs	r5, #7
 8006634:	e7b4      	b.n	80065a0 <_scanf_float+0x198>
 8006636:	6822      	ldr	r2, [r4, #0]
 8006638:	0591      	lsls	r1, r2, #22
 800663a:	f57f af18 	bpl.w	800646e <_scanf_float+0x66>
 800663e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006642:	6022      	str	r2, [r4, #0]
 8006644:	9702      	str	r7, [sp, #8]
 8006646:	e7ab      	b.n	80065a0 <_scanf_float+0x198>
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800664e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006652:	d005      	beq.n	8006660 <_scanf_float+0x258>
 8006654:	0550      	lsls	r0, r2, #21
 8006656:	f57f af0a 	bpl.w	800646e <_scanf_float+0x66>
 800665a:	2f00      	cmp	r7, #0
 800665c:	f000 80db 	beq.w	8006816 <_scanf_float+0x40e>
 8006660:	0591      	lsls	r1, r2, #22
 8006662:	bf58      	it	pl
 8006664:	9902      	ldrpl	r1, [sp, #8]
 8006666:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800666a:	bf58      	it	pl
 800666c:	1a79      	subpl	r1, r7, r1
 800666e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006672:	bf58      	it	pl
 8006674:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006678:	6022      	str	r2, [r4, #0]
 800667a:	2700      	movs	r7, #0
 800667c:	e790      	b.n	80065a0 <_scanf_float+0x198>
 800667e:	f04f 0a03 	mov.w	sl, #3
 8006682:	e78d      	b.n	80065a0 <_scanf_float+0x198>
 8006684:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006688:	4649      	mov	r1, r9
 800668a:	4640      	mov	r0, r8
 800668c:	4798      	blx	r3
 800668e:	2800      	cmp	r0, #0
 8006690:	f43f aedf 	beq.w	8006452 <_scanf_float+0x4a>
 8006694:	e6eb      	b.n	800646e <_scanf_float+0x66>
 8006696:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800669a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800669e:	464a      	mov	r2, r9
 80066a0:	4640      	mov	r0, r8
 80066a2:	4798      	blx	r3
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	e6eb      	b.n	8006484 <_scanf_float+0x7c>
 80066ac:	1e6b      	subs	r3, r5, #1
 80066ae:	2b06      	cmp	r3, #6
 80066b0:	d824      	bhi.n	80066fc <_scanf_float+0x2f4>
 80066b2:	2d02      	cmp	r5, #2
 80066b4:	d836      	bhi.n	8006724 <_scanf_float+0x31c>
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	429e      	cmp	r6, r3
 80066ba:	f67f aee7 	bls.w	800648c <_scanf_float+0x84>
 80066be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066c6:	464a      	mov	r2, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	4798      	blx	r3
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	6123      	str	r3, [r4, #16]
 80066d2:	e7f0      	b.n	80066b6 <_scanf_float+0x2ae>
 80066d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80066dc:	464a      	mov	r2, r9
 80066de:	4640      	mov	r0, r8
 80066e0:	4798      	blx	r3
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	6123      	str	r3, [r4, #16]
 80066e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066ec:	fa5f fa8a 	uxtb.w	sl, sl
 80066f0:	f1ba 0f02 	cmp.w	sl, #2
 80066f4:	d1ee      	bne.n	80066d4 <_scanf_float+0x2cc>
 80066f6:	3d03      	subs	r5, #3
 80066f8:	b2ed      	uxtb	r5, r5
 80066fa:	1b76      	subs	r6, r6, r5
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	05da      	lsls	r2, r3, #23
 8006700:	d530      	bpl.n	8006764 <_scanf_float+0x35c>
 8006702:	055b      	lsls	r3, r3, #21
 8006704:	d511      	bpl.n	800672a <_scanf_float+0x322>
 8006706:	9b01      	ldr	r3, [sp, #4]
 8006708:	429e      	cmp	r6, r3
 800670a:	f67f aebf 	bls.w	800648c <_scanf_float+0x84>
 800670e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006712:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006716:	464a      	mov	r2, r9
 8006718:	4640      	mov	r0, r8
 800671a:	4798      	blx	r3
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	3b01      	subs	r3, #1
 8006720:	6123      	str	r3, [r4, #16]
 8006722:	e7f0      	b.n	8006706 <_scanf_float+0x2fe>
 8006724:	46aa      	mov	sl, r5
 8006726:	46b3      	mov	fp, r6
 8006728:	e7de      	b.n	80066e8 <_scanf_float+0x2e0>
 800672a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	2965      	cmp	r1, #101	@ 0x65
 8006732:	f103 33ff 	add.w	r3, r3, #4294967295
 8006736:	f106 35ff 	add.w	r5, r6, #4294967295
 800673a:	6123      	str	r3, [r4, #16]
 800673c:	d00c      	beq.n	8006758 <_scanf_float+0x350>
 800673e:	2945      	cmp	r1, #69	@ 0x45
 8006740:	d00a      	beq.n	8006758 <_scanf_float+0x350>
 8006742:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006746:	464a      	mov	r2, r9
 8006748:	4640      	mov	r0, r8
 800674a:	4798      	blx	r3
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006752:	3b01      	subs	r3, #1
 8006754:	1eb5      	subs	r5, r6, #2
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800675c:	464a      	mov	r2, r9
 800675e:	4640      	mov	r0, r8
 8006760:	4798      	blx	r3
 8006762:	462e      	mov	r6, r5
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	f012 0210 	ands.w	r2, r2, #16
 800676a:	d001      	beq.n	8006770 <_scanf_float+0x368>
 800676c:	2000      	movs	r0, #0
 800676e:	e68e      	b.n	800648e <_scanf_float+0x86>
 8006770:	7032      	strb	r2, [r6, #0]
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677c:	d125      	bne.n	80067ca <_scanf_float+0x3c2>
 800677e:	9b02      	ldr	r3, [sp, #8]
 8006780:	429f      	cmp	r7, r3
 8006782:	d00a      	beq.n	800679a <_scanf_float+0x392>
 8006784:	1bda      	subs	r2, r3, r7
 8006786:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800678a:	429e      	cmp	r6, r3
 800678c:	bf28      	it	cs
 800678e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006792:	4922      	ldr	r1, [pc, #136]	@ (800681c <_scanf_float+0x414>)
 8006794:	4630      	mov	r0, r6
 8006796:	f000 f977 	bl	8006a88 <siprintf>
 800679a:	9901      	ldr	r1, [sp, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	4640      	mov	r0, r8
 80067a0:	f002 fd9e 	bl	80092e0 <_strtod_r>
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	6821      	ldr	r1, [r4, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f011 0f02 	tst.w	r1, #2
 80067ae:	ec57 6b10 	vmov	r6, r7, d0
 80067b2:	f103 0204 	add.w	r2, r3, #4
 80067b6:	d015      	beq.n	80067e4 <_scanf_float+0x3dc>
 80067b8:	9903      	ldr	r1, [sp, #12]
 80067ba:	600a      	str	r2, [r1, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	e9c3 6700 	strd	r6, r7, [r3]
 80067c2:	68e3      	ldr	r3, [r4, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60e3      	str	r3, [r4, #12]
 80067c8:	e7d0      	b.n	800676c <_scanf_float+0x364>
 80067ca:	9b04      	ldr	r3, [sp, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0e4      	beq.n	800679a <_scanf_float+0x392>
 80067d0:	9905      	ldr	r1, [sp, #20]
 80067d2:	230a      	movs	r3, #10
 80067d4:	3101      	adds	r1, #1
 80067d6:	4640      	mov	r0, r8
 80067d8:	f002 fe02 	bl	80093e0 <_strtol_r>
 80067dc:	9b04      	ldr	r3, [sp, #16]
 80067de:	9e05      	ldr	r6, [sp, #20]
 80067e0:	1ac2      	subs	r2, r0, r3
 80067e2:	e7d0      	b.n	8006786 <_scanf_float+0x37e>
 80067e4:	f011 0f04 	tst.w	r1, #4
 80067e8:	9903      	ldr	r1, [sp, #12]
 80067ea:	600a      	str	r2, [r1, #0]
 80067ec:	d1e6      	bne.n	80067bc <_scanf_float+0x3b4>
 80067ee:	681d      	ldr	r5, [r3, #0]
 80067f0:	4632      	mov	r2, r6
 80067f2:	463b      	mov	r3, r7
 80067f4:	4630      	mov	r0, r6
 80067f6:	4639      	mov	r1, r7
 80067f8:	f7fa f998 	bl	8000b2c <__aeabi_dcmpun>
 80067fc:	b128      	cbz	r0, 800680a <_scanf_float+0x402>
 80067fe:	4808      	ldr	r0, [pc, #32]	@ (8006820 <_scanf_float+0x418>)
 8006800:	f000 fb46 	bl	8006e90 <nanf>
 8006804:	ed85 0a00 	vstr	s0, [r5]
 8006808:	e7db      	b.n	80067c2 <_scanf_float+0x3ba>
 800680a:	4630      	mov	r0, r6
 800680c:	4639      	mov	r1, r7
 800680e:	f7fa f9eb 	bl	8000be8 <__aeabi_d2f>
 8006812:	6028      	str	r0, [r5, #0]
 8006814:	e7d5      	b.n	80067c2 <_scanf_float+0x3ba>
 8006816:	2700      	movs	r7, #0
 8006818:	e62e      	b.n	8006478 <_scanf_float+0x70>
 800681a:	bf00      	nop
 800681c:	0800aeb2 	.word	0x0800aeb2
 8006820:	0800af63 	.word	0x0800af63

08006824 <std>:
 8006824:	2300      	movs	r3, #0
 8006826:	b510      	push	{r4, lr}
 8006828:	4604      	mov	r4, r0
 800682a:	e9c0 3300 	strd	r3, r3, [r0]
 800682e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006832:	6083      	str	r3, [r0, #8]
 8006834:	8181      	strh	r1, [r0, #12]
 8006836:	6643      	str	r3, [r0, #100]	@ 0x64
 8006838:	81c2      	strh	r2, [r0, #14]
 800683a:	6183      	str	r3, [r0, #24]
 800683c:	4619      	mov	r1, r3
 800683e:	2208      	movs	r2, #8
 8006840:	305c      	adds	r0, #92	@ 0x5c
 8006842:	f000 fa49 	bl	8006cd8 <memset>
 8006846:	4b0d      	ldr	r3, [pc, #52]	@ (800687c <std+0x58>)
 8006848:	6263      	str	r3, [r4, #36]	@ 0x24
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <std+0x5c>)
 800684c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800684e:	4b0d      	ldr	r3, [pc, #52]	@ (8006884 <std+0x60>)
 8006850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006852:	4b0d      	ldr	r3, [pc, #52]	@ (8006888 <std+0x64>)
 8006854:	6323      	str	r3, [r4, #48]	@ 0x30
 8006856:	4b0d      	ldr	r3, [pc, #52]	@ (800688c <std+0x68>)
 8006858:	6224      	str	r4, [r4, #32]
 800685a:	429c      	cmp	r4, r3
 800685c:	d006      	beq.n	800686c <std+0x48>
 800685e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006862:	4294      	cmp	r4, r2
 8006864:	d002      	beq.n	800686c <std+0x48>
 8006866:	33d0      	adds	r3, #208	@ 0xd0
 8006868:	429c      	cmp	r4, r3
 800686a:	d105      	bne.n	8006878 <std+0x54>
 800686c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006874:	f000 bb08 	b.w	8006e88 <__retarget_lock_init_recursive>
 8006878:	bd10      	pop	{r4, pc}
 800687a:	bf00      	nop
 800687c:	08006b25 	.word	0x08006b25
 8006880:	08006b4b 	.word	0x08006b4b
 8006884:	08006b83 	.word	0x08006b83
 8006888:	08006ba7 	.word	0x08006ba7
 800688c:	20000380 	.word	0x20000380

08006890 <stdio_exit_handler>:
 8006890:	4a02      	ldr	r2, [pc, #8]	@ (800689c <stdio_exit_handler+0xc>)
 8006892:	4903      	ldr	r1, [pc, #12]	@ (80068a0 <stdio_exit_handler+0x10>)
 8006894:	4803      	ldr	r0, [pc, #12]	@ (80068a4 <stdio_exit_handler+0x14>)
 8006896:	f000 b869 	b.w	800696c <_fwalk_sglue>
 800689a:	bf00      	nop
 800689c:	2000000c 	.word	0x2000000c
 80068a0:	0800a05d 	.word	0x0800a05d
 80068a4:	2000001c 	.word	0x2000001c

080068a8 <cleanup_stdio>:
 80068a8:	6841      	ldr	r1, [r0, #4]
 80068aa:	4b0c      	ldr	r3, [pc, #48]	@ (80068dc <cleanup_stdio+0x34>)
 80068ac:	4299      	cmp	r1, r3
 80068ae:	b510      	push	{r4, lr}
 80068b0:	4604      	mov	r4, r0
 80068b2:	d001      	beq.n	80068b8 <cleanup_stdio+0x10>
 80068b4:	f003 fbd2 	bl	800a05c <_fflush_r>
 80068b8:	68a1      	ldr	r1, [r4, #8]
 80068ba:	4b09      	ldr	r3, [pc, #36]	@ (80068e0 <cleanup_stdio+0x38>)
 80068bc:	4299      	cmp	r1, r3
 80068be:	d002      	beq.n	80068c6 <cleanup_stdio+0x1e>
 80068c0:	4620      	mov	r0, r4
 80068c2:	f003 fbcb 	bl	800a05c <_fflush_r>
 80068c6:	68e1      	ldr	r1, [r4, #12]
 80068c8:	4b06      	ldr	r3, [pc, #24]	@ (80068e4 <cleanup_stdio+0x3c>)
 80068ca:	4299      	cmp	r1, r3
 80068cc:	d004      	beq.n	80068d8 <cleanup_stdio+0x30>
 80068ce:	4620      	mov	r0, r4
 80068d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d4:	f003 bbc2 	b.w	800a05c <_fflush_r>
 80068d8:	bd10      	pop	{r4, pc}
 80068da:	bf00      	nop
 80068dc:	20000380 	.word	0x20000380
 80068e0:	200003e8 	.word	0x200003e8
 80068e4:	20000450 	.word	0x20000450

080068e8 <global_stdio_init.part.0>:
 80068e8:	b510      	push	{r4, lr}
 80068ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <global_stdio_init.part.0+0x30>)
 80068ec:	4c0b      	ldr	r4, [pc, #44]	@ (800691c <global_stdio_init.part.0+0x34>)
 80068ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006920 <global_stdio_init.part.0+0x38>)
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	4620      	mov	r0, r4
 80068f4:	2200      	movs	r2, #0
 80068f6:	2104      	movs	r1, #4
 80068f8:	f7ff ff94 	bl	8006824 <std>
 80068fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006900:	2201      	movs	r2, #1
 8006902:	2109      	movs	r1, #9
 8006904:	f7ff ff8e 	bl	8006824 <std>
 8006908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800690c:	2202      	movs	r2, #2
 800690e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006912:	2112      	movs	r1, #18
 8006914:	f7ff bf86 	b.w	8006824 <std>
 8006918:	200004b8 	.word	0x200004b8
 800691c:	20000380 	.word	0x20000380
 8006920:	08006891 	.word	0x08006891

08006924 <__sfp_lock_acquire>:
 8006924:	4801      	ldr	r0, [pc, #4]	@ (800692c <__sfp_lock_acquire+0x8>)
 8006926:	f000 bab0 	b.w	8006e8a <__retarget_lock_acquire_recursive>
 800692a:	bf00      	nop
 800692c:	200004c1 	.word	0x200004c1

08006930 <__sfp_lock_release>:
 8006930:	4801      	ldr	r0, [pc, #4]	@ (8006938 <__sfp_lock_release+0x8>)
 8006932:	f000 baab 	b.w	8006e8c <__retarget_lock_release_recursive>
 8006936:	bf00      	nop
 8006938:	200004c1 	.word	0x200004c1

0800693c <__sinit>:
 800693c:	b510      	push	{r4, lr}
 800693e:	4604      	mov	r4, r0
 8006940:	f7ff fff0 	bl	8006924 <__sfp_lock_acquire>
 8006944:	6a23      	ldr	r3, [r4, #32]
 8006946:	b11b      	cbz	r3, 8006950 <__sinit+0x14>
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694c:	f7ff bff0 	b.w	8006930 <__sfp_lock_release>
 8006950:	4b04      	ldr	r3, [pc, #16]	@ (8006964 <__sinit+0x28>)
 8006952:	6223      	str	r3, [r4, #32]
 8006954:	4b04      	ldr	r3, [pc, #16]	@ (8006968 <__sinit+0x2c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f5      	bne.n	8006948 <__sinit+0xc>
 800695c:	f7ff ffc4 	bl	80068e8 <global_stdio_init.part.0>
 8006960:	e7f2      	b.n	8006948 <__sinit+0xc>
 8006962:	bf00      	nop
 8006964:	080068a9 	.word	0x080068a9
 8006968:	200004b8 	.word	0x200004b8

0800696c <_fwalk_sglue>:
 800696c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006970:	4607      	mov	r7, r0
 8006972:	4688      	mov	r8, r1
 8006974:	4614      	mov	r4, r2
 8006976:	2600      	movs	r6, #0
 8006978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800697c:	f1b9 0901 	subs.w	r9, r9, #1
 8006980:	d505      	bpl.n	800698e <_fwalk_sglue+0x22>
 8006982:	6824      	ldr	r4, [r4, #0]
 8006984:	2c00      	cmp	r4, #0
 8006986:	d1f7      	bne.n	8006978 <_fwalk_sglue+0xc>
 8006988:	4630      	mov	r0, r6
 800698a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698e:	89ab      	ldrh	r3, [r5, #12]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d907      	bls.n	80069a4 <_fwalk_sglue+0x38>
 8006994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006998:	3301      	adds	r3, #1
 800699a:	d003      	beq.n	80069a4 <_fwalk_sglue+0x38>
 800699c:	4629      	mov	r1, r5
 800699e:	4638      	mov	r0, r7
 80069a0:	47c0      	blx	r8
 80069a2:	4306      	orrs	r6, r0
 80069a4:	3568      	adds	r5, #104	@ 0x68
 80069a6:	e7e9      	b.n	800697c <_fwalk_sglue+0x10>

080069a8 <iprintf>:
 80069a8:	b40f      	push	{r0, r1, r2, r3}
 80069aa:	b507      	push	{r0, r1, r2, lr}
 80069ac:	4906      	ldr	r1, [pc, #24]	@ (80069c8 <iprintf+0x20>)
 80069ae:	ab04      	add	r3, sp, #16
 80069b0:	6808      	ldr	r0, [r1, #0]
 80069b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b6:	6881      	ldr	r1, [r0, #8]
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	f003 f865 	bl	8009a88 <_vfiprintf_r>
 80069be:	b003      	add	sp, #12
 80069c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c4:	b004      	add	sp, #16
 80069c6:	4770      	bx	lr
 80069c8:	20000018 	.word	0x20000018

080069cc <_puts_r>:
 80069cc:	6a03      	ldr	r3, [r0, #32]
 80069ce:	b570      	push	{r4, r5, r6, lr}
 80069d0:	6884      	ldr	r4, [r0, #8]
 80069d2:	4605      	mov	r5, r0
 80069d4:	460e      	mov	r6, r1
 80069d6:	b90b      	cbnz	r3, 80069dc <_puts_r+0x10>
 80069d8:	f7ff ffb0 	bl	800693c <__sinit>
 80069dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069de:	07db      	lsls	r3, r3, #31
 80069e0:	d405      	bmi.n	80069ee <_puts_r+0x22>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	0598      	lsls	r0, r3, #22
 80069e6:	d402      	bmi.n	80069ee <_puts_r+0x22>
 80069e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ea:	f000 fa4e 	bl	8006e8a <__retarget_lock_acquire_recursive>
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	0719      	lsls	r1, r3, #28
 80069f2:	d502      	bpl.n	80069fa <_puts_r+0x2e>
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d135      	bne.n	8006a66 <_puts_r+0x9a>
 80069fa:	4621      	mov	r1, r4
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 f915 	bl	8006c2c <__swsetup_r>
 8006a02:	b380      	cbz	r0, 8006a66 <_puts_r+0x9a>
 8006a04:	f04f 35ff 	mov.w	r5, #4294967295
 8006a08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a0a:	07da      	lsls	r2, r3, #31
 8006a0c:	d405      	bmi.n	8006a1a <_puts_r+0x4e>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	059b      	lsls	r3, r3, #22
 8006a12:	d402      	bmi.n	8006a1a <_puts_r+0x4e>
 8006a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a16:	f000 fa39 	bl	8006e8c <__retarget_lock_release_recursive>
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	da04      	bge.n	8006a2c <_puts_r+0x60>
 8006a22:	69a2      	ldr	r2, [r4, #24]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	dc17      	bgt.n	8006a58 <_puts_r+0x8c>
 8006a28:	290a      	cmp	r1, #10
 8006a2a:	d015      	beq.n	8006a58 <_puts_r+0x8c>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	6022      	str	r2, [r4, #0]
 8006a32:	7019      	strb	r1, [r3, #0]
 8006a34:	68a3      	ldr	r3, [r4, #8]
 8006a36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	60a3      	str	r3, [r4, #8]
 8006a3e:	2900      	cmp	r1, #0
 8006a40:	d1ed      	bne.n	8006a1e <_puts_r+0x52>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	da11      	bge.n	8006a6a <_puts_r+0x9e>
 8006a46:	4622      	mov	r2, r4
 8006a48:	210a      	movs	r1, #10
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f000 f8af 	bl	8006bae <__swbuf_r>
 8006a50:	3001      	adds	r0, #1
 8006a52:	d0d7      	beq.n	8006a04 <_puts_r+0x38>
 8006a54:	250a      	movs	r5, #10
 8006a56:	e7d7      	b.n	8006a08 <_puts_r+0x3c>
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f000 f8a7 	bl	8006bae <__swbuf_r>
 8006a60:	3001      	adds	r0, #1
 8006a62:	d1e7      	bne.n	8006a34 <_puts_r+0x68>
 8006a64:	e7ce      	b.n	8006a04 <_puts_r+0x38>
 8006a66:	3e01      	subs	r6, #1
 8006a68:	e7e4      	b.n	8006a34 <_puts_r+0x68>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	6022      	str	r2, [r4, #0]
 8006a70:	220a      	movs	r2, #10
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	e7ee      	b.n	8006a54 <_puts_r+0x88>
	...

08006a78 <puts>:
 8006a78:	4b02      	ldr	r3, [pc, #8]	@ (8006a84 <puts+0xc>)
 8006a7a:	4601      	mov	r1, r0
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	f7ff bfa5 	b.w	80069cc <_puts_r>
 8006a82:	bf00      	nop
 8006a84:	20000018 	.word	0x20000018

08006a88 <siprintf>:
 8006a88:	b40e      	push	{r1, r2, r3}
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	b09d      	sub	sp, #116	@ 0x74
 8006a8e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006a90:	9002      	str	r0, [sp, #8]
 8006a92:	9006      	str	r0, [sp, #24]
 8006a94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a98:	480a      	ldr	r0, [pc, #40]	@ (8006ac4 <siprintf+0x3c>)
 8006a9a:	9107      	str	r1, [sp, #28]
 8006a9c:	9104      	str	r1, [sp, #16]
 8006a9e:	490a      	ldr	r1, [pc, #40]	@ (8006ac8 <siprintf+0x40>)
 8006aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa4:	9105      	str	r1, [sp, #20]
 8006aa6:	2400      	movs	r4, #0
 8006aa8:	a902      	add	r1, sp, #8
 8006aaa:	6800      	ldr	r0, [r0, #0]
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006ab0:	f002 fcf4 	bl	800949c <_svfiprintf_r>
 8006ab4:	9b02      	ldr	r3, [sp, #8]
 8006ab6:	701c      	strb	r4, [r3, #0]
 8006ab8:	b01d      	add	sp, #116	@ 0x74
 8006aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006abe:	b003      	add	sp, #12
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	20000018 	.word	0x20000018
 8006ac8:	ffff0208 	.word	0xffff0208

08006acc <siscanf>:
 8006acc:	b40e      	push	{r1, r2, r3}
 8006ace:	b570      	push	{r4, r5, r6, lr}
 8006ad0:	b09d      	sub	sp, #116	@ 0x74
 8006ad2:	ac21      	add	r4, sp, #132	@ 0x84
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006ada:	f854 6b04 	ldr.w	r6, [r4], #4
 8006ade:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006ae2:	951b      	str	r5, [sp, #108]	@ 0x6c
 8006ae4:	9002      	str	r0, [sp, #8]
 8006ae6:	9006      	str	r0, [sp, #24]
 8006ae8:	f7f9 fbc2 	bl	8000270 <strlen>
 8006aec:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <siscanf+0x50>)
 8006aee:	9003      	str	r0, [sp, #12]
 8006af0:	9007      	str	r0, [sp, #28]
 8006af2:	480b      	ldr	r0, [pc, #44]	@ (8006b20 <siscanf+0x54>)
 8006af4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006af6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006afa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006afe:	4632      	mov	r2, r6
 8006b00:	4623      	mov	r3, r4
 8006b02:	a902      	add	r1, sp, #8
 8006b04:	6800      	ldr	r0, [r0, #0]
 8006b06:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006b08:	9514      	str	r5, [sp, #80]	@ 0x50
 8006b0a:	9401      	str	r4, [sp, #4]
 8006b0c:	f002 fe1c 	bl	8009748 <__ssvfiscanf_r>
 8006b10:	b01d      	add	sp, #116	@ 0x74
 8006b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b16:	b003      	add	sp, #12
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	08006b47 	.word	0x08006b47
 8006b20:	20000018 	.word	0x20000018

08006b24 <__sread>:
 8006b24:	b510      	push	{r4, lr}
 8006b26:	460c      	mov	r4, r1
 8006b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b2c:	f000 f95e 	bl	8006dec <_read_r>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	bfab      	itete	ge
 8006b34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b36:	89a3      	ldrhlt	r3, [r4, #12]
 8006b38:	181b      	addge	r3, r3, r0
 8006b3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b3e:	bfac      	ite	ge
 8006b40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b42:	81a3      	strhlt	r3, [r4, #12]
 8006b44:	bd10      	pop	{r4, pc}

08006b46 <__seofread>:
 8006b46:	2000      	movs	r0, #0
 8006b48:	4770      	bx	lr

08006b4a <__swrite>:
 8006b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4e:	461f      	mov	r7, r3
 8006b50:	898b      	ldrh	r3, [r1, #12]
 8006b52:	05db      	lsls	r3, r3, #23
 8006b54:	4605      	mov	r5, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	4616      	mov	r6, r2
 8006b5a:	d505      	bpl.n	8006b68 <__swrite+0x1e>
 8006b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b60:	2302      	movs	r3, #2
 8006b62:	2200      	movs	r2, #0
 8006b64:	f000 f930 	bl	8006dc8 <_lseek_r>
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b72:	81a3      	strh	r3, [r4, #12]
 8006b74:	4632      	mov	r2, r6
 8006b76:	463b      	mov	r3, r7
 8006b78:	4628      	mov	r0, r5
 8006b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7e:	f000 b947 	b.w	8006e10 <_write_r>

08006b82 <__sseek>:
 8006b82:	b510      	push	{r4, lr}
 8006b84:	460c      	mov	r4, r1
 8006b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b8a:	f000 f91d 	bl	8006dc8 <_lseek_r>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	bf15      	itete	ne
 8006b94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b9e:	81a3      	strheq	r3, [r4, #12]
 8006ba0:	bf18      	it	ne
 8006ba2:	81a3      	strhne	r3, [r4, #12]
 8006ba4:	bd10      	pop	{r4, pc}

08006ba6 <__sclose>:
 8006ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006baa:	f000 b8fd 	b.w	8006da8 <_close_r>

08006bae <__swbuf_r>:
 8006bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb0:	460e      	mov	r6, r1
 8006bb2:	4614      	mov	r4, r2
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	b118      	cbz	r0, 8006bc0 <__swbuf_r+0x12>
 8006bb8:	6a03      	ldr	r3, [r0, #32]
 8006bba:	b90b      	cbnz	r3, 8006bc0 <__swbuf_r+0x12>
 8006bbc:	f7ff febe 	bl	800693c <__sinit>
 8006bc0:	69a3      	ldr	r3, [r4, #24]
 8006bc2:	60a3      	str	r3, [r4, #8]
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	071a      	lsls	r2, r3, #28
 8006bc8:	d501      	bpl.n	8006bce <__swbuf_r+0x20>
 8006bca:	6923      	ldr	r3, [r4, #16]
 8006bcc:	b943      	cbnz	r3, 8006be0 <__swbuf_r+0x32>
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 f82b 	bl	8006c2c <__swsetup_r>
 8006bd6:	b118      	cbz	r0, 8006be0 <__swbuf_r+0x32>
 8006bd8:	f04f 37ff 	mov.w	r7, #4294967295
 8006bdc:	4638      	mov	r0, r7
 8006bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	6922      	ldr	r2, [r4, #16]
 8006be4:	1a98      	subs	r0, r3, r2
 8006be6:	6963      	ldr	r3, [r4, #20]
 8006be8:	b2f6      	uxtb	r6, r6
 8006bea:	4283      	cmp	r3, r0
 8006bec:	4637      	mov	r7, r6
 8006bee:	dc05      	bgt.n	8006bfc <__swbuf_r+0x4e>
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f003 fa32 	bl	800a05c <_fflush_r>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d1ed      	bne.n	8006bd8 <__swbuf_r+0x2a>
 8006bfc:	68a3      	ldr	r3, [r4, #8]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	60a3      	str	r3, [r4, #8]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	6022      	str	r2, [r4, #0]
 8006c08:	701e      	strb	r6, [r3, #0]
 8006c0a:	6962      	ldr	r2, [r4, #20]
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d004      	beq.n	8006c1c <__swbuf_r+0x6e>
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	07db      	lsls	r3, r3, #31
 8006c16:	d5e1      	bpl.n	8006bdc <__swbuf_r+0x2e>
 8006c18:	2e0a      	cmp	r6, #10
 8006c1a:	d1df      	bne.n	8006bdc <__swbuf_r+0x2e>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f003 fa1c 	bl	800a05c <_fflush_r>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d0d9      	beq.n	8006bdc <__swbuf_r+0x2e>
 8006c28:	e7d6      	b.n	8006bd8 <__swbuf_r+0x2a>
	...

08006c2c <__swsetup_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4b29      	ldr	r3, [pc, #164]	@ (8006cd4 <__swsetup_r+0xa8>)
 8006c30:	4605      	mov	r5, r0
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	460c      	mov	r4, r1
 8006c36:	b118      	cbz	r0, 8006c40 <__swsetup_r+0x14>
 8006c38:	6a03      	ldr	r3, [r0, #32]
 8006c3a:	b90b      	cbnz	r3, 8006c40 <__swsetup_r+0x14>
 8006c3c:	f7ff fe7e 	bl	800693c <__sinit>
 8006c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c44:	0719      	lsls	r1, r3, #28
 8006c46:	d422      	bmi.n	8006c8e <__swsetup_r+0x62>
 8006c48:	06da      	lsls	r2, r3, #27
 8006c4a:	d407      	bmi.n	8006c5c <__swsetup_r+0x30>
 8006c4c:	2209      	movs	r2, #9
 8006c4e:	602a      	str	r2, [r5, #0]
 8006c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5a:	e033      	b.n	8006cc4 <__swsetup_r+0x98>
 8006c5c:	0758      	lsls	r0, r3, #29
 8006c5e:	d512      	bpl.n	8006c86 <__swsetup_r+0x5a>
 8006c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c62:	b141      	cbz	r1, 8006c76 <__swsetup_r+0x4a>
 8006c64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c68:	4299      	cmp	r1, r3
 8006c6a:	d002      	beq.n	8006c72 <__swsetup_r+0x46>
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 ff8b 	bl	8007b88 <_free_r>
 8006c72:	2300      	movs	r3, #0
 8006c74:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6063      	str	r3, [r4, #4]
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	89a3      	ldrh	r3, [r4, #12]
 8006c88:	f043 0308 	orr.w	r3, r3, #8
 8006c8c:	81a3      	strh	r3, [r4, #12]
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	b94b      	cbnz	r3, 8006ca6 <__swsetup_r+0x7a>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c9c:	d003      	beq.n	8006ca6 <__swsetup_r+0x7a>
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f003 fa3b 	bl	800a11c <__smakebuf_r>
 8006ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006caa:	f013 0201 	ands.w	r2, r3, #1
 8006cae:	d00a      	beq.n	8006cc6 <__swsetup_r+0x9a>
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	60a2      	str	r2, [r4, #8]
 8006cb4:	6962      	ldr	r2, [r4, #20]
 8006cb6:	4252      	negs	r2, r2
 8006cb8:	61a2      	str	r2, [r4, #24]
 8006cba:	6922      	ldr	r2, [r4, #16]
 8006cbc:	b942      	cbnz	r2, 8006cd0 <__swsetup_r+0xa4>
 8006cbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cc2:	d1c5      	bne.n	8006c50 <__swsetup_r+0x24>
 8006cc4:	bd38      	pop	{r3, r4, r5, pc}
 8006cc6:	0799      	lsls	r1, r3, #30
 8006cc8:	bf58      	it	pl
 8006cca:	6962      	ldrpl	r2, [r4, #20]
 8006ccc:	60a2      	str	r2, [r4, #8]
 8006cce:	e7f4      	b.n	8006cba <__swsetup_r+0x8e>
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e7f7      	b.n	8006cc4 <__swsetup_r+0x98>
 8006cd4:	20000018 	.word	0x20000018

08006cd8 <memset>:
 8006cd8:	4402      	add	r2, r0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d100      	bne.n	8006ce2 <memset+0xa>
 8006ce0:	4770      	bx	lr
 8006ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ce6:	e7f9      	b.n	8006cdc <memset+0x4>

08006ce8 <strtok>:
 8006ce8:	4b16      	ldr	r3, [pc, #88]	@ (8006d44 <strtok+0x5c>)
 8006cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cee:	681f      	ldr	r7, [r3, #0]
 8006cf0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	460e      	mov	r6, r1
 8006cf6:	b9ec      	cbnz	r4, 8006d34 <strtok+0x4c>
 8006cf8:	2050      	movs	r0, #80	@ 0x50
 8006cfa:	f000 ff8f 	bl	8007c1c <malloc>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	6478      	str	r0, [r7, #68]	@ 0x44
 8006d02:	b920      	cbnz	r0, 8006d0e <strtok+0x26>
 8006d04:	4b10      	ldr	r3, [pc, #64]	@ (8006d48 <strtok+0x60>)
 8006d06:	4811      	ldr	r0, [pc, #68]	@ (8006d4c <strtok+0x64>)
 8006d08:	215b      	movs	r1, #91	@ 0x5b
 8006d0a:	f000 f8c7 	bl	8006e9c <__assert_func>
 8006d0e:	e9c0 4400 	strd	r4, r4, [r0]
 8006d12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006d16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006d1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006d1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006d22:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006d26:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006d2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006d2e:	6184      	str	r4, [r0, #24]
 8006d30:	7704      	strb	r4, [r0, #28]
 8006d32:	6244      	str	r4, [r0, #36]	@ 0x24
 8006d34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d36:	4631      	mov	r1, r6
 8006d38:	4628      	mov	r0, r5
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d40:	f000 b806 	b.w	8006d50 <__strtok_r>
 8006d44:	20000018 	.word	0x20000018
 8006d48:	0800aeb7 	.word	0x0800aeb7
 8006d4c:	0800aece 	.word	0x0800aece

08006d50 <__strtok_r>:
 8006d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	b908      	cbnz	r0, 8006d5a <__strtok_r+0xa>
 8006d56:	6814      	ldr	r4, [r2, #0]
 8006d58:	b144      	cbz	r4, 8006d6c <__strtok_r+0x1c>
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006d60:	460f      	mov	r7, r1
 8006d62:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006d66:	b91e      	cbnz	r6, 8006d70 <__strtok_r+0x20>
 8006d68:	b965      	cbnz	r5, 8006d84 <__strtok_r+0x34>
 8006d6a:	6015      	str	r5, [r2, #0]
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	e005      	b.n	8006d7c <__strtok_r+0x2c>
 8006d70:	42b5      	cmp	r5, r6
 8006d72:	d1f6      	bne.n	8006d62 <__strtok_r+0x12>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1f0      	bne.n	8006d5a <__strtok_r+0xa>
 8006d78:	6014      	str	r4, [r2, #0]
 8006d7a:	7003      	strb	r3, [r0, #0]
 8006d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d7e:	461c      	mov	r4, r3
 8006d80:	e00c      	b.n	8006d9c <__strtok_r+0x4c>
 8006d82:	b91d      	cbnz	r5, 8006d8c <__strtok_r+0x3c>
 8006d84:	4627      	mov	r7, r4
 8006d86:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d8a:	460e      	mov	r6, r1
 8006d8c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	d1f6      	bne.n	8006d82 <__strtok_r+0x32>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0f2      	beq.n	8006d7e <__strtok_r+0x2e>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	703b      	strb	r3, [r7, #0]
 8006d9c:	6014      	str	r4, [r2, #0]
 8006d9e:	e7ed      	b.n	8006d7c <__strtok_r+0x2c>

08006da0 <_localeconv_r>:
 8006da0:	4800      	ldr	r0, [pc, #0]	@ (8006da4 <_localeconv_r+0x4>)
 8006da2:	4770      	bx	lr
 8006da4:	20000158 	.word	0x20000158

08006da8 <_close_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4d06      	ldr	r5, [pc, #24]	@ (8006dc4 <_close_r+0x1c>)
 8006dac:	2300      	movs	r3, #0
 8006dae:	4604      	mov	r4, r0
 8006db0:	4608      	mov	r0, r1
 8006db2:	602b      	str	r3, [r5, #0]
 8006db4:	f7fb fe66 	bl	8002a84 <_close>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d102      	bne.n	8006dc2 <_close_r+0x1a>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	b103      	cbz	r3, 8006dc2 <_close_r+0x1a>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	200004bc 	.word	0x200004bc

08006dc8 <_lseek_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d07      	ldr	r5, [pc, #28]	@ (8006de8 <_lseek_r+0x20>)
 8006dcc:	4604      	mov	r4, r0
 8006dce:	4608      	mov	r0, r1
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	602a      	str	r2, [r5, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f7fb fe7b 	bl	8002ad2 <_lseek>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_lseek_r+0x1e>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_lseek_r+0x1e>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	200004bc 	.word	0x200004bc

08006dec <_read_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d07      	ldr	r5, [pc, #28]	@ (8006e0c <_read_r+0x20>)
 8006df0:	4604      	mov	r4, r0
 8006df2:	4608      	mov	r0, r1
 8006df4:	4611      	mov	r1, r2
 8006df6:	2200      	movs	r2, #0
 8006df8:	602a      	str	r2, [r5, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f7fb fe09 	bl	8002a12 <_read>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d102      	bne.n	8006e0a <_read_r+0x1e>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	b103      	cbz	r3, 8006e0a <_read_r+0x1e>
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	200004bc 	.word	0x200004bc

08006e10 <_write_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4d07      	ldr	r5, [pc, #28]	@ (8006e30 <_write_r+0x20>)
 8006e14:	4604      	mov	r4, r0
 8006e16:	4608      	mov	r0, r1
 8006e18:	4611      	mov	r1, r2
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	602a      	str	r2, [r5, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f7fb fe14 	bl	8002a4c <_write>
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	d102      	bne.n	8006e2e <_write_r+0x1e>
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	b103      	cbz	r3, 8006e2e <_write_r+0x1e>
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	200004bc 	.word	0x200004bc

08006e34 <__errno>:
 8006e34:	4b01      	ldr	r3, [pc, #4]	@ (8006e3c <__errno+0x8>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	20000018 	.word	0x20000018

08006e40 <__libc_init_array>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4d0d      	ldr	r5, [pc, #52]	@ (8006e78 <__libc_init_array+0x38>)
 8006e44:	4c0d      	ldr	r4, [pc, #52]	@ (8006e7c <__libc_init_array+0x3c>)
 8006e46:	1b64      	subs	r4, r4, r5
 8006e48:	10a4      	asrs	r4, r4, #2
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	42a6      	cmp	r6, r4
 8006e4e:	d109      	bne.n	8006e64 <__libc_init_array+0x24>
 8006e50:	4d0b      	ldr	r5, [pc, #44]	@ (8006e80 <__libc_init_array+0x40>)
 8006e52:	4c0c      	ldr	r4, [pc, #48]	@ (8006e84 <__libc_init_array+0x44>)
 8006e54:	f003 fee6 	bl	800ac24 <_init>
 8006e58:	1b64      	subs	r4, r4, r5
 8006e5a:	10a4      	asrs	r4, r4, #2
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	42a6      	cmp	r6, r4
 8006e60:	d105      	bne.n	8006e6e <__libc_init_array+0x2e>
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e68:	4798      	blx	r3
 8006e6a:	3601      	adds	r6, #1
 8006e6c:	e7ee      	b.n	8006e4c <__libc_init_array+0xc>
 8006e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e72:	4798      	blx	r3
 8006e74:	3601      	adds	r6, #1
 8006e76:	e7f2      	b.n	8006e5e <__libc_init_array+0x1e>
 8006e78:	0800b324 	.word	0x0800b324
 8006e7c:	0800b324 	.word	0x0800b324
 8006e80:	0800b324 	.word	0x0800b324
 8006e84:	0800b32c 	.word	0x0800b32c

08006e88 <__retarget_lock_init_recursive>:
 8006e88:	4770      	bx	lr

08006e8a <__retarget_lock_acquire_recursive>:
 8006e8a:	4770      	bx	lr

08006e8c <__retarget_lock_release_recursive>:
 8006e8c:	4770      	bx	lr
	...

08006e90 <nanf>:
 8006e90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006e98 <nanf+0x8>
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	7fc00000 	.word	0x7fc00000

08006e9c <__assert_func>:
 8006e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4b09      	ldr	r3, [pc, #36]	@ (8006ec8 <__assert_func+0x2c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	68d8      	ldr	r0, [r3, #12]
 8006eaa:	b14c      	cbz	r4, 8006ec0 <__assert_func+0x24>
 8006eac:	4b07      	ldr	r3, [pc, #28]	@ (8006ecc <__assert_func+0x30>)
 8006eae:	9100      	str	r1, [sp, #0]
 8006eb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006eb4:	4906      	ldr	r1, [pc, #24]	@ (8006ed0 <__assert_func+0x34>)
 8006eb6:	462b      	mov	r3, r5
 8006eb8:	f003 f8f8 	bl	800a0ac <fiprintf>
 8006ebc:	f003 fa54 	bl	800a368 <abort>
 8006ec0:	4b04      	ldr	r3, [pc, #16]	@ (8006ed4 <__assert_func+0x38>)
 8006ec2:	461c      	mov	r4, r3
 8006ec4:	e7f3      	b.n	8006eae <__assert_func+0x12>
 8006ec6:	bf00      	nop
 8006ec8:	20000018 	.word	0x20000018
 8006ecc:	0800af28 	.word	0x0800af28
 8006ed0:	0800af35 	.word	0x0800af35
 8006ed4:	0800af63 	.word	0x0800af63

08006ed8 <quorem>:
 8006ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	6903      	ldr	r3, [r0, #16]
 8006ede:	690c      	ldr	r4, [r1, #16]
 8006ee0:	42a3      	cmp	r3, r4
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	db7e      	blt.n	8006fe4 <quorem+0x10c>
 8006ee6:	3c01      	subs	r4, #1
 8006ee8:	f101 0814 	add.w	r8, r1, #20
 8006eec:	00a3      	lsls	r3, r4, #2
 8006eee:	f100 0514 	add.w	r5, r0, #20
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006efe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f02:	3301      	adds	r3, #1
 8006f04:	429a      	cmp	r2, r3
 8006f06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f0e:	d32e      	bcc.n	8006f6e <quorem+0x96>
 8006f10:	f04f 0a00 	mov.w	sl, #0
 8006f14:	46c4      	mov	ip, r8
 8006f16:	46ae      	mov	lr, r5
 8006f18:	46d3      	mov	fp, sl
 8006f1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f1e:	b298      	uxth	r0, r3
 8006f20:	fb06 a000 	mla	r0, r6, r0, sl
 8006f24:	0c02      	lsrs	r2, r0, #16
 8006f26:	0c1b      	lsrs	r3, r3, #16
 8006f28:	fb06 2303 	mla	r3, r6, r3, r2
 8006f2c:	f8de 2000 	ldr.w	r2, [lr]
 8006f30:	b280      	uxth	r0, r0
 8006f32:	b292      	uxth	r2, r2
 8006f34:	1a12      	subs	r2, r2, r0
 8006f36:	445a      	add	r2, fp
 8006f38:	f8de 0000 	ldr.w	r0, [lr]
 8006f3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f46:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f4a:	b292      	uxth	r2, r2
 8006f4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f50:	45e1      	cmp	r9, ip
 8006f52:	f84e 2b04 	str.w	r2, [lr], #4
 8006f56:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f5a:	d2de      	bcs.n	8006f1a <quorem+0x42>
 8006f5c:	9b00      	ldr	r3, [sp, #0]
 8006f5e:	58eb      	ldr	r3, [r5, r3]
 8006f60:	b92b      	cbnz	r3, 8006f6e <quorem+0x96>
 8006f62:	9b01      	ldr	r3, [sp, #4]
 8006f64:	3b04      	subs	r3, #4
 8006f66:	429d      	cmp	r5, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	d32f      	bcc.n	8006fcc <quorem+0xf4>
 8006f6c:	613c      	str	r4, [r7, #16]
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f001 f9c6 	bl	8008300 <__mcmp>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	db25      	blt.n	8006fc4 <quorem+0xec>
 8006f78:	4629      	mov	r1, r5
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f80:	f8d1 c000 	ldr.w	ip, [r1]
 8006f84:	fa1f fe82 	uxth.w	lr, r2
 8006f88:	fa1f f38c 	uxth.w	r3, ip
 8006f8c:	eba3 030e 	sub.w	r3, r3, lr
 8006f90:	4403      	add	r3, r0
 8006f92:	0c12      	lsrs	r2, r2, #16
 8006f94:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f98:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fa2:	45c1      	cmp	r9, r8
 8006fa4:	f841 3b04 	str.w	r3, [r1], #4
 8006fa8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fac:	d2e6      	bcs.n	8006f7c <quorem+0xa4>
 8006fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fb6:	b922      	cbnz	r2, 8006fc2 <quorem+0xea>
 8006fb8:	3b04      	subs	r3, #4
 8006fba:	429d      	cmp	r5, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	d30b      	bcc.n	8006fd8 <quorem+0x100>
 8006fc0:	613c      	str	r4, [r7, #16]
 8006fc2:	3601      	adds	r6, #1
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	b003      	add	sp, #12
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	3b04      	subs	r3, #4
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	d1cb      	bne.n	8006f6c <quorem+0x94>
 8006fd4:	3c01      	subs	r4, #1
 8006fd6:	e7c6      	b.n	8006f66 <quorem+0x8e>
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	3b04      	subs	r3, #4
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	d1ef      	bne.n	8006fc0 <quorem+0xe8>
 8006fe0:	3c01      	subs	r4, #1
 8006fe2:	e7ea      	b.n	8006fba <quorem+0xe2>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e7ee      	b.n	8006fc6 <quorem+0xee>

08006fe8 <_dtoa_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	69c7      	ldr	r7, [r0, #28]
 8006fee:	b097      	sub	sp, #92	@ 0x5c
 8006ff0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006ff4:	ec55 4b10 	vmov	r4, r5, d0
 8006ff8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006ffa:	9107      	str	r1, [sp, #28]
 8006ffc:	4681      	mov	r9, r0
 8006ffe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007000:	9311      	str	r3, [sp, #68]	@ 0x44
 8007002:	b97f      	cbnz	r7, 8007024 <_dtoa_r+0x3c>
 8007004:	2010      	movs	r0, #16
 8007006:	f000 fe09 	bl	8007c1c <malloc>
 800700a:	4602      	mov	r2, r0
 800700c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007010:	b920      	cbnz	r0, 800701c <_dtoa_r+0x34>
 8007012:	4ba9      	ldr	r3, [pc, #676]	@ (80072b8 <_dtoa_r+0x2d0>)
 8007014:	21ef      	movs	r1, #239	@ 0xef
 8007016:	48a9      	ldr	r0, [pc, #676]	@ (80072bc <_dtoa_r+0x2d4>)
 8007018:	f7ff ff40 	bl	8006e9c <__assert_func>
 800701c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007020:	6007      	str	r7, [r0, #0]
 8007022:	60c7      	str	r7, [r0, #12]
 8007024:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007028:	6819      	ldr	r1, [r3, #0]
 800702a:	b159      	cbz	r1, 8007044 <_dtoa_r+0x5c>
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	604a      	str	r2, [r1, #4]
 8007030:	2301      	movs	r3, #1
 8007032:	4093      	lsls	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
 8007036:	4648      	mov	r0, r9
 8007038:	f000 fee6 	bl	8007e08 <_Bfree>
 800703c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	1e2b      	subs	r3, r5, #0
 8007046:	bfb9      	ittee	lt
 8007048:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800704c:	9305      	strlt	r3, [sp, #20]
 800704e:	2300      	movge	r3, #0
 8007050:	6033      	strge	r3, [r6, #0]
 8007052:	9f05      	ldr	r7, [sp, #20]
 8007054:	4b9a      	ldr	r3, [pc, #616]	@ (80072c0 <_dtoa_r+0x2d8>)
 8007056:	bfbc      	itt	lt
 8007058:	2201      	movlt	r2, #1
 800705a:	6032      	strlt	r2, [r6, #0]
 800705c:	43bb      	bics	r3, r7
 800705e:	d112      	bne.n	8007086 <_dtoa_r+0x9e>
 8007060:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007062:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800706c:	4323      	orrs	r3, r4
 800706e:	f000 855a 	beq.w	8007b26 <_dtoa_r+0xb3e>
 8007072:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007074:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80072d4 <_dtoa_r+0x2ec>
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 855c 	beq.w	8007b36 <_dtoa_r+0xb4e>
 800707e:	f10a 0303 	add.w	r3, sl, #3
 8007082:	f000 bd56 	b.w	8007b32 <_dtoa_r+0xb4a>
 8007086:	ed9d 7b04 	vldr	d7, [sp, #16]
 800708a:	2200      	movs	r2, #0
 800708c:	ec51 0b17 	vmov	r0, r1, d7
 8007090:	2300      	movs	r3, #0
 8007092:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007096:	f7f9 fd17 	bl	8000ac8 <__aeabi_dcmpeq>
 800709a:	4680      	mov	r8, r0
 800709c:	b158      	cbz	r0, 80070b6 <_dtoa_r+0xce>
 800709e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80070a0:	2301      	movs	r3, #1
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070a6:	b113      	cbz	r3, 80070ae <_dtoa_r+0xc6>
 80070a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80070aa:	4b86      	ldr	r3, [pc, #536]	@ (80072c4 <_dtoa_r+0x2dc>)
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80072d8 <_dtoa_r+0x2f0>
 80070b2:	f000 bd40 	b.w	8007b36 <_dtoa_r+0xb4e>
 80070b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80070ba:	aa14      	add	r2, sp, #80	@ 0x50
 80070bc:	a915      	add	r1, sp, #84	@ 0x54
 80070be:	4648      	mov	r0, r9
 80070c0:	f001 fa3e 	bl	8008540 <__d2b>
 80070c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80070c8:	9002      	str	r0, [sp, #8]
 80070ca:	2e00      	cmp	r6, #0
 80070cc:	d078      	beq.n	80071c0 <_dtoa_r+0x1d8>
 80070ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80070d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80070dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80070e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80070e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80070e8:	4619      	mov	r1, r3
 80070ea:	2200      	movs	r2, #0
 80070ec:	4b76      	ldr	r3, [pc, #472]	@ (80072c8 <_dtoa_r+0x2e0>)
 80070ee:	f7f9 f8cb 	bl	8000288 <__aeabi_dsub>
 80070f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80072a0 <_dtoa_r+0x2b8>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f7f9 fa7e 	bl	80005f8 <__aeabi_dmul>
 80070fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80072a8 <_dtoa_r+0x2c0>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	f7f9 f8c3 	bl	800028c <__adddf3>
 8007106:	4604      	mov	r4, r0
 8007108:	4630      	mov	r0, r6
 800710a:	460d      	mov	r5, r1
 800710c:	f7f9 fa0a 	bl	8000524 <__aeabi_i2d>
 8007110:	a367      	add	r3, pc, #412	@ (adr r3, 80072b0 <_dtoa_r+0x2c8>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 fa6f 	bl	80005f8 <__aeabi_dmul>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4620      	mov	r0, r4
 8007120:	4629      	mov	r1, r5
 8007122:	f7f9 f8b3 	bl	800028c <__adddf3>
 8007126:	4604      	mov	r4, r0
 8007128:	460d      	mov	r5, r1
 800712a:	f7f9 fd15 	bl	8000b58 <__aeabi_d2iz>
 800712e:	2200      	movs	r2, #0
 8007130:	4607      	mov	r7, r0
 8007132:	2300      	movs	r3, #0
 8007134:	4620      	mov	r0, r4
 8007136:	4629      	mov	r1, r5
 8007138:	f7f9 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800713c:	b140      	cbz	r0, 8007150 <_dtoa_r+0x168>
 800713e:	4638      	mov	r0, r7
 8007140:	f7f9 f9f0 	bl	8000524 <__aeabi_i2d>
 8007144:	4622      	mov	r2, r4
 8007146:	462b      	mov	r3, r5
 8007148:	f7f9 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800714c:	b900      	cbnz	r0, 8007150 <_dtoa_r+0x168>
 800714e:	3f01      	subs	r7, #1
 8007150:	2f16      	cmp	r7, #22
 8007152:	d852      	bhi.n	80071fa <_dtoa_r+0x212>
 8007154:	4b5d      	ldr	r3, [pc, #372]	@ (80072cc <_dtoa_r+0x2e4>)
 8007156:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007162:	f7f9 fcbb 	bl	8000adc <__aeabi_dcmplt>
 8007166:	2800      	cmp	r0, #0
 8007168:	d049      	beq.n	80071fe <_dtoa_r+0x216>
 800716a:	3f01      	subs	r7, #1
 800716c:	2300      	movs	r3, #0
 800716e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007170:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007172:	1b9b      	subs	r3, r3, r6
 8007174:	1e5a      	subs	r2, r3, #1
 8007176:	bf45      	ittet	mi
 8007178:	f1c3 0301 	rsbmi	r3, r3, #1
 800717c:	9300      	strmi	r3, [sp, #0]
 800717e:	2300      	movpl	r3, #0
 8007180:	2300      	movmi	r3, #0
 8007182:	9206      	str	r2, [sp, #24]
 8007184:	bf54      	ite	pl
 8007186:	9300      	strpl	r3, [sp, #0]
 8007188:	9306      	strmi	r3, [sp, #24]
 800718a:	2f00      	cmp	r7, #0
 800718c:	db39      	blt.n	8007202 <_dtoa_r+0x21a>
 800718e:	9b06      	ldr	r3, [sp, #24]
 8007190:	970d      	str	r7, [sp, #52]	@ 0x34
 8007192:	443b      	add	r3, r7
 8007194:	9306      	str	r3, [sp, #24]
 8007196:	2300      	movs	r3, #0
 8007198:	9308      	str	r3, [sp, #32]
 800719a:	9b07      	ldr	r3, [sp, #28]
 800719c:	2b09      	cmp	r3, #9
 800719e:	d863      	bhi.n	8007268 <_dtoa_r+0x280>
 80071a0:	2b05      	cmp	r3, #5
 80071a2:	bfc4      	itt	gt
 80071a4:	3b04      	subgt	r3, #4
 80071a6:	9307      	strgt	r3, [sp, #28]
 80071a8:	9b07      	ldr	r3, [sp, #28]
 80071aa:	f1a3 0302 	sub.w	r3, r3, #2
 80071ae:	bfcc      	ite	gt
 80071b0:	2400      	movgt	r4, #0
 80071b2:	2401      	movle	r4, #1
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d863      	bhi.n	8007280 <_dtoa_r+0x298>
 80071b8:	e8df f003 	tbb	[pc, r3]
 80071bc:	2b375452 	.word	0x2b375452
 80071c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80071c4:	441e      	add	r6, r3
 80071c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	bfc1      	itttt	gt
 80071ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80071d2:	409f      	lslgt	r7, r3
 80071d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80071d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80071dc:	bfd6      	itet	le
 80071de:	f1c3 0320 	rsble	r3, r3, #32
 80071e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80071e6:	fa04 f003 	lslle.w	r0, r4, r3
 80071ea:	f7f9 f98b 	bl	8000504 <__aeabi_ui2d>
 80071ee:	2201      	movs	r2, #1
 80071f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071f4:	3e01      	subs	r6, #1
 80071f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80071f8:	e776      	b.n	80070e8 <_dtoa_r+0x100>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e7b7      	b.n	800716e <_dtoa_r+0x186>
 80071fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8007200:	e7b6      	b.n	8007170 <_dtoa_r+0x188>
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	1bdb      	subs	r3, r3, r7
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	427b      	negs	r3, r7
 800720a:	9308      	str	r3, [sp, #32]
 800720c:	2300      	movs	r3, #0
 800720e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007210:	e7c3      	b.n	800719a <_dtoa_r+0x1b2>
 8007212:	2301      	movs	r3, #1
 8007214:	9309      	str	r3, [sp, #36]	@ 0x24
 8007216:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007218:	eb07 0b03 	add.w	fp, r7, r3
 800721c:	f10b 0301 	add.w	r3, fp, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	9303      	str	r3, [sp, #12]
 8007224:	bfb8      	it	lt
 8007226:	2301      	movlt	r3, #1
 8007228:	e006      	b.n	8007238 <_dtoa_r+0x250>
 800722a:	2301      	movs	r3, #1
 800722c:	9309      	str	r3, [sp, #36]	@ 0x24
 800722e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007230:	2b00      	cmp	r3, #0
 8007232:	dd28      	ble.n	8007286 <_dtoa_r+0x29e>
 8007234:	469b      	mov	fp, r3
 8007236:	9303      	str	r3, [sp, #12]
 8007238:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800723c:	2100      	movs	r1, #0
 800723e:	2204      	movs	r2, #4
 8007240:	f102 0514 	add.w	r5, r2, #20
 8007244:	429d      	cmp	r5, r3
 8007246:	d926      	bls.n	8007296 <_dtoa_r+0x2ae>
 8007248:	6041      	str	r1, [r0, #4]
 800724a:	4648      	mov	r0, r9
 800724c:	f000 fd9c 	bl	8007d88 <_Balloc>
 8007250:	4682      	mov	sl, r0
 8007252:	2800      	cmp	r0, #0
 8007254:	d142      	bne.n	80072dc <_dtoa_r+0x2f4>
 8007256:	4b1e      	ldr	r3, [pc, #120]	@ (80072d0 <_dtoa_r+0x2e8>)
 8007258:	4602      	mov	r2, r0
 800725a:	f240 11af 	movw	r1, #431	@ 0x1af
 800725e:	e6da      	b.n	8007016 <_dtoa_r+0x2e>
 8007260:	2300      	movs	r3, #0
 8007262:	e7e3      	b.n	800722c <_dtoa_r+0x244>
 8007264:	2300      	movs	r3, #0
 8007266:	e7d5      	b.n	8007214 <_dtoa_r+0x22c>
 8007268:	2401      	movs	r4, #1
 800726a:	2300      	movs	r3, #0
 800726c:	9307      	str	r3, [sp, #28]
 800726e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007270:	f04f 3bff 	mov.w	fp, #4294967295
 8007274:	2200      	movs	r2, #0
 8007276:	f8cd b00c 	str.w	fp, [sp, #12]
 800727a:	2312      	movs	r3, #18
 800727c:	920c      	str	r2, [sp, #48]	@ 0x30
 800727e:	e7db      	b.n	8007238 <_dtoa_r+0x250>
 8007280:	2301      	movs	r3, #1
 8007282:	9309      	str	r3, [sp, #36]	@ 0x24
 8007284:	e7f4      	b.n	8007270 <_dtoa_r+0x288>
 8007286:	f04f 0b01 	mov.w	fp, #1
 800728a:	f8cd b00c 	str.w	fp, [sp, #12]
 800728e:	465b      	mov	r3, fp
 8007290:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007294:	e7d0      	b.n	8007238 <_dtoa_r+0x250>
 8007296:	3101      	adds	r1, #1
 8007298:	0052      	lsls	r2, r2, #1
 800729a:	e7d1      	b.n	8007240 <_dtoa_r+0x258>
 800729c:	f3af 8000 	nop.w
 80072a0:	636f4361 	.word	0x636f4361
 80072a4:	3fd287a7 	.word	0x3fd287a7
 80072a8:	8b60c8b3 	.word	0x8b60c8b3
 80072ac:	3fc68a28 	.word	0x3fc68a28
 80072b0:	509f79fb 	.word	0x509f79fb
 80072b4:	3fd34413 	.word	0x3fd34413
 80072b8:	0800aeb7 	.word	0x0800aeb7
 80072bc:	0800af71 	.word	0x0800af71
 80072c0:	7ff00000 	.word	0x7ff00000
 80072c4:	0800b05d 	.word	0x0800b05d
 80072c8:	3ff80000 	.word	0x3ff80000
 80072cc:	0800b100 	.word	0x0800b100
 80072d0:	0800afc9 	.word	0x0800afc9
 80072d4:	0800af6d 	.word	0x0800af6d
 80072d8:	0800b05c 	.word	0x0800b05c
 80072dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80072e0:	6018      	str	r0, [r3, #0]
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	2b0e      	cmp	r3, #14
 80072e6:	f200 80a1 	bhi.w	800742c <_dtoa_r+0x444>
 80072ea:	2c00      	cmp	r4, #0
 80072ec:	f000 809e 	beq.w	800742c <_dtoa_r+0x444>
 80072f0:	2f00      	cmp	r7, #0
 80072f2:	dd33      	ble.n	800735c <_dtoa_r+0x374>
 80072f4:	4b9c      	ldr	r3, [pc, #624]	@ (8007568 <_dtoa_r+0x580>)
 80072f6:	f007 020f 	and.w	r2, r7, #15
 80072fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072fe:	ed93 7b00 	vldr	d7, [r3]
 8007302:	05f8      	lsls	r0, r7, #23
 8007304:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007308:	ea4f 1427 	mov.w	r4, r7, asr #4
 800730c:	d516      	bpl.n	800733c <_dtoa_r+0x354>
 800730e:	4b97      	ldr	r3, [pc, #604]	@ (800756c <_dtoa_r+0x584>)
 8007310:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007314:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007318:	f7f9 fa98 	bl	800084c <__aeabi_ddiv>
 800731c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007320:	f004 040f 	and.w	r4, r4, #15
 8007324:	2603      	movs	r6, #3
 8007326:	4d91      	ldr	r5, [pc, #580]	@ (800756c <_dtoa_r+0x584>)
 8007328:	b954      	cbnz	r4, 8007340 <_dtoa_r+0x358>
 800732a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800732e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007332:	f7f9 fa8b 	bl	800084c <__aeabi_ddiv>
 8007336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800733a:	e028      	b.n	800738e <_dtoa_r+0x3a6>
 800733c:	2602      	movs	r6, #2
 800733e:	e7f2      	b.n	8007326 <_dtoa_r+0x33e>
 8007340:	07e1      	lsls	r1, r4, #31
 8007342:	d508      	bpl.n	8007356 <_dtoa_r+0x36e>
 8007344:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007348:	e9d5 2300 	ldrd	r2, r3, [r5]
 800734c:	f7f9 f954 	bl	80005f8 <__aeabi_dmul>
 8007350:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007354:	3601      	adds	r6, #1
 8007356:	1064      	asrs	r4, r4, #1
 8007358:	3508      	adds	r5, #8
 800735a:	e7e5      	b.n	8007328 <_dtoa_r+0x340>
 800735c:	f000 80af 	beq.w	80074be <_dtoa_r+0x4d6>
 8007360:	427c      	negs	r4, r7
 8007362:	4b81      	ldr	r3, [pc, #516]	@ (8007568 <_dtoa_r+0x580>)
 8007364:	4d81      	ldr	r5, [pc, #516]	@ (800756c <_dtoa_r+0x584>)
 8007366:	f004 020f 	and.w	r2, r4, #15
 800736a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007376:	f7f9 f93f 	bl	80005f8 <__aeabi_dmul>
 800737a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800737e:	1124      	asrs	r4, r4, #4
 8007380:	2300      	movs	r3, #0
 8007382:	2602      	movs	r6, #2
 8007384:	2c00      	cmp	r4, #0
 8007386:	f040 808f 	bne.w	80074a8 <_dtoa_r+0x4c0>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1d3      	bne.n	8007336 <_dtoa_r+0x34e>
 800738e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007390:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8094 	beq.w	80074c2 <_dtoa_r+0x4da>
 800739a:	4b75      	ldr	r3, [pc, #468]	@ (8007570 <_dtoa_r+0x588>)
 800739c:	2200      	movs	r2, #0
 800739e:	4620      	mov	r0, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7f9 fb9b 	bl	8000adc <__aeabi_dcmplt>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	f000 808b 	beq.w	80074c2 <_dtoa_r+0x4da>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 8087 	beq.w	80074c2 <_dtoa_r+0x4da>
 80073b4:	f1bb 0f00 	cmp.w	fp, #0
 80073b8:	dd34      	ble.n	8007424 <_dtoa_r+0x43c>
 80073ba:	4620      	mov	r0, r4
 80073bc:	4b6d      	ldr	r3, [pc, #436]	@ (8007574 <_dtoa_r+0x58c>)
 80073be:	2200      	movs	r2, #0
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7f9 f919 	bl	80005f8 <__aeabi_dmul>
 80073c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80073ce:	3601      	adds	r6, #1
 80073d0:	465c      	mov	r4, fp
 80073d2:	4630      	mov	r0, r6
 80073d4:	f7f9 f8a6 	bl	8000524 <__aeabi_i2d>
 80073d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073dc:	f7f9 f90c 	bl	80005f8 <__aeabi_dmul>
 80073e0:	4b65      	ldr	r3, [pc, #404]	@ (8007578 <_dtoa_r+0x590>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	f7f8 ff52 	bl	800028c <__adddf3>
 80073e8:	4605      	mov	r5, r0
 80073ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80073ee:	2c00      	cmp	r4, #0
 80073f0:	d16a      	bne.n	80074c8 <_dtoa_r+0x4e0>
 80073f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f6:	4b61      	ldr	r3, [pc, #388]	@ (800757c <_dtoa_r+0x594>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	f7f8 ff45 	bl	8000288 <__aeabi_dsub>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007406:	462a      	mov	r2, r5
 8007408:	4633      	mov	r3, r6
 800740a:	f7f9 fb85 	bl	8000b18 <__aeabi_dcmpgt>
 800740e:	2800      	cmp	r0, #0
 8007410:	f040 8298 	bne.w	8007944 <_dtoa_r+0x95c>
 8007414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007418:	462a      	mov	r2, r5
 800741a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800741e:	f7f9 fb5d 	bl	8000adc <__aeabi_dcmplt>
 8007422:	bb38      	cbnz	r0, 8007474 <_dtoa_r+0x48c>
 8007424:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007428:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800742c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800742e:	2b00      	cmp	r3, #0
 8007430:	f2c0 8157 	blt.w	80076e2 <_dtoa_r+0x6fa>
 8007434:	2f0e      	cmp	r7, #14
 8007436:	f300 8154 	bgt.w	80076e2 <_dtoa_r+0x6fa>
 800743a:	4b4b      	ldr	r3, [pc, #300]	@ (8007568 <_dtoa_r+0x580>)
 800743c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007440:	ed93 7b00 	vldr	d7, [r3]
 8007444:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007446:	2b00      	cmp	r3, #0
 8007448:	ed8d 7b00 	vstr	d7, [sp]
 800744c:	f280 80e5 	bge.w	800761a <_dtoa_r+0x632>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f300 80e1 	bgt.w	800761a <_dtoa_r+0x632>
 8007458:	d10c      	bne.n	8007474 <_dtoa_r+0x48c>
 800745a:	4b48      	ldr	r3, [pc, #288]	@ (800757c <_dtoa_r+0x594>)
 800745c:	2200      	movs	r2, #0
 800745e:	ec51 0b17 	vmov	r0, r1, d7
 8007462:	f7f9 f8c9 	bl	80005f8 <__aeabi_dmul>
 8007466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800746a:	f7f9 fb4b 	bl	8000b04 <__aeabi_dcmpge>
 800746e:	2800      	cmp	r0, #0
 8007470:	f000 8266 	beq.w	8007940 <_dtoa_r+0x958>
 8007474:	2400      	movs	r4, #0
 8007476:	4625      	mov	r5, r4
 8007478:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800747a:	4656      	mov	r6, sl
 800747c:	ea6f 0803 	mvn.w	r8, r3
 8007480:	2700      	movs	r7, #0
 8007482:	4621      	mov	r1, r4
 8007484:	4648      	mov	r0, r9
 8007486:	f000 fcbf 	bl	8007e08 <_Bfree>
 800748a:	2d00      	cmp	r5, #0
 800748c:	f000 80bd 	beq.w	800760a <_dtoa_r+0x622>
 8007490:	b12f      	cbz	r7, 800749e <_dtoa_r+0x4b6>
 8007492:	42af      	cmp	r7, r5
 8007494:	d003      	beq.n	800749e <_dtoa_r+0x4b6>
 8007496:	4639      	mov	r1, r7
 8007498:	4648      	mov	r0, r9
 800749a:	f000 fcb5 	bl	8007e08 <_Bfree>
 800749e:	4629      	mov	r1, r5
 80074a0:	4648      	mov	r0, r9
 80074a2:	f000 fcb1 	bl	8007e08 <_Bfree>
 80074a6:	e0b0      	b.n	800760a <_dtoa_r+0x622>
 80074a8:	07e2      	lsls	r2, r4, #31
 80074aa:	d505      	bpl.n	80074b8 <_dtoa_r+0x4d0>
 80074ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074b0:	f7f9 f8a2 	bl	80005f8 <__aeabi_dmul>
 80074b4:	3601      	adds	r6, #1
 80074b6:	2301      	movs	r3, #1
 80074b8:	1064      	asrs	r4, r4, #1
 80074ba:	3508      	adds	r5, #8
 80074bc:	e762      	b.n	8007384 <_dtoa_r+0x39c>
 80074be:	2602      	movs	r6, #2
 80074c0:	e765      	b.n	800738e <_dtoa_r+0x3a6>
 80074c2:	9c03      	ldr	r4, [sp, #12]
 80074c4:	46b8      	mov	r8, r7
 80074c6:	e784      	b.n	80073d2 <_dtoa_r+0x3ea>
 80074c8:	4b27      	ldr	r3, [pc, #156]	@ (8007568 <_dtoa_r+0x580>)
 80074ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074d4:	4454      	add	r4, sl
 80074d6:	2900      	cmp	r1, #0
 80074d8:	d054      	beq.n	8007584 <_dtoa_r+0x59c>
 80074da:	4929      	ldr	r1, [pc, #164]	@ (8007580 <_dtoa_r+0x598>)
 80074dc:	2000      	movs	r0, #0
 80074de:	f7f9 f9b5 	bl	800084c <__aeabi_ddiv>
 80074e2:	4633      	mov	r3, r6
 80074e4:	462a      	mov	r2, r5
 80074e6:	f7f8 fecf 	bl	8000288 <__aeabi_dsub>
 80074ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074ee:	4656      	mov	r6, sl
 80074f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074f4:	f7f9 fb30 	bl	8000b58 <__aeabi_d2iz>
 80074f8:	4605      	mov	r5, r0
 80074fa:	f7f9 f813 	bl	8000524 <__aeabi_i2d>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007506:	f7f8 febf 	bl	8000288 <__aeabi_dsub>
 800750a:	3530      	adds	r5, #48	@ 0x30
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007514:	f806 5b01 	strb.w	r5, [r6], #1
 8007518:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800751c:	f7f9 fade 	bl	8000adc <__aeabi_dcmplt>
 8007520:	2800      	cmp	r0, #0
 8007522:	d172      	bne.n	800760a <_dtoa_r+0x622>
 8007524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007528:	4911      	ldr	r1, [pc, #68]	@ (8007570 <_dtoa_r+0x588>)
 800752a:	2000      	movs	r0, #0
 800752c:	f7f8 feac 	bl	8000288 <__aeabi_dsub>
 8007530:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007534:	f7f9 fad2 	bl	8000adc <__aeabi_dcmplt>
 8007538:	2800      	cmp	r0, #0
 800753a:	f040 80b4 	bne.w	80076a6 <_dtoa_r+0x6be>
 800753e:	42a6      	cmp	r6, r4
 8007540:	f43f af70 	beq.w	8007424 <_dtoa_r+0x43c>
 8007544:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007548:	4b0a      	ldr	r3, [pc, #40]	@ (8007574 <_dtoa_r+0x58c>)
 800754a:	2200      	movs	r2, #0
 800754c:	f7f9 f854 	bl	80005f8 <__aeabi_dmul>
 8007550:	4b08      	ldr	r3, [pc, #32]	@ (8007574 <_dtoa_r+0x58c>)
 8007552:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007556:	2200      	movs	r2, #0
 8007558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800755c:	f7f9 f84c 	bl	80005f8 <__aeabi_dmul>
 8007560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007564:	e7c4      	b.n	80074f0 <_dtoa_r+0x508>
 8007566:	bf00      	nop
 8007568:	0800b100 	.word	0x0800b100
 800756c:	0800b0d8 	.word	0x0800b0d8
 8007570:	3ff00000 	.word	0x3ff00000
 8007574:	40240000 	.word	0x40240000
 8007578:	401c0000 	.word	0x401c0000
 800757c:	40140000 	.word	0x40140000
 8007580:	3fe00000 	.word	0x3fe00000
 8007584:	4631      	mov	r1, r6
 8007586:	4628      	mov	r0, r5
 8007588:	f7f9 f836 	bl	80005f8 <__aeabi_dmul>
 800758c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007590:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007592:	4656      	mov	r6, sl
 8007594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007598:	f7f9 fade 	bl	8000b58 <__aeabi_d2iz>
 800759c:	4605      	mov	r5, r0
 800759e:	f7f8 ffc1 	bl	8000524 <__aeabi_i2d>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075aa:	f7f8 fe6d 	bl	8000288 <__aeabi_dsub>
 80075ae:	3530      	adds	r5, #48	@ 0x30
 80075b0:	f806 5b01 	strb.w	r5, [r6], #1
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075be:	f04f 0200 	mov.w	r2, #0
 80075c2:	d124      	bne.n	800760e <_dtoa_r+0x626>
 80075c4:	4baf      	ldr	r3, [pc, #700]	@ (8007884 <_dtoa_r+0x89c>)
 80075c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80075ca:	f7f8 fe5f 	bl	800028c <__adddf3>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d6:	f7f9 fa9f 	bl	8000b18 <__aeabi_dcmpgt>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d163      	bne.n	80076a6 <_dtoa_r+0x6be>
 80075de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075e2:	49a8      	ldr	r1, [pc, #672]	@ (8007884 <_dtoa_r+0x89c>)
 80075e4:	2000      	movs	r0, #0
 80075e6:	f7f8 fe4f 	bl	8000288 <__aeabi_dsub>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075f2:	f7f9 fa73 	bl	8000adc <__aeabi_dcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f43f af14 	beq.w	8007424 <_dtoa_r+0x43c>
 80075fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80075fe:	1e73      	subs	r3, r6, #1
 8007600:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007602:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007606:	2b30      	cmp	r3, #48	@ 0x30
 8007608:	d0f8      	beq.n	80075fc <_dtoa_r+0x614>
 800760a:	4647      	mov	r7, r8
 800760c:	e03b      	b.n	8007686 <_dtoa_r+0x69e>
 800760e:	4b9e      	ldr	r3, [pc, #632]	@ (8007888 <_dtoa_r+0x8a0>)
 8007610:	f7f8 fff2 	bl	80005f8 <__aeabi_dmul>
 8007614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007618:	e7bc      	b.n	8007594 <_dtoa_r+0x5ac>
 800761a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800761e:	4656      	mov	r6, sl
 8007620:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007624:	4620      	mov	r0, r4
 8007626:	4629      	mov	r1, r5
 8007628:	f7f9 f910 	bl	800084c <__aeabi_ddiv>
 800762c:	f7f9 fa94 	bl	8000b58 <__aeabi_d2iz>
 8007630:	4680      	mov	r8, r0
 8007632:	f7f8 ff77 	bl	8000524 <__aeabi_i2d>
 8007636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800763a:	f7f8 ffdd 	bl	80005f8 <__aeabi_dmul>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4620      	mov	r0, r4
 8007644:	4629      	mov	r1, r5
 8007646:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800764a:	f7f8 fe1d 	bl	8000288 <__aeabi_dsub>
 800764e:	f806 4b01 	strb.w	r4, [r6], #1
 8007652:	9d03      	ldr	r5, [sp, #12]
 8007654:	eba6 040a 	sub.w	r4, r6, sl
 8007658:	42a5      	cmp	r5, r4
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	d133      	bne.n	80076c8 <_dtoa_r+0x6e0>
 8007660:	f7f8 fe14 	bl	800028c <__adddf3>
 8007664:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007668:	4604      	mov	r4, r0
 800766a:	460d      	mov	r5, r1
 800766c:	f7f9 fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8007670:	b9c0      	cbnz	r0, 80076a4 <_dtoa_r+0x6bc>
 8007672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	f7f9 fa25 	bl	8000ac8 <__aeabi_dcmpeq>
 800767e:	b110      	cbz	r0, 8007686 <_dtoa_r+0x69e>
 8007680:	f018 0f01 	tst.w	r8, #1
 8007684:	d10e      	bne.n	80076a4 <_dtoa_r+0x6bc>
 8007686:	9902      	ldr	r1, [sp, #8]
 8007688:	4648      	mov	r0, r9
 800768a:	f000 fbbd 	bl	8007e08 <_Bfree>
 800768e:	2300      	movs	r3, #0
 8007690:	7033      	strb	r3, [r6, #0]
 8007692:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007694:	3701      	adds	r7, #1
 8007696:	601f      	str	r7, [r3, #0]
 8007698:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 824b 	beq.w	8007b36 <_dtoa_r+0xb4e>
 80076a0:	601e      	str	r6, [r3, #0]
 80076a2:	e248      	b.n	8007b36 <_dtoa_r+0xb4e>
 80076a4:	46b8      	mov	r8, r7
 80076a6:	4633      	mov	r3, r6
 80076a8:	461e      	mov	r6, r3
 80076aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ae:	2a39      	cmp	r2, #57	@ 0x39
 80076b0:	d106      	bne.n	80076c0 <_dtoa_r+0x6d8>
 80076b2:	459a      	cmp	sl, r3
 80076b4:	d1f8      	bne.n	80076a8 <_dtoa_r+0x6c0>
 80076b6:	2230      	movs	r2, #48	@ 0x30
 80076b8:	f108 0801 	add.w	r8, r8, #1
 80076bc:	f88a 2000 	strb.w	r2, [sl]
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	3201      	adds	r2, #1
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	e7a0      	b.n	800760a <_dtoa_r+0x622>
 80076c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007888 <_dtoa_r+0x8a0>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	f7f8 ff94 	bl	80005f8 <__aeabi_dmul>
 80076d0:	2200      	movs	r2, #0
 80076d2:	2300      	movs	r3, #0
 80076d4:	4604      	mov	r4, r0
 80076d6:	460d      	mov	r5, r1
 80076d8:	f7f9 f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d09f      	beq.n	8007620 <_dtoa_r+0x638>
 80076e0:	e7d1      	b.n	8007686 <_dtoa_r+0x69e>
 80076e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076e4:	2a00      	cmp	r2, #0
 80076e6:	f000 80ea 	beq.w	80078be <_dtoa_r+0x8d6>
 80076ea:	9a07      	ldr	r2, [sp, #28]
 80076ec:	2a01      	cmp	r2, #1
 80076ee:	f300 80cd 	bgt.w	800788c <_dtoa_r+0x8a4>
 80076f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	f000 80c1 	beq.w	800787c <_dtoa_r+0x894>
 80076fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80076fe:	9c08      	ldr	r4, [sp, #32]
 8007700:	9e00      	ldr	r6, [sp, #0]
 8007702:	9a00      	ldr	r2, [sp, #0]
 8007704:	441a      	add	r2, r3
 8007706:	9200      	str	r2, [sp, #0]
 8007708:	9a06      	ldr	r2, [sp, #24]
 800770a:	2101      	movs	r1, #1
 800770c:	441a      	add	r2, r3
 800770e:	4648      	mov	r0, r9
 8007710:	9206      	str	r2, [sp, #24]
 8007712:	f000 fc77 	bl	8008004 <__i2b>
 8007716:	4605      	mov	r5, r0
 8007718:	b166      	cbz	r6, 8007734 <_dtoa_r+0x74c>
 800771a:	9b06      	ldr	r3, [sp, #24]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd09      	ble.n	8007734 <_dtoa_r+0x74c>
 8007720:	42b3      	cmp	r3, r6
 8007722:	9a00      	ldr	r2, [sp, #0]
 8007724:	bfa8      	it	ge
 8007726:	4633      	movge	r3, r6
 8007728:	1ad2      	subs	r2, r2, r3
 800772a:	9200      	str	r2, [sp, #0]
 800772c:	9a06      	ldr	r2, [sp, #24]
 800772e:	1af6      	subs	r6, r6, r3
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	9306      	str	r3, [sp, #24]
 8007734:	9b08      	ldr	r3, [sp, #32]
 8007736:	b30b      	cbz	r3, 800777c <_dtoa_r+0x794>
 8007738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 80c6 	beq.w	80078cc <_dtoa_r+0x8e4>
 8007740:	2c00      	cmp	r4, #0
 8007742:	f000 80c0 	beq.w	80078c6 <_dtoa_r+0x8de>
 8007746:	4629      	mov	r1, r5
 8007748:	4622      	mov	r2, r4
 800774a:	4648      	mov	r0, r9
 800774c:	f000 fd12 	bl	8008174 <__pow5mult>
 8007750:	9a02      	ldr	r2, [sp, #8]
 8007752:	4601      	mov	r1, r0
 8007754:	4605      	mov	r5, r0
 8007756:	4648      	mov	r0, r9
 8007758:	f000 fc6a 	bl	8008030 <__multiply>
 800775c:	9902      	ldr	r1, [sp, #8]
 800775e:	4680      	mov	r8, r0
 8007760:	4648      	mov	r0, r9
 8007762:	f000 fb51 	bl	8007e08 <_Bfree>
 8007766:	9b08      	ldr	r3, [sp, #32]
 8007768:	1b1b      	subs	r3, r3, r4
 800776a:	9308      	str	r3, [sp, #32]
 800776c:	f000 80b1 	beq.w	80078d2 <_dtoa_r+0x8ea>
 8007770:	9a08      	ldr	r2, [sp, #32]
 8007772:	4641      	mov	r1, r8
 8007774:	4648      	mov	r0, r9
 8007776:	f000 fcfd 	bl	8008174 <__pow5mult>
 800777a:	9002      	str	r0, [sp, #8]
 800777c:	2101      	movs	r1, #1
 800777e:	4648      	mov	r0, r9
 8007780:	f000 fc40 	bl	8008004 <__i2b>
 8007784:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007786:	4604      	mov	r4, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 81d8 	beq.w	8007b3e <_dtoa_r+0xb56>
 800778e:	461a      	mov	r2, r3
 8007790:	4601      	mov	r1, r0
 8007792:	4648      	mov	r0, r9
 8007794:	f000 fcee 	bl	8008174 <__pow5mult>
 8007798:	9b07      	ldr	r3, [sp, #28]
 800779a:	2b01      	cmp	r3, #1
 800779c:	4604      	mov	r4, r0
 800779e:	f300 809f 	bgt.w	80078e0 <_dtoa_r+0x8f8>
 80077a2:	9b04      	ldr	r3, [sp, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f040 8097 	bne.w	80078d8 <_dtoa_r+0x8f0>
 80077aa:	9b05      	ldr	r3, [sp, #20]
 80077ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f040 8093 	bne.w	80078dc <_dtoa_r+0x8f4>
 80077b6:	9b05      	ldr	r3, [sp, #20]
 80077b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077bc:	0d1b      	lsrs	r3, r3, #20
 80077be:	051b      	lsls	r3, r3, #20
 80077c0:	b133      	cbz	r3, 80077d0 <_dtoa_r+0x7e8>
 80077c2:	9b00      	ldr	r3, [sp, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	9b06      	ldr	r3, [sp, #24]
 80077ca:	3301      	adds	r3, #1
 80077cc:	9306      	str	r3, [sp, #24]
 80077ce:	2301      	movs	r3, #1
 80077d0:	9308      	str	r3, [sp, #32]
 80077d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 81b8 	beq.w	8007b4a <_dtoa_r+0xb62>
 80077da:	6923      	ldr	r3, [r4, #16]
 80077dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077e0:	6918      	ldr	r0, [r3, #16]
 80077e2:	f000 fbc3 	bl	8007f6c <__hi0bits>
 80077e6:	f1c0 0020 	rsb	r0, r0, #32
 80077ea:	9b06      	ldr	r3, [sp, #24]
 80077ec:	4418      	add	r0, r3
 80077ee:	f010 001f 	ands.w	r0, r0, #31
 80077f2:	f000 8082 	beq.w	80078fa <_dtoa_r+0x912>
 80077f6:	f1c0 0320 	rsb	r3, r0, #32
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	dd73      	ble.n	80078e6 <_dtoa_r+0x8fe>
 80077fe:	9b00      	ldr	r3, [sp, #0]
 8007800:	f1c0 001c 	rsb	r0, r0, #28
 8007804:	4403      	add	r3, r0
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	9b06      	ldr	r3, [sp, #24]
 800780a:	4403      	add	r3, r0
 800780c:	4406      	add	r6, r0
 800780e:	9306      	str	r3, [sp, #24]
 8007810:	9b00      	ldr	r3, [sp, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	dd05      	ble.n	8007822 <_dtoa_r+0x83a>
 8007816:	9902      	ldr	r1, [sp, #8]
 8007818:	461a      	mov	r2, r3
 800781a:	4648      	mov	r0, r9
 800781c:	f000 fd04 	bl	8008228 <__lshift>
 8007820:	9002      	str	r0, [sp, #8]
 8007822:	9b06      	ldr	r3, [sp, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	dd05      	ble.n	8007834 <_dtoa_r+0x84c>
 8007828:	4621      	mov	r1, r4
 800782a:	461a      	mov	r2, r3
 800782c:	4648      	mov	r0, r9
 800782e:	f000 fcfb 	bl	8008228 <__lshift>
 8007832:	4604      	mov	r4, r0
 8007834:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	d061      	beq.n	80078fe <_dtoa_r+0x916>
 800783a:	9802      	ldr	r0, [sp, #8]
 800783c:	4621      	mov	r1, r4
 800783e:	f000 fd5f 	bl	8008300 <__mcmp>
 8007842:	2800      	cmp	r0, #0
 8007844:	da5b      	bge.n	80078fe <_dtoa_r+0x916>
 8007846:	2300      	movs	r3, #0
 8007848:	9902      	ldr	r1, [sp, #8]
 800784a:	220a      	movs	r2, #10
 800784c:	4648      	mov	r0, r9
 800784e:	f000 fafd 	bl	8007e4c <__multadd>
 8007852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007854:	9002      	str	r0, [sp, #8]
 8007856:	f107 38ff 	add.w	r8, r7, #4294967295
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8177 	beq.w	8007b4e <_dtoa_r+0xb66>
 8007860:	4629      	mov	r1, r5
 8007862:	2300      	movs	r3, #0
 8007864:	220a      	movs	r2, #10
 8007866:	4648      	mov	r0, r9
 8007868:	f000 faf0 	bl	8007e4c <__multadd>
 800786c:	f1bb 0f00 	cmp.w	fp, #0
 8007870:	4605      	mov	r5, r0
 8007872:	dc6f      	bgt.n	8007954 <_dtoa_r+0x96c>
 8007874:	9b07      	ldr	r3, [sp, #28]
 8007876:	2b02      	cmp	r3, #2
 8007878:	dc49      	bgt.n	800790e <_dtoa_r+0x926>
 800787a:	e06b      	b.n	8007954 <_dtoa_r+0x96c>
 800787c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800787e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007882:	e73c      	b.n	80076fe <_dtoa_r+0x716>
 8007884:	3fe00000 	.word	0x3fe00000
 8007888:	40240000 	.word	0x40240000
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	1e5c      	subs	r4, r3, #1
 8007890:	9b08      	ldr	r3, [sp, #32]
 8007892:	42a3      	cmp	r3, r4
 8007894:	db09      	blt.n	80078aa <_dtoa_r+0x8c2>
 8007896:	1b1c      	subs	r4, r3, r4
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f6bf af30 	bge.w	8007700 <_dtoa_r+0x718>
 80078a0:	9b00      	ldr	r3, [sp, #0]
 80078a2:	9a03      	ldr	r2, [sp, #12]
 80078a4:	1a9e      	subs	r6, r3, r2
 80078a6:	2300      	movs	r3, #0
 80078a8:	e72b      	b.n	8007702 <_dtoa_r+0x71a>
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078ae:	9408      	str	r4, [sp, #32]
 80078b0:	1ae3      	subs	r3, r4, r3
 80078b2:	441a      	add	r2, r3
 80078b4:	9e00      	ldr	r6, [sp, #0]
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80078ba:	2400      	movs	r4, #0
 80078bc:	e721      	b.n	8007702 <_dtoa_r+0x71a>
 80078be:	9c08      	ldr	r4, [sp, #32]
 80078c0:	9e00      	ldr	r6, [sp, #0]
 80078c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80078c4:	e728      	b.n	8007718 <_dtoa_r+0x730>
 80078c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80078ca:	e751      	b.n	8007770 <_dtoa_r+0x788>
 80078cc:	9a08      	ldr	r2, [sp, #32]
 80078ce:	9902      	ldr	r1, [sp, #8]
 80078d0:	e750      	b.n	8007774 <_dtoa_r+0x78c>
 80078d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80078d6:	e751      	b.n	800777c <_dtoa_r+0x794>
 80078d8:	2300      	movs	r3, #0
 80078da:	e779      	b.n	80077d0 <_dtoa_r+0x7e8>
 80078dc:	9b04      	ldr	r3, [sp, #16]
 80078de:	e777      	b.n	80077d0 <_dtoa_r+0x7e8>
 80078e0:	2300      	movs	r3, #0
 80078e2:	9308      	str	r3, [sp, #32]
 80078e4:	e779      	b.n	80077da <_dtoa_r+0x7f2>
 80078e6:	d093      	beq.n	8007810 <_dtoa_r+0x828>
 80078e8:	9a00      	ldr	r2, [sp, #0]
 80078ea:	331c      	adds	r3, #28
 80078ec:	441a      	add	r2, r3
 80078ee:	9200      	str	r2, [sp, #0]
 80078f0:	9a06      	ldr	r2, [sp, #24]
 80078f2:	441a      	add	r2, r3
 80078f4:	441e      	add	r6, r3
 80078f6:	9206      	str	r2, [sp, #24]
 80078f8:	e78a      	b.n	8007810 <_dtoa_r+0x828>
 80078fa:	4603      	mov	r3, r0
 80078fc:	e7f4      	b.n	80078e8 <_dtoa_r+0x900>
 80078fe:	9b03      	ldr	r3, [sp, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	46b8      	mov	r8, r7
 8007904:	dc20      	bgt.n	8007948 <_dtoa_r+0x960>
 8007906:	469b      	mov	fp, r3
 8007908:	9b07      	ldr	r3, [sp, #28]
 800790a:	2b02      	cmp	r3, #2
 800790c:	dd1e      	ble.n	800794c <_dtoa_r+0x964>
 800790e:	f1bb 0f00 	cmp.w	fp, #0
 8007912:	f47f adb1 	bne.w	8007478 <_dtoa_r+0x490>
 8007916:	4621      	mov	r1, r4
 8007918:	465b      	mov	r3, fp
 800791a:	2205      	movs	r2, #5
 800791c:	4648      	mov	r0, r9
 800791e:	f000 fa95 	bl	8007e4c <__multadd>
 8007922:	4601      	mov	r1, r0
 8007924:	4604      	mov	r4, r0
 8007926:	9802      	ldr	r0, [sp, #8]
 8007928:	f000 fcea 	bl	8008300 <__mcmp>
 800792c:	2800      	cmp	r0, #0
 800792e:	f77f ada3 	ble.w	8007478 <_dtoa_r+0x490>
 8007932:	4656      	mov	r6, sl
 8007934:	2331      	movs	r3, #49	@ 0x31
 8007936:	f806 3b01 	strb.w	r3, [r6], #1
 800793a:	f108 0801 	add.w	r8, r8, #1
 800793e:	e59f      	b.n	8007480 <_dtoa_r+0x498>
 8007940:	9c03      	ldr	r4, [sp, #12]
 8007942:	46b8      	mov	r8, r7
 8007944:	4625      	mov	r5, r4
 8007946:	e7f4      	b.n	8007932 <_dtoa_r+0x94a>
 8007948:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800794c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 8101 	beq.w	8007b56 <_dtoa_r+0xb6e>
 8007954:	2e00      	cmp	r6, #0
 8007956:	dd05      	ble.n	8007964 <_dtoa_r+0x97c>
 8007958:	4629      	mov	r1, r5
 800795a:	4632      	mov	r2, r6
 800795c:	4648      	mov	r0, r9
 800795e:	f000 fc63 	bl	8008228 <__lshift>
 8007962:	4605      	mov	r5, r0
 8007964:	9b08      	ldr	r3, [sp, #32]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d05c      	beq.n	8007a24 <_dtoa_r+0xa3c>
 800796a:	6869      	ldr	r1, [r5, #4]
 800796c:	4648      	mov	r0, r9
 800796e:	f000 fa0b 	bl	8007d88 <_Balloc>
 8007972:	4606      	mov	r6, r0
 8007974:	b928      	cbnz	r0, 8007982 <_dtoa_r+0x99a>
 8007976:	4b82      	ldr	r3, [pc, #520]	@ (8007b80 <_dtoa_r+0xb98>)
 8007978:	4602      	mov	r2, r0
 800797a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800797e:	f7ff bb4a 	b.w	8007016 <_dtoa_r+0x2e>
 8007982:	692a      	ldr	r2, [r5, #16]
 8007984:	3202      	adds	r2, #2
 8007986:	0092      	lsls	r2, r2, #2
 8007988:	f105 010c 	add.w	r1, r5, #12
 800798c:	300c      	adds	r0, #12
 800798e:	f002 fcd3 	bl	800a338 <memcpy>
 8007992:	2201      	movs	r2, #1
 8007994:	4631      	mov	r1, r6
 8007996:	4648      	mov	r0, r9
 8007998:	f000 fc46 	bl	8008228 <__lshift>
 800799c:	f10a 0301 	add.w	r3, sl, #1
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	eb0a 030b 	add.w	r3, sl, fp
 80079a6:	9308      	str	r3, [sp, #32]
 80079a8:	9b04      	ldr	r3, [sp, #16]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	462f      	mov	r7, r5
 80079b0:	9306      	str	r3, [sp, #24]
 80079b2:	4605      	mov	r5, r0
 80079b4:	9b00      	ldr	r3, [sp, #0]
 80079b6:	9802      	ldr	r0, [sp, #8]
 80079b8:	4621      	mov	r1, r4
 80079ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80079be:	f7ff fa8b 	bl	8006ed8 <quorem>
 80079c2:	4603      	mov	r3, r0
 80079c4:	3330      	adds	r3, #48	@ 0x30
 80079c6:	9003      	str	r0, [sp, #12]
 80079c8:	4639      	mov	r1, r7
 80079ca:	9802      	ldr	r0, [sp, #8]
 80079cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ce:	f000 fc97 	bl	8008300 <__mcmp>
 80079d2:	462a      	mov	r2, r5
 80079d4:	9004      	str	r0, [sp, #16]
 80079d6:	4621      	mov	r1, r4
 80079d8:	4648      	mov	r0, r9
 80079da:	f000 fcad 	bl	8008338 <__mdiff>
 80079de:	68c2      	ldr	r2, [r0, #12]
 80079e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e2:	4606      	mov	r6, r0
 80079e4:	bb02      	cbnz	r2, 8007a28 <_dtoa_r+0xa40>
 80079e6:	4601      	mov	r1, r0
 80079e8:	9802      	ldr	r0, [sp, #8]
 80079ea:	f000 fc89 	bl	8008300 <__mcmp>
 80079ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f0:	4602      	mov	r2, r0
 80079f2:	4631      	mov	r1, r6
 80079f4:	4648      	mov	r0, r9
 80079f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80079f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079fa:	f000 fa05 	bl	8007e08 <_Bfree>
 80079fe:	9b07      	ldr	r3, [sp, #28]
 8007a00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a02:	9e00      	ldr	r6, [sp, #0]
 8007a04:	ea42 0103 	orr.w	r1, r2, r3
 8007a08:	9b06      	ldr	r3, [sp, #24]
 8007a0a:	4319      	orrs	r1, r3
 8007a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a0e:	d10d      	bne.n	8007a2c <_dtoa_r+0xa44>
 8007a10:	2b39      	cmp	r3, #57	@ 0x39
 8007a12:	d027      	beq.n	8007a64 <_dtoa_r+0xa7c>
 8007a14:	9a04      	ldr	r2, [sp, #16]
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	dd01      	ble.n	8007a1e <_dtoa_r+0xa36>
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	3331      	adds	r3, #49	@ 0x31
 8007a1e:	f88b 3000 	strb.w	r3, [fp]
 8007a22:	e52e      	b.n	8007482 <_dtoa_r+0x49a>
 8007a24:	4628      	mov	r0, r5
 8007a26:	e7b9      	b.n	800799c <_dtoa_r+0x9b4>
 8007a28:	2201      	movs	r2, #1
 8007a2a:	e7e2      	b.n	80079f2 <_dtoa_r+0xa0a>
 8007a2c:	9904      	ldr	r1, [sp, #16]
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	db04      	blt.n	8007a3c <_dtoa_r+0xa54>
 8007a32:	9807      	ldr	r0, [sp, #28]
 8007a34:	4301      	orrs	r1, r0
 8007a36:	9806      	ldr	r0, [sp, #24]
 8007a38:	4301      	orrs	r1, r0
 8007a3a:	d120      	bne.n	8007a7e <_dtoa_r+0xa96>
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	ddee      	ble.n	8007a1e <_dtoa_r+0xa36>
 8007a40:	9902      	ldr	r1, [sp, #8]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2201      	movs	r2, #1
 8007a46:	4648      	mov	r0, r9
 8007a48:	f000 fbee 	bl	8008228 <__lshift>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	9002      	str	r0, [sp, #8]
 8007a50:	f000 fc56 	bl	8008300 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	9b00      	ldr	r3, [sp, #0]
 8007a58:	dc02      	bgt.n	8007a60 <_dtoa_r+0xa78>
 8007a5a:	d1e0      	bne.n	8007a1e <_dtoa_r+0xa36>
 8007a5c:	07da      	lsls	r2, r3, #31
 8007a5e:	d5de      	bpl.n	8007a1e <_dtoa_r+0xa36>
 8007a60:	2b39      	cmp	r3, #57	@ 0x39
 8007a62:	d1da      	bne.n	8007a1a <_dtoa_r+0xa32>
 8007a64:	2339      	movs	r3, #57	@ 0x39
 8007a66:	f88b 3000 	strb.w	r3, [fp]
 8007a6a:	4633      	mov	r3, r6
 8007a6c:	461e      	mov	r6, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a74:	2a39      	cmp	r2, #57	@ 0x39
 8007a76:	d04e      	beq.n	8007b16 <_dtoa_r+0xb2e>
 8007a78:	3201      	adds	r2, #1
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e501      	b.n	8007482 <_dtoa_r+0x49a>
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	dd03      	ble.n	8007a8a <_dtoa_r+0xaa2>
 8007a82:	2b39      	cmp	r3, #57	@ 0x39
 8007a84:	d0ee      	beq.n	8007a64 <_dtoa_r+0xa7c>
 8007a86:	3301      	adds	r3, #1
 8007a88:	e7c9      	b.n	8007a1e <_dtoa_r+0xa36>
 8007a8a:	9a00      	ldr	r2, [sp, #0]
 8007a8c:	9908      	ldr	r1, [sp, #32]
 8007a8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a92:	428a      	cmp	r2, r1
 8007a94:	d028      	beq.n	8007ae8 <_dtoa_r+0xb00>
 8007a96:	9902      	ldr	r1, [sp, #8]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	220a      	movs	r2, #10
 8007a9c:	4648      	mov	r0, r9
 8007a9e:	f000 f9d5 	bl	8007e4c <__multadd>
 8007aa2:	42af      	cmp	r7, r5
 8007aa4:	9002      	str	r0, [sp, #8]
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	f04f 020a 	mov.w	r2, #10
 8007aae:	4639      	mov	r1, r7
 8007ab0:	4648      	mov	r0, r9
 8007ab2:	d107      	bne.n	8007ac4 <_dtoa_r+0xadc>
 8007ab4:	f000 f9ca 	bl	8007e4c <__multadd>
 8007ab8:	4607      	mov	r7, r0
 8007aba:	4605      	mov	r5, r0
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	e777      	b.n	80079b4 <_dtoa_r+0x9cc>
 8007ac4:	f000 f9c2 	bl	8007e4c <__multadd>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4607      	mov	r7, r0
 8007acc:	2300      	movs	r3, #0
 8007ace:	220a      	movs	r2, #10
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	f000 f9bb 	bl	8007e4c <__multadd>
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	e7f0      	b.n	8007abc <_dtoa_r+0xad4>
 8007ada:	f1bb 0f00 	cmp.w	fp, #0
 8007ade:	bfcc      	ite	gt
 8007ae0:	465e      	movgt	r6, fp
 8007ae2:	2601      	movle	r6, #1
 8007ae4:	4456      	add	r6, sl
 8007ae6:	2700      	movs	r7, #0
 8007ae8:	9902      	ldr	r1, [sp, #8]
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	2201      	movs	r2, #1
 8007aee:	4648      	mov	r0, r9
 8007af0:	f000 fb9a 	bl	8008228 <__lshift>
 8007af4:	4621      	mov	r1, r4
 8007af6:	9002      	str	r0, [sp, #8]
 8007af8:	f000 fc02 	bl	8008300 <__mcmp>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	dcb4      	bgt.n	8007a6a <_dtoa_r+0xa82>
 8007b00:	d102      	bne.n	8007b08 <_dtoa_r+0xb20>
 8007b02:	9b00      	ldr	r3, [sp, #0]
 8007b04:	07db      	lsls	r3, r3, #31
 8007b06:	d4b0      	bmi.n	8007a6a <_dtoa_r+0xa82>
 8007b08:	4633      	mov	r3, r6
 8007b0a:	461e      	mov	r6, r3
 8007b0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b10:	2a30      	cmp	r2, #48	@ 0x30
 8007b12:	d0fa      	beq.n	8007b0a <_dtoa_r+0xb22>
 8007b14:	e4b5      	b.n	8007482 <_dtoa_r+0x49a>
 8007b16:	459a      	cmp	sl, r3
 8007b18:	d1a8      	bne.n	8007a6c <_dtoa_r+0xa84>
 8007b1a:	2331      	movs	r3, #49	@ 0x31
 8007b1c:	f108 0801 	add.w	r8, r8, #1
 8007b20:	f88a 3000 	strb.w	r3, [sl]
 8007b24:	e4ad      	b.n	8007482 <_dtoa_r+0x49a>
 8007b26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007b84 <_dtoa_r+0xb9c>
 8007b2c:	b11b      	cbz	r3, 8007b36 <_dtoa_r+0xb4e>
 8007b2e:	f10a 0308 	add.w	r3, sl, #8
 8007b32:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	4650      	mov	r0, sl
 8007b38:	b017      	add	sp, #92	@ 0x5c
 8007b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3e:	9b07      	ldr	r3, [sp, #28]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	f77f ae2e 	ble.w	80077a2 <_dtoa_r+0x7ba>
 8007b46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b48:	9308      	str	r3, [sp, #32]
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	e64d      	b.n	80077ea <_dtoa_r+0x802>
 8007b4e:	f1bb 0f00 	cmp.w	fp, #0
 8007b52:	f77f aed9 	ble.w	8007908 <_dtoa_r+0x920>
 8007b56:	4656      	mov	r6, sl
 8007b58:	9802      	ldr	r0, [sp, #8]
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	f7ff f9bc 	bl	8006ed8 <quorem>
 8007b60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007b64:	f806 3b01 	strb.w	r3, [r6], #1
 8007b68:	eba6 020a 	sub.w	r2, r6, sl
 8007b6c:	4593      	cmp	fp, r2
 8007b6e:	ddb4      	ble.n	8007ada <_dtoa_r+0xaf2>
 8007b70:	9902      	ldr	r1, [sp, #8]
 8007b72:	2300      	movs	r3, #0
 8007b74:	220a      	movs	r2, #10
 8007b76:	4648      	mov	r0, r9
 8007b78:	f000 f968 	bl	8007e4c <__multadd>
 8007b7c:	9002      	str	r0, [sp, #8]
 8007b7e:	e7eb      	b.n	8007b58 <_dtoa_r+0xb70>
 8007b80:	0800afc9 	.word	0x0800afc9
 8007b84:	0800af64 	.word	0x0800af64

08007b88 <_free_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	d041      	beq.n	8007c14 <_free_r+0x8c>
 8007b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b94:	1f0c      	subs	r4, r1, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfb8      	it	lt
 8007b9a:	18e4      	addlt	r4, r4, r3
 8007b9c:	f000 f8e8 	bl	8007d70 <__malloc_lock>
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c18 <_free_r+0x90>)
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	b933      	cbnz	r3, 8007bb4 <_free_r+0x2c>
 8007ba6:	6063      	str	r3, [r4, #4]
 8007ba8:	6014      	str	r4, [r2, #0]
 8007baa:	4628      	mov	r0, r5
 8007bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb0:	f000 b8e4 	b.w	8007d7c <__malloc_unlock>
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	d908      	bls.n	8007bca <_free_r+0x42>
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	1821      	adds	r1, r4, r0
 8007bbc:	428b      	cmp	r3, r1
 8007bbe:	bf01      	itttt	eq
 8007bc0:	6819      	ldreq	r1, [r3, #0]
 8007bc2:	685b      	ldreq	r3, [r3, #4]
 8007bc4:	1809      	addeq	r1, r1, r0
 8007bc6:	6021      	streq	r1, [r4, #0]
 8007bc8:	e7ed      	b.n	8007ba6 <_free_r+0x1e>
 8007bca:	461a      	mov	r2, r3
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b10b      	cbz	r3, 8007bd4 <_free_r+0x4c>
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d9fa      	bls.n	8007bca <_free_r+0x42>
 8007bd4:	6811      	ldr	r1, [r2, #0]
 8007bd6:	1850      	adds	r0, r2, r1
 8007bd8:	42a0      	cmp	r0, r4
 8007bda:	d10b      	bne.n	8007bf4 <_free_r+0x6c>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	4401      	add	r1, r0
 8007be0:	1850      	adds	r0, r2, r1
 8007be2:	4283      	cmp	r3, r0
 8007be4:	6011      	str	r1, [r2, #0]
 8007be6:	d1e0      	bne.n	8007baa <_free_r+0x22>
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	6053      	str	r3, [r2, #4]
 8007bee:	4408      	add	r0, r1
 8007bf0:	6010      	str	r0, [r2, #0]
 8007bf2:	e7da      	b.n	8007baa <_free_r+0x22>
 8007bf4:	d902      	bls.n	8007bfc <_free_r+0x74>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	e7d6      	b.n	8007baa <_free_r+0x22>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	1821      	adds	r1, r4, r0
 8007c00:	428b      	cmp	r3, r1
 8007c02:	bf04      	itt	eq
 8007c04:	6819      	ldreq	r1, [r3, #0]
 8007c06:	685b      	ldreq	r3, [r3, #4]
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	bf04      	itt	eq
 8007c0c:	1809      	addeq	r1, r1, r0
 8007c0e:	6021      	streq	r1, [r4, #0]
 8007c10:	6054      	str	r4, [r2, #4]
 8007c12:	e7ca      	b.n	8007baa <_free_r+0x22>
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	200004c8 	.word	0x200004c8

08007c1c <malloc>:
 8007c1c:	4b02      	ldr	r3, [pc, #8]	@ (8007c28 <malloc+0xc>)
 8007c1e:	4601      	mov	r1, r0
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	f000 b825 	b.w	8007c70 <_malloc_r>
 8007c26:	bf00      	nop
 8007c28:	20000018 	.word	0x20000018

08007c2c <sbrk_aligned>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c6c <sbrk_aligned+0x40>)
 8007c30:	460c      	mov	r4, r1
 8007c32:	6831      	ldr	r1, [r6, #0]
 8007c34:	4605      	mov	r5, r0
 8007c36:	b911      	cbnz	r1, 8007c3e <sbrk_aligned+0x12>
 8007c38:	f002 fb6e 	bl	800a318 <_sbrk_r>
 8007c3c:	6030      	str	r0, [r6, #0]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4628      	mov	r0, r5
 8007c42:	f002 fb69 	bl	800a318 <_sbrk_r>
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	d103      	bne.n	8007c52 <sbrk_aligned+0x26>
 8007c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007c4e:	4620      	mov	r0, r4
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	1cc4      	adds	r4, r0, #3
 8007c54:	f024 0403 	bic.w	r4, r4, #3
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d0f8      	beq.n	8007c4e <sbrk_aligned+0x22>
 8007c5c:	1a21      	subs	r1, r4, r0
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f002 fb5a 	bl	800a318 <_sbrk_r>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d1f2      	bne.n	8007c4e <sbrk_aligned+0x22>
 8007c68:	e7ef      	b.n	8007c4a <sbrk_aligned+0x1e>
 8007c6a:	bf00      	nop
 8007c6c:	200004c4 	.word	0x200004c4

08007c70 <_malloc_r>:
 8007c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c74:	1ccd      	adds	r5, r1, #3
 8007c76:	f025 0503 	bic.w	r5, r5, #3
 8007c7a:	3508      	adds	r5, #8
 8007c7c:	2d0c      	cmp	r5, #12
 8007c7e:	bf38      	it	cc
 8007c80:	250c      	movcc	r5, #12
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	4606      	mov	r6, r0
 8007c86:	db01      	blt.n	8007c8c <_malloc_r+0x1c>
 8007c88:	42a9      	cmp	r1, r5
 8007c8a:	d904      	bls.n	8007c96 <_malloc_r+0x26>
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	2000      	movs	r0, #0
 8007c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d6c <_malloc_r+0xfc>
 8007c9a:	f000 f869 	bl	8007d70 <__malloc_lock>
 8007c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca2:	461c      	mov	r4, r3
 8007ca4:	bb44      	cbnz	r4, 8007cf8 <_malloc_r+0x88>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7ff ffbf 	bl	8007c2c <sbrk_aligned>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	d158      	bne.n	8007d66 <_malloc_r+0xf6>
 8007cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8007cb8:	4627      	mov	r7, r4
 8007cba:	2f00      	cmp	r7, #0
 8007cbc:	d143      	bne.n	8007d46 <_malloc_r+0xd6>
 8007cbe:	2c00      	cmp	r4, #0
 8007cc0:	d04b      	beq.n	8007d5a <_malloc_r+0xea>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	eb04 0903 	add.w	r9, r4, r3
 8007ccc:	f002 fb24 	bl	800a318 <_sbrk_r>
 8007cd0:	4581      	cmp	r9, r0
 8007cd2:	d142      	bne.n	8007d5a <_malloc_r+0xea>
 8007cd4:	6821      	ldr	r1, [r4, #0]
 8007cd6:	1a6d      	subs	r5, r5, r1
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7ff ffa6 	bl	8007c2c <sbrk_aligned>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d03a      	beq.n	8007d5a <_malloc_r+0xea>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	442b      	add	r3, r5
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	f8d8 3000 	ldr.w	r3, [r8]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	bb62      	cbnz	r2, 8007d4c <_malloc_r+0xdc>
 8007cf2:	f8c8 7000 	str.w	r7, [r8]
 8007cf6:	e00f      	b.n	8007d18 <_malloc_r+0xa8>
 8007cf8:	6822      	ldr	r2, [r4, #0]
 8007cfa:	1b52      	subs	r2, r2, r5
 8007cfc:	d420      	bmi.n	8007d40 <_malloc_r+0xd0>
 8007cfe:	2a0b      	cmp	r2, #11
 8007d00:	d917      	bls.n	8007d32 <_malloc_r+0xc2>
 8007d02:	1961      	adds	r1, r4, r5
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	6025      	str	r5, [r4, #0]
 8007d08:	bf18      	it	ne
 8007d0a:	6059      	strne	r1, [r3, #4]
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	bf08      	it	eq
 8007d10:	f8c8 1000 	streq.w	r1, [r8]
 8007d14:	5162      	str	r2, [r4, r5]
 8007d16:	604b      	str	r3, [r1, #4]
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 f82f 	bl	8007d7c <__malloc_unlock>
 8007d1e:	f104 000b 	add.w	r0, r4, #11
 8007d22:	1d23      	adds	r3, r4, #4
 8007d24:	f020 0007 	bic.w	r0, r0, #7
 8007d28:	1ac2      	subs	r2, r0, r3
 8007d2a:	bf1c      	itt	ne
 8007d2c:	1a1b      	subne	r3, r3, r0
 8007d2e:	50a3      	strne	r3, [r4, r2]
 8007d30:	e7af      	b.n	8007c92 <_malloc_r+0x22>
 8007d32:	6862      	ldr	r2, [r4, #4]
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	bf0c      	ite	eq
 8007d38:	f8c8 2000 	streq.w	r2, [r8]
 8007d3c:	605a      	strne	r2, [r3, #4]
 8007d3e:	e7eb      	b.n	8007d18 <_malloc_r+0xa8>
 8007d40:	4623      	mov	r3, r4
 8007d42:	6864      	ldr	r4, [r4, #4]
 8007d44:	e7ae      	b.n	8007ca4 <_malloc_r+0x34>
 8007d46:	463c      	mov	r4, r7
 8007d48:	687f      	ldr	r7, [r7, #4]
 8007d4a:	e7b6      	b.n	8007cba <_malloc_r+0x4a>
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d1fb      	bne.n	8007d4c <_malloc_r+0xdc>
 8007d54:	2300      	movs	r3, #0
 8007d56:	6053      	str	r3, [r2, #4]
 8007d58:	e7de      	b.n	8007d18 <_malloc_r+0xa8>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	6033      	str	r3, [r6, #0]
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 f80c 	bl	8007d7c <__malloc_unlock>
 8007d64:	e794      	b.n	8007c90 <_malloc_r+0x20>
 8007d66:	6005      	str	r5, [r0, #0]
 8007d68:	e7d6      	b.n	8007d18 <_malloc_r+0xa8>
 8007d6a:	bf00      	nop
 8007d6c:	200004c8 	.word	0x200004c8

08007d70 <__malloc_lock>:
 8007d70:	4801      	ldr	r0, [pc, #4]	@ (8007d78 <__malloc_lock+0x8>)
 8007d72:	f7ff b88a 	b.w	8006e8a <__retarget_lock_acquire_recursive>
 8007d76:	bf00      	nop
 8007d78:	200004c0 	.word	0x200004c0

08007d7c <__malloc_unlock>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	@ (8007d84 <__malloc_unlock+0x8>)
 8007d7e:	f7ff b885 	b.w	8006e8c <__retarget_lock_release_recursive>
 8007d82:	bf00      	nop
 8007d84:	200004c0 	.word	0x200004c0

08007d88 <_Balloc>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	69c6      	ldr	r6, [r0, #28]
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	b976      	cbnz	r6, 8007db0 <_Balloc+0x28>
 8007d92:	2010      	movs	r0, #16
 8007d94:	f7ff ff42 	bl	8007c1c <malloc>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	61e0      	str	r0, [r4, #28]
 8007d9c:	b920      	cbnz	r0, 8007da8 <_Balloc+0x20>
 8007d9e:	4b18      	ldr	r3, [pc, #96]	@ (8007e00 <_Balloc+0x78>)
 8007da0:	4818      	ldr	r0, [pc, #96]	@ (8007e04 <_Balloc+0x7c>)
 8007da2:	216b      	movs	r1, #107	@ 0x6b
 8007da4:	f7ff f87a 	bl	8006e9c <__assert_func>
 8007da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dac:	6006      	str	r6, [r0, #0]
 8007dae:	60c6      	str	r6, [r0, #12]
 8007db0:	69e6      	ldr	r6, [r4, #28]
 8007db2:	68f3      	ldr	r3, [r6, #12]
 8007db4:	b183      	cbz	r3, 8007dd8 <_Balloc+0x50>
 8007db6:	69e3      	ldr	r3, [r4, #28]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dbe:	b9b8      	cbnz	r0, 8007df0 <_Balloc+0x68>
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8007dc6:	1d72      	adds	r2, r6, #5
 8007dc8:	0092      	lsls	r2, r2, #2
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f002 fad3 	bl	800a376 <_calloc_r>
 8007dd0:	b160      	cbz	r0, 8007dec <_Balloc+0x64>
 8007dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dd6:	e00e      	b.n	8007df6 <_Balloc+0x6e>
 8007dd8:	2221      	movs	r2, #33	@ 0x21
 8007dda:	2104      	movs	r1, #4
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f002 faca 	bl	800a376 <_calloc_r>
 8007de2:	69e3      	ldr	r3, [r4, #28]
 8007de4:	60f0      	str	r0, [r6, #12]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e4      	bne.n	8007db6 <_Balloc+0x2e>
 8007dec:	2000      	movs	r0, #0
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	6802      	ldr	r2, [r0, #0]
 8007df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007df6:	2300      	movs	r3, #0
 8007df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dfc:	e7f7      	b.n	8007dee <_Balloc+0x66>
 8007dfe:	bf00      	nop
 8007e00:	0800aeb7 	.word	0x0800aeb7
 8007e04:	0800afda 	.word	0x0800afda

08007e08 <_Bfree>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	69c6      	ldr	r6, [r0, #28]
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	b976      	cbnz	r6, 8007e30 <_Bfree+0x28>
 8007e12:	2010      	movs	r0, #16
 8007e14:	f7ff ff02 	bl	8007c1c <malloc>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	61e8      	str	r0, [r5, #28]
 8007e1c:	b920      	cbnz	r0, 8007e28 <_Bfree+0x20>
 8007e1e:	4b09      	ldr	r3, [pc, #36]	@ (8007e44 <_Bfree+0x3c>)
 8007e20:	4809      	ldr	r0, [pc, #36]	@ (8007e48 <_Bfree+0x40>)
 8007e22:	218f      	movs	r1, #143	@ 0x8f
 8007e24:	f7ff f83a 	bl	8006e9c <__assert_func>
 8007e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e2c:	6006      	str	r6, [r0, #0]
 8007e2e:	60c6      	str	r6, [r0, #12]
 8007e30:	b13c      	cbz	r4, 8007e42 <_Bfree+0x3a>
 8007e32:	69eb      	ldr	r3, [r5, #28]
 8007e34:	6862      	ldr	r2, [r4, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e3c:	6021      	str	r1, [r4, #0]
 8007e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	0800aeb7 	.word	0x0800aeb7
 8007e48:	0800afda 	.word	0x0800afda

08007e4c <__multadd>:
 8007e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e50:	690d      	ldr	r5, [r1, #16]
 8007e52:	4607      	mov	r7, r0
 8007e54:	460c      	mov	r4, r1
 8007e56:	461e      	mov	r6, r3
 8007e58:	f101 0c14 	add.w	ip, r1, #20
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8007e62:	b299      	uxth	r1, r3
 8007e64:	fb02 6101 	mla	r1, r2, r1, r6
 8007e68:	0c1e      	lsrs	r6, r3, #16
 8007e6a:	0c0b      	lsrs	r3, r1, #16
 8007e6c:	fb02 3306 	mla	r3, r2, r6, r3
 8007e70:	b289      	uxth	r1, r1
 8007e72:	3001      	adds	r0, #1
 8007e74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e78:	4285      	cmp	r5, r0
 8007e7a:	f84c 1b04 	str.w	r1, [ip], #4
 8007e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e82:	dcec      	bgt.n	8007e5e <__multadd+0x12>
 8007e84:	b30e      	cbz	r6, 8007eca <__multadd+0x7e>
 8007e86:	68a3      	ldr	r3, [r4, #8]
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	dc19      	bgt.n	8007ec0 <__multadd+0x74>
 8007e8c:	6861      	ldr	r1, [r4, #4]
 8007e8e:	4638      	mov	r0, r7
 8007e90:	3101      	adds	r1, #1
 8007e92:	f7ff ff79 	bl	8007d88 <_Balloc>
 8007e96:	4680      	mov	r8, r0
 8007e98:	b928      	cbnz	r0, 8007ea6 <__multadd+0x5a>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed0 <__multadd+0x84>)
 8007e9e:	480d      	ldr	r0, [pc, #52]	@ (8007ed4 <__multadd+0x88>)
 8007ea0:	21ba      	movs	r1, #186	@ 0xba
 8007ea2:	f7fe fffb 	bl	8006e9c <__assert_func>
 8007ea6:	6922      	ldr	r2, [r4, #16]
 8007ea8:	3202      	adds	r2, #2
 8007eaa:	f104 010c 	add.w	r1, r4, #12
 8007eae:	0092      	lsls	r2, r2, #2
 8007eb0:	300c      	adds	r0, #12
 8007eb2:	f002 fa41 	bl	800a338 <memcpy>
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7ff ffa5 	bl	8007e08 <_Bfree>
 8007ebe:	4644      	mov	r4, r8
 8007ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	615e      	str	r6, [r3, #20]
 8007ec8:	6125      	str	r5, [r4, #16]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed0:	0800afc9 	.word	0x0800afc9
 8007ed4:	0800afda 	.word	0x0800afda

08007ed8 <__s2b>:
 8007ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007edc:	460c      	mov	r4, r1
 8007ede:	4615      	mov	r5, r2
 8007ee0:	461f      	mov	r7, r3
 8007ee2:	2209      	movs	r2, #9
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eec:	2100      	movs	r1, #0
 8007eee:	2201      	movs	r2, #1
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	db09      	blt.n	8007f08 <__s2b+0x30>
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7ff ff47 	bl	8007d88 <_Balloc>
 8007efa:	b940      	cbnz	r0, 8007f0e <__s2b+0x36>
 8007efc:	4602      	mov	r2, r0
 8007efe:	4b19      	ldr	r3, [pc, #100]	@ (8007f64 <__s2b+0x8c>)
 8007f00:	4819      	ldr	r0, [pc, #100]	@ (8007f68 <__s2b+0x90>)
 8007f02:	21d3      	movs	r1, #211	@ 0xd3
 8007f04:	f7fe ffca 	bl	8006e9c <__assert_func>
 8007f08:	0052      	lsls	r2, r2, #1
 8007f0a:	3101      	adds	r1, #1
 8007f0c:	e7f0      	b.n	8007ef0 <__s2b+0x18>
 8007f0e:	9b08      	ldr	r3, [sp, #32]
 8007f10:	6143      	str	r3, [r0, #20]
 8007f12:	2d09      	cmp	r5, #9
 8007f14:	f04f 0301 	mov.w	r3, #1
 8007f18:	6103      	str	r3, [r0, #16]
 8007f1a:	dd16      	ble.n	8007f4a <__s2b+0x72>
 8007f1c:	f104 0909 	add.w	r9, r4, #9
 8007f20:	46c8      	mov	r8, r9
 8007f22:	442c      	add	r4, r5
 8007f24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007f28:	4601      	mov	r1, r0
 8007f2a:	3b30      	subs	r3, #48	@ 0x30
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f7ff ff8c 	bl	8007e4c <__multadd>
 8007f34:	45a0      	cmp	r8, r4
 8007f36:	d1f5      	bne.n	8007f24 <__s2b+0x4c>
 8007f38:	f1a5 0408 	sub.w	r4, r5, #8
 8007f3c:	444c      	add	r4, r9
 8007f3e:	1b2d      	subs	r5, r5, r4
 8007f40:	1963      	adds	r3, r4, r5
 8007f42:	42bb      	cmp	r3, r7
 8007f44:	db04      	blt.n	8007f50 <__s2b+0x78>
 8007f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f4a:	340a      	adds	r4, #10
 8007f4c:	2509      	movs	r5, #9
 8007f4e:	e7f6      	b.n	8007f3e <__s2b+0x66>
 8007f50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f54:	4601      	mov	r1, r0
 8007f56:	3b30      	subs	r3, #48	@ 0x30
 8007f58:	220a      	movs	r2, #10
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff ff76 	bl	8007e4c <__multadd>
 8007f60:	e7ee      	b.n	8007f40 <__s2b+0x68>
 8007f62:	bf00      	nop
 8007f64:	0800afc9 	.word	0x0800afc9
 8007f68:	0800afda 	.word	0x0800afda

08007f6c <__hi0bits>:
 8007f6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f70:	4603      	mov	r3, r0
 8007f72:	bf36      	itet	cc
 8007f74:	0403      	lslcc	r3, r0, #16
 8007f76:	2000      	movcs	r0, #0
 8007f78:	2010      	movcc	r0, #16
 8007f7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f7e:	bf3c      	itt	cc
 8007f80:	021b      	lslcc	r3, r3, #8
 8007f82:	3008      	addcc	r0, #8
 8007f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f88:	bf3c      	itt	cc
 8007f8a:	011b      	lslcc	r3, r3, #4
 8007f8c:	3004      	addcc	r0, #4
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f92:	bf3c      	itt	cc
 8007f94:	009b      	lslcc	r3, r3, #2
 8007f96:	3002      	addcc	r0, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db05      	blt.n	8007fa8 <__hi0bits+0x3c>
 8007f9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007fa0:	f100 0001 	add.w	r0, r0, #1
 8007fa4:	bf08      	it	eq
 8007fa6:	2020      	moveq	r0, #32
 8007fa8:	4770      	bx	lr

08007faa <__lo0bits>:
 8007faa:	6803      	ldr	r3, [r0, #0]
 8007fac:	4602      	mov	r2, r0
 8007fae:	f013 0007 	ands.w	r0, r3, #7
 8007fb2:	d00b      	beq.n	8007fcc <__lo0bits+0x22>
 8007fb4:	07d9      	lsls	r1, r3, #31
 8007fb6:	d421      	bmi.n	8007ffc <__lo0bits+0x52>
 8007fb8:	0798      	lsls	r0, r3, #30
 8007fba:	bf49      	itett	mi
 8007fbc:	085b      	lsrmi	r3, r3, #1
 8007fbe:	089b      	lsrpl	r3, r3, #2
 8007fc0:	2001      	movmi	r0, #1
 8007fc2:	6013      	strmi	r3, [r2, #0]
 8007fc4:	bf5c      	itt	pl
 8007fc6:	6013      	strpl	r3, [r2, #0]
 8007fc8:	2002      	movpl	r0, #2
 8007fca:	4770      	bx	lr
 8007fcc:	b299      	uxth	r1, r3
 8007fce:	b909      	cbnz	r1, 8007fd4 <__lo0bits+0x2a>
 8007fd0:	0c1b      	lsrs	r3, r3, #16
 8007fd2:	2010      	movs	r0, #16
 8007fd4:	b2d9      	uxtb	r1, r3
 8007fd6:	b909      	cbnz	r1, 8007fdc <__lo0bits+0x32>
 8007fd8:	3008      	adds	r0, #8
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	0719      	lsls	r1, r3, #28
 8007fde:	bf04      	itt	eq
 8007fe0:	091b      	lsreq	r3, r3, #4
 8007fe2:	3004      	addeq	r0, #4
 8007fe4:	0799      	lsls	r1, r3, #30
 8007fe6:	bf04      	itt	eq
 8007fe8:	089b      	lsreq	r3, r3, #2
 8007fea:	3002      	addeq	r0, #2
 8007fec:	07d9      	lsls	r1, r3, #31
 8007fee:	d403      	bmi.n	8007ff8 <__lo0bits+0x4e>
 8007ff0:	085b      	lsrs	r3, r3, #1
 8007ff2:	f100 0001 	add.w	r0, r0, #1
 8007ff6:	d003      	beq.n	8008000 <__lo0bits+0x56>
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	4770      	bx	lr
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	4770      	bx	lr
 8008000:	2020      	movs	r0, #32
 8008002:	4770      	bx	lr

08008004 <__i2b>:
 8008004:	b510      	push	{r4, lr}
 8008006:	460c      	mov	r4, r1
 8008008:	2101      	movs	r1, #1
 800800a:	f7ff febd 	bl	8007d88 <_Balloc>
 800800e:	4602      	mov	r2, r0
 8008010:	b928      	cbnz	r0, 800801e <__i2b+0x1a>
 8008012:	4b05      	ldr	r3, [pc, #20]	@ (8008028 <__i2b+0x24>)
 8008014:	4805      	ldr	r0, [pc, #20]	@ (800802c <__i2b+0x28>)
 8008016:	f240 1145 	movw	r1, #325	@ 0x145
 800801a:	f7fe ff3f 	bl	8006e9c <__assert_func>
 800801e:	2301      	movs	r3, #1
 8008020:	6144      	str	r4, [r0, #20]
 8008022:	6103      	str	r3, [r0, #16]
 8008024:	bd10      	pop	{r4, pc}
 8008026:	bf00      	nop
 8008028:	0800afc9 	.word	0x0800afc9
 800802c:	0800afda 	.word	0x0800afda

08008030 <__multiply>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	4617      	mov	r7, r2
 8008036:	690a      	ldr	r2, [r1, #16]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	429a      	cmp	r2, r3
 800803c:	bfa8      	it	ge
 800803e:	463b      	movge	r3, r7
 8008040:	4689      	mov	r9, r1
 8008042:	bfa4      	itt	ge
 8008044:	460f      	movge	r7, r1
 8008046:	4699      	movge	r9, r3
 8008048:	693d      	ldr	r5, [r7, #16]
 800804a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	eb05 060a 	add.w	r6, r5, sl
 8008056:	42b3      	cmp	r3, r6
 8008058:	b085      	sub	sp, #20
 800805a:	bfb8      	it	lt
 800805c:	3101      	addlt	r1, #1
 800805e:	f7ff fe93 	bl	8007d88 <_Balloc>
 8008062:	b930      	cbnz	r0, 8008072 <__multiply+0x42>
 8008064:	4602      	mov	r2, r0
 8008066:	4b41      	ldr	r3, [pc, #260]	@ (800816c <__multiply+0x13c>)
 8008068:	4841      	ldr	r0, [pc, #260]	@ (8008170 <__multiply+0x140>)
 800806a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800806e:	f7fe ff15 	bl	8006e9c <__assert_func>
 8008072:	f100 0414 	add.w	r4, r0, #20
 8008076:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800807a:	4623      	mov	r3, r4
 800807c:	2200      	movs	r2, #0
 800807e:	4573      	cmp	r3, lr
 8008080:	d320      	bcc.n	80080c4 <__multiply+0x94>
 8008082:	f107 0814 	add.w	r8, r7, #20
 8008086:	f109 0114 	add.w	r1, r9, #20
 800808a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800808e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008092:	9302      	str	r3, [sp, #8]
 8008094:	1beb      	subs	r3, r5, r7
 8008096:	3b15      	subs	r3, #21
 8008098:	f023 0303 	bic.w	r3, r3, #3
 800809c:	3304      	adds	r3, #4
 800809e:	3715      	adds	r7, #21
 80080a0:	42bd      	cmp	r5, r7
 80080a2:	bf38      	it	cc
 80080a4:	2304      	movcc	r3, #4
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	9b02      	ldr	r3, [sp, #8]
 80080aa:	9103      	str	r1, [sp, #12]
 80080ac:	428b      	cmp	r3, r1
 80080ae:	d80c      	bhi.n	80080ca <__multiply+0x9a>
 80080b0:	2e00      	cmp	r6, #0
 80080b2:	dd03      	ble.n	80080bc <__multiply+0x8c>
 80080b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d055      	beq.n	8008168 <__multiply+0x138>
 80080bc:	6106      	str	r6, [r0, #16]
 80080be:	b005      	add	sp, #20
 80080c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c4:	f843 2b04 	str.w	r2, [r3], #4
 80080c8:	e7d9      	b.n	800807e <__multiply+0x4e>
 80080ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80080ce:	f1ba 0f00 	cmp.w	sl, #0
 80080d2:	d01f      	beq.n	8008114 <__multiply+0xe4>
 80080d4:	46c4      	mov	ip, r8
 80080d6:	46a1      	mov	r9, r4
 80080d8:	2700      	movs	r7, #0
 80080da:	f85c 2b04 	ldr.w	r2, [ip], #4
 80080de:	f8d9 3000 	ldr.w	r3, [r9]
 80080e2:	fa1f fb82 	uxth.w	fp, r2
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80080ec:	443b      	add	r3, r7
 80080ee:	f8d9 7000 	ldr.w	r7, [r9]
 80080f2:	0c12      	lsrs	r2, r2, #16
 80080f4:	0c3f      	lsrs	r7, r7, #16
 80080f6:	fb0a 7202 	mla	r2, sl, r2, r7
 80080fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80080fe:	b29b      	uxth	r3, r3
 8008100:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008104:	4565      	cmp	r5, ip
 8008106:	f849 3b04 	str.w	r3, [r9], #4
 800810a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800810e:	d8e4      	bhi.n	80080da <__multiply+0xaa>
 8008110:	9b01      	ldr	r3, [sp, #4]
 8008112:	50e7      	str	r7, [r4, r3]
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800811a:	3104      	adds	r1, #4
 800811c:	f1b9 0f00 	cmp.w	r9, #0
 8008120:	d020      	beq.n	8008164 <__multiply+0x134>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	4647      	mov	r7, r8
 8008126:	46a4      	mov	ip, r4
 8008128:	f04f 0a00 	mov.w	sl, #0
 800812c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008130:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008134:	fb09 220b 	mla	r2, r9, fp, r2
 8008138:	4452      	add	r2, sl
 800813a:	b29b      	uxth	r3, r3
 800813c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008140:	f84c 3b04 	str.w	r3, [ip], #4
 8008144:	f857 3b04 	ldr.w	r3, [r7], #4
 8008148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800814c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008150:	fb09 330a 	mla	r3, r9, sl, r3
 8008154:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008158:	42bd      	cmp	r5, r7
 800815a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800815e:	d8e5      	bhi.n	800812c <__multiply+0xfc>
 8008160:	9a01      	ldr	r2, [sp, #4]
 8008162:	50a3      	str	r3, [r4, r2]
 8008164:	3404      	adds	r4, #4
 8008166:	e79f      	b.n	80080a8 <__multiply+0x78>
 8008168:	3e01      	subs	r6, #1
 800816a:	e7a1      	b.n	80080b0 <__multiply+0x80>
 800816c:	0800afc9 	.word	0x0800afc9
 8008170:	0800afda 	.word	0x0800afda

08008174 <__pow5mult>:
 8008174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008178:	4615      	mov	r5, r2
 800817a:	f012 0203 	ands.w	r2, r2, #3
 800817e:	4607      	mov	r7, r0
 8008180:	460e      	mov	r6, r1
 8008182:	d007      	beq.n	8008194 <__pow5mult+0x20>
 8008184:	4c25      	ldr	r4, [pc, #148]	@ (800821c <__pow5mult+0xa8>)
 8008186:	3a01      	subs	r2, #1
 8008188:	2300      	movs	r3, #0
 800818a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800818e:	f7ff fe5d 	bl	8007e4c <__multadd>
 8008192:	4606      	mov	r6, r0
 8008194:	10ad      	asrs	r5, r5, #2
 8008196:	d03d      	beq.n	8008214 <__pow5mult+0xa0>
 8008198:	69fc      	ldr	r4, [r7, #28]
 800819a:	b97c      	cbnz	r4, 80081bc <__pow5mult+0x48>
 800819c:	2010      	movs	r0, #16
 800819e:	f7ff fd3d 	bl	8007c1c <malloc>
 80081a2:	4602      	mov	r2, r0
 80081a4:	61f8      	str	r0, [r7, #28]
 80081a6:	b928      	cbnz	r0, 80081b4 <__pow5mult+0x40>
 80081a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008220 <__pow5mult+0xac>)
 80081aa:	481e      	ldr	r0, [pc, #120]	@ (8008224 <__pow5mult+0xb0>)
 80081ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081b0:	f7fe fe74 	bl	8006e9c <__assert_func>
 80081b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081b8:	6004      	str	r4, [r0, #0]
 80081ba:	60c4      	str	r4, [r0, #12]
 80081bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081c4:	b94c      	cbnz	r4, 80081da <__pow5mult+0x66>
 80081c6:	f240 2171 	movw	r1, #625	@ 0x271
 80081ca:	4638      	mov	r0, r7
 80081cc:	f7ff ff1a 	bl	8008004 <__i2b>
 80081d0:	2300      	movs	r3, #0
 80081d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80081d6:	4604      	mov	r4, r0
 80081d8:	6003      	str	r3, [r0, #0]
 80081da:	f04f 0900 	mov.w	r9, #0
 80081de:	07eb      	lsls	r3, r5, #31
 80081e0:	d50a      	bpl.n	80081f8 <__pow5mult+0x84>
 80081e2:	4631      	mov	r1, r6
 80081e4:	4622      	mov	r2, r4
 80081e6:	4638      	mov	r0, r7
 80081e8:	f7ff ff22 	bl	8008030 <__multiply>
 80081ec:	4631      	mov	r1, r6
 80081ee:	4680      	mov	r8, r0
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff fe09 	bl	8007e08 <_Bfree>
 80081f6:	4646      	mov	r6, r8
 80081f8:	106d      	asrs	r5, r5, #1
 80081fa:	d00b      	beq.n	8008214 <__pow5mult+0xa0>
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	b938      	cbnz	r0, 8008210 <__pow5mult+0x9c>
 8008200:	4622      	mov	r2, r4
 8008202:	4621      	mov	r1, r4
 8008204:	4638      	mov	r0, r7
 8008206:	f7ff ff13 	bl	8008030 <__multiply>
 800820a:	6020      	str	r0, [r4, #0]
 800820c:	f8c0 9000 	str.w	r9, [r0]
 8008210:	4604      	mov	r4, r0
 8008212:	e7e4      	b.n	80081de <__pow5mult+0x6a>
 8008214:	4630      	mov	r0, r6
 8008216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800821a:	bf00      	nop
 800821c:	0800b0cc 	.word	0x0800b0cc
 8008220:	0800aeb7 	.word	0x0800aeb7
 8008224:	0800afda 	.word	0x0800afda

08008228 <__lshift>:
 8008228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	460c      	mov	r4, r1
 800822e:	6849      	ldr	r1, [r1, #4]
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	4607      	mov	r7, r0
 800823a:	4691      	mov	r9, r2
 800823c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008240:	f108 0601 	add.w	r6, r8, #1
 8008244:	42b3      	cmp	r3, r6
 8008246:	db0b      	blt.n	8008260 <__lshift+0x38>
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff fd9d 	bl	8007d88 <_Balloc>
 800824e:	4605      	mov	r5, r0
 8008250:	b948      	cbnz	r0, 8008266 <__lshift+0x3e>
 8008252:	4602      	mov	r2, r0
 8008254:	4b28      	ldr	r3, [pc, #160]	@ (80082f8 <__lshift+0xd0>)
 8008256:	4829      	ldr	r0, [pc, #164]	@ (80082fc <__lshift+0xd4>)
 8008258:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800825c:	f7fe fe1e 	bl	8006e9c <__assert_func>
 8008260:	3101      	adds	r1, #1
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	e7ee      	b.n	8008244 <__lshift+0x1c>
 8008266:	2300      	movs	r3, #0
 8008268:	f100 0114 	add.w	r1, r0, #20
 800826c:	f100 0210 	add.w	r2, r0, #16
 8008270:	4618      	mov	r0, r3
 8008272:	4553      	cmp	r3, sl
 8008274:	db33      	blt.n	80082de <__lshift+0xb6>
 8008276:	6920      	ldr	r0, [r4, #16]
 8008278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800827c:	f104 0314 	add.w	r3, r4, #20
 8008280:	f019 091f 	ands.w	r9, r9, #31
 8008284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008288:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800828c:	d02b      	beq.n	80082e6 <__lshift+0xbe>
 800828e:	f1c9 0e20 	rsb	lr, r9, #32
 8008292:	468a      	mov	sl, r1
 8008294:	2200      	movs	r2, #0
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	fa00 f009 	lsl.w	r0, r0, r9
 800829c:	4310      	orrs	r0, r2
 800829e:	f84a 0b04 	str.w	r0, [sl], #4
 80082a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a6:	459c      	cmp	ip, r3
 80082a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80082ac:	d8f3      	bhi.n	8008296 <__lshift+0x6e>
 80082ae:	ebac 0304 	sub.w	r3, ip, r4
 80082b2:	3b15      	subs	r3, #21
 80082b4:	f023 0303 	bic.w	r3, r3, #3
 80082b8:	3304      	adds	r3, #4
 80082ba:	f104 0015 	add.w	r0, r4, #21
 80082be:	4560      	cmp	r0, ip
 80082c0:	bf88      	it	hi
 80082c2:	2304      	movhi	r3, #4
 80082c4:	50ca      	str	r2, [r1, r3]
 80082c6:	b10a      	cbz	r2, 80082cc <__lshift+0xa4>
 80082c8:	f108 0602 	add.w	r6, r8, #2
 80082cc:	3e01      	subs	r6, #1
 80082ce:	4638      	mov	r0, r7
 80082d0:	612e      	str	r6, [r5, #16]
 80082d2:	4621      	mov	r1, r4
 80082d4:	f7ff fd98 	bl	8007e08 <_Bfree>
 80082d8:	4628      	mov	r0, r5
 80082da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082de:	f842 0f04 	str.w	r0, [r2, #4]!
 80082e2:	3301      	adds	r3, #1
 80082e4:	e7c5      	b.n	8008272 <__lshift+0x4a>
 80082e6:	3904      	subs	r1, #4
 80082e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80082f0:	459c      	cmp	ip, r3
 80082f2:	d8f9      	bhi.n	80082e8 <__lshift+0xc0>
 80082f4:	e7ea      	b.n	80082cc <__lshift+0xa4>
 80082f6:	bf00      	nop
 80082f8:	0800afc9 	.word	0x0800afc9
 80082fc:	0800afda 	.word	0x0800afda

08008300 <__mcmp>:
 8008300:	690a      	ldr	r2, [r1, #16]
 8008302:	4603      	mov	r3, r0
 8008304:	6900      	ldr	r0, [r0, #16]
 8008306:	1a80      	subs	r0, r0, r2
 8008308:	b530      	push	{r4, r5, lr}
 800830a:	d10e      	bne.n	800832a <__mcmp+0x2a>
 800830c:	3314      	adds	r3, #20
 800830e:	3114      	adds	r1, #20
 8008310:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008314:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008318:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800831c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008320:	4295      	cmp	r5, r2
 8008322:	d003      	beq.n	800832c <__mcmp+0x2c>
 8008324:	d205      	bcs.n	8008332 <__mcmp+0x32>
 8008326:	f04f 30ff 	mov.w	r0, #4294967295
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	42a3      	cmp	r3, r4
 800832e:	d3f3      	bcc.n	8008318 <__mcmp+0x18>
 8008330:	e7fb      	b.n	800832a <__mcmp+0x2a>
 8008332:	2001      	movs	r0, #1
 8008334:	e7f9      	b.n	800832a <__mcmp+0x2a>
	...

08008338 <__mdiff>:
 8008338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	4689      	mov	r9, r1
 800833e:	4606      	mov	r6, r0
 8008340:	4611      	mov	r1, r2
 8008342:	4648      	mov	r0, r9
 8008344:	4614      	mov	r4, r2
 8008346:	f7ff ffdb 	bl	8008300 <__mcmp>
 800834a:	1e05      	subs	r5, r0, #0
 800834c:	d112      	bne.n	8008374 <__mdiff+0x3c>
 800834e:	4629      	mov	r1, r5
 8008350:	4630      	mov	r0, r6
 8008352:	f7ff fd19 	bl	8007d88 <_Balloc>
 8008356:	4602      	mov	r2, r0
 8008358:	b928      	cbnz	r0, 8008366 <__mdiff+0x2e>
 800835a:	4b3f      	ldr	r3, [pc, #252]	@ (8008458 <__mdiff+0x120>)
 800835c:	f240 2137 	movw	r1, #567	@ 0x237
 8008360:	483e      	ldr	r0, [pc, #248]	@ (800845c <__mdiff+0x124>)
 8008362:	f7fe fd9b 	bl	8006e9c <__assert_func>
 8008366:	2301      	movs	r3, #1
 8008368:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800836c:	4610      	mov	r0, r2
 800836e:	b003      	add	sp, #12
 8008370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008374:	bfbc      	itt	lt
 8008376:	464b      	movlt	r3, r9
 8008378:	46a1      	movlt	r9, r4
 800837a:	4630      	mov	r0, r6
 800837c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008380:	bfba      	itte	lt
 8008382:	461c      	movlt	r4, r3
 8008384:	2501      	movlt	r5, #1
 8008386:	2500      	movge	r5, #0
 8008388:	f7ff fcfe 	bl	8007d88 <_Balloc>
 800838c:	4602      	mov	r2, r0
 800838e:	b918      	cbnz	r0, 8008398 <__mdiff+0x60>
 8008390:	4b31      	ldr	r3, [pc, #196]	@ (8008458 <__mdiff+0x120>)
 8008392:	f240 2145 	movw	r1, #581	@ 0x245
 8008396:	e7e3      	b.n	8008360 <__mdiff+0x28>
 8008398:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800839c:	6926      	ldr	r6, [r4, #16]
 800839e:	60c5      	str	r5, [r0, #12]
 80083a0:	f109 0310 	add.w	r3, r9, #16
 80083a4:	f109 0514 	add.w	r5, r9, #20
 80083a8:	f104 0e14 	add.w	lr, r4, #20
 80083ac:	f100 0b14 	add.w	fp, r0, #20
 80083b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	46d9      	mov	r9, fp
 80083bc:	f04f 0c00 	mov.w	ip, #0
 80083c0:	9b01      	ldr	r3, [sp, #4]
 80083c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	fa1f f38a 	uxth.w	r3, sl
 80083d0:	4619      	mov	r1, r3
 80083d2:	b283      	uxth	r3, r0
 80083d4:	1acb      	subs	r3, r1, r3
 80083d6:	0c00      	lsrs	r0, r0, #16
 80083d8:	4463      	add	r3, ip
 80083da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80083de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083e8:	4576      	cmp	r6, lr
 80083ea:	f849 3b04 	str.w	r3, [r9], #4
 80083ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083f2:	d8e5      	bhi.n	80083c0 <__mdiff+0x88>
 80083f4:	1b33      	subs	r3, r6, r4
 80083f6:	3b15      	subs	r3, #21
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	3415      	adds	r4, #21
 80083fe:	3304      	adds	r3, #4
 8008400:	42a6      	cmp	r6, r4
 8008402:	bf38      	it	cc
 8008404:	2304      	movcc	r3, #4
 8008406:	441d      	add	r5, r3
 8008408:	445b      	add	r3, fp
 800840a:	461e      	mov	r6, r3
 800840c:	462c      	mov	r4, r5
 800840e:	4544      	cmp	r4, r8
 8008410:	d30e      	bcc.n	8008430 <__mdiff+0xf8>
 8008412:	f108 0103 	add.w	r1, r8, #3
 8008416:	1b49      	subs	r1, r1, r5
 8008418:	f021 0103 	bic.w	r1, r1, #3
 800841c:	3d03      	subs	r5, #3
 800841e:	45a8      	cmp	r8, r5
 8008420:	bf38      	it	cc
 8008422:	2100      	movcc	r1, #0
 8008424:	440b      	add	r3, r1
 8008426:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800842a:	b191      	cbz	r1, 8008452 <__mdiff+0x11a>
 800842c:	6117      	str	r7, [r2, #16]
 800842e:	e79d      	b.n	800836c <__mdiff+0x34>
 8008430:	f854 1b04 	ldr.w	r1, [r4], #4
 8008434:	46e6      	mov	lr, ip
 8008436:	0c08      	lsrs	r0, r1, #16
 8008438:	fa1c fc81 	uxtah	ip, ip, r1
 800843c:	4471      	add	r1, lr
 800843e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008442:	b289      	uxth	r1, r1
 8008444:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008448:	f846 1b04 	str.w	r1, [r6], #4
 800844c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008450:	e7dd      	b.n	800840e <__mdiff+0xd6>
 8008452:	3f01      	subs	r7, #1
 8008454:	e7e7      	b.n	8008426 <__mdiff+0xee>
 8008456:	bf00      	nop
 8008458:	0800afc9 	.word	0x0800afc9
 800845c:	0800afda 	.word	0x0800afda

08008460 <__ulp>:
 8008460:	b082      	sub	sp, #8
 8008462:	ed8d 0b00 	vstr	d0, [sp]
 8008466:	9a01      	ldr	r2, [sp, #4]
 8008468:	4b0f      	ldr	r3, [pc, #60]	@ (80084a8 <__ulp+0x48>)
 800846a:	4013      	ands	r3, r2
 800846c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008470:	2b00      	cmp	r3, #0
 8008472:	dc08      	bgt.n	8008486 <__ulp+0x26>
 8008474:	425b      	negs	r3, r3
 8008476:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800847a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800847e:	da04      	bge.n	800848a <__ulp+0x2a>
 8008480:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008484:	4113      	asrs	r3, r2
 8008486:	2200      	movs	r2, #0
 8008488:	e008      	b.n	800849c <__ulp+0x3c>
 800848a:	f1a2 0314 	sub.w	r3, r2, #20
 800848e:	2b1e      	cmp	r3, #30
 8008490:	bfda      	itte	le
 8008492:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008496:	40da      	lsrle	r2, r3
 8008498:	2201      	movgt	r2, #1
 800849a:	2300      	movs	r3, #0
 800849c:	4619      	mov	r1, r3
 800849e:	4610      	mov	r0, r2
 80084a0:	ec41 0b10 	vmov	d0, r0, r1
 80084a4:	b002      	add	sp, #8
 80084a6:	4770      	bx	lr
 80084a8:	7ff00000 	.word	0x7ff00000

080084ac <__b2d>:
 80084ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b0:	6906      	ldr	r6, [r0, #16]
 80084b2:	f100 0814 	add.w	r8, r0, #20
 80084b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80084ba:	1f37      	subs	r7, r6, #4
 80084bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80084c0:	4610      	mov	r0, r2
 80084c2:	f7ff fd53 	bl	8007f6c <__hi0bits>
 80084c6:	f1c0 0320 	rsb	r3, r0, #32
 80084ca:	280a      	cmp	r0, #10
 80084cc:	600b      	str	r3, [r1, #0]
 80084ce:	491b      	ldr	r1, [pc, #108]	@ (800853c <__b2d+0x90>)
 80084d0:	dc15      	bgt.n	80084fe <__b2d+0x52>
 80084d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80084d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80084da:	45b8      	cmp	r8, r7
 80084dc:	ea43 0501 	orr.w	r5, r3, r1
 80084e0:	bf34      	ite	cc
 80084e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80084e6:	2300      	movcs	r3, #0
 80084e8:	3015      	adds	r0, #21
 80084ea:	fa02 f000 	lsl.w	r0, r2, r0
 80084ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80084f2:	4303      	orrs	r3, r0
 80084f4:	461c      	mov	r4, r3
 80084f6:	ec45 4b10 	vmov	d0, r4, r5
 80084fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084fe:	45b8      	cmp	r8, r7
 8008500:	bf3a      	itte	cc
 8008502:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008506:	f1a6 0708 	subcc.w	r7, r6, #8
 800850a:	2300      	movcs	r3, #0
 800850c:	380b      	subs	r0, #11
 800850e:	d012      	beq.n	8008536 <__b2d+0x8a>
 8008510:	f1c0 0120 	rsb	r1, r0, #32
 8008514:	fa23 f401 	lsr.w	r4, r3, r1
 8008518:	4082      	lsls	r2, r0
 800851a:	4322      	orrs	r2, r4
 800851c:	4547      	cmp	r7, r8
 800851e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008522:	bf8c      	ite	hi
 8008524:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008528:	2200      	movls	r2, #0
 800852a:	4083      	lsls	r3, r0
 800852c:	40ca      	lsrs	r2, r1
 800852e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008532:	4313      	orrs	r3, r2
 8008534:	e7de      	b.n	80084f4 <__b2d+0x48>
 8008536:	ea42 0501 	orr.w	r5, r2, r1
 800853a:	e7db      	b.n	80084f4 <__b2d+0x48>
 800853c:	3ff00000 	.word	0x3ff00000

08008540 <__d2b>:
 8008540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008544:	460f      	mov	r7, r1
 8008546:	2101      	movs	r1, #1
 8008548:	ec59 8b10 	vmov	r8, r9, d0
 800854c:	4616      	mov	r6, r2
 800854e:	f7ff fc1b 	bl	8007d88 <_Balloc>
 8008552:	4604      	mov	r4, r0
 8008554:	b930      	cbnz	r0, 8008564 <__d2b+0x24>
 8008556:	4602      	mov	r2, r0
 8008558:	4b23      	ldr	r3, [pc, #140]	@ (80085e8 <__d2b+0xa8>)
 800855a:	4824      	ldr	r0, [pc, #144]	@ (80085ec <__d2b+0xac>)
 800855c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008560:	f7fe fc9c 	bl	8006e9c <__assert_func>
 8008564:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800856c:	b10d      	cbz	r5, 8008572 <__d2b+0x32>
 800856e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	f1b8 0300 	subs.w	r3, r8, #0
 8008578:	d023      	beq.n	80085c2 <__d2b+0x82>
 800857a:	4668      	mov	r0, sp
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	f7ff fd14 	bl	8007faa <__lo0bits>
 8008582:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008586:	b1d0      	cbz	r0, 80085be <__d2b+0x7e>
 8008588:	f1c0 0320 	rsb	r3, r0, #32
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	430b      	orrs	r3, r1
 8008592:	40c2      	lsrs	r2, r0
 8008594:	6163      	str	r3, [r4, #20]
 8008596:	9201      	str	r2, [sp, #4]
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	61a3      	str	r3, [r4, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	bf0c      	ite	eq
 80085a0:	2201      	moveq	r2, #1
 80085a2:	2202      	movne	r2, #2
 80085a4:	6122      	str	r2, [r4, #16]
 80085a6:	b1a5      	cbz	r5, 80085d2 <__d2b+0x92>
 80085a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80085ac:	4405      	add	r5, r0
 80085ae:	603d      	str	r5, [r7, #0]
 80085b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80085b4:	6030      	str	r0, [r6, #0]
 80085b6:	4620      	mov	r0, r4
 80085b8:	b003      	add	sp, #12
 80085ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085be:	6161      	str	r1, [r4, #20]
 80085c0:	e7ea      	b.n	8008598 <__d2b+0x58>
 80085c2:	a801      	add	r0, sp, #4
 80085c4:	f7ff fcf1 	bl	8007faa <__lo0bits>
 80085c8:	9b01      	ldr	r3, [sp, #4]
 80085ca:	6163      	str	r3, [r4, #20]
 80085cc:	3020      	adds	r0, #32
 80085ce:	2201      	movs	r2, #1
 80085d0:	e7e8      	b.n	80085a4 <__d2b+0x64>
 80085d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80085da:	6038      	str	r0, [r7, #0]
 80085dc:	6918      	ldr	r0, [r3, #16]
 80085de:	f7ff fcc5 	bl	8007f6c <__hi0bits>
 80085e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085e6:	e7e5      	b.n	80085b4 <__d2b+0x74>
 80085e8:	0800afc9 	.word	0x0800afc9
 80085ec:	0800afda 	.word	0x0800afda

080085f0 <__ratio>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	b085      	sub	sp, #20
 80085f6:	e9cd 1000 	strd	r1, r0, [sp]
 80085fa:	a902      	add	r1, sp, #8
 80085fc:	f7ff ff56 	bl	80084ac <__b2d>
 8008600:	9800      	ldr	r0, [sp, #0]
 8008602:	a903      	add	r1, sp, #12
 8008604:	ec55 4b10 	vmov	r4, r5, d0
 8008608:	f7ff ff50 	bl	80084ac <__b2d>
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	6919      	ldr	r1, [r3, #16]
 8008610:	9b00      	ldr	r3, [sp, #0]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	1ac9      	subs	r1, r1, r3
 8008616:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800861a:	1a9b      	subs	r3, r3, r2
 800861c:	ec5b ab10 	vmov	sl, fp, d0
 8008620:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfce      	itee	gt
 8008628:	462a      	movgt	r2, r5
 800862a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800862e:	465a      	movle	r2, fp
 8008630:	462f      	mov	r7, r5
 8008632:	46d9      	mov	r9, fp
 8008634:	bfcc      	ite	gt
 8008636:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800863a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800863e:	464b      	mov	r3, r9
 8008640:	4652      	mov	r2, sl
 8008642:	4620      	mov	r0, r4
 8008644:	4639      	mov	r1, r7
 8008646:	f7f8 f901 	bl	800084c <__aeabi_ddiv>
 800864a:	ec41 0b10 	vmov	d0, r0, r1
 800864e:	b005      	add	sp, #20
 8008650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008654 <__copybits>:
 8008654:	3901      	subs	r1, #1
 8008656:	b570      	push	{r4, r5, r6, lr}
 8008658:	1149      	asrs	r1, r1, #5
 800865a:	6914      	ldr	r4, [r2, #16]
 800865c:	3101      	adds	r1, #1
 800865e:	f102 0314 	add.w	r3, r2, #20
 8008662:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008666:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800866a:	1f05      	subs	r5, r0, #4
 800866c:	42a3      	cmp	r3, r4
 800866e:	d30c      	bcc.n	800868a <__copybits+0x36>
 8008670:	1aa3      	subs	r3, r4, r2
 8008672:	3b11      	subs	r3, #17
 8008674:	f023 0303 	bic.w	r3, r3, #3
 8008678:	3211      	adds	r2, #17
 800867a:	42a2      	cmp	r2, r4
 800867c:	bf88      	it	hi
 800867e:	2300      	movhi	r3, #0
 8008680:	4418      	add	r0, r3
 8008682:	2300      	movs	r3, #0
 8008684:	4288      	cmp	r0, r1
 8008686:	d305      	bcc.n	8008694 <__copybits+0x40>
 8008688:	bd70      	pop	{r4, r5, r6, pc}
 800868a:	f853 6b04 	ldr.w	r6, [r3], #4
 800868e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008692:	e7eb      	b.n	800866c <__copybits+0x18>
 8008694:	f840 3b04 	str.w	r3, [r0], #4
 8008698:	e7f4      	b.n	8008684 <__copybits+0x30>

0800869a <__any_on>:
 800869a:	f100 0214 	add.w	r2, r0, #20
 800869e:	6900      	ldr	r0, [r0, #16]
 80086a0:	114b      	asrs	r3, r1, #5
 80086a2:	4298      	cmp	r0, r3
 80086a4:	b510      	push	{r4, lr}
 80086a6:	db11      	blt.n	80086cc <__any_on+0x32>
 80086a8:	dd0a      	ble.n	80086c0 <__any_on+0x26>
 80086aa:	f011 011f 	ands.w	r1, r1, #31
 80086ae:	d007      	beq.n	80086c0 <__any_on+0x26>
 80086b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80086b4:	fa24 f001 	lsr.w	r0, r4, r1
 80086b8:	fa00 f101 	lsl.w	r1, r0, r1
 80086bc:	428c      	cmp	r4, r1
 80086be:	d10b      	bne.n	80086d8 <__any_on+0x3e>
 80086c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d803      	bhi.n	80086d0 <__any_on+0x36>
 80086c8:	2000      	movs	r0, #0
 80086ca:	bd10      	pop	{r4, pc}
 80086cc:	4603      	mov	r3, r0
 80086ce:	e7f7      	b.n	80086c0 <__any_on+0x26>
 80086d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d0f5      	beq.n	80086c4 <__any_on+0x2a>
 80086d8:	2001      	movs	r0, #1
 80086da:	e7f6      	b.n	80086ca <__any_on+0x30>

080086dc <sulp>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4604      	mov	r4, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	ec45 4b10 	vmov	d0, r4, r5
 80086e6:	4616      	mov	r6, r2
 80086e8:	f7ff feba 	bl	8008460 <__ulp>
 80086ec:	ec51 0b10 	vmov	r0, r1, d0
 80086f0:	b17e      	cbz	r6, 8008712 <sulp+0x36>
 80086f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80086f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dd09      	ble.n	8008712 <sulp+0x36>
 80086fe:	051b      	lsls	r3, r3, #20
 8008700:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008704:	2400      	movs	r4, #0
 8008706:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800870a:	4622      	mov	r2, r4
 800870c:	462b      	mov	r3, r5
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	ec41 0b10 	vmov	d0, r0, r1
 8008716:	bd70      	pop	{r4, r5, r6, pc}

08008718 <_strtod_l>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	b09f      	sub	sp, #124	@ 0x7c
 800871e:	460c      	mov	r4, r1
 8008720:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008722:	2200      	movs	r2, #0
 8008724:	921a      	str	r2, [sp, #104]	@ 0x68
 8008726:	9005      	str	r0, [sp, #20]
 8008728:	f04f 0a00 	mov.w	sl, #0
 800872c:	f04f 0b00 	mov.w	fp, #0
 8008730:	460a      	mov	r2, r1
 8008732:	9219      	str	r2, [sp, #100]	@ 0x64
 8008734:	7811      	ldrb	r1, [r2, #0]
 8008736:	292b      	cmp	r1, #43	@ 0x2b
 8008738:	d04a      	beq.n	80087d0 <_strtod_l+0xb8>
 800873a:	d838      	bhi.n	80087ae <_strtod_l+0x96>
 800873c:	290d      	cmp	r1, #13
 800873e:	d832      	bhi.n	80087a6 <_strtod_l+0x8e>
 8008740:	2908      	cmp	r1, #8
 8008742:	d832      	bhi.n	80087aa <_strtod_l+0x92>
 8008744:	2900      	cmp	r1, #0
 8008746:	d03b      	beq.n	80087c0 <_strtod_l+0xa8>
 8008748:	2200      	movs	r2, #0
 800874a:	920e      	str	r2, [sp, #56]	@ 0x38
 800874c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800874e:	782a      	ldrb	r2, [r5, #0]
 8008750:	2a30      	cmp	r2, #48	@ 0x30
 8008752:	f040 80b2 	bne.w	80088ba <_strtod_l+0x1a2>
 8008756:	786a      	ldrb	r2, [r5, #1]
 8008758:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800875c:	2a58      	cmp	r2, #88	@ 0x58
 800875e:	d16e      	bne.n	800883e <_strtod_l+0x126>
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	ab1a      	add	r3, sp, #104	@ 0x68
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	4a8f      	ldr	r2, [pc, #572]	@ (80089a8 <_strtod_l+0x290>)
 800876c:	9805      	ldr	r0, [sp, #20]
 800876e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008770:	a919      	add	r1, sp, #100	@ 0x64
 8008772:	f001 fe7b 	bl	800a46c <__gethex>
 8008776:	f010 060f 	ands.w	r6, r0, #15
 800877a:	4604      	mov	r4, r0
 800877c:	d005      	beq.n	800878a <_strtod_l+0x72>
 800877e:	2e06      	cmp	r6, #6
 8008780:	d128      	bne.n	80087d4 <_strtod_l+0xbc>
 8008782:	3501      	adds	r5, #1
 8008784:	2300      	movs	r3, #0
 8008786:	9519      	str	r5, [sp, #100]	@ 0x64
 8008788:	930e      	str	r3, [sp, #56]	@ 0x38
 800878a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 858e 	bne.w	80092ae <_strtod_l+0xb96>
 8008792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008794:	b1cb      	cbz	r3, 80087ca <_strtod_l+0xb2>
 8008796:	4652      	mov	r2, sl
 8008798:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800879c:	ec43 2b10 	vmov	d0, r2, r3
 80087a0:	b01f      	add	sp, #124	@ 0x7c
 80087a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a6:	2920      	cmp	r1, #32
 80087a8:	d1ce      	bne.n	8008748 <_strtod_l+0x30>
 80087aa:	3201      	adds	r2, #1
 80087ac:	e7c1      	b.n	8008732 <_strtod_l+0x1a>
 80087ae:	292d      	cmp	r1, #45	@ 0x2d
 80087b0:	d1ca      	bne.n	8008748 <_strtod_l+0x30>
 80087b2:	2101      	movs	r1, #1
 80087b4:	910e      	str	r1, [sp, #56]	@ 0x38
 80087b6:	1c51      	adds	r1, r2, #1
 80087b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80087ba:	7852      	ldrb	r2, [r2, #1]
 80087bc:	2a00      	cmp	r2, #0
 80087be:	d1c5      	bne.n	800874c <_strtod_l+0x34>
 80087c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f040 8570 	bne.w	80092aa <_strtod_l+0xb92>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	e7e5      	b.n	800879c <_strtod_l+0x84>
 80087d0:	2100      	movs	r1, #0
 80087d2:	e7ef      	b.n	80087b4 <_strtod_l+0x9c>
 80087d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80087d6:	b13a      	cbz	r2, 80087e8 <_strtod_l+0xd0>
 80087d8:	2135      	movs	r1, #53	@ 0x35
 80087da:	a81c      	add	r0, sp, #112	@ 0x70
 80087dc:	f7ff ff3a 	bl	8008654 <__copybits>
 80087e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087e2:	9805      	ldr	r0, [sp, #20]
 80087e4:	f7ff fb10 	bl	8007e08 <_Bfree>
 80087e8:	3e01      	subs	r6, #1
 80087ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80087ec:	2e04      	cmp	r6, #4
 80087ee:	d806      	bhi.n	80087fe <_strtod_l+0xe6>
 80087f0:	e8df f006 	tbb	[pc, r6]
 80087f4:	201d0314 	.word	0x201d0314
 80087f8:	14          	.byte	0x14
 80087f9:	00          	.byte	0x00
 80087fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80087fe:	05e1      	lsls	r1, r4, #23
 8008800:	bf48      	it	mi
 8008802:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008806:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800880a:	0d1b      	lsrs	r3, r3, #20
 800880c:	051b      	lsls	r3, r3, #20
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1bb      	bne.n	800878a <_strtod_l+0x72>
 8008812:	f7fe fb0f 	bl	8006e34 <__errno>
 8008816:	2322      	movs	r3, #34	@ 0x22
 8008818:	6003      	str	r3, [r0, #0]
 800881a:	e7b6      	b.n	800878a <_strtod_l+0x72>
 800881c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008820:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008824:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008828:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800882c:	e7e7      	b.n	80087fe <_strtod_l+0xe6>
 800882e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80089b0 <_strtod_l+0x298>
 8008832:	e7e4      	b.n	80087fe <_strtod_l+0xe6>
 8008834:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008838:	f04f 3aff 	mov.w	sl, #4294967295
 800883c:	e7df      	b.n	80087fe <_strtod_l+0xe6>
 800883e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	9219      	str	r2, [sp, #100]	@ 0x64
 8008844:	785b      	ldrb	r3, [r3, #1]
 8008846:	2b30      	cmp	r3, #48	@ 0x30
 8008848:	d0f9      	beq.n	800883e <_strtod_l+0x126>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d09d      	beq.n	800878a <_strtod_l+0x72>
 800884e:	2301      	movs	r3, #1
 8008850:	2700      	movs	r7, #0
 8008852:	9308      	str	r3, [sp, #32]
 8008854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008856:	930c      	str	r3, [sp, #48]	@ 0x30
 8008858:	970b      	str	r7, [sp, #44]	@ 0x2c
 800885a:	46b9      	mov	r9, r7
 800885c:	220a      	movs	r2, #10
 800885e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008860:	7805      	ldrb	r5, [r0, #0]
 8008862:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008866:	b2d9      	uxtb	r1, r3
 8008868:	2909      	cmp	r1, #9
 800886a:	d928      	bls.n	80088be <_strtod_l+0x1a6>
 800886c:	494f      	ldr	r1, [pc, #316]	@ (80089ac <_strtod_l+0x294>)
 800886e:	2201      	movs	r2, #1
 8008870:	f001 fd1d 	bl	800a2ae <strncmp>
 8008874:	2800      	cmp	r0, #0
 8008876:	d032      	beq.n	80088de <_strtod_l+0x1c6>
 8008878:	2000      	movs	r0, #0
 800887a:	462a      	mov	r2, r5
 800887c:	900a      	str	r0, [sp, #40]	@ 0x28
 800887e:	464d      	mov	r5, r9
 8008880:	4603      	mov	r3, r0
 8008882:	2a65      	cmp	r2, #101	@ 0x65
 8008884:	d001      	beq.n	800888a <_strtod_l+0x172>
 8008886:	2a45      	cmp	r2, #69	@ 0x45
 8008888:	d114      	bne.n	80088b4 <_strtod_l+0x19c>
 800888a:	b91d      	cbnz	r5, 8008894 <_strtod_l+0x17c>
 800888c:	9a08      	ldr	r2, [sp, #32]
 800888e:	4302      	orrs	r2, r0
 8008890:	d096      	beq.n	80087c0 <_strtod_l+0xa8>
 8008892:	2500      	movs	r5, #0
 8008894:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008896:	1c62      	adds	r2, r4, #1
 8008898:	9219      	str	r2, [sp, #100]	@ 0x64
 800889a:	7862      	ldrb	r2, [r4, #1]
 800889c:	2a2b      	cmp	r2, #43	@ 0x2b
 800889e:	d07a      	beq.n	8008996 <_strtod_l+0x27e>
 80088a0:	2a2d      	cmp	r2, #45	@ 0x2d
 80088a2:	d07e      	beq.n	80089a2 <_strtod_l+0x28a>
 80088a4:	f04f 0c00 	mov.w	ip, #0
 80088a8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80088ac:	2909      	cmp	r1, #9
 80088ae:	f240 8085 	bls.w	80089bc <_strtod_l+0x2a4>
 80088b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80088b4:	f04f 0800 	mov.w	r8, #0
 80088b8:	e0a5      	b.n	8008a06 <_strtod_l+0x2ee>
 80088ba:	2300      	movs	r3, #0
 80088bc:	e7c8      	b.n	8008850 <_strtod_l+0x138>
 80088be:	f1b9 0f08 	cmp.w	r9, #8
 80088c2:	bfd8      	it	le
 80088c4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80088c6:	f100 0001 	add.w	r0, r0, #1
 80088ca:	bfda      	itte	le
 80088cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80088d0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80088d2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80088d6:	f109 0901 	add.w	r9, r9, #1
 80088da:	9019      	str	r0, [sp, #100]	@ 0x64
 80088dc:	e7bf      	b.n	800885e <_strtod_l+0x146>
 80088de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088e0:	1c5a      	adds	r2, r3, #1
 80088e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80088e4:	785a      	ldrb	r2, [r3, #1]
 80088e6:	f1b9 0f00 	cmp.w	r9, #0
 80088ea:	d03b      	beq.n	8008964 <_strtod_l+0x24c>
 80088ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80088ee:	464d      	mov	r5, r9
 80088f0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80088f4:	2b09      	cmp	r3, #9
 80088f6:	d912      	bls.n	800891e <_strtod_l+0x206>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e7c2      	b.n	8008882 <_strtod_l+0x16a>
 80088fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	9219      	str	r2, [sp, #100]	@ 0x64
 8008902:	785a      	ldrb	r2, [r3, #1]
 8008904:	3001      	adds	r0, #1
 8008906:	2a30      	cmp	r2, #48	@ 0x30
 8008908:	d0f8      	beq.n	80088fc <_strtod_l+0x1e4>
 800890a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800890e:	2b08      	cmp	r3, #8
 8008910:	f200 84d2 	bhi.w	80092b8 <_strtod_l+0xba0>
 8008914:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008916:	900a      	str	r0, [sp, #40]	@ 0x28
 8008918:	2000      	movs	r0, #0
 800891a:	930c      	str	r3, [sp, #48]	@ 0x30
 800891c:	4605      	mov	r5, r0
 800891e:	3a30      	subs	r2, #48	@ 0x30
 8008920:	f100 0301 	add.w	r3, r0, #1
 8008924:	d018      	beq.n	8008958 <_strtod_l+0x240>
 8008926:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008928:	4419      	add	r1, r3
 800892a:	910a      	str	r1, [sp, #40]	@ 0x28
 800892c:	462e      	mov	r6, r5
 800892e:	f04f 0e0a 	mov.w	lr, #10
 8008932:	1c71      	adds	r1, r6, #1
 8008934:	eba1 0c05 	sub.w	ip, r1, r5
 8008938:	4563      	cmp	r3, ip
 800893a:	dc15      	bgt.n	8008968 <_strtod_l+0x250>
 800893c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008940:	182b      	adds	r3, r5, r0
 8008942:	2b08      	cmp	r3, #8
 8008944:	f105 0501 	add.w	r5, r5, #1
 8008948:	4405      	add	r5, r0
 800894a:	dc1a      	bgt.n	8008982 <_strtod_l+0x26a>
 800894c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800894e:	230a      	movs	r3, #10
 8008950:	fb03 2301 	mla	r3, r3, r1, r2
 8008954:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008956:	2300      	movs	r3, #0
 8008958:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800895a:	1c51      	adds	r1, r2, #1
 800895c:	9119      	str	r1, [sp, #100]	@ 0x64
 800895e:	7852      	ldrb	r2, [r2, #1]
 8008960:	4618      	mov	r0, r3
 8008962:	e7c5      	b.n	80088f0 <_strtod_l+0x1d8>
 8008964:	4648      	mov	r0, r9
 8008966:	e7ce      	b.n	8008906 <_strtod_l+0x1ee>
 8008968:	2e08      	cmp	r6, #8
 800896a:	dc05      	bgt.n	8008978 <_strtod_l+0x260>
 800896c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800896e:	fb0e f606 	mul.w	r6, lr, r6
 8008972:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008974:	460e      	mov	r6, r1
 8008976:	e7dc      	b.n	8008932 <_strtod_l+0x21a>
 8008978:	2910      	cmp	r1, #16
 800897a:	bfd8      	it	le
 800897c:	fb0e f707 	mulle.w	r7, lr, r7
 8008980:	e7f8      	b.n	8008974 <_strtod_l+0x25c>
 8008982:	2b0f      	cmp	r3, #15
 8008984:	bfdc      	itt	le
 8008986:	230a      	movle	r3, #10
 8008988:	fb03 2707 	mlale	r7, r3, r7, r2
 800898c:	e7e3      	b.n	8008956 <_strtod_l+0x23e>
 800898e:	2300      	movs	r3, #0
 8008990:	930a      	str	r3, [sp, #40]	@ 0x28
 8008992:	2301      	movs	r3, #1
 8008994:	e77a      	b.n	800888c <_strtod_l+0x174>
 8008996:	f04f 0c00 	mov.w	ip, #0
 800899a:	1ca2      	adds	r2, r4, #2
 800899c:	9219      	str	r2, [sp, #100]	@ 0x64
 800899e:	78a2      	ldrb	r2, [r4, #2]
 80089a0:	e782      	b.n	80088a8 <_strtod_l+0x190>
 80089a2:	f04f 0c01 	mov.w	ip, #1
 80089a6:	e7f8      	b.n	800899a <_strtod_l+0x282>
 80089a8:	0800b1dc 	.word	0x0800b1dc
 80089ac:	0800b033 	.word	0x0800b033
 80089b0:	7ff00000 	.word	0x7ff00000
 80089b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089b6:	1c51      	adds	r1, r2, #1
 80089b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80089ba:	7852      	ldrb	r2, [r2, #1]
 80089bc:	2a30      	cmp	r2, #48	@ 0x30
 80089be:	d0f9      	beq.n	80089b4 <_strtod_l+0x29c>
 80089c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80089c4:	2908      	cmp	r1, #8
 80089c6:	f63f af75 	bhi.w	80088b4 <_strtod_l+0x19c>
 80089ca:	3a30      	subs	r2, #48	@ 0x30
 80089cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80089d2:	f04f 080a 	mov.w	r8, #10
 80089d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089d8:	1c56      	adds	r6, r2, #1
 80089da:	9619      	str	r6, [sp, #100]	@ 0x64
 80089dc:	7852      	ldrb	r2, [r2, #1]
 80089de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80089e2:	f1be 0f09 	cmp.w	lr, #9
 80089e6:	d939      	bls.n	8008a5c <_strtod_l+0x344>
 80089e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80089ea:	1a76      	subs	r6, r6, r1
 80089ec:	2e08      	cmp	r6, #8
 80089ee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80089f2:	dc03      	bgt.n	80089fc <_strtod_l+0x2e4>
 80089f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089f6:	4588      	cmp	r8, r1
 80089f8:	bfa8      	it	ge
 80089fa:	4688      	movge	r8, r1
 80089fc:	f1bc 0f00 	cmp.w	ip, #0
 8008a00:	d001      	beq.n	8008a06 <_strtod_l+0x2ee>
 8008a02:	f1c8 0800 	rsb	r8, r8, #0
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	d14e      	bne.n	8008aa8 <_strtod_l+0x390>
 8008a0a:	9908      	ldr	r1, [sp, #32]
 8008a0c:	4308      	orrs	r0, r1
 8008a0e:	f47f aebc 	bne.w	800878a <_strtod_l+0x72>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f47f aed4 	bne.w	80087c0 <_strtod_l+0xa8>
 8008a18:	2a69      	cmp	r2, #105	@ 0x69
 8008a1a:	d028      	beq.n	8008a6e <_strtod_l+0x356>
 8008a1c:	dc25      	bgt.n	8008a6a <_strtod_l+0x352>
 8008a1e:	2a49      	cmp	r2, #73	@ 0x49
 8008a20:	d025      	beq.n	8008a6e <_strtod_l+0x356>
 8008a22:	2a4e      	cmp	r2, #78	@ 0x4e
 8008a24:	f47f aecc 	bne.w	80087c0 <_strtod_l+0xa8>
 8008a28:	499a      	ldr	r1, [pc, #616]	@ (8008c94 <_strtod_l+0x57c>)
 8008a2a:	a819      	add	r0, sp, #100	@ 0x64
 8008a2c:	f001 ff40 	bl	800a8b0 <__match>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	f43f aec5 	beq.w	80087c0 <_strtod_l+0xa8>
 8008a36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b28      	cmp	r3, #40	@ 0x28
 8008a3c:	d12e      	bne.n	8008a9c <_strtod_l+0x384>
 8008a3e:	4996      	ldr	r1, [pc, #600]	@ (8008c98 <_strtod_l+0x580>)
 8008a40:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a42:	a819      	add	r0, sp, #100	@ 0x64
 8008a44:	f001 ff48 	bl	800a8d8 <__hexnan>
 8008a48:	2805      	cmp	r0, #5
 8008a4a:	d127      	bne.n	8008a9c <_strtod_l+0x384>
 8008a4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a4e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008a52:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008a56:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008a5a:	e696      	b.n	800878a <_strtod_l+0x72>
 8008a5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a5e:	fb08 2101 	mla	r1, r8, r1, r2
 8008a62:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008a66:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a68:	e7b5      	b.n	80089d6 <_strtod_l+0x2be>
 8008a6a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008a6c:	e7da      	b.n	8008a24 <_strtod_l+0x30c>
 8008a6e:	498b      	ldr	r1, [pc, #556]	@ (8008c9c <_strtod_l+0x584>)
 8008a70:	a819      	add	r0, sp, #100	@ 0x64
 8008a72:	f001 ff1d 	bl	800a8b0 <__match>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f43f aea2 	beq.w	80087c0 <_strtod_l+0xa8>
 8008a7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a7e:	4988      	ldr	r1, [pc, #544]	@ (8008ca0 <_strtod_l+0x588>)
 8008a80:	3b01      	subs	r3, #1
 8008a82:	a819      	add	r0, sp, #100	@ 0x64
 8008a84:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a86:	f001 ff13 	bl	800a8b0 <__match>
 8008a8a:	b910      	cbnz	r0, 8008a92 <_strtod_l+0x37a>
 8008a8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a8e:	3301      	adds	r3, #1
 8008a90:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a92:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008cb0 <_strtod_l+0x598>
 8008a96:	f04f 0a00 	mov.w	sl, #0
 8008a9a:	e676      	b.n	800878a <_strtod_l+0x72>
 8008a9c:	4881      	ldr	r0, [pc, #516]	@ (8008ca4 <_strtod_l+0x58c>)
 8008a9e:	f001 fc5b 	bl	800a358 <nan>
 8008aa2:	ec5b ab10 	vmov	sl, fp, d0
 8008aa6:	e670      	b.n	800878a <_strtod_l+0x72>
 8008aa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aaa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008aac:	eba8 0303 	sub.w	r3, r8, r3
 8008ab0:	f1b9 0f00 	cmp.w	r9, #0
 8008ab4:	bf08      	it	eq
 8008ab6:	46a9      	moveq	r9, r5
 8008ab8:	2d10      	cmp	r5, #16
 8008aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8008abc:	462c      	mov	r4, r5
 8008abe:	bfa8      	it	ge
 8008ac0:	2410      	movge	r4, #16
 8008ac2:	f7f7 fd1f 	bl	8000504 <__aeabi_ui2d>
 8008ac6:	2d09      	cmp	r5, #9
 8008ac8:	4682      	mov	sl, r0
 8008aca:	468b      	mov	fp, r1
 8008acc:	dc13      	bgt.n	8008af6 <_strtod_l+0x3de>
 8008ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f43f ae5a 	beq.w	800878a <_strtod_l+0x72>
 8008ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad8:	dd78      	ble.n	8008bcc <_strtod_l+0x4b4>
 8008ada:	2b16      	cmp	r3, #22
 8008adc:	dc5f      	bgt.n	8008b9e <_strtod_l+0x486>
 8008ade:	4972      	ldr	r1, [pc, #456]	@ (8008ca8 <_strtod_l+0x590>)
 8008ae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ae8:	4652      	mov	r2, sl
 8008aea:	465b      	mov	r3, fp
 8008aec:	f7f7 fd84 	bl	80005f8 <__aeabi_dmul>
 8008af0:	4682      	mov	sl, r0
 8008af2:	468b      	mov	fp, r1
 8008af4:	e649      	b.n	800878a <_strtod_l+0x72>
 8008af6:	4b6c      	ldr	r3, [pc, #432]	@ (8008ca8 <_strtod_l+0x590>)
 8008af8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008afc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008b00:	f7f7 fd7a 	bl	80005f8 <__aeabi_dmul>
 8008b04:	4682      	mov	sl, r0
 8008b06:	4638      	mov	r0, r7
 8008b08:	468b      	mov	fp, r1
 8008b0a:	f7f7 fcfb 	bl	8000504 <__aeabi_ui2d>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4650      	mov	r0, sl
 8008b14:	4659      	mov	r1, fp
 8008b16:	f7f7 fbb9 	bl	800028c <__adddf3>
 8008b1a:	2d0f      	cmp	r5, #15
 8008b1c:	4682      	mov	sl, r0
 8008b1e:	468b      	mov	fp, r1
 8008b20:	ddd5      	ble.n	8008ace <_strtod_l+0x3b6>
 8008b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b24:	1b2c      	subs	r4, r5, r4
 8008b26:	441c      	add	r4, r3
 8008b28:	2c00      	cmp	r4, #0
 8008b2a:	f340 8093 	ble.w	8008c54 <_strtod_l+0x53c>
 8008b2e:	f014 030f 	ands.w	r3, r4, #15
 8008b32:	d00a      	beq.n	8008b4a <_strtod_l+0x432>
 8008b34:	495c      	ldr	r1, [pc, #368]	@ (8008ca8 <_strtod_l+0x590>)
 8008b36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b3a:	4652      	mov	r2, sl
 8008b3c:	465b      	mov	r3, fp
 8008b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b42:	f7f7 fd59 	bl	80005f8 <__aeabi_dmul>
 8008b46:	4682      	mov	sl, r0
 8008b48:	468b      	mov	fp, r1
 8008b4a:	f034 040f 	bics.w	r4, r4, #15
 8008b4e:	d073      	beq.n	8008c38 <_strtod_l+0x520>
 8008b50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008b54:	dd49      	ble.n	8008bea <_strtod_l+0x4d2>
 8008b56:	2400      	movs	r4, #0
 8008b58:	46a0      	mov	r8, r4
 8008b5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b5c:	46a1      	mov	r9, r4
 8008b5e:	9a05      	ldr	r2, [sp, #20]
 8008b60:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008cb0 <_strtod_l+0x598>
 8008b64:	2322      	movs	r3, #34	@ 0x22
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	f04f 0a00 	mov.w	sl, #0
 8008b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f43f ae0b 	beq.w	800878a <_strtod_l+0x72>
 8008b74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b76:	9805      	ldr	r0, [sp, #20]
 8008b78:	f7ff f946 	bl	8007e08 <_Bfree>
 8008b7c:	9805      	ldr	r0, [sp, #20]
 8008b7e:	4649      	mov	r1, r9
 8008b80:	f7ff f942 	bl	8007e08 <_Bfree>
 8008b84:	9805      	ldr	r0, [sp, #20]
 8008b86:	4641      	mov	r1, r8
 8008b88:	f7ff f93e 	bl	8007e08 <_Bfree>
 8008b8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b8e:	9805      	ldr	r0, [sp, #20]
 8008b90:	f7ff f93a 	bl	8007e08 <_Bfree>
 8008b94:	9805      	ldr	r0, [sp, #20]
 8008b96:	4621      	mov	r1, r4
 8008b98:	f7ff f936 	bl	8007e08 <_Bfree>
 8008b9c:	e5f5      	b.n	800878a <_strtod_l+0x72>
 8008b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ba0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	dbbc      	blt.n	8008b22 <_strtod_l+0x40a>
 8008ba8:	4c3f      	ldr	r4, [pc, #252]	@ (8008ca8 <_strtod_l+0x590>)
 8008baa:	f1c5 050f 	rsb	r5, r5, #15
 8008bae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008bb2:	4652      	mov	r2, sl
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bba:	f7f7 fd1d 	bl	80005f8 <__aeabi_dmul>
 8008bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc0:	1b5d      	subs	r5, r3, r5
 8008bc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008bc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008bca:	e78f      	b.n	8008aec <_strtod_l+0x3d4>
 8008bcc:	3316      	adds	r3, #22
 8008bce:	dba8      	blt.n	8008b22 <_strtod_l+0x40a>
 8008bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bd2:	eba3 0808 	sub.w	r8, r3, r8
 8008bd6:	4b34      	ldr	r3, [pc, #208]	@ (8008ca8 <_strtod_l+0x590>)
 8008bd8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008bdc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008be0:	4650      	mov	r0, sl
 8008be2:	4659      	mov	r1, fp
 8008be4:	f7f7 fe32 	bl	800084c <__aeabi_ddiv>
 8008be8:	e782      	b.n	8008af0 <_strtod_l+0x3d8>
 8008bea:	2300      	movs	r3, #0
 8008bec:	4f2f      	ldr	r7, [pc, #188]	@ (8008cac <_strtod_l+0x594>)
 8008bee:	1124      	asrs	r4, r4, #4
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	461e      	mov	r6, r3
 8008bf6:	2c01      	cmp	r4, #1
 8008bf8:	dc21      	bgt.n	8008c3e <_strtod_l+0x526>
 8008bfa:	b10b      	cbz	r3, 8008c00 <_strtod_l+0x4e8>
 8008bfc:	4682      	mov	sl, r0
 8008bfe:	468b      	mov	fp, r1
 8008c00:	492a      	ldr	r1, [pc, #168]	@ (8008cac <_strtod_l+0x594>)
 8008c02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008c06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008c0a:	4652      	mov	r2, sl
 8008c0c:	465b      	mov	r3, fp
 8008c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c12:	f7f7 fcf1 	bl	80005f8 <__aeabi_dmul>
 8008c16:	4b26      	ldr	r3, [pc, #152]	@ (8008cb0 <_strtod_l+0x598>)
 8008c18:	460a      	mov	r2, r1
 8008c1a:	400b      	ands	r3, r1
 8008c1c:	4925      	ldr	r1, [pc, #148]	@ (8008cb4 <_strtod_l+0x59c>)
 8008c1e:	428b      	cmp	r3, r1
 8008c20:	4682      	mov	sl, r0
 8008c22:	d898      	bhi.n	8008b56 <_strtod_l+0x43e>
 8008c24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008c28:	428b      	cmp	r3, r1
 8008c2a:	bf86      	itte	hi
 8008c2c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008cb8 <_strtod_l+0x5a0>
 8008c30:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9308      	str	r3, [sp, #32]
 8008c3c:	e076      	b.n	8008d2c <_strtod_l+0x614>
 8008c3e:	07e2      	lsls	r2, r4, #31
 8008c40:	d504      	bpl.n	8008c4c <_strtod_l+0x534>
 8008c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c46:	f7f7 fcd7 	bl	80005f8 <__aeabi_dmul>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	3601      	adds	r6, #1
 8008c4e:	1064      	asrs	r4, r4, #1
 8008c50:	3708      	adds	r7, #8
 8008c52:	e7d0      	b.n	8008bf6 <_strtod_l+0x4de>
 8008c54:	d0f0      	beq.n	8008c38 <_strtod_l+0x520>
 8008c56:	4264      	negs	r4, r4
 8008c58:	f014 020f 	ands.w	r2, r4, #15
 8008c5c:	d00a      	beq.n	8008c74 <_strtod_l+0x55c>
 8008c5e:	4b12      	ldr	r3, [pc, #72]	@ (8008ca8 <_strtod_l+0x590>)
 8008c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c64:	4650      	mov	r0, sl
 8008c66:	4659      	mov	r1, fp
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 fdee 	bl	800084c <__aeabi_ddiv>
 8008c70:	4682      	mov	sl, r0
 8008c72:	468b      	mov	fp, r1
 8008c74:	1124      	asrs	r4, r4, #4
 8008c76:	d0df      	beq.n	8008c38 <_strtod_l+0x520>
 8008c78:	2c1f      	cmp	r4, #31
 8008c7a:	dd1f      	ble.n	8008cbc <_strtod_l+0x5a4>
 8008c7c:	2400      	movs	r4, #0
 8008c7e:	46a0      	mov	r8, r4
 8008c80:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c82:	46a1      	mov	r9, r4
 8008c84:	9a05      	ldr	r2, [sp, #20]
 8008c86:	2322      	movs	r3, #34	@ 0x22
 8008c88:	f04f 0a00 	mov.w	sl, #0
 8008c8c:	f04f 0b00 	mov.w	fp, #0
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	e76b      	b.n	8008b6c <_strtod_l+0x454>
 8008c94:	0800ae8d 	.word	0x0800ae8d
 8008c98:	0800b1c8 	.word	0x0800b1c8
 8008c9c:	0800ae85 	.word	0x0800ae85
 8008ca0:	0800af67 	.word	0x0800af67
 8008ca4:	0800af63 	.word	0x0800af63
 8008ca8:	0800b100 	.word	0x0800b100
 8008cac:	0800b0d8 	.word	0x0800b0d8
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	7ca00000 	.word	0x7ca00000
 8008cb8:	7fefffff 	.word	0x7fefffff
 8008cbc:	f014 0310 	ands.w	r3, r4, #16
 8008cc0:	bf18      	it	ne
 8008cc2:	236a      	movne	r3, #106	@ 0x6a
 8008cc4:	4ea9      	ldr	r6, [pc, #676]	@ (8008f6c <_strtod_l+0x854>)
 8008cc6:	9308      	str	r3, [sp, #32]
 8008cc8:	4650      	mov	r0, sl
 8008cca:	4659      	mov	r1, fp
 8008ccc:	2300      	movs	r3, #0
 8008cce:	07e7      	lsls	r7, r4, #31
 8008cd0:	d504      	bpl.n	8008cdc <_strtod_l+0x5c4>
 8008cd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cd6:	f7f7 fc8f 	bl	80005f8 <__aeabi_dmul>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	1064      	asrs	r4, r4, #1
 8008cde:	f106 0608 	add.w	r6, r6, #8
 8008ce2:	d1f4      	bne.n	8008cce <_strtod_l+0x5b6>
 8008ce4:	b10b      	cbz	r3, 8008cea <_strtod_l+0x5d2>
 8008ce6:	4682      	mov	sl, r0
 8008ce8:	468b      	mov	fp, r1
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	b1b3      	cbz	r3, 8008d1c <_strtod_l+0x604>
 8008cee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008cf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	4659      	mov	r1, fp
 8008cfa:	dd0f      	ble.n	8008d1c <_strtod_l+0x604>
 8008cfc:	2b1f      	cmp	r3, #31
 8008cfe:	dd56      	ble.n	8008dae <_strtod_l+0x696>
 8008d00:	2b34      	cmp	r3, #52	@ 0x34
 8008d02:	bfde      	ittt	le
 8008d04:	f04f 33ff 	movle.w	r3, #4294967295
 8008d08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008d0c:	4093      	lslle	r3, r2
 8008d0e:	f04f 0a00 	mov.w	sl, #0
 8008d12:	bfcc      	ite	gt
 8008d14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008d18:	ea03 0b01 	andle.w	fp, r3, r1
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	4650      	mov	r0, sl
 8008d22:	4659      	mov	r1, fp
 8008d24:	f7f7 fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d1a7      	bne.n	8008c7c <_strtod_l+0x564>
 8008d2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008d32:	9805      	ldr	r0, [sp, #20]
 8008d34:	462b      	mov	r3, r5
 8008d36:	464a      	mov	r2, r9
 8008d38:	f7ff f8ce 	bl	8007ed8 <__s2b>
 8008d3c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f43f af09 	beq.w	8008b56 <_strtod_l+0x43e>
 8008d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d48:	2a00      	cmp	r2, #0
 8008d4a:	eba3 0308 	sub.w	r3, r3, r8
 8008d4e:	bfa8      	it	ge
 8008d50:	2300      	movge	r3, #0
 8008d52:	9312      	str	r3, [sp, #72]	@ 0x48
 8008d54:	2400      	movs	r4, #0
 8008d56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d5a:	9316      	str	r3, [sp, #88]	@ 0x58
 8008d5c:	46a0      	mov	r8, r4
 8008d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d60:	9805      	ldr	r0, [sp, #20]
 8008d62:	6859      	ldr	r1, [r3, #4]
 8008d64:	f7ff f810 	bl	8007d88 <_Balloc>
 8008d68:	4681      	mov	r9, r0
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	f43f aef7 	beq.w	8008b5e <_strtod_l+0x446>
 8008d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d72:	691a      	ldr	r2, [r3, #16]
 8008d74:	3202      	adds	r2, #2
 8008d76:	f103 010c 	add.w	r1, r3, #12
 8008d7a:	0092      	lsls	r2, r2, #2
 8008d7c:	300c      	adds	r0, #12
 8008d7e:	f001 fadb 	bl	800a338 <memcpy>
 8008d82:	ec4b ab10 	vmov	d0, sl, fp
 8008d86:	9805      	ldr	r0, [sp, #20]
 8008d88:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d8a:	a91b      	add	r1, sp, #108	@ 0x6c
 8008d8c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008d90:	f7ff fbd6 	bl	8008540 <__d2b>
 8008d94:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d96:	2800      	cmp	r0, #0
 8008d98:	f43f aee1 	beq.w	8008b5e <_strtod_l+0x446>
 8008d9c:	9805      	ldr	r0, [sp, #20]
 8008d9e:	2101      	movs	r1, #1
 8008da0:	f7ff f930 	bl	8008004 <__i2b>
 8008da4:	4680      	mov	r8, r0
 8008da6:	b948      	cbnz	r0, 8008dbc <_strtod_l+0x6a4>
 8008da8:	f04f 0800 	mov.w	r8, #0
 8008dac:	e6d7      	b.n	8008b5e <_strtod_l+0x446>
 8008dae:	f04f 32ff 	mov.w	r2, #4294967295
 8008db2:	fa02 f303 	lsl.w	r3, r2, r3
 8008db6:	ea03 0a0a 	and.w	sl, r3, sl
 8008dba:	e7af      	b.n	8008d1c <_strtod_l+0x604>
 8008dbc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008dbe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008dc0:	2d00      	cmp	r5, #0
 8008dc2:	bfab      	itete	ge
 8008dc4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008dc6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008dc8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008dca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008dcc:	bfac      	ite	ge
 8008dce:	18ef      	addge	r7, r5, r3
 8008dd0:	1b5e      	sublt	r6, r3, r5
 8008dd2:	9b08      	ldr	r3, [sp, #32]
 8008dd4:	1aed      	subs	r5, r5, r3
 8008dd6:	4415      	add	r5, r2
 8008dd8:	4b65      	ldr	r3, [pc, #404]	@ (8008f70 <_strtod_l+0x858>)
 8008dda:	3d01      	subs	r5, #1
 8008ddc:	429d      	cmp	r5, r3
 8008dde:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008de2:	da50      	bge.n	8008e86 <_strtod_l+0x76e>
 8008de4:	1b5b      	subs	r3, r3, r5
 8008de6:	2b1f      	cmp	r3, #31
 8008de8:	eba2 0203 	sub.w	r2, r2, r3
 8008dec:	f04f 0101 	mov.w	r1, #1
 8008df0:	dc3d      	bgt.n	8008e6e <_strtod_l+0x756>
 8008df2:	fa01 f303 	lsl.w	r3, r1, r3
 8008df6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8008dfc:	18bd      	adds	r5, r7, r2
 8008dfe:	9b08      	ldr	r3, [sp, #32]
 8008e00:	42af      	cmp	r7, r5
 8008e02:	4416      	add	r6, r2
 8008e04:	441e      	add	r6, r3
 8008e06:	463b      	mov	r3, r7
 8008e08:	bfa8      	it	ge
 8008e0a:	462b      	movge	r3, r5
 8008e0c:	42b3      	cmp	r3, r6
 8008e0e:	bfa8      	it	ge
 8008e10:	4633      	movge	r3, r6
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	bfc2      	ittt	gt
 8008e16:	1aed      	subgt	r5, r5, r3
 8008e18:	1af6      	subgt	r6, r6, r3
 8008e1a:	1aff      	subgt	r7, r7, r3
 8008e1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dd16      	ble.n	8008e50 <_strtod_l+0x738>
 8008e22:	4641      	mov	r1, r8
 8008e24:	9805      	ldr	r0, [sp, #20]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f7ff f9a4 	bl	8008174 <__pow5mult>
 8008e2c:	4680      	mov	r8, r0
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d0ba      	beq.n	8008da8 <_strtod_l+0x690>
 8008e32:	4601      	mov	r1, r0
 8008e34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e36:	9805      	ldr	r0, [sp, #20]
 8008e38:	f7ff f8fa 	bl	8008030 <__multiply>
 8008e3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	f43f ae8d 	beq.w	8008b5e <_strtod_l+0x446>
 8008e44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e46:	9805      	ldr	r0, [sp, #20]
 8008e48:	f7fe ffde 	bl	8007e08 <_Bfree>
 8008e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e50:	2d00      	cmp	r5, #0
 8008e52:	dc1d      	bgt.n	8008e90 <_strtod_l+0x778>
 8008e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	dd23      	ble.n	8008ea2 <_strtod_l+0x78a>
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e5e:	9805      	ldr	r0, [sp, #20]
 8008e60:	f7ff f988 	bl	8008174 <__pow5mult>
 8008e64:	4681      	mov	r9, r0
 8008e66:	b9e0      	cbnz	r0, 8008ea2 <_strtod_l+0x78a>
 8008e68:	f04f 0900 	mov.w	r9, #0
 8008e6c:	e677      	b.n	8008b5e <_strtod_l+0x446>
 8008e6e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008e72:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008e76:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008e7a:	35e2      	adds	r5, #226	@ 0xe2
 8008e7c:	fa01 f305 	lsl.w	r3, r1, r5
 8008e80:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e82:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008e84:	e7ba      	b.n	8008dfc <_strtod_l+0x6e4>
 8008e86:	2300      	movs	r3, #0
 8008e88:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e8e:	e7b5      	b.n	8008dfc <_strtod_l+0x6e4>
 8008e90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e92:	9805      	ldr	r0, [sp, #20]
 8008e94:	462a      	mov	r2, r5
 8008e96:	f7ff f9c7 	bl	8008228 <__lshift>
 8008e9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d1d9      	bne.n	8008e54 <_strtod_l+0x73c>
 8008ea0:	e65d      	b.n	8008b5e <_strtod_l+0x446>
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	dd07      	ble.n	8008eb6 <_strtod_l+0x79e>
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	9805      	ldr	r0, [sp, #20]
 8008eaa:	4632      	mov	r2, r6
 8008eac:	f7ff f9bc 	bl	8008228 <__lshift>
 8008eb0:	4681      	mov	r9, r0
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d0d8      	beq.n	8008e68 <_strtod_l+0x750>
 8008eb6:	2f00      	cmp	r7, #0
 8008eb8:	dd08      	ble.n	8008ecc <_strtod_l+0x7b4>
 8008eba:	4641      	mov	r1, r8
 8008ebc:	9805      	ldr	r0, [sp, #20]
 8008ebe:	463a      	mov	r2, r7
 8008ec0:	f7ff f9b2 	bl	8008228 <__lshift>
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	f43f ae49 	beq.w	8008b5e <_strtod_l+0x446>
 8008ecc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ece:	9805      	ldr	r0, [sp, #20]
 8008ed0:	464a      	mov	r2, r9
 8008ed2:	f7ff fa31 	bl	8008338 <__mdiff>
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	f43f ae40 	beq.w	8008b5e <_strtod_l+0x446>
 8008ede:	68c3      	ldr	r3, [r0, #12]
 8008ee0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60c3      	str	r3, [r0, #12]
 8008ee6:	4641      	mov	r1, r8
 8008ee8:	f7ff fa0a 	bl	8008300 <__mcmp>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	da45      	bge.n	8008f7c <_strtod_l+0x864>
 8008ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ef2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ef6:	d16b      	bne.n	8008fd0 <_strtod_l+0x8b8>
 8008ef8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d167      	bne.n	8008fd0 <_strtod_l+0x8b8>
 8008f00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f04:	0d1b      	lsrs	r3, r3, #20
 8008f06:	051b      	lsls	r3, r3, #20
 8008f08:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008f0c:	d960      	bls.n	8008fd0 <_strtod_l+0x8b8>
 8008f0e:	6963      	ldr	r3, [r4, #20]
 8008f10:	b913      	cbnz	r3, 8008f18 <_strtod_l+0x800>
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	dd5b      	ble.n	8008fd0 <_strtod_l+0x8b8>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	9805      	ldr	r0, [sp, #20]
 8008f1e:	f7ff f983 	bl	8008228 <__lshift>
 8008f22:	4641      	mov	r1, r8
 8008f24:	4604      	mov	r4, r0
 8008f26:	f7ff f9eb 	bl	8008300 <__mcmp>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	dd50      	ble.n	8008fd0 <_strtod_l+0x8b8>
 8008f2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f32:	9a08      	ldr	r2, [sp, #32]
 8008f34:	0d1b      	lsrs	r3, r3, #20
 8008f36:	051b      	lsls	r3, r3, #20
 8008f38:	2a00      	cmp	r2, #0
 8008f3a:	d06a      	beq.n	8009012 <_strtod_l+0x8fa>
 8008f3c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008f40:	d867      	bhi.n	8009012 <_strtod_l+0x8fa>
 8008f42:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008f46:	f67f ae9d 	bls.w	8008c84 <_strtod_l+0x56c>
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f74 <_strtod_l+0x85c>)
 8008f4c:	4650      	mov	r0, sl
 8008f4e:	4659      	mov	r1, fp
 8008f50:	2200      	movs	r2, #0
 8008f52:	f7f7 fb51 	bl	80005f8 <__aeabi_dmul>
 8008f56:	4b08      	ldr	r3, [pc, #32]	@ (8008f78 <_strtod_l+0x860>)
 8008f58:	400b      	ands	r3, r1
 8008f5a:	4682      	mov	sl, r0
 8008f5c:	468b      	mov	fp, r1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f47f ae08 	bne.w	8008b74 <_strtod_l+0x45c>
 8008f64:	9a05      	ldr	r2, [sp, #20]
 8008f66:	2322      	movs	r3, #34	@ 0x22
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	e603      	b.n	8008b74 <_strtod_l+0x45c>
 8008f6c:	0800b1f0 	.word	0x0800b1f0
 8008f70:	fffffc02 	.word	0xfffffc02
 8008f74:	39500000 	.word	0x39500000
 8008f78:	7ff00000 	.word	0x7ff00000
 8008f7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008f80:	d165      	bne.n	800904e <_strtod_l+0x936>
 8008f82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f88:	b35a      	cbz	r2, 8008fe2 <_strtod_l+0x8ca>
 8008f8a:	4a9f      	ldr	r2, [pc, #636]	@ (8009208 <_strtod_l+0xaf0>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d12b      	bne.n	8008fe8 <_strtod_l+0x8d0>
 8008f90:	9b08      	ldr	r3, [sp, #32]
 8008f92:	4651      	mov	r1, sl
 8008f94:	b303      	cbz	r3, 8008fd8 <_strtod_l+0x8c0>
 8008f96:	4b9d      	ldr	r3, [pc, #628]	@ (800920c <_strtod_l+0xaf4>)
 8008f98:	465a      	mov	r2, fp
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa4:	d81b      	bhi.n	8008fde <_strtod_l+0x8c6>
 8008fa6:	0d1b      	lsrs	r3, r3, #20
 8008fa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008fac:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb0:	4299      	cmp	r1, r3
 8008fb2:	d119      	bne.n	8008fe8 <_strtod_l+0x8d0>
 8008fb4:	4b96      	ldr	r3, [pc, #600]	@ (8009210 <_strtod_l+0xaf8>)
 8008fb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d102      	bne.n	8008fc2 <_strtod_l+0x8aa>
 8008fbc:	3101      	adds	r1, #1
 8008fbe:	f43f adce 	beq.w	8008b5e <_strtod_l+0x446>
 8008fc2:	4b92      	ldr	r3, [pc, #584]	@ (800920c <_strtod_l+0xaf4>)
 8008fc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fc6:	401a      	ands	r2, r3
 8008fc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008fcc:	f04f 0a00 	mov.w	sl, #0
 8008fd0:	9b08      	ldr	r3, [sp, #32]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1b9      	bne.n	8008f4a <_strtod_l+0x832>
 8008fd6:	e5cd      	b.n	8008b74 <_strtod_l+0x45c>
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fdc:	e7e8      	b.n	8008fb0 <_strtod_l+0x898>
 8008fde:	4613      	mov	r3, r2
 8008fe0:	e7e6      	b.n	8008fb0 <_strtod_l+0x898>
 8008fe2:	ea53 030a 	orrs.w	r3, r3, sl
 8008fe6:	d0a2      	beq.n	8008f2e <_strtod_l+0x816>
 8008fe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fea:	b1db      	cbz	r3, 8009024 <_strtod_l+0x90c>
 8008fec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fee:	4213      	tst	r3, r2
 8008ff0:	d0ee      	beq.n	8008fd0 <_strtod_l+0x8b8>
 8008ff2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ff4:	9a08      	ldr	r2, [sp, #32]
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	4659      	mov	r1, fp
 8008ffa:	b1bb      	cbz	r3, 800902c <_strtod_l+0x914>
 8008ffc:	f7ff fb6e 	bl	80086dc <sulp>
 8009000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009004:	ec53 2b10 	vmov	r2, r3, d0
 8009008:	f7f7 f940 	bl	800028c <__adddf3>
 800900c:	4682      	mov	sl, r0
 800900e:	468b      	mov	fp, r1
 8009010:	e7de      	b.n	8008fd0 <_strtod_l+0x8b8>
 8009012:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009016:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800901a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800901e:	f04f 3aff 	mov.w	sl, #4294967295
 8009022:	e7d5      	b.n	8008fd0 <_strtod_l+0x8b8>
 8009024:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009026:	ea13 0f0a 	tst.w	r3, sl
 800902a:	e7e1      	b.n	8008ff0 <_strtod_l+0x8d8>
 800902c:	f7ff fb56 	bl	80086dc <sulp>
 8009030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009034:	ec53 2b10 	vmov	r2, r3, d0
 8009038:	f7f7 f926 	bl	8000288 <__aeabi_dsub>
 800903c:	2200      	movs	r2, #0
 800903e:	2300      	movs	r3, #0
 8009040:	4682      	mov	sl, r0
 8009042:	468b      	mov	fp, r1
 8009044:	f7f7 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009048:	2800      	cmp	r0, #0
 800904a:	d0c1      	beq.n	8008fd0 <_strtod_l+0x8b8>
 800904c:	e61a      	b.n	8008c84 <_strtod_l+0x56c>
 800904e:	4641      	mov	r1, r8
 8009050:	4620      	mov	r0, r4
 8009052:	f7ff facd 	bl	80085f0 <__ratio>
 8009056:	ec57 6b10 	vmov	r6, r7, d0
 800905a:	2200      	movs	r2, #0
 800905c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009060:	4630      	mov	r0, r6
 8009062:	4639      	mov	r1, r7
 8009064:	f7f7 fd44 	bl	8000af0 <__aeabi_dcmple>
 8009068:	2800      	cmp	r0, #0
 800906a:	d06f      	beq.n	800914c <_strtod_l+0xa34>
 800906c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d17a      	bne.n	8009168 <_strtod_l+0xa50>
 8009072:	f1ba 0f00 	cmp.w	sl, #0
 8009076:	d158      	bne.n	800912a <_strtod_l+0xa12>
 8009078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800907a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800907e:	2b00      	cmp	r3, #0
 8009080:	d15a      	bne.n	8009138 <_strtod_l+0xa20>
 8009082:	4b64      	ldr	r3, [pc, #400]	@ (8009214 <_strtod_l+0xafc>)
 8009084:	2200      	movs	r2, #0
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 fd27 	bl	8000adc <__aeabi_dcmplt>
 800908e:	2800      	cmp	r0, #0
 8009090:	d159      	bne.n	8009146 <_strtod_l+0xa2e>
 8009092:	4630      	mov	r0, r6
 8009094:	4639      	mov	r1, r7
 8009096:	4b60      	ldr	r3, [pc, #384]	@ (8009218 <_strtod_l+0xb00>)
 8009098:	2200      	movs	r2, #0
 800909a:	f7f7 faad 	bl	80005f8 <__aeabi_dmul>
 800909e:	4606      	mov	r6, r0
 80090a0:	460f      	mov	r7, r1
 80090a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80090a6:	9606      	str	r6, [sp, #24]
 80090a8:	9307      	str	r3, [sp, #28]
 80090aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090ae:	4d57      	ldr	r5, [pc, #348]	@ (800920c <_strtod_l+0xaf4>)
 80090b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80090b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090b6:	401d      	ands	r5, r3
 80090b8:	4b58      	ldr	r3, [pc, #352]	@ (800921c <_strtod_l+0xb04>)
 80090ba:	429d      	cmp	r5, r3
 80090bc:	f040 80b2 	bne.w	8009224 <_strtod_l+0xb0c>
 80090c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80090c6:	ec4b ab10 	vmov	d0, sl, fp
 80090ca:	f7ff f9c9 	bl	8008460 <__ulp>
 80090ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090d2:	ec51 0b10 	vmov	r0, r1, d0
 80090d6:	f7f7 fa8f 	bl	80005f8 <__aeabi_dmul>
 80090da:	4652      	mov	r2, sl
 80090dc:	465b      	mov	r3, fp
 80090de:	f7f7 f8d5 	bl	800028c <__adddf3>
 80090e2:	460b      	mov	r3, r1
 80090e4:	4949      	ldr	r1, [pc, #292]	@ (800920c <_strtod_l+0xaf4>)
 80090e6:	4a4e      	ldr	r2, [pc, #312]	@ (8009220 <_strtod_l+0xb08>)
 80090e8:	4019      	ands	r1, r3
 80090ea:	4291      	cmp	r1, r2
 80090ec:	4682      	mov	sl, r0
 80090ee:	d942      	bls.n	8009176 <_strtod_l+0xa5e>
 80090f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090f2:	4b47      	ldr	r3, [pc, #284]	@ (8009210 <_strtod_l+0xaf8>)
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d103      	bne.n	8009100 <_strtod_l+0x9e8>
 80090f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090fa:	3301      	adds	r3, #1
 80090fc:	f43f ad2f 	beq.w	8008b5e <_strtod_l+0x446>
 8009100:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009210 <_strtod_l+0xaf8>
 8009104:	f04f 3aff 	mov.w	sl, #4294967295
 8009108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800910a:	9805      	ldr	r0, [sp, #20]
 800910c:	f7fe fe7c 	bl	8007e08 <_Bfree>
 8009110:	9805      	ldr	r0, [sp, #20]
 8009112:	4649      	mov	r1, r9
 8009114:	f7fe fe78 	bl	8007e08 <_Bfree>
 8009118:	9805      	ldr	r0, [sp, #20]
 800911a:	4641      	mov	r1, r8
 800911c:	f7fe fe74 	bl	8007e08 <_Bfree>
 8009120:	9805      	ldr	r0, [sp, #20]
 8009122:	4621      	mov	r1, r4
 8009124:	f7fe fe70 	bl	8007e08 <_Bfree>
 8009128:	e619      	b.n	8008d5e <_strtod_l+0x646>
 800912a:	f1ba 0f01 	cmp.w	sl, #1
 800912e:	d103      	bne.n	8009138 <_strtod_l+0xa20>
 8009130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009132:	2b00      	cmp	r3, #0
 8009134:	f43f ada6 	beq.w	8008c84 <_strtod_l+0x56c>
 8009138:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80091e8 <_strtod_l+0xad0>
 800913c:	4f35      	ldr	r7, [pc, #212]	@ (8009214 <_strtod_l+0xafc>)
 800913e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009142:	2600      	movs	r6, #0
 8009144:	e7b1      	b.n	80090aa <_strtod_l+0x992>
 8009146:	4f34      	ldr	r7, [pc, #208]	@ (8009218 <_strtod_l+0xb00>)
 8009148:	2600      	movs	r6, #0
 800914a:	e7aa      	b.n	80090a2 <_strtod_l+0x98a>
 800914c:	4b32      	ldr	r3, [pc, #200]	@ (8009218 <_strtod_l+0xb00>)
 800914e:	4630      	mov	r0, r6
 8009150:	4639      	mov	r1, r7
 8009152:	2200      	movs	r2, #0
 8009154:	f7f7 fa50 	bl	80005f8 <__aeabi_dmul>
 8009158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d09f      	beq.n	80090a2 <_strtod_l+0x98a>
 8009162:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009166:	e7a0      	b.n	80090aa <_strtod_l+0x992>
 8009168:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80091f0 <_strtod_l+0xad8>
 800916c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009170:	ec57 6b17 	vmov	r6, r7, d7
 8009174:	e799      	b.n	80090aa <_strtod_l+0x992>
 8009176:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800917a:	9b08      	ldr	r3, [sp, #32]
 800917c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1c1      	bne.n	8009108 <_strtod_l+0x9f0>
 8009184:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009188:	0d1b      	lsrs	r3, r3, #20
 800918a:	051b      	lsls	r3, r3, #20
 800918c:	429d      	cmp	r5, r3
 800918e:	d1bb      	bne.n	8009108 <_strtod_l+0x9f0>
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f7 fd90 	bl	8000cb8 <__aeabi_d2lz>
 8009198:	f7f7 fa00 	bl	800059c <__aeabi_l2d>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 f870 	bl	8000288 <__aeabi_dsub>
 80091a8:	460b      	mov	r3, r1
 80091aa:	4602      	mov	r2, r0
 80091ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80091b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80091b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091b6:	ea46 060a 	orr.w	r6, r6, sl
 80091ba:	431e      	orrs	r6, r3
 80091bc:	d06f      	beq.n	800929e <_strtod_l+0xb86>
 80091be:	a30e      	add	r3, pc, #56	@ (adr r3, 80091f8 <_strtod_l+0xae0>)
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f7f7 fc8a 	bl	8000adc <__aeabi_dcmplt>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	f47f acd3 	bne.w	8008b74 <_strtod_l+0x45c>
 80091ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8009200 <_strtod_l+0xae8>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091d8:	f7f7 fc9e 	bl	8000b18 <__aeabi_dcmpgt>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d093      	beq.n	8009108 <_strtod_l+0x9f0>
 80091e0:	e4c8      	b.n	8008b74 <_strtod_l+0x45c>
 80091e2:	bf00      	nop
 80091e4:	f3af 8000 	nop.w
 80091e8:	00000000 	.word	0x00000000
 80091ec:	bff00000 	.word	0xbff00000
 80091f0:	00000000 	.word	0x00000000
 80091f4:	3ff00000 	.word	0x3ff00000
 80091f8:	94a03595 	.word	0x94a03595
 80091fc:	3fdfffff 	.word	0x3fdfffff
 8009200:	35afe535 	.word	0x35afe535
 8009204:	3fe00000 	.word	0x3fe00000
 8009208:	000fffff 	.word	0x000fffff
 800920c:	7ff00000 	.word	0x7ff00000
 8009210:	7fefffff 	.word	0x7fefffff
 8009214:	3ff00000 	.word	0x3ff00000
 8009218:	3fe00000 	.word	0x3fe00000
 800921c:	7fe00000 	.word	0x7fe00000
 8009220:	7c9fffff 	.word	0x7c9fffff
 8009224:	9b08      	ldr	r3, [sp, #32]
 8009226:	b323      	cbz	r3, 8009272 <_strtod_l+0xb5a>
 8009228:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800922c:	d821      	bhi.n	8009272 <_strtod_l+0xb5a>
 800922e:	a328      	add	r3, pc, #160	@ (adr r3, 80092d0 <_strtod_l+0xbb8>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	4630      	mov	r0, r6
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 fc5a 	bl	8000af0 <__aeabi_dcmple>
 800923c:	b1a0      	cbz	r0, 8009268 <_strtod_l+0xb50>
 800923e:	4639      	mov	r1, r7
 8009240:	4630      	mov	r0, r6
 8009242:	f7f7 fcb1 	bl	8000ba8 <__aeabi_d2uiz>
 8009246:	2801      	cmp	r0, #1
 8009248:	bf38      	it	cc
 800924a:	2001      	movcc	r0, #1
 800924c:	f7f7 f95a 	bl	8000504 <__aeabi_ui2d>
 8009250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	b9fb      	cbnz	r3, 8009298 <_strtod_l+0xb80>
 8009258:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800925c:	9014      	str	r0, [sp, #80]	@ 0x50
 800925e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009260:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009264:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009268:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800926a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800926e:	1b5b      	subs	r3, r3, r5
 8009270:	9311      	str	r3, [sp, #68]	@ 0x44
 8009272:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009276:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800927a:	f7ff f8f1 	bl	8008460 <__ulp>
 800927e:	4650      	mov	r0, sl
 8009280:	ec53 2b10 	vmov	r2, r3, d0
 8009284:	4659      	mov	r1, fp
 8009286:	f7f7 f9b7 	bl	80005f8 <__aeabi_dmul>
 800928a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800928e:	f7f6 fffd 	bl	800028c <__adddf3>
 8009292:	4682      	mov	sl, r0
 8009294:	468b      	mov	fp, r1
 8009296:	e770      	b.n	800917a <_strtod_l+0xa62>
 8009298:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800929c:	e7e0      	b.n	8009260 <_strtod_l+0xb48>
 800929e:	a30e      	add	r3, pc, #56	@ (adr r3, 80092d8 <_strtod_l+0xbc0>)
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	f7f7 fc1a 	bl	8000adc <__aeabi_dcmplt>
 80092a8:	e798      	b.n	80091dc <_strtod_l+0xac4>
 80092aa:	2300      	movs	r3, #0
 80092ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80092ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80092b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	f7ff ba6d 	b.w	8008792 <_strtod_l+0x7a>
 80092b8:	2a65      	cmp	r2, #101	@ 0x65
 80092ba:	f43f ab68 	beq.w	800898e <_strtod_l+0x276>
 80092be:	2a45      	cmp	r2, #69	@ 0x45
 80092c0:	f43f ab65 	beq.w	800898e <_strtod_l+0x276>
 80092c4:	2301      	movs	r3, #1
 80092c6:	f7ff bba0 	b.w	8008a0a <_strtod_l+0x2f2>
 80092ca:	bf00      	nop
 80092cc:	f3af 8000 	nop.w
 80092d0:	ffc00000 	.word	0xffc00000
 80092d4:	41dfffff 	.word	0x41dfffff
 80092d8:	94a03595 	.word	0x94a03595
 80092dc:	3fcfffff 	.word	0x3fcfffff

080092e0 <_strtod_r>:
 80092e0:	4b01      	ldr	r3, [pc, #4]	@ (80092e8 <_strtod_r+0x8>)
 80092e2:	f7ff ba19 	b.w	8008718 <_strtod_l>
 80092e6:	bf00      	nop
 80092e8:	20000068 	.word	0x20000068

080092ec <_strtol_l.isra.0>:
 80092ec:	2b24      	cmp	r3, #36	@ 0x24
 80092ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f2:	4686      	mov	lr, r0
 80092f4:	4690      	mov	r8, r2
 80092f6:	d801      	bhi.n	80092fc <_strtol_l.isra.0+0x10>
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d106      	bne.n	800930a <_strtol_l.isra.0+0x1e>
 80092fc:	f7fd fd9a 	bl	8006e34 <__errno>
 8009300:	2316      	movs	r3, #22
 8009302:	6003      	str	r3, [r0, #0]
 8009304:	2000      	movs	r0, #0
 8009306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800930a:	4834      	ldr	r0, [pc, #208]	@ (80093dc <_strtol_l.isra.0+0xf0>)
 800930c:	460d      	mov	r5, r1
 800930e:	462a      	mov	r2, r5
 8009310:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009314:	5d06      	ldrb	r6, [r0, r4]
 8009316:	f016 0608 	ands.w	r6, r6, #8
 800931a:	d1f8      	bne.n	800930e <_strtol_l.isra.0+0x22>
 800931c:	2c2d      	cmp	r4, #45	@ 0x2d
 800931e:	d110      	bne.n	8009342 <_strtol_l.isra.0+0x56>
 8009320:	782c      	ldrb	r4, [r5, #0]
 8009322:	2601      	movs	r6, #1
 8009324:	1c95      	adds	r5, r2, #2
 8009326:	f033 0210 	bics.w	r2, r3, #16
 800932a:	d115      	bne.n	8009358 <_strtol_l.isra.0+0x6c>
 800932c:	2c30      	cmp	r4, #48	@ 0x30
 800932e:	d10d      	bne.n	800934c <_strtol_l.isra.0+0x60>
 8009330:	782a      	ldrb	r2, [r5, #0]
 8009332:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009336:	2a58      	cmp	r2, #88	@ 0x58
 8009338:	d108      	bne.n	800934c <_strtol_l.isra.0+0x60>
 800933a:	786c      	ldrb	r4, [r5, #1]
 800933c:	3502      	adds	r5, #2
 800933e:	2310      	movs	r3, #16
 8009340:	e00a      	b.n	8009358 <_strtol_l.isra.0+0x6c>
 8009342:	2c2b      	cmp	r4, #43	@ 0x2b
 8009344:	bf04      	itt	eq
 8009346:	782c      	ldrbeq	r4, [r5, #0]
 8009348:	1c95      	addeq	r5, r2, #2
 800934a:	e7ec      	b.n	8009326 <_strtol_l.isra.0+0x3a>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1f6      	bne.n	800933e <_strtol_l.isra.0+0x52>
 8009350:	2c30      	cmp	r4, #48	@ 0x30
 8009352:	bf14      	ite	ne
 8009354:	230a      	movne	r3, #10
 8009356:	2308      	moveq	r3, #8
 8009358:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800935c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009360:	2200      	movs	r2, #0
 8009362:	fbbc f9f3 	udiv	r9, ip, r3
 8009366:	4610      	mov	r0, r2
 8009368:	fb03 ca19 	mls	sl, r3, r9, ip
 800936c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009370:	2f09      	cmp	r7, #9
 8009372:	d80f      	bhi.n	8009394 <_strtol_l.isra.0+0xa8>
 8009374:	463c      	mov	r4, r7
 8009376:	42a3      	cmp	r3, r4
 8009378:	dd1b      	ble.n	80093b2 <_strtol_l.isra.0+0xc6>
 800937a:	1c57      	adds	r7, r2, #1
 800937c:	d007      	beq.n	800938e <_strtol_l.isra.0+0xa2>
 800937e:	4581      	cmp	r9, r0
 8009380:	d314      	bcc.n	80093ac <_strtol_l.isra.0+0xc0>
 8009382:	d101      	bne.n	8009388 <_strtol_l.isra.0+0x9c>
 8009384:	45a2      	cmp	sl, r4
 8009386:	db11      	blt.n	80093ac <_strtol_l.isra.0+0xc0>
 8009388:	fb00 4003 	mla	r0, r0, r3, r4
 800938c:	2201      	movs	r2, #1
 800938e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009392:	e7eb      	b.n	800936c <_strtol_l.isra.0+0x80>
 8009394:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009398:	2f19      	cmp	r7, #25
 800939a:	d801      	bhi.n	80093a0 <_strtol_l.isra.0+0xb4>
 800939c:	3c37      	subs	r4, #55	@ 0x37
 800939e:	e7ea      	b.n	8009376 <_strtol_l.isra.0+0x8a>
 80093a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80093a4:	2f19      	cmp	r7, #25
 80093a6:	d804      	bhi.n	80093b2 <_strtol_l.isra.0+0xc6>
 80093a8:	3c57      	subs	r4, #87	@ 0x57
 80093aa:	e7e4      	b.n	8009376 <_strtol_l.isra.0+0x8a>
 80093ac:	f04f 32ff 	mov.w	r2, #4294967295
 80093b0:	e7ed      	b.n	800938e <_strtol_l.isra.0+0xa2>
 80093b2:	1c53      	adds	r3, r2, #1
 80093b4:	d108      	bne.n	80093c8 <_strtol_l.isra.0+0xdc>
 80093b6:	2322      	movs	r3, #34	@ 0x22
 80093b8:	f8ce 3000 	str.w	r3, [lr]
 80093bc:	4660      	mov	r0, ip
 80093be:	f1b8 0f00 	cmp.w	r8, #0
 80093c2:	d0a0      	beq.n	8009306 <_strtol_l.isra.0+0x1a>
 80093c4:	1e69      	subs	r1, r5, #1
 80093c6:	e006      	b.n	80093d6 <_strtol_l.isra.0+0xea>
 80093c8:	b106      	cbz	r6, 80093cc <_strtol_l.isra.0+0xe0>
 80093ca:	4240      	negs	r0, r0
 80093cc:	f1b8 0f00 	cmp.w	r8, #0
 80093d0:	d099      	beq.n	8009306 <_strtol_l.isra.0+0x1a>
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	d1f6      	bne.n	80093c4 <_strtol_l.isra.0+0xd8>
 80093d6:	f8c8 1000 	str.w	r1, [r8]
 80093da:	e794      	b.n	8009306 <_strtol_l.isra.0+0x1a>
 80093dc:	0800b219 	.word	0x0800b219

080093e0 <_strtol_r>:
 80093e0:	f7ff bf84 	b.w	80092ec <_strtol_l.isra.0>

080093e4 <__ssputs_r>:
 80093e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	688e      	ldr	r6, [r1, #8]
 80093ea:	461f      	mov	r7, r3
 80093ec:	42be      	cmp	r6, r7
 80093ee:	680b      	ldr	r3, [r1, #0]
 80093f0:	4682      	mov	sl, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	4690      	mov	r8, r2
 80093f6:	d82d      	bhi.n	8009454 <__ssputs_r+0x70>
 80093f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009400:	d026      	beq.n	8009450 <__ssputs_r+0x6c>
 8009402:	6965      	ldr	r5, [r4, #20]
 8009404:	6909      	ldr	r1, [r1, #16]
 8009406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800940a:	eba3 0901 	sub.w	r9, r3, r1
 800940e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009412:	1c7b      	adds	r3, r7, #1
 8009414:	444b      	add	r3, r9
 8009416:	106d      	asrs	r5, r5, #1
 8009418:	429d      	cmp	r5, r3
 800941a:	bf38      	it	cc
 800941c:	461d      	movcc	r5, r3
 800941e:	0553      	lsls	r3, r2, #21
 8009420:	d527      	bpl.n	8009472 <__ssputs_r+0x8e>
 8009422:	4629      	mov	r1, r5
 8009424:	f7fe fc24 	bl	8007c70 <_malloc_r>
 8009428:	4606      	mov	r6, r0
 800942a:	b360      	cbz	r0, 8009486 <__ssputs_r+0xa2>
 800942c:	6921      	ldr	r1, [r4, #16]
 800942e:	464a      	mov	r2, r9
 8009430:	f000 ff82 	bl	800a338 <memcpy>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800943a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800943e:	81a3      	strh	r3, [r4, #12]
 8009440:	6126      	str	r6, [r4, #16]
 8009442:	6165      	str	r5, [r4, #20]
 8009444:	444e      	add	r6, r9
 8009446:	eba5 0509 	sub.w	r5, r5, r9
 800944a:	6026      	str	r6, [r4, #0]
 800944c:	60a5      	str	r5, [r4, #8]
 800944e:	463e      	mov	r6, r7
 8009450:	42be      	cmp	r6, r7
 8009452:	d900      	bls.n	8009456 <__ssputs_r+0x72>
 8009454:	463e      	mov	r6, r7
 8009456:	6820      	ldr	r0, [r4, #0]
 8009458:	4632      	mov	r2, r6
 800945a:	4641      	mov	r1, r8
 800945c:	f000 ff0d 	bl	800a27a <memmove>
 8009460:	68a3      	ldr	r3, [r4, #8]
 8009462:	1b9b      	subs	r3, r3, r6
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	4433      	add	r3, r6
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	2000      	movs	r0, #0
 800946e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009472:	462a      	mov	r2, r5
 8009474:	f001 fadd 	bl	800aa32 <_realloc_r>
 8009478:	4606      	mov	r6, r0
 800947a:	2800      	cmp	r0, #0
 800947c:	d1e0      	bne.n	8009440 <__ssputs_r+0x5c>
 800947e:	6921      	ldr	r1, [r4, #16]
 8009480:	4650      	mov	r0, sl
 8009482:	f7fe fb81 	bl	8007b88 <_free_r>
 8009486:	230c      	movs	r3, #12
 8009488:	f8ca 3000 	str.w	r3, [sl]
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	f04f 30ff 	mov.w	r0, #4294967295
 8009498:	e7e9      	b.n	800946e <__ssputs_r+0x8a>
	...

0800949c <_svfiprintf_r>:
 800949c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	4698      	mov	r8, r3
 80094a2:	898b      	ldrh	r3, [r1, #12]
 80094a4:	061b      	lsls	r3, r3, #24
 80094a6:	b09d      	sub	sp, #116	@ 0x74
 80094a8:	4607      	mov	r7, r0
 80094aa:	460d      	mov	r5, r1
 80094ac:	4614      	mov	r4, r2
 80094ae:	d510      	bpl.n	80094d2 <_svfiprintf_r+0x36>
 80094b0:	690b      	ldr	r3, [r1, #16]
 80094b2:	b973      	cbnz	r3, 80094d2 <_svfiprintf_r+0x36>
 80094b4:	2140      	movs	r1, #64	@ 0x40
 80094b6:	f7fe fbdb 	bl	8007c70 <_malloc_r>
 80094ba:	6028      	str	r0, [r5, #0]
 80094bc:	6128      	str	r0, [r5, #16]
 80094be:	b930      	cbnz	r0, 80094ce <_svfiprintf_r+0x32>
 80094c0:	230c      	movs	r3, #12
 80094c2:	603b      	str	r3, [r7, #0]
 80094c4:	f04f 30ff 	mov.w	r0, #4294967295
 80094c8:	b01d      	add	sp, #116	@ 0x74
 80094ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ce:	2340      	movs	r3, #64	@ 0x40
 80094d0:	616b      	str	r3, [r5, #20]
 80094d2:	2300      	movs	r3, #0
 80094d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d6:	2320      	movs	r3, #32
 80094d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80094e0:	2330      	movs	r3, #48	@ 0x30
 80094e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009680 <_svfiprintf_r+0x1e4>
 80094e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094ea:	f04f 0901 	mov.w	r9, #1
 80094ee:	4623      	mov	r3, r4
 80094f0:	469a      	mov	sl, r3
 80094f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094f6:	b10a      	cbz	r2, 80094fc <_svfiprintf_r+0x60>
 80094f8:	2a25      	cmp	r2, #37	@ 0x25
 80094fa:	d1f9      	bne.n	80094f0 <_svfiprintf_r+0x54>
 80094fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009500:	d00b      	beq.n	800951a <_svfiprintf_r+0x7e>
 8009502:	465b      	mov	r3, fp
 8009504:	4622      	mov	r2, r4
 8009506:	4629      	mov	r1, r5
 8009508:	4638      	mov	r0, r7
 800950a:	f7ff ff6b 	bl	80093e4 <__ssputs_r>
 800950e:	3001      	adds	r0, #1
 8009510:	f000 80a7 	beq.w	8009662 <_svfiprintf_r+0x1c6>
 8009514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009516:	445a      	add	r2, fp
 8009518:	9209      	str	r2, [sp, #36]	@ 0x24
 800951a:	f89a 3000 	ldrb.w	r3, [sl]
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 809f 	beq.w	8009662 <_svfiprintf_r+0x1c6>
 8009524:	2300      	movs	r3, #0
 8009526:	f04f 32ff 	mov.w	r2, #4294967295
 800952a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800952e:	f10a 0a01 	add.w	sl, sl, #1
 8009532:	9304      	str	r3, [sp, #16]
 8009534:	9307      	str	r3, [sp, #28]
 8009536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800953a:	931a      	str	r3, [sp, #104]	@ 0x68
 800953c:	4654      	mov	r4, sl
 800953e:	2205      	movs	r2, #5
 8009540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009544:	484e      	ldr	r0, [pc, #312]	@ (8009680 <_svfiprintf_r+0x1e4>)
 8009546:	f7f6 fe43 	bl	80001d0 <memchr>
 800954a:	9a04      	ldr	r2, [sp, #16]
 800954c:	b9d8      	cbnz	r0, 8009586 <_svfiprintf_r+0xea>
 800954e:	06d0      	lsls	r0, r2, #27
 8009550:	bf44      	itt	mi
 8009552:	2320      	movmi	r3, #32
 8009554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009558:	0711      	lsls	r1, r2, #28
 800955a:	bf44      	itt	mi
 800955c:	232b      	movmi	r3, #43	@ 0x2b
 800955e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009562:	f89a 3000 	ldrb.w	r3, [sl]
 8009566:	2b2a      	cmp	r3, #42	@ 0x2a
 8009568:	d015      	beq.n	8009596 <_svfiprintf_r+0xfa>
 800956a:	9a07      	ldr	r2, [sp, #28]
 800956c:	4654      	mov	r4, sl
 800956e:	2000      	movs	r0, #0
 8009570:	f04f 0c0a 	mov.w	ip, #10
 8009574:	4621      	mov	r1, r4
 8009576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800957a:	3b30      	subs	r3, #48	@ 0x30
 800957c:	2b09      	cmp	r3, #9
 800957e:	d94b      	bls.n	8009618 <_svfiprintf_r+0x17c>
 8009580:	b1b0      	cbz	r0, 80095b0 <_svfiprintf_r+0x114>
 8009582:	9207      	str	r2, [sp, #28]
 8009584:	e014      	b.n	80095b0 <_svfiprintf_r+0x114>
 8009586:	eba0 0308 	sub.w	r3, r0, r8
 800958a:	fa09 f303 	lsl.w	r3, r9, r3
 800958e:	4313      	orrs	r3, r2
 8009590:	9304      	str	r3, [sp, #16]
 8009592:	46a2      	mov	sl, r4
 8009594:	e7d2      	b.n	800953c <_svfiprintf_r+0xa0>
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	1d19      	adds	r1, r3, #4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	9103      	str	r1, [sp, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	bfbb      	ittet	lt
 80095a2:	425b      	neglt	r3, r3
 80095a4:	f042 0202 	orrlt.w	r2, r2, #2
 80095a8:	9307      	strge	r3, [sp, #28]
 80095aa:	9307      	strlt	r3, [sp, #28]
 80095ac:	bfb8      	it	lt
 80095ae:	9204      	strlt	r2, [sp, #16]
 80095b0:	7823      	ldrb	r3, [r4, #0]
 80095b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80095b4:	d10a      	bne.n	80095cc <_svfiprintf_r+0x130>
 80095b6:	7863      	ldrb	r3, [r4, #1]
 80095b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80095ba:	d132      	bne.n	8009622 <_svfiprintf_r+0x186>
 80095bc:	9b03      	ldr	r3, [sp, #12]
 80095be:	1d1a      	adds	r2, r3, #4
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	9203      	str	r2, [sp, #12]
 80095c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095c8:	3402      	adds	r4, #2
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009690 <_svfiprintf_r+0x1f4>
 80095d0:	7821      	ldrb	r1, [r4, #0]
 80095d2:	2203      	movs	r2, #3
 80095d4:	4650      	mov	r0, sl
 80095d6:	f7f6 fdfb 	bl	80001d0 <memchr>
 80095da:	b138      	cbz	r0, 80095ec <_svfiprintf_r+0x150>
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	eba0 000a 	sub.w	r0, r0, sl
 80095e2:	2240      	movs	r2, #64	@ 0x40
 80095e4:	4082      	lsls	r2, r0
 80095e6:	4313      	orrs	r3, r2
 80095e8:	3401      	adds	r4, #1
 80095ea:	9304      	str	r3, [sp, #16]
 80095ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f0:	4824      	ldr	r0, [pc, #144]	@ (8009684 <_svfiprintf_r+0x1e8>)
 80095f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095f6:	2206      	movs	r2, #6
 80095f8:	f7f6 fdea 	bl	80001d0 <memchr>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d036      	beq.n	800966e <_svfiprintf_r+0x1d2>
 8009600:	4b21      	ldr	r3, [pc, #132]	@ (8009688 <_svfiprintf_r+0x1ec>)
 8009602:	bb1b      	cbnz	r3, 800964c <_svfiprintf_r+0x1b0>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	3307      	adds	r3, #7
 8009608:	f023 0307 	bic.w	r3, r3, #7
 800960c:	3308      	adds	r3, #8
 800960e:	9303      	str	r3, [sp, #12]
 8009610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009612:	4433      	add	r3, r6
 8009614:	9309      	str	r3, [sp, #36]	@ 0x24
 8009616:	e76a      	b.n	80094ee <_svfiprintf_r+0x52>
 8009618:	fb0c 3202 	mla	r2, ip, r2, r3
 800961c:	460c      	mov	r4, r1
 800961e:	2001      	movs	r0, #1
 8009620:	e7a8      	b.n	8009574 <_svfiprintf_r+0xd8>
 8009622:	2300      	movs	r3, #0
 8009624:	3401      	adds	r4, #1
 8009626:	9305      	str	r3, [sp, #20]
 8009628:	4619      	mov	r1, r3
 800962a:	f04f 0c0a 	mov.w	ip, #10
 800962e:	4620      	mov	r0, r4
 8009630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009634:	3a30      	subs	r2, #48	@ 0x30
 8009636:	2a09      	cmp	r2, #9
 8009638:	d903      	bls.n	8009642 <_svfiprintf_r+0x1a6>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0c6      	beq.n	80095cc <_svfiprintf_r+0x130>
 800963e:	9105      	str	r1, [sp, #20]
 8009640:	e7c4      	b.n	80095cc <_svfiprintf_r+0x130>
 8009642:	fb0c 2101 	mla	r1, ip, r1, r2
 8009646:	4604      	mov	r4, r0
 8009648:	2301      	movs	r3, #1
 800964a:	e7f0      	b.n	800962e <_svfiprintf_r+0x192>
 800964c:	ab03      	add	r3, sp, #12
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	462a      	mov	r2, r5
 8009652:	4b0e      	ldr	r3, [pc, #56]	@ (800968c <_svfiprintf_r+0x1f0>)
 8009654:	a904      	add	r1, sp, #16
 8009656:	4638      	mov	r0, r7
 8009658:	f7fc fb20 	bl	8005c9c <_printf_float>
 800965c:	1c42      	adds	r2, r0, #1
 800965e:	4606      	mov	r6, r0
 8009660:	d1d6      	bne.n	8009610 <_svfiprintf_r+0x174>
 8009662:	89ab      	ldrh	r3, [r5, #12]
 8009664:	065b      	lsls	r3, r3, #25
 8009666:	f53f af2d 	bmi.w	80094c4 <_svfiprintf_r+0x28>
 800966a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800966c:	e72c      	b.n	80094c8 <_svfiprintf_r+0x2c>
 800966e:	ab03      	add	r3, sp, #12
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	462a      	mov	r2, r5
 8009674:	4b05      	ldr	r3, [pc, #20]	@ (800968c <_svfiprintf_r+0x1f0>)
 8009676:	a904      	add	r1, sp, #16
 8009678:	4638      	mov	r0, r7
 800967a:	f7fc fda7 	bl	80061cc <_printf_i>
 800967e:	e7ed      	b.n	800965c <_svfiprintf_r+0x1c0>
 8009680:	0800b035 	.word	0x0800b035
 8009684:	0800b03f 	.word	0x0800b03f
 8009688:	08005c9d 	.word	0x08005c9d
 800968c:	080093e5 	.word	0x080093e5
 8009690:	0800b03b 	.word	0x0800b03b

08009694 <_sungetc_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	1c4b      	adds	r3, r1, #1
 8009698:	4614      	mov	r4, r2
 800969a:	d103      	bne.n	80096a4 <_sungetc_r+0x10>
 800969c:	f04f 35ff 	mov.w	r5, #4294967295
 80096a0:	4628      	mov	r0, r5
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	8993      	ldrh	r3, [r2, #12]
 80096a6:	f023 0320 	bic.w	r3, r3, #32
 80096aa:	8193      	strh	r3, [r2, #12]
 80096ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096ae:	6852      	ldr	r2, [r2, #4]
 80096b0:	b2cd      	uxtb	r5, r1
 80096b2:	b18b      	cbz	r3, 80096d8 <_sungetc_r+0x44>
 80096b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80096b6:	4293      	cmp	r3, r2
 80096b8:	dd08      	ble.n	80096cc <_sungetc_r+0x38>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	1e5a      	subs	r2, r3, #1
 80096be:	6022      	str	r2, [r4, #0]
 80096c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80096c4:	6863      	ldr	r3, [r4, #4]
 80096c6:	3301      	adds	r3, #1
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	e7e9      	b.n	80096a0 <_sungetc_r+0xc>
 80096cc:	4621      	mov	r1, r4
 80096ce:	f000 fd9a 	bl	800a206 <__submore>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d0f1      	beq.n	80096ba <_sungetc_r+0x26>
 80096d6:	e7e1      	b.n	800969c <_sungetc_r+0x8>
 80096d8:	6921      	ldr	r1, [r4, #16]
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	b151      	cbz	r1, 80096f4 <_sungetc_r+0x60>
 80096de:	4299      	cmp	r1, r3
 80096e0:	d208      	bcs.n	80096f4 <_sungetc_r+0x60>
 80096e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80096e6:	42a9      	cmp	r1, r5
 80096e8:	d104      	bne.n	80096f4 <_sungetc_r+0x60>
 80096ea:	3b01      	subs	r3, #1
 80096ec:	3201      	adds	r2, #1
 80096ee:	6023      	str	r3, [r4, #0]
 80096f0:	6062      	str	r2, [r4, #4]
 80096f2:	e7d5      	b.n	80096a0 <_sungetc_r+0xc>
 80096f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80096f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80096fe:	2303      	movs	r3, #3
 8009700:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009702:	4623      	mov	r3, r4
 8009704:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	2301      	movs	r3, #1
 800970c:	e7dc      	b.n	80096c8 <_sungetc_r+0x34>

0800970e <__ssrefill_r>:
 800970e:	b510      	push	{r4, lr}
 8009710:	460c      	mov	r4, r1
 8009712:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009714:	b169      	cbz	r1, 8009732 <__ssrefill_r+0x24>
 8009716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800971a:	4299      	cmp	r1, r3
 800971c:	d001      	beq.n	8009722 <__ssrefill_r+0x14>
 800971e:	f7fe fa33 	bl	8007b88 <_free_r>
 8009722:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009724:	6063      	str	r3, [r4, #4]
 8009726:	2000      	movs	r0, #0
 8009728:	6360      	str	r0, [r4, #52]	@ 0x34
 800972a:	b113      	cbz	r3, 8009732 <__ssrefill_r+0x24>
 800972c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	bd10      	pop	{r4, pc}
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	2300      	movs	r3, #0
 8009738:	6063      	str	r3, [r4, #4]
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	f043 0320 	orr.w	r3, r3, #32
 8009740:	81a3      	strh	r3, [r4, #12]
 8009742:	f04f 30ff 	mov.w	r0, #4294967295
 8009746:	e7f3      	b.n	8009730 <__ssrefill_r+0x22>

08009748 <__ssvfiscanf_r>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	460c      	mov	r4, r1
 800974e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8009752:	2100      	movs	r1, #0
 8009754:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009758:	49a6      	ldr	r1, [pc, #664]	@ (80099f4 <__ssvfiscanf_r+0x2ac>)
 800975a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800975c:	f10d 0804 	add.w	r8, sp, #4
 8009760:	49a5      	ldr	r1, [pc, #660]	@ (80099f8 <__ssvfiscanf_r+0x2b0>)
 8009762:	4fa6      	ldr	r7, [pc, #664]	@ (80099fc <__ssvfiscanf_r+0x2b4>)
 8009764:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009768:	4606      	mov	r6, r0
 800976a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	f892 9000 	ldrb.w	r9, [r2]
 8009772:	f1b9 0f00 	cmp.w	r9, #0
 8009776:	f000 8158 	beq.w	8009a2a <__ssvfiscanf_r+0x2e2>
 800977a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800977e:	f013 0308 	ands.w	r3, r3, #8
 8009782:	f102 0501 	add.w	r5, r2, #1
 8009786:	d019      	beq.n	80097bc <__ssvfiscanf_r+0x74>
 8009788:	6863      	ldr	r3, [r4, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	dd0f      	ble.n	80097ae <__ssvfiscanf_r+0x66>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	5cba      	ldrb	r2, [r7, r2]
 8009794:	0712      	lsls	r2, r2, #28
 8009796:	d401      	bmi.n	800979c <__ssvfiscanf_r+0x54>
 8009798:	462a      	mov	r2, r5
 800979a:	e7e8      	b.n	800976e <__ssvfiscanf_r+0x26>
 800979c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800979e:	3201      	adds	r2, #1
 80097a0:	9245      	str	r2, [sp, #276]	@ 0x114
 80097a2:	6862      	ldr	r2, [r4, #4]
 80097a4:	3301      	adds	r3, #1
 80097a6:	3a01      	subs	r2, #1
 80097a8:	6062      	str	r2, [r4, #4]
 80097aa:	6023      	str	r3, [r4, #0]
 80097ac:	e7ec      	b.n	8009788 <__ssvfiscanf_r+0x40>
 80097ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80097b0:	4621      	mov	r1, r4
 80097b2:	4630      	mov	r0, r6
 80097b4:	4798      	blx	r3
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d0e9      	beq.n	800978e <__ssvfiscanf_r+0x46>
 80097ba:	e7ed      	b.n	8009798 <__ssvfiscanf_r+0x50>
 80097bc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80097c0:	f040 8085 	bne.w	80098ce <__ssvfiscanf_r+0x186>
 80097c4:	9341      	str	r3, [sp, #260]	@ 0x104
 80097c6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80097c8:	7853      	ldrb	r3, [r2, #1]
 80097ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80097cc:	bf02      	ittt	eq
 80097ce:	2310      	moveq	r3, #16
 80097d0:	1c95      	addeq	r5, r2, #2
 80097d2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80097d4:	220a      	movs	r2, #10
 80097d6:	46aa      	mov	sl, r5
 80097d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80097dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80097e0:	2b09      	cmp	r3, #9
 80097e2:	d91e      	bls.n	8009822 <__ssvfiscanf_r+0xda>
 80097e4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8009a00 <__ssvfiscanf_r+0x2b8>
 80097e8:	2203      	movs	r2, #3
 80097ea:	4658      	mov	r0, fp
 80097ec:	f7f6 fcf0 	bl	80001d0 <memchr>
 80097f0:	b138      	cbz	r0, 8009802 <__ssvfiscanf_r+0xba>
 80097f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80097f4:	eba0 000b 	sub.w	r0, r0, fp
 80097f8:	2301      	movs	r3, #1
 80097fa:	4083      	lsls	r3, r0
 80097fc:	4313      	orrs	r3, r2
 80097fe:	9341      	str	r3, [sp, #260]	@ 0x104
 8009800:	4655      	mov	r5, sl
 8009802:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009806:	2b78      	cmp	r3, #120	@ 0x78
 8009808:	d806      	bhi.n	8009818 <__ssvfiscanf_r+0xd0>
 800980a:	2b57      	cmp	r3, #87	@ 0x57
 800980c:	d810      	bhi.n	8009830 <__ssvfiscanf_r+0xe8>
 800980e:	2b25      	cmp	r3, #37	@ 0x25
 8009810:	d05d      	beq.n	80098ce <__ssvfiscanf_r+0x186>
 8009812:	d857      	bhi.n	80098c4 <__ssvfiscanf_r+0x17c>
 8009814:	2b00      	cmp	r3, #0
 8009816:	d075      	beq.n	8009904 <__ssvfiscanf_r+0x1bc>
 8009818:	2303      	movs	r3, #3
 800981a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800981c:	230a      	movs	r3, #10
 800981e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009820:	e088      	b.n	8009934 <__ssvfiscanf_r+0x1ec>
 8009822:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009824:	fb02 1103 	mla	r1, r2, r3, r1
 8009828:	3930      	subs	r1, #48	@ 0x30
 800982a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800982c:	4655      	mov	r5, sl
 800982e:	e7d2      	b.n	80097d6 <__ssvfiscanf_r+0x8e>
 8009830:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009834:	2a20      	cmp	r2, #32
 8009836:	d8ef      	bhi.n	8009818 <__ssvfiscanf_r+0xd0>
 8009838:	a101      	add	r1, pc, #4	@ (adr r1, 8009840 <__ssvfiscanf_r+0xf8>)
 800983a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800983e:	bf00      	nop
 8009840:	08009913 	.word	0x08009913
 8009844:	08009819 	.word	0x08009819
 8009848:	08009819 	.word	0x08009819
 800984c:	0800996d 	.word	0x0800996d
 8009850:	08009819 	.word	0x08009819
 8009854:	08009819 	.word	0x08009819
 8009858:	08009819 	.word	0x08009819
 800985c:	08009819 	.word	0x08009819
 8009860:	08009819 	.word	0x08009819
 8009864:	08009819 	.word	0x08009819
 8009868:	08009819 	.word	0x08009819
 800986c:	08009983 	.word	0x08009983
 8009870:	08009969 	.word	0x08009969
 8009874:	080098cb 	.word	0x080098cb
 8009878:	080098cb 	.word	0x080098cb
 800987c:	080098cb 	.word	0x080098cb
 8009880:	08009819 	.word	0x08009819
 8009884:	08009925 	.word	0x08009925
 8009888:	08009819 	.word	0x08009819
 800988c:	08009819 	.word	0x08009819
 8009890:	08009819 	.word	0x08009819
 8009894:	08009819 	.word	0x08009819
 8009898:	08009993 	.word	0x08009993
 800989c:	0800992d 	.word	0x0800992d
 80098a0:	0800990b 	.word	0x0800990b
 80098a4:	08009819 	.word	0x08009819
 80098a8:	08009819 	.word	0x08009819
 80098ac:	0800998f 	.word	0x0800998f
 80098b0:	08009819 	.word	0x08009819
 80098b4:	08009969 	.word	0x08009969
 80098b8:	08009819 	.word	0x08009819
 80098bc:	08009819 	.word	0x08009819
 80098c0:	08009913 	.word	0x08009913
 80098c4:	3b45      	subs	r3, #69	@ 0x45
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d8a6      	bhi.n	8009818 <__ssvfiscanf_r+0xd0>
 80098ca:	2305      	movs	r3, #5
 80098cc:	e031      	b.n	8009932 <__ssvfiscanf_r+0x1ea>
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	dd0d      	ble.n	80098f0 <__ssvfiscanf_r+0x1a8>
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	781a      	ldrb	r2, [r3, #0]
 80098d8:	454a      	cmp	r2, r9
 80098da:	f040 80a6 	bne.w	8009a2a <__ssvfiscanf_r+0x2e2>
 80098de:	3301      	adds	r3, #1
 80098e0:	6862      	ldr	r2, [r4, #4]
 80098e2:	6023      	str	r3, [r4, #0]
 80098e4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80098e6:	3a01      	subs	r2, #1
 80098e8:	3301      	adds	r3, #1
 80098ea:	6062      	str	r2, [r4, #4]
 80098ec:	9345      	str	r3, [sp, #276]	@ 0x114
 80098ee:	e753      	b.n	8009798 <__ssvfiscanf_r+0x50>
 80098f0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80098f2:	4621      	mov	r1, r4
 80098f4:	4630      	mov	r0, r6
 80098f6:	4798      	blx	r3
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d0eb      	beq.n	80098d4 <__ssvfiscanf_r+0x18c>
 80098fc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80098fe:	2800      	cmp	r0, #0
 8009900:	f040 808b 	bne.w	8009a1a <__ssvfiscanf_r+0x2d2>
 8009904:	f04f 30ff 	mov.w	r0, #4294967295
 8009908:	e08b      	b.n	8009a22 <__ssvfiscanf_r+0x2da>
 800990a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800990c:	f042 0220 	orr.w	r2, r2, #32
 8009910:	9241      	str	r2, [sp, #260]	@ 0x104
 8009912:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009918:	9241      	str	r2, [sp, #260]	@ 0x104
 800991a:	2210      	movs	r2, #16
 800991c:	2b6e      	cmp	r3, #110	@ 0x6e
 800991e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009920:	d902      	bls.n	8009928 <__ssvfiscanf_r+0x1e0>
 8009922:	e005      	b.n	8009930 <__ssvfiscanf_r+0x1e8>
 8009924:	2300      	movs	r3, #0
 8009926:	9342      	str	r3, [sp, #264]	@ 0x108
 8009928:	2303      	movs	r3, #3
 800992a:	e002      	b.n	8009932 <__ssvfiscanf_r+0x1ea>
 800992c:	2308      	movs	r3, #8
 800992e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009930:	2304      	movs	r3, #4
 8009932:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009934:	6863      	ldr	r3, [r4, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	dd39      	ble.n	80099ae <__ssvfiscanf_r+0x266>
 800993a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800993c:	0659      	lsls	r1, r3, #25
 800993e:	d404      	bmi.n	800994a <__ssvfiscanf_r+0x202>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	5cba      	ldrb	r2, [r7, r2]
 8009946:	0712      	lsls	r2, r2, #28
 8009948:	d438      	bmi.n	80099bc <__ssvfiscanf_r+0x274>
 800994a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800994c:	2b02      	cmp	r3, #2
 800994e:	dc47      	bgt.n	80099e0 <__ssvfiscanf_r+0x298>
 8009950:	466b      	mov	r3, sp
 8009952:	4622      	mov	r2, r4
 8009954:	a941      	add	r1, sp, #260	@ 0x104
 8009956:	4630      	mov	r0, r6
 8009958:	f000 f9ae 	bl	8009cb8 <_scanf_chars>
 800995c:	2801      	cmp	r0, #1
 800995e:	d064      	beq.n	8009a2a <__ssvfiscanf_r+0x2e2>
 8009960:	2802      	cmp	r0, #2
 8009962:	f47f af19 	bne.w	8009798 <__ssvfiscanf_r+0x50>
 8009966:	e7c9      	b.n	80098fc <__ssvfiscanf_r+0x1b4>
 8009968:	220a      	movs	r2, #10
 800996a:	e7d7      	b.n	800991c <__ssvfiscanf_r+0x1d4>
 800996c:	4629      	mov	r1, r5
 800996e:	4640      	mov	r0, r8
 8009970:	f000 fc10 	bl	800a194 <__sccl>
 8009974:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800997a:	9341      	str	r3, [sp, #260]	@ 0x104
 800997c:	4605      	mov	r5, r0
 800997e:	2301      	movs	r3, #1
 8009980:	e7d7      	b.n	8009932 <__ssvfiscanf_r+0x1ea>
 8009982:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009988:	9341      	str	r3, [sp, #260]	@ 0x104
 800998a:	2300      	movs	r3, #0
 800998c:	e7d1      	b.n	8009932 <__ssvfiscanf_r+0x1ea>
 800998e:	2302      	movs	r3, #2
 8009990:	e7cf      	b.n	8009932 <__ssvfiscanf_r+0x1ea>
 8009992:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009994:	06c3      	lsls	r3, r0, #27
 8009996:	f53f aeff 	bmi.w	8009798 <__ssvfiscanf_r+0x50>
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800999e:	1d19      	adds	r1, r3, #4
 80099a0:	9100      	str	r1, [sp, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	07c0      	lsls	r0, r0, #31
 80099a6:	bf4c      	ite	mi
 80099a8:	801a      	strhmi	r2, [r3, #0]
 80099aa:	601a      	strpl	r2, [r3, #0]
 80099ac:	e6f4      	b.n	8009798 <__ssvfiscanf_r+0x50>
 80099ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80099b0:	4621      	mov	r1, r4
 80099b2:	4630      	mov	r0, r6
 80099b4:	4798      	blx	r3
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d0bf      	beq.n	800993a <__ssvfiscanf_r+0x1f2>
 80099ba:	e79f      	b.n	80098fc <__ssvfiscanf_r+0x1b4>
 80099bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80099be:	3201      	adds	r2, #1
 80099c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80099c2:	6862      	ldr	r2, [r4, #4]
 80099c4:	3a01      	subs	r2, #1
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	6062      	str	r2, [r4, #4]
 80099ca:	dd02      	ble.n	80099d2 <__ssvfiscanf_r+0x28a>
 80099cc:	3301      	adds	r3, #1
 80099ce:	6023      	str	r3, [r4, #0]
 80099d0:	e7b6      	b.n	8009940 <__ssvfiscanf_r+0x1f8>
 80099d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80099d4:	4621      	mov	r1, r4
 80099d6:	4630      	mov	r0, r6
 80099d8:	4798      	blx	r3
 80099da:	2800      	cmp	r0, #0
 80099dc:	d0b0      	beq.n	8009940 <__ssvfiscanf_r+0x1f8>
 80099de:	e78d      	b.n	80098fc <__ssvfiscanf_r+0x1b4>
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	dc0f      	bgt.n	8009a04 <__ssvfiscanf_r+0x2bc>
 80099e4:	466b      	mov	r3, sp
 80099e6:	4622      	mov	r2, r4
 80099e8:	a941      	add	r1, sp, #260	@ 0x104
 80099ea:	4630      	mov	r0, r6
 80099ec:	f000 f9be 	bl	8009d6c <_scanf_i>
 80099f0:	e7b4      	b.n	800995c <__ssvfiscanf_r+0x214>
 80099f2:	bf00      	nop
 80099f4:	08009695 	.word	0x08009695
 80099f8:	0800970f 	.word	0x0800970f
 80099fc:	0800b219 	.word	0x0800b219
 8009a00:	0800b03b 	.word	0x0800b03b
 8009a04:	4b0a      	ldr	r3, [pc, #40]	@ (8009a30 <__ssvfiscanf_r+0x2e8>)
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f43f aec6 	beq.w	8009798 <__ssvfiscanf_r+0x50>
 8009a0c:	466b      	mov	r3, sp
 8009a0e:	4622      	mov	r2, r4
 8009a10:	a941      	add	r1, sp, #260	@ 0x104
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7fc fcf8 	bl	8006408 <_scanf_float>
 8009a18:	e7a0      	b.n	800995c <__ssvfiscanf_r+0x214>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	065b      	lsls	r3, r3, #25
 8009a1e:	f53f af71 	bmi.w	8009904 <__ssvfiscanf_r+0x1bc>
 8009a22:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8009a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009a2c:	e7f9      	b.n	8009a22 <__ssvfiscanf_r+0x2da>
 8009a2e:	bf00      	nop
 8009a30:	08006409 	.word	0x08006409

08009a34 <__sfputc_r>:
 8009a34:	6893      	ldr	r3, [r2, #8]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	b410      	push	{r4}
 8009a3c:	6093      	str	r3, [r2, #8]
 8009a3e:	da08      	bge.n	8009a52 <__sfputc_r+0x1e>
 8009a40:	6994      	ldr	r4, [r2, #24]
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	db01      	blt.n	8009a4a <__sfputc_r+0x16>
 8009a46:	290a      	cmp	r1, #10
 8009a48:	d103      	bne.n	8009a52 <__sfputc_r+0x1e>
 8009a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a4e:	f7fd b8ae 	b.w	8006bae <__swbuf_r>
 8009a52:	6813      	ldr	r3, [r2, #0]
 8009a54:	1c58      	adds	r0, r3, #1
 8009a56:	6010      	str	r0, [r2, #0]
 8009a58:	7019      	strb	r1, [r3, #0]
 8009a5a:	4608      	mov	r0, r1
 8009a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <__sfputs_r>:
 8009a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a64:	4606      	mov	r6, r0
 8009a66:	460f      	mov	r7, r1
 8009a68:	4614      	mov	r4, r2
 8009a6a:	18d5      	adds	r5, r2, r3
 8009a6c:	42ac      	cmp	r4, r5
 8009a6e:	d101      	bne.n	8009a74 <__sfputs_r+0x12>
 8009a70:	2000      	movs	r0, #0
 8009a72:	e007      	b.n	8009a84 <__sfputs_r+0x22>
 8009a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a78:	463a      	mov	r2, r7
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff ffda 	bl	8009a34 <__sfputc_r>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d1f3      	bne.n	8009a6c <__sfputs_r+0xa>
 8009a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a88 <_vfiprintf_r>:
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	460d      	mov	r5, r1
 8009a8e:	b09d      	sub	sp, #116	@ 0x74
 8009a90:	4614      	mov	r4, r2
 8009a92:	4698      	mov	r8, r3
 8009a94:	4606      	mov	r6, r0
 8009a96:	b118      	cbz	r0, 8009aa0 <_vfiprintf_r+0x18>
 8009a98:	6a03      	ldr	r3, [r0, #32]
 8009a9a:	b90b      	cbnz	r3, 8009aa0 <_vfiprintf_r+0x18>
 8009a9c:	f7fc ff4e 	bl	800693c <__sinit>
 8009aa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aa2:	07d9      	lsls	r1, r3, #31
 8009aa4:	d405      	bmi.n	8009ab2 <_vfiprintf_r+0x2a>
 8009aa6:	89ab      	ldrh	r3, [r5, #12]
 8009aa8:	059a      	lsls	r2, r3, #22
 8009aaa:	d402      	bmi.n	8009ab2 <_vfiprintf_r+0x2a>
 8009aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aae:	f7fd f9ec 	bl	8006e8a <__retarget_lock_acquire_recursive>
 8009ab2:	89ab      	ldrh	r3, [r5, #12]
 8009ab4:	071b      	lsls	r3, r3, #28
 8009ab6:	d501      	bpl.n	8009abc <_vfiprintf_r+0x34>
 8009ab8:	692b      	ldr	r3, [r5, #16]
 8009aba:	b99b      	cbnz	r3, 8009ae4 <_vfiprintf_r+0x5c>
 8009abc:	4629      	mov	r1, r5
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7fd f8b4 	bl	8006c2c <__swsetup_r>
 8009ac4:	b170      	cbz	r0, 8009ae4 <_vfiprintf_r+0x5c>
 8009ac6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ac8:	07dc      	lsls	r4, r3, #31
 8009aca:	d504      	bpl.n	8009ad6 <_vfiprintf_r+0x4e>
 8009acc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad0:	b01d      	add	sp, #116	@ 0x74
 8009ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad6:	89ab      	ldrh	r3, [r5, #12]
 8009ad8:	0598      	lsls	r0, r3, #22
 8009ada:	d4f7      	bmi.n	8009acc <_vfiprintf_r+0x44>
 8009adc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ade:	f7fd f9d5 	bl	8006e8c <__retarget_lock_release_recursive>
 8009ae2:	e7f3      	b.n	8009acc <_vfiprintf_r+0x44>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae8:	2320      	movs	r3, #32
 8009aea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8009af2:	2330      	movs	r3, #48	@ 0x30
 8009af4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ca4 <_vfiprintf_r+0x21c>
 8009af8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009afc:	f04f 0901 	mov.w	r9, #1
 8009b00:	4623      	mov	r3, r4
 8009b02:	469a      	mov	sl, r3
 8009b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b08:	b10a      	cbz	r2, 8009b0e <_vfiprintf_r+0x86>
 8009b0a:	2a25      	cmp	r2, #37	@ 0x25
 8009b0c:	d1f9      	bne.n	8009b02 <_vfiprintf_r+0x7a>
 8009b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b12:	d00b      	beq.n	8009b2c <_vfiprintf_r+0xa4>
 8009b14:	465b      	mov	r3, fp
 8009b16:	4622      	mov	r2, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f7ff ffa1 	bl	8009a62 <__sfputs_r>
 8009b20:	3001      	adds	r0, #1
 8009b22:	f000 80a7 	beq.w	8009c74 <_vfiprintf_r+0x1ec>
 8009b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b28:	445a      	add	r2, fp
 8009b2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 809f 	beq.w	8009c74 <_vfiprintf_r+0x1ec>
 8009b36:	2300      	movs	r3, #0
 8009b38:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b40:	f10a 0a01 	add.w	sl, sl, #1
 8009b44:	9304      	str	r3, [sp, #16]
 8009b46:	9307      	str	r3, [sp, #28]
 8009b48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b4e:	4654      	mov	r4, sl
 8009b50:	2205      	movs	r2, #5
 8009b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b56:	4853      	ldr	r0, [pc, #332]	@ (8009ca4 <_vfiprintf_r+0x21c>)
 8009b58:	f7f6 fb3a 	bl	80001d0 <memchr>
 8009b5c:	9a04      	ldr	r2, [sp, #16]
 8009b5e:	b9d8      	cbnz	r0, 8009b98 <_vfiprintf_r+0x110>
 8009b60:	06d1      	lsls	r1, r2, #27
 8009b62:	bf44      	itt	mi
 8009b64:	2320      	movmi	r3, #32
 8009b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b6a:	0713      	lsls	r3, r2, #28
 8009b6c:	bf44      	itt	mi
 8009b6e:	232b      	movmi	r3, #43	@ 0x2b
 8009b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b74:	f89a 3000 	ldrb.w	r3, [sl]
 8009b78:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b7a:	d015      	beq.n	8009ba8 <_vfiprintf_r+0x120>
 8009b7c:	9a07      	ldr	r2, [sp, #28]
 8009b7e:	4654      	mov	r4, sl
 8009b80:	2000      	movs	r0, #0
 8009b82:	f04f 0c0a 	mov.w	ip, #10
 8009b86:	4621      	mov	r1, r4
 8009b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b8c:	3b30      	subs	r3, #48	@ 0x30
 8009b8e:	2b09      	cmp	r3, #9
 8009b90:	d94b      	bls.n	8009c2a <_vfiprintf_r+0x1a2>
 8009b92:	b1b0      	cbz	r0, 8009bc2 <_vfiprintf_r+0x13a>
 8009b94:	9207      	str	r2, [sp, #28]
 8009b96:	e014      	b.n	8009bc2 <_vfiprintf_r+0x13a>
 8009b98:	eba0 0308 	sub.w	r3, r0, r8
 8009b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	46a2      	mov	sl, r4
 8009ba6:	e7d2      	b.n	8009b4e <_vfiprintf_r+0xc6>
 8009ba8:	9b03      	ldr	r3, [sp, #12]
 8009baa:	1d19      	adds	r1, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	9103      	str	r1, [sp, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bfbb      	ittet	lt
 8009bb4:	425b      	neglt	r3, r3
 8009bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8009bba:	9307      	strge	r3, [sp, #28]
 8009bbc:	9307      	strlt	r3, [sp, #28]
 8009bbe:	bfb8      	it	lt
 8009bc0:	9204      	strlt	r2, [sp, #16]
 8009bc2:	7823      	ldrb	r3, [r4, #0]
 8009bc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bc6:	d10a      	bne.n	8009bde <_vfiprintf_r+0x156>
 8009bc8:	7863      	ldrb	r3, [r4, #1]
 8009bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bcc:	d132      	bne.n	8009c34 <_vfiprintf_r+0x1ac>
 8009bce:	9b03      	ldr	r3, [sp, #12]
 8009bd0:	1d1a      	adds	r2, r3, #4
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	9203      	str	r2, [sp, #12]
 8009bd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bda:	3402      	adds	r4, #2
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cb4 <_vfiprintf_r+0x22c>
 8009be2:	7821      	ldrb	r1, [r4, #0]
 8009be4:	2203      	movs	r2, #3
 8009be6:	4650      	mov	r0, sl
 8009be8:	f7f6 faf2 	bl	80001d0 <memchr>
 8009bec:	b138      	cbz	r0, 8009bfe <_vfiprintf_r+0x176>
 8009bee:	9b04      	ldr	r3, [sp, #16]
 8009bf0:	eba0 000a 	sub.w	r0, r0, sl
 8009bf4:	2240      	movs	r2, #64	@ 0x40
 8009bf6:	4082      	lsls	r2, r0
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	3401      	adds	r4, #1
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c02:	4829      	ldr	r0, [pc, #164]	@ (8009ca8 <_vfiprintf_r+0x220>)
 8009c04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c08:	2206      	movs	r2, #6
 8009c0a:	f7f6 fae1 	bl	80001d0 <memchr>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d03f      	beq.n	8009c92 <_vfiprintf_r+0x20a>
 8009c12:	4b26      	ldr	r3, [pc, #152]	@ (8009cac <_vfiprintf_r+0x224>)
 8009c14:	bb1b      	cbnz	r3, 8009c5e <_vfiprintf_r+0x1d6>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	3307      	adds	r3, #7
 8009c1a:	f023 0307 	bic.w	r3, r3, #7
 8009c1e:	3308      	adds	r3, #8
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c24:	443b      	add	r3, r7
 8009c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c28:	e76a      	b.n	8009b00 <_vfiprintf_r+0x78>
 8009c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c2e:	460c      	mov	r4, r1
 8009c30:	2001      	movs	r0, #1
 8009c32:	e7a8      	b.n	8009b86 <_vfiprintf_r+0xfe>
 8009c34:	2300      	movs	r3, #0
 8009c36:	3401      	adds	r4, #1
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	f04f 0c0a 	mov.w	ip, #10
 8009c40:	4620      	mov	r0, r4
 8009c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c46:	3a30      	subs	r2, #48	@ 0x30
 8009c48:	2a09      	cmp	r2, #9
 8009c4a:	d903      	bls.n	8009c54 <_vfiprintf_r+0x1cc>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0c6      	beq.n	8009bde <_vfiprintf_r+0x156>
 8009c50:	9105      	str	r1, [sp, #20]
 8009c52:	e7c4      	b.n	8009bde <_vfiprintf_r+0x156>
 8009c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c58:	4604      	mov	r4, r0
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e7f0      	b.n	8009c40 <_vfiprintf_r+0x1b8>
 8009c5e:	ab03      	add	r3, sp, #12
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	462a      	mov	r2, r5
 8009c64:	4b12      	ldr	r3, [pc, #72]	@ (8009cb0 <_vfiprintf_r+0x228>)
 8009c66:	a904      	add	r1, sp, #16
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7fc f817 	bl	8005c9c <_printf_float>
 8009c6e:	4607      	mov	r7, r0
 8009c70:	1c78      	adds	r0, r7, #1
 8009c72:	d1d6      	bne.n	8009c22 <_vfiprintf_r+0x19a>
 8009c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c76:	07d9      	lsls	r1, r3, #31
 8009c78:	d405      	bmi.n	8009c86 <_vfiprintf_r+0x1fe>
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	059a      	lsls	r2, r3, #22
 8009c7e:	d402      	bmi.n	8009c86 <_vfiprintf_r+0x1fe>
 8009c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c82:	f7fd f903 	bl	8006e8c <__retarget_lock_release_recursive>
 8009c86:	89ab      	ldrh	r3, [r5, #12]
 8009c88:	065b      	lsls	r3, r3, #25
 8009c8a:	f53f af1f 	bmi.w	8009acc <_vfiprintf_r+0x44>
 8009c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c90:	e71e      	b.n	8009ad0 <_vfiprintf_r+0x48>
 8009c92:	ab03      	add	r3, sp, #12
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	462a      	mov	r2, r5
 8009c98:	4b05      	ldr	r3, [pc, #20]	@ (8009cb0 <_vfiprintf_r+0x228>)
 8009c9a:	a904      	add	r1, sp, #16
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f7fc fa95 	bl	80061cc <_printf_i>
 8009ca2:	e7e4      	b.n	8009c6e <_vfiprintf_r+0x1e6>
 8009ca4:	0800b035 	.word	0x0800b035
 8009ca8:	0800b03f 	.word	0x0800b03f
 8009cac:	08005c9d 	.word	0x08005c9d
 8009cb0:	08009a63 	.word	0x08009a63
 8009cb4:	0800b03b 	.word	0x0800b03b

08009cb8 <_scanf_chars>:
 8009cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cbc:	4615      	mov	r5, r2
 8009cbe:	688a      	ldr	r2, [r1, #8]
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	b932      	cbnz	r2, 8009cd4 <_scanf_chars+0x1c>
 8009cc6:	698a      	ldr	r2, [r1, #24]
 8009cc8:	2a00      	cmp	r2, #0
 8009cca:	bf14      	ite	ne
 8009ccc:	f04f 32ff 	movne.w	r2, #4294967295
 8009cd0:	2201      	moveq	r2, #1
 8009cd2:	608a      	str	r2, [r1, #8]
 8009cd4:	6822      	ldr	r2, [r4, #0]
 8009cd6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009d68 <_scanf_chars+0xb0>
 8009cda:	06d1      	lsls	r1, r2, #27
 8009cdc:	bf5f      	itttt	pl
 8009cde:	681a      	ldrpl	r2, [r3, #0]
 8009ce0:	1d11      	addpl	r1, r2, #4
 8009ce2:	6019      	strpl	r1, [r3, #0]
 8009ce4:	6816      	ldrpl	r6, [r2, #0]
 8009ce6:	2700      	movs	r7, #0
 8009ce8:	69a0      	ldr	r0, [r4, #24]
 8009cea:	b188      	cbz	r0, 8009d10 <_scanf_chars+0x58>
 8009cec:	2801      	cmp	r0, #1
 8009cee:	d107      	bne.n	8009d00 <_scanf_chars+0x48>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	781a      	ldrb	r2, [r3, #0]
 8009cf4:	6963      	ldr	r3, [r4, #20]
 8009cf6:	5c9b      	ldrb	r3, [r3, r2]
 8009cf8:	b953      	cbnz	r3, 8009d10 <_scanf_chars+0x58>
 8009cfa:	2f00      	cmp	r7, #0
 8009cfc:	d031      	beq.n	8009d62 <_scanf_chars+0xaa>
 8009cfe:	e022      	b.n	8009d46 <_scanf_chars+0x8e>
 8009d00:	2802      	cmp	r0, #2
 8009d02:	d120      	bne.n	8009d46 <_scanf_chars+0x8e>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009d0c:	071b      	lsls	r3, r3, #28
 8009d0e:	d41a      	bmi.n	8009d46 <_scanf_chars+0x8e>
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	06da      	lsls	r2, r3, #27
 8009d14:	bf5e      	ittt	pl
 8009d16:	682b      	ldrpl	r3, [r5, #0]
 8009d18:	781b      	ldrbpl	r3, [r3, #0]
 8009d1a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009d1e:	682a      	ldr	r2, [r5, #0]
 8009d20:	686b      	ldr	r3, [r5, #4]
 8009d22:	3201      	adds	r2, #1
 8009d24:	602a      	str	r2, [r5, #0]
 8009d26:	68a2      	ldr	r2, [r4, #8]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	3a01      	subs	r2, #1
 8009d2c:	606b      	str	r3, [r5, #4]
 8009d2e:	3701      	adds	r7, #1
 8009d30:	60a2      	str	r2, [r4, #8]
 8009d32:	b142      	cbz	r2, 8009d46 <_scanf_chars+0x8e>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dcd7      	bgt.n	8009ce8 <_scanf_chars+0x30>
 8009d38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4640      	mov	r0, r8
 8009d40:	4798      	blx	r3
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d0d0      	beq.n	8009ce8 <_scanf_chars+0x30>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	f013 0310 	ands.w	r3, r3, #16
 8009d4c:	d105      	bne.n	8009d5a <_scanf_chars+0xa2>
 8009d4e:	68e2      	ldr	r2, [r4, #12]
 8009d50:	3201      	adds	r2, #1
 8009d52:	60e2      	str	r2, [r4, #12]
 8009d54:	69a2      	ldr	r2, [r4, #24]
 8009d56:	b102      	cbz	r2, 8009d5a <_scanf_chars+0xa2>
 8009d58:	7033      	strb	r3, [r6, #0]
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	443b      	add	r3, r7
 8009d5e:	6123      	str	r3, [r4, #16]
 8009d60:	2000      	movs	r0, #0
 8009d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d66:	bf00      	nop
 8009d68:	0800b219 	.word	0x0800b219

08009d6c <_scanf_i>:
 8009d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	4698      	mov	r8, r3
 8009d72:	4b74      	ldr	r3, [pc, #464]	@ (8009f44 <_scanf_i+0x1d8>)
 8009d74:	460c      	mov	r4, r1
 8009d76:	4682      	mov	sl, r0
 8009d78:	4616      	mov	r6, r2
 8009d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	ab03      	add	r3, sp, #12
 8009d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009d86:	4b70      	ldr	r3, [pc, #448]	@ (8009f48 <_scanf_i+0x1dc>)
 8009d88:	69a1      	ldr	r1, [r4, #24]
 8009d8a:	4a70      	ldr	r2, [pc, #448]	@ (8009f4c <_scanf_i+0x1e0>)
 8009d8c:	2903      	cmp	r1, #3
 8009d8e:	bf08      	it	eq
 8009d90:	461a      	moveq	r2, r3
 8009d92:	68a3      	ldr	r3, [r4, #8]
 8009d94:	9201      	str	r2, [sp, #4]
 8009d96:	1e5a      	subs	r2, r3, #1
 8009d98:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009d9c:	bf88      	it	hi
 8009d9e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009da2:	4627      	mov	r7, r4
 8009da4:	bf82      	ittt	hi
 8009da6:	eb03 0905 	addhi.w	r9, r3, r5
 8009daa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009dae:	60a3      	strhi	r3, [r4, #8]
 8009db0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009db4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009db8:	bf98      	it	ls
 8009dba:	f04f 0900 	movls.w	r9, #0
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	463d      	mov	r5, r7
 8009dc2:	f04f 0b00 	mov.w	fp, #0
 8009dc6:	6831      	ldr	r1, [r6, #0]
 8009dc8:	ab03      	add	r3, sp, #12
 8009dca:	7809      	ldrb	r1, [r1, #0]
 8009dcc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f7f6 f9fd 	bl	80001d0 <memchr>
 8009dd6:	b328      	cbz	r0, 8009e24 <_scanf_i+0xb8>
 8009dd8:	f1bb 0f01 	cmp.w	fp, #1
 8009ddc:	d159      	bne.n	8009e92 <_scanf_i+0x126>
 8009dde:	6862      	ldr	r2, [r4, #4]
 8009de0:	b92a      	cbnz	r2, 8009dee <_scanf_i+0x82>
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	2108      	movs	r1, #8
 8009de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dea:	6061      	str	r1, [r4, #4]
 8009dec:	6022      	str	r2, [r4, #0]
 8009dee:	6822      	ldr	r2, [r4, #0]
 8009df0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009df4:	6022      	str	r2, [r4, #0]
 8009df6:	68a2      	ldr	r2, [r4, #8]
 8009df8:	1e51      	subs	r1, r2, #1
 8009dfa:	60a1      	str	r1, [r4, #8]
 8009dfc:	b192      	cbz	r2, 8009e24 <_scanf_i+0xb8>
 8009dfe:	6832      	ldr	r2, [r6, #0]
 8009e00:	1c51      	adds	r1, r2, #1
 8009e02:	6031      	str	r1, [r6, #0]
 8009e04:	7812      	ldrb	r2, [r2, #0]
 8009e06:	f805 2b01 	strb.w	r2, [r5], #1
 8009e0a:	6872      	ldr	r2, [r6, #4]
 8009e0c:	3a01      	subs	r2, #1
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	6072      	str	r2, [r6, #4]
 8009e12:	dc07      	bgt.n	8009e24 <_scanf_i+0xb8>
 8009e14:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4650      	mov	r0, sl
 8009e1c:	4790      	blx	r2
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f040 8085 	bne.w	8009f2e <_scanf_i+0x1c2>
 8009e24:	f10b 0b01 	add.w	fp, fp, #1
 8009e28:	f1bb 0f03 	cmp.w	fp, #3
 8009e2c:	d1cb      	bne.n	8009dc6 <_scanf_i+0x5a>
 8009e2e:	6863      	ldr	r3, [r4, #4]
 8009e30:	b90b      	cbnz	r3, 8009e36 <_scanf_i+0xca>
 8009e32:	230a      	movs	r3, #10
 8009e34:	6063      	str	r3, [r4, #4]
 8009e36:	6863      	ldr	r3, [r4, #4]
 8009e38:	4945      	ldr	r1, [pc, #276]	@ (8009f50 <_scanf_i+0x1e4>)
 8009e3a:	6960      	ldr	r0, [r4, #20]
 8009e3c:	1ac9      	subs	r1, r1, r3
 8009e3e:	f000 f9a9 	bl	800a194 <__sccl>
 8009e42:	f04f 0b00 	mov.w	fp, #0
 8009e46:	68a3      	ldr	r3, [r4, #8]
 8009e48:	6822      	ldr	r2, [r4, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d03d      	beq.n	8009eca <_scanf_i+0x15e>
 8009e4e:	6831      	ldr	r1, [r6, #0]
 8009e50:	6960      	ldr	r0, [r4, #20]
 8009e52:	f891 c000 	ldrb.w	ip, [r1]
 8009e56:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d035      	beq.n	8009eca <_scanf_i+0x15e>
 8009e5e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009e62:	d124      	bne.n	8009eae <_scanf_i+0x142>
 8009e64:	0510      	lsls	r0, r2, #20
 8009e66:	d522      	bpl.n	8009eae <_scanf_i+0x142>
 8009e68:	f10b 0b01 	add.w	fp, fp, #1
 8009e6c:	f1b9 0f00 	cmp.w	r9, #0
 8009e70:	d003      	beq.n	8009e7a <_scanf_i+0x10e>
 8009e72:	3301      	adds	r3, #1
 8009e74:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e78:	60a3      	str	r3, [r4, #8]
 8009e7a:	6873      	ldr	r3, [r6, #4]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	6073      	str	r3, [r6, #4]
 8009e82:	dd1b      	ble.n	8009ebc <_scanf_i+0x150>
 8009e84:	6833      	ldr	r3, [r6, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	6033      	str	r3, [r6, #0]
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	60a3      	str	r3, [r4, #8]
 8009e90:	e7d9      	b.n	8009e46 <_scanf_i+0xda>
 8009e92:	f1bb 0f02 	cmp.w	fp, #2
 8009e96:	d1ae      	bne.n	8009df6 <_scanf_i+0x8a>
 8009e98:	6822      	ldr	r2, [r4, #0]
 8009e9a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009e9e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009ea2:	d1c4      	bne.n	8009e2e <_scanf_i+0xc2>
 8009ea4:	2110      	movs	r1, #16
 8009ea6:	6061      	str	r1, [r4, #4]
 8009ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009eac:	e7a2      	b.n	8009df4 <_scanf_i+0x88>
 8009eae:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009eb2:	6022      	str	r2, [r4, #0]
 8009eb4:	780b      	ldrb	r3, [r1, #0]
 8009eb6:	f805 3b01 	strb.w	r3, [r5], #1
 8009eba:	e7de      	b.n	8009e7a <_scanf_i+0x10e>
 8009ebc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	4798      	blx	r3
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d0df      	beq.n	8009e8a <_scanf_i+0x11e>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	05d9      	lsls	r1, r3, #23
 8009ece:	d50d      	bpl.n	8009eec <_scanf_i+0x180>
 8009ed0:	42bd      	cmp	r5, r7
 8009ed2:	d909      	bls.n	8009ee8 <_scanf_i+0x17c>
 8009ed4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009ed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009edc:	4632      	mov	r2, r6
 8009ede:	4650      	mov	r0, sl
 8009ee0:	4798      	blx	r3
 8009ee2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ee6:	464d      	mov	r5, r9
 8009ee8:	42bd      	cmp	r5, r7
 8009eea:	d028      	beq.n	8009f3e <_scanf_i+0x1d2>
 8009eec:	6822      	ldr	r2, [r4, #0]
 8009eee:	f012 0210 	ands.w	r2, r2, #16
 8009ef2:	d113      	bne.n	8009f1c <_scanf_i+0x1b0>
 8009ef4:	702a      	strb	r2, [r5, #0]
 8009ef6:	6863      	ldr	r3, [r4, #4]
 8009ef8:	9e01      	ldr	r6, [sp, #4]
 8009efa:	4639      	mov	r1, r7
 8009efc:	4650      	mov	r0, sl
 8009efe:	47b0      	blx	r6
 8009f00:	f8d8 3000 	ldr.w	r3, [r8]
 8009f04:	6821      	ldr	r1, [r4, #0]
 8009f06:	1d1a      	adds	r2, r3, #4
 8009f08:	f8c8 2000 	str.w	r2, [r8]
 8009f0c:	f011 0f20 	tst.w	r1, #32
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	d00f      	beq.n	8009f34 <_scanf_i+0x1c8>
 8009f14:	6018      	str	r0, [r3, #0]
 8009f16:	68e3      	ldr	r3, [r4, #12]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	60e3      	str	r3, [r4, #12]
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	1bed      	subs	r5, r5, r7
 8009f20:	445d      	add	r5, fp
 8009f22:	442b      	add	r3, r5
 8009f24:	6123      	str	r3, [r4, #16]
 8009f26:	2000      	movs	r0, #0
 8009f28:	b007      	add	sp, #28
 8009f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2e:	f04f 0b00 	mov.w	fp, #0
 8009f32:	e7ca      	b.n	8009eca <_scanf_i+0x15e>
 8009f34:	07ca      	lsls	r2, r1, #31
 8009f36:	bf4c      	ite	mi
 8009f38:	8018      	strhmi	r0, [r3, #0]
 8009f3a:	6018      	strpl	r0, [r3, #0]
 8009f3c:	e7eb      	b.n	8009f16 <_scanf_i+0x1aa>
 8009f3e:	2001      	movs	r0, #1
 8009f40:	e7f2      	b.n	8009f28 <_scanf_i+0x1bc>
 8009f42:	bf00      	nop
 8009f44:	0800adb4 	.word	0x0800adb4
 8009f48:	080093e1 	.word	0x080093e1
 8009f4c:	0800ab6d 	.word	0x0800ab6d
 8009f50:	0800b056 	.word	0x0800b056

08009f54 <__sflush_r>:
 8009f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5c:	0716      	lsls	r6, r2, #28
 8009f5e:	4605      	mov	r5, r0
 8009f60:	460c      	mov	r4, r1
 8009f62:	d454      	bmi.n	800a00e <__sflush_r+0xba>
 8009f64:	684b      	ldr	r3, [r1, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	dc02      	bgt.n	8009f70 <__sflush_r+0x1c>
 8009f6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd48      	ble.n	800a002 <__sflush_r+0xae>
 8009f70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	d045      	beq.n	800a002 <__sflush_r+0xae>
 8009f76:	2300      	movs	r3, #0
 8009f78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f7c:	682f      	ldr	r7, [r5, #0]
 8009f7e:	6a21      	ldr	r1, [r4, #32]
 8009f80:	602b      	str	r3, [r5, #0]
 8009f82:	d030      	beq.n	8009fe6 <__sflush_r+0x92>
 8009f84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	0759      	lsls	r1, r3, #29
 8009f8a:	d505      	bpl.n	8009f98 <__sflush_r+0x44>
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	1ad2      	subs	r2, r2, r3
 8009f90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f92:	b10b      	cbz	r3, 8009f98 <__sflush_r+0x44>
 8009f94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f96:	1ad2      	subs	r2, r2, r3
 8009f98:	2300      	movs	r3, #0
 8009f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f9c:	6a21      	ldr	r1, [r4, #32]
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	47b0      	blx	r6
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	d106      	bne.n	8009fb6 <__sflush_r+0x62>
 8009fa8:	6829      	ldr	r1, [r5, #0]
 8009faa:	291d      	cmp	r1, #29
 8009fac:	d82b      	bhi.n	800a006 <__sflush_r+0xb2>
 8009fae:	4a2a      	ldr	r2, [pc, #168]	@ (800a058 <__sflush_r+0x104>)
 8009fb0:	40ca      	lsrs	r2, r1
 8009fb2:	07d6      	lsls	r6, r2, #31
 8009fb4:	d527      	bpl.n	800a006 <__sflush_r+0xb2>
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	6062      	str	r2, [r4, #4]
 8009fba:	04d9      	lsls	r1, r3, #19
 8009fbc:	6922      	ldr	r2, [r4, #16]
 8009fbe:	6022      	str	r2, [r4, #0]
 8009fc0:	d504      	bpl.n	8009fcc <__sflush_r+0x78>
 8009fc2:	1c42      	adds	r2, r0, #1
 8009fc4:	d101      	bne.n	8009fca <__sflush_r+0x76>
 8009fc6:	682b      	ldr	r3, [r5, #0]
 8009fc8:	b903      	cbnz	r3, 8009fcc <__sflush_r+0x78>
 8009fca:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fce:	602f      	str	r7, [r5, #0]
 8009fd0:	b1b9      	cbz	r1, 800a002 <__sflush_r+0xae>
 8009fd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fd6:	4299      	cmp	r1, r3
 8009fd8:	d002      	beq.n	8009fe0 <__sflush_r+0x8c>
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f7fd fdd4 	bl	8007b88 <_free_r>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fe4:	e00d      	b.n	800a002 <__sflush_r+0xae>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	4628      	mov	r0, r5
 8009fea:	47b0      	blx	r6
 8009fec:	4602      	mov	r2, r0
 8009fee:	1c50      	adds	r0, r2, #1
 8009ff0:	d1c9      	bne.n	8009f86 <__sflush_r+0x32>
 8009ff2:	682b      	ldr	r3, [r5, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0c6      	beq.n	8009f86 <__sflush_r+0x32>
 8009ff8:	2b1d      	cmp	r3, #29
 8009ffa:	d001      	beq.n	800a000 <__sflush_r+0xac>
 8009ffc:	2b16      	cmp	r3, #22
 8009ffe:	d11e      	bne.n	800a03e <__sflush_r+0xea>
 800a000:	602f      	str	r7, [r5, #0]
 800a002:	2000      	movs	r0, #0
 800a004:	e022      	b.n	800a04c <__sflush_r+0xf8>
 800a006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a00a:	b21b      	sxth	r3, r3
 800a00c:	e01b      	b.n	800a046 <__sflush_r+0xf2>
 800a00e:	690f      	ldr	r7, [r1, #16]
 800a010:	2f00      	cmp	r7, #0
 800a012:	d0f6      	beq.n	800a002 <__sflush_r+0xae>
 800a014:	0793      	lsls	r3, r2, #30
 800a016:	680e      	ldr	r6, [r1, #0]
 800a018:	bf08      	it	eq
 800a01a:	694b      	ldreq	r3, [r1, #20]
 800a01c:	600f      	str	r7, [r1, #0]
 800a01e:	bf18      	it	ne
 800a020:	2300      	movne	r3, #0
 800a022:	eba6 0807 	sub.w	r8, r6, r7
 800a026:	608b      	str	r3, [r1, #8]
 800a028:	f1b8 0f00 	cmp.w	r8, #0
 800a02c:	dde9      	ble.n	800a002 <__sflush_r+0xae>
 800a02e:	6a21      	ldr	r1, [r4, #32]
 800a030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a032:	4643      	mov	r3, r8
 800a034:	463a      	mov	r2, r7
 800a036:	4628      	mov	r0, r5
 800a038:	47b0      	blx	r6
 800a03a:	2800      	cmp	r0, #0
 800a03c:	dc08      	bgt.n	800a050 <__sflush_r+0xfc>
 800a03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	f04f 30ff 	mov.w	r0, #4294967295
 800a04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a050:	4407      	add	r7, r0
 800a052:	eba8 0800 	sub.w	r8, r8, r0
 800a056:	e7e7      	b.n	800a028 <__sflush_r+0xd4>
 800a058:	20400001 	.word	0x20400001

0800a05c <_fflush_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	690b      	ldr	r3, [r1, #16]
 800a060:	4605      	mov	r5, r0
 800a062:	460c      	mov	r4, r1
 800a064:	b913      	cbnz	r3, 800a06c <_fflush_r+0x10>
 800a066:	2500      	movs	r5, #0
 800a068:	4628      	mov	r0, r5
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	b118      	cbz	r0, 800a076 <_fflush_r+0x1a>
 800a06e:	6a03      	ldr	r3, [r0, #32]
 800a070:	b90b      	cbnz	r3, 800a076 <_fflush_r+0x1a>
 800a072:	f7fc fc63 	bl	800693c <__sinit>
 800a076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0f3      	beq.n	800a066 <_fflush_r+0xa>
 800a07e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a080:	07d0      	lsls	r0, r2, #31
 800a082:	d404      	bmi.n	800a08e <_fflush_r+0x32>
 800a084:	0599      	lsls	r1, r3, #22
 800a086:	d402      	bmi.n	800a08e <_fflush_r+0x32>
 800a088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a08a:	f7fc fefe 	bl	8006e8a <__retarget_lock_acquire_recursive>
 800a08e:	4628      	mov	r0, r5
 800a090:	4621      	mov	r1, r4
 800a092:	f7ff ff5f 	bl	8009f54 <__sflush_r>
 800a096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a098:	07da      	lsls	r2, r3, #31
 800a09a:	4605      	mov	r5, r0
 800a09c:	d4e4      	bmi.n	800a068 <_fflush_r+0xc>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	059b      	lsls	r3, r3, #22
 800a0a2:	d4e1      	bmi.n	800a068 <_fflush_r+0xc>
 800a0a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0a6:	f7fc fef1 	bl	8006e8c <__retarget_lock_release_recursive>
 800a0aa:	e7dd      	b.n	800a068 <_fflush_r+0xc>

0800a0ac <fiprintf>:
 800a0ac:	b40e      	push	{r1, r2, r3}
 800a0ae:	b503      	push	{r0, r1, lr}
 800a0b0:	4601      	mov	r1, r0
 800a0b2:	ab03      	add	r3, sp, #12
 800a0b4:	4805      	ldr	r0, [pc, #20]	@ (800a0cc <fiprintf+0x20>)
 800a0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ba:	6800      	ldr	r0, [r0, #0]
 800a0bc:	9301      	str	r3, [sp, #4]
 800a0be:	f7ff fce3 	bl	8009a88 <_vfiprintf_r>
 800a0c2:	b002      	add	sp, #8
 800a0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0c8:	b003      	add	sp, #12
 800a0ca:	4770      	bx	lr
 800a0cc:	20000018 	.word	0x20000018

0800a0d0 <__swhatbuf_r>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d8:	2900      	cmp	r1, #0
 800a0da:	b096      	sub	sp, #88	@ 0x58
 800a0dc:	4615      	mov	r5, r2
 800a0de:	461e      	mov	r6, r3
 800a0e0:	da0d      	bge.n	800a0fe <__swhatbuf_r+0x2e>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0e8:	f04f 0100 	mov.w	r1, #0
 800a0ec:	bf14      	ite	ne
 800a0ee:	2340      	movne	r3, #64	@ 0x40
 800a0f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	6031      	str	r1, [r6, #0]
 800a0f8:	602b      	str	r3, [r5, #0]
 800a0fa:	b016      	add	sp, #88	@ 0x58
 800a0fc:	bd70      	pop	{r4, r5, r6, pc}
 800a0fe:	466a      	mov	r2, sp
 800a100:	f000 f8e8 	bl	800a2d4 <_fstat_r>
 800a104:	2800      	cmp	r0, #0
 800a106:	dbec      	blt.n	800a0e2 <__swhatbuf_r+0x12>
 800a108:	9901      	ldr	r1, [sp, #4]
 800a10a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a10e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a112:	4259      	negs	r1, r3
 800a114:	4159      	adcs	r1, r3
 800a116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a11a:	e7eb      	b.n	800a0f4 <__swhatbuf_r+0x24>

0800a11c <__smakebuf_r>:
 800a11c:	898b      	ldrh	r3, [r1, #12]
 800a11e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a120:	079d      	lsls	r5, r3, #30
 800a122:	4606      	mov	r6, r0
 800a124:	460c      	mov	r4, r1
 800a126:	d507      	bpl.n	800a138 <__smakebuf_r+0x1c>
 800a128:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	2301      	movs	r3, #1
 800a132:	6163      	str	r3, [r4, #20]
 800a134:	b003      	add	sp, #12
 800a136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a138:	ab01      	add	r3, sp, #4
 800a13a:	466a      	mov	r2, sp
 800a13c:	f7ff ffc8 	bl	800a0d0 <__swhatbuf_r>
 800a140:	9f00      	ldr	r7, [sp, #0]
 800a142:	4605      	mov	r5, r0
 800a144:	4639      	mov	r1, r7
 800a146:	4630      	mov	r0, r6
 800a148:	f7fd fd92 	bl	8007c70 <_malloc_r>
 800a14c:	b948      	cbnz	r0, 800a162 <__smakebuf_r+0x46>
 800a14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a152:	059a      	lsls	r2, r3, #22
 800a154:	d4ee      	bmi.n	800a134 <__smakebuf_r+0x18>
 800a156:	f023 0303 	bic.w	r3, r3, #3
 800a15a:	f043 0302 	orr.w	r3, r3, #2
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	e7e2      	b.n	800a128 <__smakebuf_r+0xc>
 800a162:	89a3      	ldrh	r3, [r4, #12]
 800a164:	6020      	str	r0, [r4, #0]
 800a166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a172:	b15b      	cbz	r3, 800a18c <__smakebuf_r+0x70>
 800a174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a178:	4630      	mov	r0, r6
 800a17a:	f000 f8bd 	bl	800a2f8 <_isatty_r>
 800a17e:	b128      	cbz	r0, 800a18c <__smakebuf_r+0x70>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	f023 0303 	bic.w	r3, r3, #3
 800a186:	f043 0301 	orr.w	r3, r3, #1
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	431d      	orrs	r5, r3
 800a190:	81a5      	strh	r5, [r4, #12]
 800a192:	e7cf      	b.n	800a134 <__smakebuf_r+0x18>

0800a194 <__sccl>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	780b      	ldrb	r3, [r1, #0]
 800a198:	4604      	mov	r4, r0
 800a19a:	2b5e      	cmp	r3, #94	@ 0x5e
 800a19c:	bf0b      	itete	eq
 800a19e:	784b      	ldrbeq	r3, [r1, #1]
 800a1a0:	1c4a      	addne	r2, r1, #1
 800a1a2:	1c8a      	addeq	r2, r1, #2
 800a1a4:	2100      	movne	r1, #0
 800a1a6:	bf08      	it	eq
 800a1a8:	2101      	moveq	r1, #1
 800a1aa:	3801      	subs	r0, #1
 800a1ac:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a1b0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a1b4:	42a8      	cmp	r0, r5
 800a1b6:	d1fb      	bne.n	800a1b0 <__sccl+0x1c>
 800a1b8:	b90b      	cbnz	r3, 800a1be <__sccl+0x2a>
 800a1ba:	1e50      	subs	r0, r2, #1
 800a1bc:	bd70      	pop	{r4, r5, r6, pc}
 800a1be:	f081 0101 	eor.w	r1, r1, #1
 800a1c2:	54e1      	strb	r1, [r4, r3]
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a1cc:	2d2d      	cmp	r5, #45	@ 0x2d
 800a1ce:	d005      	beq.n	800a1dc <__sccl+0x48>
 800a1d0:	2d5d      	cmp	r5, #93	@ 0x5d
 800a1d2:	d016      	beq.n	800a202 <__sccl+0x6e>
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	d0f1      	beq.n	800a1bc <__sccl+0x28>
 800a1d8:	462b      	mov	r3, r5
 800a1da:	e7f2      	b.n	800a1c2 <__sccl+0x2e>
 800a1dc:	7846      	ldrb	r6, [r0, #1]
 800a1de:	2e5d      	cmp	r6, #93	@ 0x5d
 800a1e0:	d0fa      	beq.n	800a1d8 <__sccl+0x44>
 800a1e2:	42b3      	cmp	r3, r6
 800a1e4:	dcf8      	bgt.n	800a1d8 <__sccl+0x44>
 800a1e6:	3002      	adds	r0, #2
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	3201      	adds	r2, #1
 800a1ec:	4296      	cmp	r6, r2
 800a1ee:	54a1      	strb	r1, [r4, r2]
 800a1f0:	dcfb      	bgt.n	800a1ea <__sccl+0x56>
 800a1f2:	1af2      	subs	r2, r6, r3
 800a1f4:	3a01      	subs	r2, #1
 800a1f6:	1c5d      	adds	r5, r3, #1
 800a1f8:	42b3      	cmp	r3, r6
 800a1fa:	bfa8      	it	ge
 800a1fc:	2200      	movge	r2, #0
 800a1fe:	18ab      	adds	r3, r5, r2
 800a200:	e7e1      	b.n	800a1c6 <__sccl+0x32>
 800a202:	4610      	mov	r0, r2
 800a204:	e7da      	b.n	800a1bc <__sccl+0x28>

0800a206 <__submore>:
 800a206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a20a:	460c      	mov	r4, r1
 800a20c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a20e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a212:	4299      	cmp	r1, r3
 800a214:	d11d      	bne.n	800a252 <__submore+0x4c>
 800a216:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a21a:	f7fd fd29 	bl	8007c70 <_malloc_r>
 800a21e:	b918      	cbnz	r0, 800a228 <__submore+0x22>
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a22c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a22e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a232:	6360      	str	r0, [r4, #52]	@ 0x34
 800a234:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a238:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a23c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a240:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a244:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a248:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a24c:	6020      	str	r0, [r4, #0]
 800a24e:	2000      	movs	r0, #0
 800a250:	e7e8      	b.n	800a224 <__submore+0x1e>
 800a252:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a254:	0077      	lsls	r7, r6, #1
 800a256:	463a      	mov	r2, r7
 800a258:	f000 fbeb 	bl	800aa32 <_realloc_r>
 800a25c:	4605      	mov	r5, r0
 800a25e:	2800      	cmp	r0, #0
 800a260:	d0de      	beq.n	800a220 <__submore+0x1a>
 800a262:	eb00 0806 	add.w	r8, r0, r6
 800a266:	4601      	mov	r1, r0
 800a268:	4632      	mov	r2, r6
 800a26a:	4640      	mov	r0, r8
 800a26c:	f000 f864 	bl	800a338 <memcpy>
 800a270:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a274:	f8c4 8000 	str.w	r8, [r4]
 800a278:	e7e9      	b.n	800a24e <__submore+0x48>

0800a27a <memmove>:
 800a27a:	4288      	cmp	r0, r1
 800a27c:	b510      	push	{r4, lr}
 800a27e:	eb01 0402 	add.w	r4, r1, r2
 800a282:	d902      	bls.n	800a28a <memmove+0x10>
 800a284:	4284      	cmp	r4, r0
 800a286:	4623      	mov	r3, r4
 800a288:	d807      	bhi.n	800a29a <memmove+0x20>
 800a28a:	1e43      	subs	r3, r0, #1
 800a28c:	42a1      	cmp	r1, r4
 800a28e:	d008      	beq.n	800a2a2 <memmove+0x28>
 800a290:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a294:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a298:	e7f8      	b.n	800a28c <memmove+0x12>
 800a29a:	4402      	add	r2, r0
 800a29c:	4601      	mov	r1, r0
 800a29e:	428a      	cmp	r2, r1
 800a2a0:	d100      	bne.n	800a2a4 <memmove+0x2a>
 800a2a2:	bd10      	pop	{r4, pc}
 800a2a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ac:	e7f7      	b.n	800a29e <memmove+0x24>

0800a2ae <strncmp>:
 800a2ae:	b510      	push	{r4, lr}
 800a2b0:	b16a      	cbz	r2, 800a2ce <strncmp+0x20>
 800a2b2:	3901      	subs	r1, #1
 800a2b4:	1884      	adds	r4, r0, r2
 800a2b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d103      	bne.n	800a2ca <strncmp+0x1c>
 800a2c2:	42a0      	cmp	r0, r4
 800a2c4:	d001      	beq.n	800a2ca <strncmp+0x1c>
 800a2c6:	2a00      	cmp	r2, #0
 800a2c8:	d1f5      	bne.n	800a2b6 <strncmp+0x8>
 800a2ca:	1ad0      	subs	r0, r2, r3
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	e7fc      	b.n	800a2cc <strncmp+0x1e>
	...

0800a2d4 <_fstat_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d07      	ldr	r5, [pc, #28]	@ (800a2f4 <_fstat_r+0x20>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	f7f8 fbdb 	bl	8002a9c <_fstat>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	d102      	bne.n	800a2f0 <_fstat_r+0x1c>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	b103      	cbz	r3, 800a2f0 <_fstat_r+0x1c>
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	bd38      	pop	{r3, r4, r5, pc}
 800a2f2:	bf00      	nop
 800a2f4:	200004bc 	.word	0x200004bc

0800a2f8 <_isatty_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4d06      	ldr	r5, [pc, #24]	@ (800a314 <_isatty_r+0x1c>)
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4604      	mov	r4, r0
 800a300:	4608      	mov	r0, r1
 800a302:	602b      	str	r3, [r5, #0]
 800a304:	f7f8 fbda 	bl	8002abc <_isatty>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d102      	bne.n	800a312 <_isatty_r+0x1a>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b103      	cbz	r3, 800a312 <_isatty_r+0x1a>
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	200004bc 	.word	0x200004bc

0800a318 <_sbrk_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4d06      	ldr	r5, [pc, #24]	@ (800a334 <_sbrk_r+0x1c>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	602b      	str	r3, [r5, #0]
 800a324:	f7f8 fbe2 	bl	8002aec <_sbrk>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_sbrk_r+0x1a>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_sbrk_r+0x1a>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	200004bc 	.word	0x200004bc

0800a338 <memcpy>:
 800a338:	440a      	add	r2, r1
 800a33a:	4291      	cmp	r1, r2
 800a33c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a340:	d100      	bne.n	800a344 <memcpy+0xc>
 800a342:	4770      	bx	lr
 800a344:	b510      	push	{r4, lr}
 800a346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a34a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a34e:	4291      	cmp	r1, r2
 800a350:	d1f9      	bne.n	800a346 <memcpy+0xe>
 800a352:	bd10      	pop	{r4, pc}
 800a354:	0000      	movs	r0, r0
	...

0800a358 <nan>:
 800a358:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a360 <nan+0x8>
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	00000000 	.word	0x00000000
 800a364:	7ff80000 	.word	0x7ff80000

0800a368 <abort>:
 800a368:	b508      	push	{r3, lr}
 800a36a:	2006      	movs	r0, #6
 800a36c:	f000 fc36 	bl	800abdc <raise>
 800a370:	2001      	movs	r0, #1
 800a372:	f7f8 fb43 	bl	80029fc <_exit>

0800a376 <_calloc_r>:
 800a376:	b570      	push	{r4, r5, r6, lr}
 800a378:	fba1 5402 	umull	r5, r4, r1, r2
 800a37c:	b934      	cbnz	r4, 800a38c <_calloc_r+0x16>
 800a37e:	4629      	mov	r1, r5
 800a380:	f7fd fc76 	bl	8007c70 <_malloc_r>
 800a384:	4606      	mov	r6, r0
 800a386:	b928      	cbnz	r0, 800a394 <_calloc_r+0x1e>
 800a388:	4630      	mov	r0, r6
 800a38a:	bd70      	pop	{r4, r5, r6, pc}
 800a38c:	220c      	movs	r2, #12
 800a38e:	6002      	str	r2, [r0, #0]
 800a390:	2600      	movs	r6, #0
 800a392:	e7f9      	b.n	800a388 <_calloc_r+0x12>
 800a394:	462a      	mov	r2, r5
 800a396:	4621      	mov	r1, r4
 800a398:	f7fc fc9e 	bl	8006cd8 <memset>
 800a39c:	e7f4      	b.n	800a388 <_calloc_r+0x12>

0800a39e <rshift>:
 800a39e:	6903      	ldr	r3, [r0, #16]
 800a3a0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3a8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3ac:	f100 0414 	add.w	r4, r0, #20
 800a3b0:	dd45      	ble.n	800a43e <rshift+0xa0>
 800a3b2:	f011 011f 	ands.w	r1, r1, #31
 800a3b6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3ba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3be:	d10c      	bne.n	800a3da <rshift+0x3c>
 800a3c0:	f100 0710 	add.w	r7, r0, #16
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	42b1      	cmp	r1, r6
 800a3c8:	d334      	bcc.n	800a434 <rshift+0x96>
 800a3ca:	1a9b      	subs	r3, r3, r2
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	1eea      	subs	r2, r5, #3
 800a3d0:	4296      	cmp	r6, r2
 800a3d2:	bf38      	it	cc
 800a3d4:	2300      	movcc	r3, #0
 800a3d6:	4423      	add	r3, r4
 800a3d8:	e015      	b.n	800a406 <rshift+0x68>
 800a3da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3de:	f1c1 0820 	rsb	r8, r1, #32
 800a3e2:	40cf      	lsrs	r7, r1
 800a3e4:	f105 0e04 	add.w	lr, r5, #4
 800a3e8:	46a1      	mov	r9, r4
 800a3ea:	4576      	cmp	r6, lr
 800a3ec:	46f4      	mov	ip, lr
 800a3ee:	d815      	bhi.n	800a41c <rshift+0x7e>
 800a3f0:	1a9a      	subs	r2, r3, r2
 800a3f2:	0092      	lsls	r2, r2, #2
 800a3f4:	3a04      	subs	r2, #4
 800a3f6:	3501      	adds	r5, #1
 800a3f8:	42ae      	cmp	r6, r5
 800a3fa:	bf38      	it	cc
 800a3fc:	2200      	movcc	r2, #0
 800a3fe:	18a3      	adds	r3, r4, r2
 800a400:	50a7      	str	r7, [r4, r2]
 800a402:	b107      	cbz	r7, 800a406 <rshift+0x68>
 800a404:	3304      	adds	r3, #4
 800a406:	1b1a      	subs	r2, r3, r4
 800a408:	42a3      	cmp	r3, r4
 800a40a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a40e:	bf08      	it	eq
 800a410:	2300      	moveq	r3, #0
 800a412:	6102      	str	r2, [r0, #16]
 800a414:	bf08      	it	eq
 800a416:	6143      	streq	r3, [r0, #20]
 800a418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a41c:	f8dc c000 	ldr.w	ip, [ip]
 800a420:	fa0c fc08 	lsl.w	ip, ip, r8
 800a424:	ea4c 0707 	orr.w	r7, ip, r7
 800a428:	f849 7b04 	str.w	r7, [r9], #4
 800a42c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a430:	40cf      	lsrs	r7, r1
 800a432:	e7da      	b.n	800a3ea <rshift+0x4c>
 800a434:	f851 cb04 	ldr.w	ip, [r1], #4
 800a438:	f847 cf04 	str.w	ip, [r7, #4]!
 800a43c:	e7c3      	b.n	800a3c6 <rshift+0x28>
 800a43e:	4623      	mov	r3, r4
 800a440:	e7e1      	b.n	800a406 <rshift+0x68>

0800a442 <__hexdig_fun>:
 800a442:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a446:	2b09      	cmp	r3, #9
 800a448:	d802      	bhi.n	800a450 <__hexdig_fun+0xe>
 800a44a:	3820      	subs	r0, #32
 800a44c:	b2c0      	uxtb	r0, r0
 800a44e:	4770      	bx	lr
 800a450:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a454:	2b05      	cmp	r3, #5
 800a456:	d801      	bhi.n	800a45c <__hexdig_fun+0x1a>
 800a458:	3847      	subs	r0, #71	@ 0x47
 800a45a:	e7f7      	b.n	800a44c <__hexdig_fun+0xa>
 800a45c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a460:	2b05      	cmp	r3, #5
 800a462:	d801      	bhi.n	800a468 <__hexdig_fun+0x26>
 800a464:	3827      	subs	r0, #39	@ 0x27
 800a466:	e7f1      	b.n	800a44c <__hexdig_fun+0xa>
 800a468:	2000      	movs	r0, #0
 800a46a:	4770      	bx	lr

0800a46c <__gethex>:
 800a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	b085      	sub	sp, #20
 800a472:	468a      	mov	sl, r1
 800a474:	9302      	str	r3, [sp, #8]
 800a476:	680b      	ldr	r3, [r1, #0]
 800a478:	9001      	str	r0, [sp, #4]
 800a47a:	4690      	mov	r8, r2
 800a47c:	1c9c      	adds	r4, r3, #2
 800a47e:	46a1      	mov	r9, r4
 800a480:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a484:	2830      	cmp	r0, #48	@ 0x30
 800a486:	d0fa      	beq.n	800a47e <__gethex+0x12>
 800a488:	eba9 0303 	sub.w	r3, r9, r3
 800a48c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a490:	f7ff ffd7 	bl	800a442 <__hexdig_fun>
 800a494:	4605      	mov	r5, r0
 800a496:	2800      	cmp	r0, #0
 800a498:	d168      	bne.n	800a56c <__gethex+0x100>
 800a49a:	49a0      	ldr	r1, [pc, #640]	@ (800a71c <__gethex+0x2b0>)
 800a49c:	2201      	movs	r2, #1
 800a49e:	4648      	mov	r0, r9
 800a4a0:	f7ff ff05 	bl	800a2ae <strncmp>
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d167      	bne.n	800a57a <__gethex+0x10e>
 800a4aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a4ae:	4626      	mov	r6, r4
 800a4b0:	f7ff ffc7 	bl	800a442 <__hexdig_fun>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d062      	beq.n	800a57e <__gethex+0x112>
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	7818      	ldrb	r0, [r3, #0]
 800a4bc:	2830      	cmp	r0, #48	@ 0x30
 800a4be:	4699      	mov	r9, r3
 800a4c0:	f103 0301 	add.w	r3, r3, #1
 800a4c4:	d0f9      	beq.n	800a4ba <__gethex+0x4e>
 800a4c6:	f7ff ffbc 	bl	800a442 <__hexdig_fun>
 800a4ca:	fab0 f580 	clz	r5, r0
 800a4ce:	096d      	lsrs	r5, r5, #5
 800a4d0:	f04f 0b01 	mov.w	fp, #1
 800a4d4:	464a      	mov	r2, r9
 800a4d6:	4616      	mov	r6, r2
 800a4d8:	3201      	adds	r2, #1
 800a4da:	7830      	ldrb	r0, [r6, #0]
 800a4dc:	f7ff ffb1 	bl	800a442 <__hexdig_fun>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d1f8      	bne.n	800a4d6 <__gethex+0x6a>
 800a4e4:	498d      	ldr	r1, [pc, #564]	@ (800a71c <__gethex+0x2b0>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff fee0 	bl	800a2ae <strncmp>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d13f      	bne.n	800a572 <__gethex+0x106>
 800a4f2:	b944      	cbnz	r4, 800a506 <__gethex+0x9a>
 800a4f4:	1c74      	adds	r4, r6, #1
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	4616      	mov	r6, r2
 800a4fa:	3201      	adds	r2, #1
 800a4fc:	7830      	ldrb	r0, [r6, #0]
 800a4fe:	f7ff ffa0 	bl	800a442 <__hexdig_fun>
 800a502:	2800      	cmp	r0, #0
 800a504:	d1f8      	bne.n	800a4f8 <__gethex+0x8c>
 800a506:	1ba4      	subs	r4, r4, r6
 800a508:	00a7      	lsls	r7, r4, #2
 800a50a:	7833      	ldrb	r3, [r6, #0]
 800a50c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a510:	2b50      	cmp	r3, #80	@ 0x50
 800a512:	d13e      	bne.n	800a592 <__gethex+0x126>
 800a514:	7873      	ldrb	r3, [r6, #1]
 800a516:	2b2b      	cmp	r3, #43	@ 0x2b
 800a518:	d033      	beq.n	800a582 <__gethex+0x116>
 800a51a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a51c:	d034      	beq.n	800a588 <__gethex+0x11c>
 800a51e:	1c71      	adds	r1, r6, #1
 800a520:	2400      	movs	r4, #0
 800a522:	7808      	ldrb	r0, [r1, #0]
 800a524:	f7ff ff8d 	bl	800a442 <__hexdig_fun>
 800a528:	1e43      	subs	r3, r0, #1
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b18      	cmp	r3, #24
 800a52e:	d830      	bhi.n	800a592 <__gethex+0x126>
 800a530:	f1a0 0210 	sub.w	r2, r0, #16
 800a534:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a538:	f7ff ff83 	bl	800a442 <__hexdig_fun>
 800a53c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a540:	fa5f fc8c 	uxtb.w	ip, ip
 800a544:	f1bc 0f18 	cmp.w	ip, #24
 800a548:	f04f 030a 	mov.w	r3, #10
 800a54c:	d91e      	bls.n	800a58c <__gethex+0x120>
 800a54e:	b104      	cbz	r4, 800a552 <__gethex+0xe6>
 800a550:	4252      	negs	r2, r2
 800a552:	4417      	add	r7, r2
 800a554:	f8ca 1000 	str.w	r1, [sl]
 800a558:	b1ed      	cbz	r5, 800a596 <__gethex+0x12a>
 800a55a:	f1bb 0f00 	cmp.w	fp, #0
 800a55e:	bf0c      	ite	eq
 800a560:	2506      	moveq	r5, #6
 800a562:	2500      	movne	r5, #0
 800a564:	4628      	mov	r0, r5
 800a566:	b005      	add	sp, #20
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	2500      	movs	r5, #0
 800a56e:	462c      	mov	r4, r5
 800a570:	e7b0      	b.n	800a4d4 <__gethex+0x68>
 800a572:	2c00      	cmp	r4, #0
 800a574:	d1c7      	bne.n	800a506 <__gethex+0x9a>
 800a576:	4627      	mov	r7, r4
 800a578:	e7c7      	b.n	800a50a <__gethex+0x9e>
 800a57a:	464e      	mov	r6, r9
 800a57c:	462f      	mov	r7, r5
 800a57e:	2501      	movs	r5, #1
 800a580:	e7c3      	b.n	800a50a <__gethex+0x9e>
 800a582:	2400      	movs	r4, #0
 800a584:	1cb1      	adds	r1, r6, #2
 800a586:	e7cc      	b.n	800a522 <__gethex+0xb6>
 800a588:	2401      	movs	r4, #1
 800a58a:	e7fb      	b.n	800a584 <__gethex+0x118>
 800a58c:	fb03 0002 	mla	r0, r3, r2, r0
 800a590:	e7ce      	b.n	800a530 <__gethex+0xc4>
 800a592:	4631      	mov	r1, r6
 800a594:	e7de      	b.n	800a554 <__gethex+0xe8>
 800a596:	eba6 0309 	sub.w	r3, r6, r9
 800a59a:	3b01      	subs	r3, #1
 800a59c:	4629      	mov	r1, r5
 800a59e:	2b07      	cmp	r3, #7
 800a5a0:	dc0a      	bgt.n	800a5b8 <__gethex+0x14c>
 800a5a2:	9801      	ldr	r0, [sp, #4]
 800a5a4:	f7fd fbf0 	bl	8007d88 <_Balloc>
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	b940      	cbnz	r0, 800a5be <__gethex+0x152>
 800a5ac:	4b5c      	ldr	r3, [pc, #368]	@ (800a720 <__gethex+0x2b4>)
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	21e4      	movs	r1, #228	@ 0xe4
 800a5b2:	485c      	ldr	r0, [pc, #368]	@ (800a724 <__gethex+0x2b8>)
 800a5b4:	f7fc fc72 	bl	8006e9c <__assert_func>
 800a5b8:	3101      	adds	r1, #1
 800a5ba:	105b      	asrs	r3, r3, #1
 800a5bc:	e7ef      	b.n	800a59e <__gethex+0x132>
 800a5be:	f100 0a14 	add.w	sl, r0, #20
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4655      	mov	r5, sl
 800a5c6:	469b      	mov	fp, r3
 800a5c8:	45b1      	cmp	r9, r6
 800a5ca:	d337      	bcc.n	800a63c <__gethex+0x1d0>
 800a5cc:	f845 bb04 	str.w	fp, [r5], #4
 800a5d0:	eba5 050a 	sub.w	r5, r5, sl
 800a5d4:	10ad      	asrs	r5, r5, #2
 800a5d6:	6125      	str	r5, [r4, #16]
 800a5d8:	4658      	mov	r0, fp
 800a5da:	f7fd fcc7 	bl	8007f6c <__hi0bits>
 800a5de:	016d      	lsls	r5, r5, #5
 800a5e0:	f8d8 6000 	ldr.w	r6, [r8]
 800a5e4:	1a2d      	subs	r5, r5, r0
 800a5e6:	42b5      	cmp	r5, r6
 800a5e8:	dd54      	ble.n	800a694 <__gethex+0x228>
 800a5ea:	1bad      	subs	r5, r5, r6
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f7fe f853 	bl	800869a <__any_on>
 800a5f4:	4681      	mov	r9, r0
 800a5f6:	b178      	cbz	r0, 800a618 <__gethex+0x1ac>
 800a5f8:	1e6b      	subs	r3, r5, #1
 800a5fa:	1159      	asrs	r1, r3, #5
 800a5fc:	f003 021f 	and.w	r2, r3, #31
 800a600:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a604:	f04f 0901 	mov.w	r9, #1
 800a608:	fa09 f202 	lsl.w	r2, r9, r2
 800a60c:	420a      	tst	r2, r1
 800a60e:	d003      	beq.n	800a618 <__gethex+0x1ac>
 800a610:	454b      	cmp	r3, r9
 800a612:	dc36      	bgt.n	800a682 <__gethex+0x216>
 800a614:	f04f 0902 	mov.w	r9, #2
 800a618:	4629      	mov	r1, r5
 800a61a:	4620      	mov	r0, r4
 800a61c:	f7ff febf 	bl	800a39e <rshift>
 800a620:	442f      	add	r7, r5
 800a622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a626:	42bb      	cmp	r3, r7
 800a628:	da42      	bge.n	800a6b0 <__gethex+0x244>
 800a62a:	9801      	ldr	r0, [sp, #4]
 800a62c:	4621      	mov	r1, r4
 800a62e:	f7fd fbeb 	bl	8007e08 <_Bfree>
 800a632:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a634:	2300      	movs	r3, #0
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	25a3      	movs	r5, #163	@ 0xa3
 800a63a:	e793      	b.n	800a564 <__gethex+0xf8>
 800a63c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a640:	2a2e      	cmp	r2, #46	@ 0x2e
 800a642:	d012      	beq.n	800a66a <__gethex+0x1fe>
 800a644:	2b20      	cmp	r3, #32
 800a646:	d104      	bne.n	800a652 <__gethex+0x1e6>
 800a648:	f845 bb04 	str.w	fp, [r5], #4
 800a64c:	f04f 0b00 	mov.w	fp, #0
 800a650:	465b      	mov	r3, fp
 800a652:	7830      	ldrb	r0, [r6, #0]
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	f7ff fef4 	bl	800a442 <__hexdig_fun>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	f000 000f 	and.w	r0, r0, #15
 800a660:	4098      	lsls	r0, r3
 800a662:	ea4b 0b00 	orr.w	fp, fp, r0
 800a666:	3304      	adds	r3, #4
 800a668:	e7ae      	b.n	800a5c8 <__gethex+0x15c>
 800a66a:	45b1      	cmp	r9, r6
 800a66c:	d8ea      	bhi.n	800a644 <__gethex+0x1d8>
 800a66e:	492b      	ldr	r1, [pc, #172]	@ (800a71c <__gethex+0x2b0>)
 800a670:	9303      	str	r3, [sp, #12]
 800a672:	2201      	movs	r2, #1
 800a674:	4630      	mov	r0, r6
 800a676:	f7ff fe1a 	bl	800a2ae <strncmp>
 800a67a:	9b03      	ldr	r3, [sp, #12]
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d1e1      	bne.n	800a644 <__gethex+0x1d8>
 800a680:	e7a2      	b.n	800a5c8 <__gethex+0x15c>
 800a682:	1ea9      	subs	r1, r5, #2
 800a684:	4620      	mov	r0, r4
 800a686:	f7fe f808 	bl	800869a <__any_on>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d0c2      	beq.n	800a614 <__gethex+0x1a8>
 800a68e:	f04f 0903 	mov.w	r9, #3
 800a692:	e7c1      	b.n	800a618 <__gethex+0x1ac>
 800a694:	da09      	bge.n	800a6aa <__gethex+0x23e>
 800a696:	1b75      	subs	r5, r6, r5
 800a698:	4621      	mov	r1, r4
 800a69a:	9801      	ldr	r0, [sp, #4]
 800a69c:	462a      	mov	r2, r5
 800a69e:	f7fd fdc3 	bl	8008228 <__lshift>
 800a6a2:	1b7f      	subs	r7, r7, r5
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	f100 0a14 	add.w	sl, r0, #20
 800a6aa:	f04f 0900 	mov.w	r9, #0
 800a6ae:	e7b8      	b.n	800a622 <__gethex+0x1b6>
 800a6b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6b4:	42bd      	cmp	r5, r7
 800a6b6:	dd6f      	ble.n	800a798 <__gethex+0x32c>
 800a6b8:	1bed      	subs	r5, r5, r7
 800a6ba:	42ae      	cmp	r6, r5
 800a6bc:	dc34      	bgt.n	800a728 <__gethex+0x2bc>
 800a6be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d022      	beq.n	800a70c <__gethex+0x2a0>
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d024      	beq.n	800a714 <__gethex+0x2a8>
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d115      	bne.n	800a6fa <__gethex+0x28e>
 800a6ce:	42ae      	cmp	r6, r5
 800a6d0:	d113      	bne.n	800a6fa <__gethex+0x28e>
 800a6d2:	2e01      	cmp	r6, #1
 800a6d4:	d10b      	bne.n	800a6ee <__gethex+0x282>
 800a6d6:	9a02      	ldr	r2, [sp, #8]
 800a6d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	2301      	movs	r3, #1
 800a6e0:	6123      	str	r3, [r4, #16]
 800a6e2:	f8ca 3000 	str.w	r3, [sl]
 800a6e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6e8:	2562      	movs	r5, #98	@ 0x62
 800a6ea:	601c      	str	r4, [r3, #0]
 800a6ec:	e73a      	b.n	800a564 <__gethex+0xf8>
 800a6ee:	1e71      	subs	r1, r6, #1
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f7fd ffd2 	bl	800869a <__any_on>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d1ed      	bne.n	800a6d6 <__gethex+0x26a>
 800a6fa:	9801      	ldr	r0, [sp, #4]
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f7fd fb83 	bl	8007e08 <_Bfree>
 800a702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a704:	2300      	movs	r3, #0
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	2550      	movs	r5, #80	@ 0x50
 800a70a:	e72b      	b.n	800a564 <__gethex+0xf8>
 800a70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f3      	bne.n	800a6fa <__gethex+0x28e>
 800a712:	e7e0      	b.n	800a6d6 <__gethex+0x26a>
 800a714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1dd      	bne.n	800a6d6 <__gethex+0x26a>
 800a71a:	e7ee      	b.n	800a6fa <__gethex+0x28e>
 800a71c:	0800b033 	.word	0x0800b033
 800a720:	0800afc9 	.word	0x0800afc9
 800a724:	0800b069 	.word	0x0800b069
 800a728:	1e6f      	subs	r7, r5, #1
 800a72a:	f1b9 0f00 	cmp.w	r9, #0
 800a72e:	d130      	bne.n	800a792 <__gethex+0x326>
 800a730:	b127      	cbz	r7, 800a73c <__gethex+0x2d0>
 800a732:	4639      	mov	r1, r7
 800a734:	4620      	mov	r0, r4
 800a736:	f7fd ffb0 	bl	800869a <__any_on>
 800a73a:	4681      	mov	r9, r0
 800a73c:	117a      	asrs	r2, r7, #5
 800a73e:	2301      	movs	r3, #1
 800a740:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a744:	f007 071f 	and.w	r7, r7, #31
 800a748:	40bb      	lsls	r3, r7
 800a74a:	4213      	tst	r3, r2
 800a74c:	4629      	mov	r1, r5
 800a74e:	4620      	mov	r0, r4
 800a750:	bf18      	it	ne
 800a752:	f049 0902 	orrne.w	r9, r9, #2
 800a756:	f7ff fe22 	bl	800a39e <rshift>
 800a75a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a75e:	1b76      	subs	r6, r6, r5
 800a760:	2502      	movs	r5, #2
 800a762:	f1b9 0f00 	cmp.w	r9, #0
 800a766:	d047      	beq.n	800a7f8 <__gethex+0x38c>
 800a768:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d015      	beq.n	800a79c <__gethex+0x330>
 800a770:	2b03      	cmp	r3, #3
 800a772:	d017      	beq.n	800a7a4 <__gethex+0x338>
 800a774:	2b01      	cmp	r3, #1
 800a776:	d109      	bne.n	800a78c <__gethex+0x320>
 800a778:	f019 0f02 	tst.w	r9, #2
 800a77c:	d006      	beq.n	800a78c <__gethex+0x320>
 800a77e:	f8da 3000 	ldr.w	r3, [sl]
 800a782:	ea49 0903 	orr.w	r9, r9, r3
 800a786:	f019 0f01 	tst.w	r9, #1
 800a78a:	d10e      	bne.n	800a7aa <__gethex+0x33e>
 800a78c:	f045 0510 	orr.w	r5, r5, #16
 800a790:	e032      	b.n	800a7f8 <__gethex+0x38c>
 800a792:	f04f 0901 	mov.w	r9, #1
 800a796:	e7d1      	b.n	800a73c <__gethex+0x2d0>
 800a798:	2501      	movs	r5, #1
 800a79a:	e7e2      	b.n	800a762 <__gethex+0x2f6>
 800a79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79e:	f1c3 0301 	rsb	r3, r3, #1
 800a7a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0f0      	beq.n	800a78c <__gethex+0x320>
 800a7aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7ae:	f104 0314 	add.w	r3, r4, #20
 800a7b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7ba:	f04f 0c00 	mov.w	ip, #0
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7c8:	d01b      	beq.n	800a802 <__gethex+0x396>
 800a7ca:	3201      	adds	r2, #1
 800a7cc:	6002      	str	r2, [r0, #0]
 800a7ce:	2d02      	cmp	r5, #2
 800a7d0:	f104 0314 	add.w	r3, r4, #20
 800a7d4:	d13c      	bne.n	800a850 <__gethex+0x3e4>
 800a7d6:	f8d8 2000 	ldr.w	r2, [r8]
 800a7da:	3a01      	subs	r2, #1
 800a7dc:	42b2      	cmp	r2, r6
 800a7de:	d109      	bne.n	800a7f4 <__gethex+0x388>
 800a7e0:	1171      	asrs	r1, r6, #5
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7e8:	f006 061f 	and.w	r6, r6, #31
 800a7ec:	fa02 f606 	lsl.w	r6, r2, r6
 800a7f0:	421e      	tst	r6, r3
 800a7f2:	d13a      	bne.n	800a86a <__gethex+0x3fe>
 800a7f4:	f045 0520 	orr.w	r5, r5, #32
 800a7f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7fa:	601c      	str	r4, [r3, #0]
 800a7fc:	9b02      	ldr	r3, [sp, #8]
 800a7fe:	601f      	str	r7, [r3, #0]
 800a800:	e6b0      	b.n	800a564 <__gethex+0xf8>
 800a802:	4299      	cmp	r1, r3
 800a804:	f843 cc04 	str.w	ip, [r3, #-4]
 800a808:	d8d9      	bhi.n	800a7be <__gethex+0x352>
 800a80a:	68a3      	ldr	r3, [r4, #8]
 800a80c:	459b      	cmp	fp, r3
 800a80e:	db17      	blt.n	800a840 <__gethex+0x3d4>
 800a810:	6861      	ldr	r1, [r4, #4]
 800a812:	9801      	ldr	r0, [sp, #4]
 800a814:	3101      	adds	r1, #1
 800a816:	f7fd fab7 	bl	8007d88 <_Balloc>
 800a81a:	4681      	mov	r9, r0
 800a81c:	b918      	cbnz	r0, 800a826 <__gethex+0x3ba>
 800a81e:	4b1a      	ldr	r3, [pc, #104]	@ (800a888 <__gethex+0x41c>)
 800a820:	4602      	mov	r2, r0
 800a822:	2184      	movs	r1, #132	@ 0x84
 800a824:	e6c5      	b.n	800a5b2 <__gethex+0x146>
 800a826:	6922      	ldr	r2, [r4, #16]
 800a828:	3202      	adds	r2, #2
 800a82a:	f104 010c 	add.w	r1, r4, #12
 800a82e:	0092      	lsls	r2, r2, #2
 800a830:	300c      	adds	r0, #12
 800a832:	f7ff fd81 	bl	800a338 <memcpy>
 800a836:	4621      	mov	r1, r4
 800a838:	9801      	ldr	r0, [sp, #4]
 800a83a:	f7fd fae5 	bl	8007e08 <_Bfree>
 800a83e:	464c      	mov	r4, r9
 800a840:	6923      	ldr	r3, [r4, #16]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a848:	6122      	str	r2, [r4, #16]
 800a84a:	2201      	movs	r2, #1
 800a84c:	615a      	str	r2, [r3, #20]
 800a84e:	e7be      	b.n	800a7ce <__gethex+0x362>
 800a850:	6922      	ldr	r2, [r4, #16]
 800a852:	455a      	cmp	r2, fp
 800a854:	dd0b      	ble.n	800a86e <__gethex+0x402>
 800a856:	2101      	movs	r1, #1
 800a858:	4620      	mov	r0, r4
 800a85a:	f7ff fda0 	bl	800a39e <rshift>
 800a85e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a862:	3701      	adds	r7, #1
 800a864:	42bb      	cmp	r3, r7
 800a866:	f6ff aee0 	blt.w	800a62a <__gethex+0x1be>
 800a86a:	2501      	movs	r5, #1
 800a86c:	e7c2      	b.n	800a7f4 <__gethex+0x388>
 800a86e:	f016 061f 	ands.w	r6, r6, #31
 800a872:	d0fa      	beq.n	800a86a <__gethex+0x3fe>
 800a874:	4453      	add	r3, sl
 800a876:	f1c6 0620 	rsb	r6, r6, #32
 800a87a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a87e:	f7fd fb75 	bl	8007f6c <__hi0bits>
 800a882:	42b0      	cmp	r0, r6
 800a884:	dbe7      	blt.n	800a856 <__gethex+0x3ea>
 800a886:	e7f0      	b.n	800a86a <__gethex+0x3fe>
 800a888:	0800afc9 	.word	0x0800afc9

0800a88c <L_shift>:
 800a88c:	f1c2 0208 	rsb	r2, r2, #8
 800a890:	0092      	lsls	r2, r2, #2
 800a892:	b570      	push	{r4, r5, r6, lr}
 800a894:	f1c2 0620 	rsb	r6, r2, #32
 800a898:	6843      	ldr	r3, [r0, #4]
 800a89a:	6804      	ldr	r4, [r0, #0]
 800a89c:	fa03 f506 	lsl.w	r5, r3, r6
 800a8a0:	432c      	orrs	r4, r5
 800a8a2:	40d3      	lsrs	r3, r2
 800a8a4:	6004      	str	r4, [r0, #0]
 800a8a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8aa:	4288      	cmp	r0, r1
 800a8ac:	d3f4      	bcc.n	800a898 <L_shift+0xc>
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}

0800a8b0 <__match>:
 800a8b0:	b530      	push	{r4, r5, lr}
 800a8b2:	6803      	ldr	r3, [r0, #0]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8ba:	b914      	cbnz	r4, 800a8c2 <__match+0x12>
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	2001      	movs	r0, #1
 800a8c0:	bd30      	pop	{r4, r5, pc}
 800a8c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8ca:	2d19      	cmp	r5, #25
 800a8cc:	bf98      	it	ls
 800a8ce:	3220      	addls	r2, #32
 800a8d0:	42a2      	cmp	r2, r4
 800a8d2:	d0f0      	beq.n	800a8b6 <__match+0x6>
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	e7f3      	b.n	800a8c0 <__match+0x10>

0800a8d8 <__hexnan>:
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	680b      	ldr	r3, [r1, #0]
 800a8de:	6801      	ldr	r1, [r0, #0]
 800a8e0:	115e      	asrs	r6, r3, #5
 800a8e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8e6:	f013 031f 	ands.w	r3, r3, #31
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	bf18      	it	ne
 800a8ee:	3604      	addne	r6, #4
 800a8f0:	2500      	movs	r5, #0
 800a8f2:	1f37      	subs	r7, r6, #4
 800a8f4:	4682      	mov	sl, r0
 800a8f6:	4690      	mov	r8, r2
 800a8f8:	9301      	str	r3, [sp, #4]
 800a8fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8fe:	46b9      	mov	r9, r7
 800a900:	463c      	mov	r4, r7
 800a902:	9502      	str	r5, [sp, #8]
 800a904:	46ab      	mov	fp, r5
 800a906:	784a      	ldrb	r2, [r1, #1]
 800a908:	1c4b      	adds	r3, r1, #1
 800a90a:	9303      	str	r3, [sp, #12]
 800a90c:	b342      	cbz	r2, 800a960 <__hexnan+0x88>
 800a90e:	4610      	mov	r0, r2
 800a910:	9105      	str	r1, [sp, #20]
 800a912:	9204      	str	r2, [sp, #16]
 800a914:	f7ff fd95 	bl	800a442 <__hexdig_fun>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d151      	bne.n	800a9c0 <__hexnan+0xe8>
 800a91c:	9a04      	ldr	r2, [sp, #16]
 800a91e:	9905      	ldr	r1, [sp, #20]
 800a920:	2a20      	cmp	r2, #32
 800a922:	d818      	bhi.n	800a956 <__hexnan+0x7e>
 800a924:	9b02      	ldr	r3, [sp, #8]
 800a926:	459b      	cmp	fp, r3
 800a928:	dd13      	ble.n	800a952 <__hexnan+0x7a>
 800a92a:	454c      	cmp	r4, r9
 800a92c:	d206      	bcs.n	800a93c <__hexnan+0x64>
 800a92e:	2d07      	cmp	r5, #7
 800a930:	dc04      	bgt.n	800a93c <__hexnan+0x64>
 800a932:	462a      	mov	r2, r5
 800a934:	4649      	mov	r1, r9
 800a936:	4620      	mov	r0, r4
 800a938:	f7ff ffa8 	bl	800a88c <L_shift>
 800a93c:	4544      	cmp	r4, r8
 800a93e:	d952      	bls.n	800a9e6 <__hexnan+0x10e>
 800a940:	2300      	movs	r3, #0
 800a942:	f1a4 0904 	sub.w	r9, r4, #4
 800a946:	f844 3c04 	str.w	r3, [r4, #-4]
 800a94a:	f8cd b008 	str.w	fp, [sp, #8]
 800a94e:	464c      	mov	r4, r9
 800a950:	461d      	mov	r5, r3
 800a952:	9903      	ldr	r1, [sp, #12]
 800a954:	e7d7      	b.n	800a906 <__hexnan+0x2e>
 800a956:	2a29      	cmp	r2, #41	@ 0x29
 800a958:	d157      	bne.n	800aa0a <__hexnan+0x132>
 800a95a:	3102      	adds	r1, #2
 800a95c:	f8ca 1000 	str.w	r1, [sl]
 800a960:	f1bb 0f00 	cmp.w	fp, #0
 800a964:	d051      	beq.n	800aa0a <__hexnan+0x132>
 800a966:	454c      	cmp	r4, r9
 800a968:	d206      	bcs.n	800a978 <__hexnan+0xa0>
 800a96a:	2d07      	cmp	r5, #7
 800a96c:	dc04      	bgt.n	800a978 <__hexnan+0xa0>
 800a96e:	462a      	mov	r2, r5
 800a970:	4649      	mov	r1, r9
 800a972:	4620      	mov	r0, r4
 800a974:	f7ff ff8a 	bl	800a88c <L_shift>
 800a978:	4544      	cmp	r4, r8
 800a97a:	d936      	bls.n	800a9ea <__hexnan+0x112>
 800a97c:	f1a8 0204 	sub.w	r2, r8, #4
 800a980:	4623      	mov	r3, r4
 800a982:	f853 1b04 	ldr.w	r1, [r3], #4
 800a986:	f842 1f04 	str.w	r1, [r2, #4]!
 800a98a:	429f      	cmp	r7, r3
 800a98c:	d2f9      	bcs.n	800a982 <__hexnan+0xaa>
 800a98e:	1b3b      	subs	r3, r7, r4
 800a990:	f023 0303 	bic.w	r3, r3, #3
 800a994:	3304      	adds	r3, #4
 800a996:	3401      	adds	r4, #1
 800a998:	3e03      	subs	r6, #3
 800a99a:	42b4      	cmp	r4, r6
 800a99c:	bf88      	it	hi
 800a99e:	2304      	movhi	r3, #4
 800a9a0:	4443      	add	r3, r8
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f843 2b04 	str.w	r2, [r3], #4
 800a9a8:	429f      	cmp	r7, r3
 800a9aa:	d2fb      	bcs.n	800a9a4 <__hexnan+0xcc>
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	b91b      	cbnz	r3, 800a9b8 <__hexnan+0xe0>
 800a9b0:	4547      	cmp	r7, r8
 800a9b2:	d128      	bne.n	800aa06 <__hexnan+0x12e>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	2005      	movs	r0, #5
 800a9ba:	b007      	add	sp, #28
 800a9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	2d08      	cmp	r5, #8
 800a9c4:	f10b 0b01 	add.w	fp, fp, #1
 800a9c8:	dd06      	ble.n	800a9d8 <__hexnan+0x100>
 800a9ca:	4544      	cmp	r4, r8
 800a9cc:	d9c1      	bls.n	800a952 <__hexnan+0x7a>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9d4:	2501      	movs	r5, #1
 800a9d6:	3c04      	subs	r4, #4
 800a9d8:	6822      	ldr	r2, [r4, #0]
 800a9da:	f000 000f 	and.w	r0, r0, #15
 800a9de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9e2:	6020      	str	r0, [r4, #0]
 800a9e4:	e7b5      	b.n	800a952 <__hexnan+0x7a>
 800a9e6:	2508      	movs	r5, #8
 800a9e8:	e7b3      	b.n	800a952 <__hexnan+0x7a>
 800a9ea:	9b01      	ldr	r3, [sp, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0dd      	beq.n	800a9ac <__hexnan+0xd4>
 800a9f0:	f1c3 0320 	rsb	r3, r3, #32
 800a9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f8:	40da      	lsrs	r2, r3
 800a9fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa04:	e7d2      	b.n	800a9ac <__hexnan+0xd4>
 800aa06:	3f04      	subs	r7, #4
 800aa08:	e7d0      	b.n	800a9ac <__hexnan+0xd4>
 800aa0a:	2004      	movs	r0, #4
 800aa0c:	e7d5      	b.n	800a9ba <__hexnan+0xe2>

0800aa0e <__ascii_mbtowc>:
 800aa0e:	b082      	sub	sp, #8
 800aa10:	b901      	cbnz	r1, 800aa14 <__ascii_mbtowc+0x6>
 800aa12:	a901      	add	r1, sp, #4
 800aa14:	b142      	cbz	r2, 800aa28 <__ascii_mbtowc+0x1a>
 800aa16:	b14b      	cbz	r3, 800aa2c <__ascii_mbtowc+0x1e>
 800aa18:	7813      	ldrb	r3, [r2, #0]
 800aa1a:	600b      	str	r3, [r1, #0]
 800aa1c:	7812      	ldrb	r2, [r2, #0]
 800aa1e:	1e10      	subs	r0, r2, #0
 800aa20:	bf18      	it	ne
 800aa22:	2001      	movne	r0, #1
 800aa24:	b002      	add	sp, #8
 800aa26:	4770      	bx	lr
 800aa28:	4610      	mov	r0, r2
 800aa2a:	e7fb      	b.n	800aa24 <__ascii_mbtowc+0x16>
 800aa2c:	f06f 0001 	mvn.w	r0, #1
 800aa30:	e7f8      	b.n	800aa24 <__ascii_mbtowc+0x16>

0800aa32 <_realloc_r>:
 800aa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa36:	4607      	mov	r7, r0
 800aa38:	4614      	mov	r4, r2
 800aa3a:	460d      	mov	r5, r1
 800aa3c:	b921      	cbnz	r1, 800aa48 <_realloc_r+0x16>
 800aa3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa42:	4611      	mov	r1, r2
 800aa44:	f7fd b914 	b.w	8007c70 <_malloc_r>
 800aa48:	b92a      	cbnz	r2, 800aa56 <_realloc_r+0x24>
 800aa4a:	f7fd f89d 	bl	8007b88 <_free_r>
 800aa4e:	4625      	mov	r5, r4
 800aa50:	4628      	mov	r0, r5
 800aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa56:	f000 f8dd 	bl	800ac14 <_malloc_usable_size_r>
 800aa5a:	4284      	cmp	r4, r0
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	d802      	bhi.n	800aa66 <_realloc_r+0x34>
 800aa60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa64:	d8f4      	bhi.n	800aa50 <_realloc_r+0x1e>
 800aa66:	4621      	mov	r1, r4
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7fd f901 	bl	8007c70 <_malloc_r>
 800aa6e:	4680      	mov	r8, r0
 800aa70:	b908      	cbnz	r0, 800aa76 <_realloc_r+0x44>
 800aa72:	4645      	mov	r5, r8
 800aa74:	e7ec      	b.n	800aa50 <_realloc_r+0x1e>
 800aa76:	42b4      	cmp	r4, r6
 800aa78:	4622      	mov	r2, r4
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	bf28      	it	cs
 800aa7e:	4632      	movcs	r2, r6
 800aa80:	f7ff fc5a 	bl	800a338 <memcpy>
 800aa84:	4629      	mov	r1, r5
 800aa86:	4638      	mov	r0, r7
 800aa88:	f7fd f87e 	bl	8007b88 <_free_r>
 800aa8c:	e7f1      	b.n	800aa72 <_realloc_r+0x40>
	...

0800aa90 <_strtoul_l.isra.0>:
 800aa90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa94:	4e34      	ldr	r6, [pc, #208]	@ (800ab68 <_strtoul_l.isra.0+0xd8>)
 800aa96:	4686      	mov	lr, r0
 800aa98:	460d      	mov	r5, r1
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaa0:	5d37      	ldrb	r7, [r6, r4]
 800aaa2:	f017 0708 	ands.w	r7, r7, #8
 800aaa6:	d1f8      	bne.n	800aa9a <_strtoul_l.isra.0+0xa>
 800aaa8:	2c2d      	cmp	r4, #45	@ 0x2d
 800aaaa:	d110      	bne.n	800aace <_strtoul_l.isra.0+0x3e>
 800aaac:	782c      	ldrb	r4, [r5, #0]
 800aaae:	2701      	movs	r7, #1
 800aab0:	1c85      	adds	r5, r0, #2
 800aab2:	f033 0010 	bics.w	r0, r3, #16
 800aab6:	d115      	bne.n	800aae4 <_strtoul_l.isra.0+0x54>
 800aab8:	2c30      	cmp	r4, #48	@ 0x30
 800aaba:	d10d      	bne.n	800aad8 <_strtoul_l.isra.0+0x48>
 800aabc:	7828      	ldrb	r0, [r5, #0]
 800aabe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800aac2:	2858      	cmp	r0, #88	@ 0x58
 800aac4:	d108      	bne.n	800aad8 <_strtoul_l.isra.0+0x48>
 800aac6:	786c      	ldrb	r4, [r5, #1]
 800aac8:	3502      	adds	r5, #2
 800aaca:	2310      	movs	r3, #16
 800aacc:	e00a      	b.n	800aae4 <_strtoul_l.isra.0+0x54>
 800aace:	2c2b      	cmp	r4, #43	@ 0x2b
 800aad0:	bf04      	itt	eq
 800aad2:	782c      	ldrbeq	r4, [r5, #0]
 800aad4:	1c85      	addeq	r5, r0, #2
 800aad6:	e7ec      	b.n	800aab2 <_strtoul_l.isra.0+0x22>
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1f6      	bne.n	800aaca <_strtoul_l.isra.0+0x3a>
 800aadc:	2c30      	cmp	r4, #48	@ 0x30
 800aade:	bf14      	ite	ne
 800aae0:	230a      	movne	r3, #10
 800aae2:	2308      	moveq	r3, #8
 800aae4:	f04f 38ff 	mov.w	r8, #4294967295
 800aae8:	2600      	movs	r6, #0
 800aaea:	fbb8 f8f3 	udiv	r8, r8, r3
 800aaee:	fb03 f908 	mul.w	r9, r3, r8
 800aaf2:	ea6f 0909 	mvn.w	r9, r9
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800aafc:	f1bc 0f09 	cmp.w	ip, #9
 800ab00:	d810      	bhi.n	800ab24 <_strtoul_l.isra.0+0x94>
 800ab02:	4664      	mov	r4, ip
 800ab04:	42a3      	cmp	r3, r4
 800ab06:	dd1e      	ble.n	800ab46 <_strtoul_l.isra.0+0xb6>
 800ab08:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ab0c:	d007      	beq.n	800ab1e <_strtoul_l.isra.0+0x8e>
 800ab0e:	4580      	cmp	r8, r0
 800ab10:	d316      	bcc.n	800ab40 <_strtoul_l.isra.0+0xb0>
 800ab12:	d101      	bne.n	800ab18 <_strtoul_l.isra.0+0x88>
 800ab14:	45a1      	cmp	r9, r4
 800ab16:	db13      	blt.n	800ab40 <_strtoul_l.isra.0+0xb0>
 800ab18:	fb00 4003 	mla	r0, r0, r3, r4
 800ab1c:	2601      	movs	r6, #1
 800ab1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab22:	e7e9      	b.n	800aaf8 <_strtoul_l.isra.0+0x68>
 800ab24:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ab28:	f1bc 0f19 	cmp.w	ip, #25
 800ab2c:	d801      	bhi.n	800ab32 <_strtoul_l.isra.0+0xa2>
 800ab2e:	3c37      	subs	r4, #55	@ 0x37
 800ab30:	e7e8      	b.n	800ab04 <_strtoul_l.isra.0+0x74>
 800ab32:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ab36:	f1bc 0f19 	cmp.w	ip, #25
 800ab3a:	d804      	bhi.n	800ab46 <_strtoul_l.isra.0+0xb6>
 800ab3c:	3c57      	subs	r4, #87	@ 0x57
 800ab3e:	e7e1      	b.n	800ab04 <_strtoul_l.isra.0+0x74>
 800ab40:	f04f 36ff 	mov.w	r6, #4294967295
 800ab44:	e7eb      	b.n	800ab1e <_strtoul_l.isra.0+0x8e>
 800ab46:	1c73      	adds	r3, r6, #1
 800ab48:	d106      	bne.n	800ab58 <_strtoul_l.isra.0+0xc8>
 800ab4a:	2322      	movs	r3, #34	@ 0x22
 800ab4c:	f8ce 3000 	str.w	r3, [lr]
 800ab50:	4630      	mov	r0, r6
 800ab52:	b932      	cbnz	r2, 800ab62 <_strtoul_l.isra.0+0xd2>
 800ab54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab58:	b107      	cbz	r7, 800ab5c <_strtoul_l.isra.0+0xcc>
 800ab5a:	4240      	negs	r0, r0
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	d0f9      	beq.n	800ab54 <_strtoul_l.isra.0+0xc4>
 800ab60:	b106      	cbz	r6, 800ab64 <_strtoul_l.isra.0+0xd4>
 800ab62:	1e69      	subs	r1, r5, #1
 800ab64:	6011      	str	r1, [r2, #0]
 800ab66:	e7f5      	b.n	800ab54 <_strtoul_l.isra.0+0xc4>
 800ab68:	0800b219 	.word	0x0800b219

0800ab6c <_strtoul_r>:
 800ab6c:	f7ff bf90 	b.w	800aa90 <_strtoul_l.isra.0>

0800ab70 <__ascii_wctomb>:
 800ab70:	4603      	mov	r3, r0
 800ab72:	4608      	mov	r0, r1
 800ab74:	b141      	cbz	r1, 800ab88 <__ascii_wctomb+0x18>
 800ab76:	2aff      	cmp	r2, #255	@ 0xff
 800ab78:	d904      	bls.n	800ab84 <__ascii_wctomb+0x14>
 800ab7a:	228a      	movs	r2, #138	@ 0x8a
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab82:	4770      	bx	lr
 800ab84:	700a      	strb	r2, [r1, #0]
 800ab86:	2001      	movs	r0, #1
 800ab88:	4770      	bx	lr

0800ab8a <_raise_r>:
 800ab8a:	291f      	cmp	r1, #31
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4605      	mov	r5, r0
 800ab90:	460c      	mov	r4, r1
 800ab92:	d904      	bls.n	800ab9e <_raise_r+0x14>
 800ab94:	2316      	movs	r3, #22
 800ab96:	6003      	str	r3, [r0, #0]
 800ab98:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9c:	bd38      	pop	{r3, r4, r5, pc}
 800ab9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aba0:	b112      	cbz	r2, 800aba8 <_raise_r+0x1e>
 800aba2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aba6:	b94b      	cbnz	r3, 800abbc <_raise_r+0x32>
 800aba8:	4628      	mov	r0, r5
 800abaa:	f000 f831 	bl	800ac10 <_getpid_r>
 800abae:	4622      	mov	r2, r4
 800abb0:	4601      	mov	r1, r0
 800abb2:	4628      	mov	r0, r5
 800abb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb8:	f000 b818 	b.w	800abec <_kill_r>
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d00a      	beq.n	800abd6 <_raise_r+0x4c>
 800abc0:	1c59      	adds	r1, r3, #1
 800abc2:	d103      	bne.n	800abcc <_raise_r+0x42>
 800abc4:	2316      	movs	r3, #22
 800abc6:	6003      	str	r3, [r0, #0]
 800abc8:	2001      	movs	r0, #1
 800abca:	e7e7      	b.n	800ab9c <_raise_r+0x12>
 800abcc:	2100      	movs	r1, #0
 800abce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800abd2:	4620      	mov	r0, r4
 800abd4:	4798      	blx	r3
 800abd6:	2000      	movs	r0, #0
 800abd8:	e7e0      	b.n	800ab9c <_raise_r+0x12>
	...

0800abdc <raise>:
 800abdc:	4b02      	ldr	r3, [pc, #8]	@ (800abe8 <raise+0xc>)
 800abde:	4601      	mov	r1, r0
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	f7ff bfd2 	b.w	800ab8a <_raise_r>
 800abe6:	bf00      	nop
 800abe8:	20000018 	.word	0x20000018

0800abec <_kill_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4d07      	ldr	r5, [pc, #28]	@ (800ac0c <_kill_r+0x20>)
 800abf0:	2300      	movs	r3, #0
 800abf2:	4604      	mov	r4, r0
 800abf4:	4608      	mov	r0, r1
 800abf6:	4611      	mov	r1, r2
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	f7f7 feef 	bl	80029dc <_kill>
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	d102      	bne.n	800ac08 <_kill_r+0x1c>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	b103      	cbz	r3, 800ac08 <_kill_r+0x1c>
 800ac06:	6023      	str	r3, [r4, #0]
 800ac08:	bd38      	pop	{r3, r4, r5, pc}
 800ac0a:	bf00      	nop
 800ac0c:	200004bc 	.word	0x200004bc

0800ac10 <_getpid_r>:
 800ac10:	f7f7 bedc 	b.w	80029cc <_getpid>

0800ac14 <_malloc_usable_size_r>:
 800ac14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac18:	1f18      	subs	r0, r3, #4
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	bfbc      	itt	lt
 800ac1e:	580b      	ldrlt	r3, [r1, r0]
 800ac20:	18c0      	addlt	r0, r0, r3
 800ac22:	4770      	bx	lr

0800ac24 <_init>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	bf00      	nop
 800ac28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac2a:	bc08      	pop	{r3}
 800ac2c:	469e      	mov	lr, r3
 800ac2e:	4770      	bx	lr

0800ac30 <_fini>:
 800ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac32:	bf00      	nop
 800ac34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac36:	bc08      	pop	{r3}
 800ac38:	469e      	mov	lr, r3
 800ac3a:	4770      	bx	lr
