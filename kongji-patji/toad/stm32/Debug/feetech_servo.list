
feetech_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08005cb8  08005cb8  00006cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c0  080060c0  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c8  080060c8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080060c8  080060c8  000070c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060d0  080060d0  000070d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080060d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000002b0  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000318  20000318  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec7d  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b55  00000000  00000000  00016d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  00019870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000822  00000000  00000000  0001a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022aff  00000000  00000000  0001ab4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d16f  00000000  00000000  0003d649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c86f5  00000000  00000000  0004a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112ead  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037c4  00000000  00000000  00112ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  001166b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ca0 	.word	0x08005ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005ca0 	.word	0x08005ca0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_ZN3SCSC1Ev>:
#include "SCS.h"
#include <stdio.h>
#include <cstdint>
#include <stdint.h>

SCS::SCS()
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	4a07      	ldr	r2, [pc, #28]	@ (80005d4 <_ZN3SCSC1Ev+0x28>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
{
	Level = 1; // All commands except broadcast commands return responses
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2201      	movs	r2, #1
 80005be:	711a      	strb	r2, [r3, #4]
	Error = 0;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	719a      	strb	r2, [r3, #6]
}
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	08005e0c 	.word	0x08005e0c

080005d8 <_ZN3SCS8Host2SCSEPhS0_t>:
}

// Split a 16-bit number into two 8-bit numbers
// DataL is the low bit, DataH is the high bit
void SCS::Host2SCS(u8 *DataL, u8* DataH, u16 Data)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	807b      	strh	r3, [r7, #2]
	if(End){
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d00a      	beq.n	8000604 <_ZN3SCS8Host2SCSEPhS0_t+0x2c>
		*DataL = (Data>>8);
 80005ee:	887b      	ldrh	r3, [r7, #2]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	701a      	strb	r2, [r3, #0]
		*DataH = (Data&0xff);
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	701a      	strb	r2, [r3, #0]
	}else{
		*DataH = (Data>>8);
		*DataL = (Data&0xff);
	}
}
 8000602:	e009      	b.n	8000618 <_ZN3SCS8Host2SCSEPhS0_t+0x40>
		*DataH = (Data>>8);
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	701a      	strb	r2, [r3, #0]
		*DataL = (Data&0xff);
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	701a      	strb	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <_ZN3SCS8SCS2HostEhh>:

// 8-bit numbers are combined into a 16-bit number
// DataL is the low bit, DataH is the high bit
u16 SCS::SCS2Host(u8 DataL, u8 DataH)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
 8000630:	4613      	mov	r3, r2
 8000632:	70bb      	strb	r3, [r7, #2]
	u16 Data;
	if(End){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	795b      	ldrb	r3, [r3, #5]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00a      	beq.n	8000652 <_ZN3SCS8SCS2HostEhh+0x2e>
		Data = DataL;
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	81fb      	strh	r3, [r7, #14]
		Data<<=8;
 8000640:	89fb      	ldrh	r3, [r7, #14]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	81fb      	strh	r3, [r7, #14]
		Data |= DataH;
 8000646:	78bb      	ldrb	r3, [r7, #2]
 8000648:	b29a      	uxth	r2, r3
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4313      	orrs	r3, r2
 800064e:	81fb      	strh	r3, [r7, #14]
 8000650:	e009      	b.n	8000666 <_ZN3SCS8SCS2HostEhh+0x42>
	}else{
		Data = DataH;
 8000652:	78bb      	ldrb	r3, [r7, #2]
 8000654:	81fb      	strh	r3, [r7, #14]
		Data<<=8;
 8000656:	89fb      	ldrh	r3, [r7, #14]
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	81fb      	strh	r3, [r7, #14]
		Data |= DataL;
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	b29a      	uxth	r2, r3
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	4313      	orrs	r3, r2
 8000664:	81fb      	strh	r3, [r7, #14]
	}
	return Data;
 8000666:	89fb      	ldrh	r3, [r7, #14]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <_ZN3SCS8writeBufEhhPhhh>:

void SCS::writeBuf(u8 ID, u8 MemAddr, u8 *nDat, u8 nLen, u8 Fun)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	72fb      	strb	r3, [r7, #11]
 8000682:	4613      	mov	r3, r2
 8000684:	72bb      	strb	r3, [r7, #10]
    u8 msgLen = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	76fb      	strb	r3, [r7, #27]
    u8 bBuf[6];
    u8 CheckSum = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    bBuf[0] = 0xFF;
 8000690:	23ff      	movs	r3, #255	@ 0xff
 8000692:	753b      	strb	r3, [r7, #20]
    bBuf[1] = 0xFF;
 8000694:	23ff      	movs	r3, #255	@ 0xff
 8000696:	757b      	strb	r3, [r7, #21]
    bBuf[2] = ID;
 8000698:	7afb      	ldrb	r3, [r7, #11]
 800069a:	75bb      	strb	r3, [r7, #22]
    bBuf[4] = Fun;
 800069c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80006a0:	763b      	strb	r3, [r7, #24]

    if (nDat) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00b      	beq.n	80006c0 <_ZN3SCS8writeBufEhhPhhh+0x4c>
        msgLen += nLen + 1;
 80006a8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80006ac:	7efb      	ldrb	r3, [r7, #27]
 80006ae:	4413      	add	r3, r2
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	3301      	adds	r3, #1
 80006b4:	76fb      	strb	r3, [r7, #27]
        bBuf[3] = msgLen;
 80006b6:	7efb      	ldrb	r3, [r7, #27]
 80006b8:	75fb      	strb	r3, [r7, #23]
        bBuf[5] = MemAddr;
 80006ba:	7abb      	ldrb	r3, [r7, #10]
 80006bc:	767b      	strb	r3, [r7, #25]
 80006be:	e001      	b.n	80006c4 <_ZN3SCS8writeBufEhhPhhh+0x50>
    } else {
        bBuf[3] = msgLen;
 80006c0:	7efb      	ldrb	r3, [r7, #27]
 80006c2:	75fb      	strb	r3, [r7, #23]
    }

    // ✅ 디버깅: 전체 TX 패킷 출력
    printf("[writeBuf] TX: ");
 80006c4:	483c      	ldr	r0, [pc, #240]	@ (80007b8 <_ZN3SCS8writeBufEhhPhhh+0x144>)
 80006c6:	f003 fe51 	bl	800436c <iprintf>
    for (int i = 0; i < (nDat ? 6 : 5); i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
 80006ce:	e00b      	b.n	80006e8 <_ZN3SCS8writeBufEhhPhhh+0x74>
        printf("%02X ", bBuf[i]);
 80006d0:	f107 0214 	add.w	r2, r7, #20
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4619      	mov	r1, r3
 80006dc:	4837      	ldr	r0, [pc, #220]	@ (80007bc <_ZN3SCS8writeBufEhhPhhh+0x148>)
 80006de:	f003 fe45 	bl	800436c <iprintf>
    for (int i = 0; i < (nDat ? 6 : 5); i++) {
 80006e2:	6a3b      	ldr	r3, [r7, #32]
 80006e4:	3301      	adds	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <_ZN3SCS8writeBufEhhPhhh+0x7e>
 80006ee:	2206      	movs	r2, #6
 80006f0:	e000      	b.n	80006f4 <_ZN3SCS8writeBufEhhPhhh+0x80>
 80006f2:	2205      	movs	r2, #5
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dcea      	bgt.n	80006d0 <_ZN3SCS8writeBufEhhPhhh+0x5c>
    }

    CheckSum = ID + bBuf[3] + Fun + MemAddr;
 80006fa:	7dfa      	ldrb	r2, [r7, #23]
 80006fc:	7afb      	ldrb	r3, [r7, #11]
 80006fe:	4413      	add	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000706:	4413      	add	r3, r2
 8000708:	b2da      	uxtb	r2, r3
 800070a:	7abb      	ldrb	r3, [r7, #10]
 800070c:	4413      	add	r3, r2
 800070e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (nDat) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d01b      	beq.n	8000750 <_ZN3SCS8writeBufEhhPhhh+0xdc>
        for (int i = 0; i < nLen; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
 800071c:	e013      	b.n	8000746 <_ZN3SCS8writeBufEhhPhhh+0xd2>
            CheckSum += nDat[i];
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800072a:	4413      	add	r3, r2
 800072c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            printf("%02X ", nDat[i]);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	4820      	ldr	r0, [pc, #128]	@ (80007bc <_ZN3SCS8writeBufEhhPhhh+0x148>)
 800073c:	f003 fe16 	bl	800436c <iprintf>
        for (int i = 0; i < nLen; i++) {
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	3301      	adds	r3, #1
 8000744:	61fb      	str	r3, [r7, #28]
 8000746:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800074a:	69fa      	ldr	r2, [r7, #28]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbe6      	blt.n	800071e <_ZN3SCS8writeBufEhhPhhh+0xaa>
        }
    }

    printf("%02X\r\n", (uint8_t)(~CheckSum));  // 체크섬도 출력
 8000750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000754:	43db      	mvns	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4619      	mov	r1, r3
 800075a:	4819      	ldr	r0, [pc, #100]	@ (80007c0 <_ZN3SCS8writeBufEhhPhhh+0x14c>)
 800075c:	f003 fe06 	bl	800436c <iprintf>

    // 실제 전송
    if (nDat) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d010      	beq.n	8000788 <_ZN3SCS8writeBufEhhPhhh+0x114>
        writeSCS(bBuf, 6);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f107 0114 	add.w	r1, r7, #20
 8000770:	2206      	movs	r2, #6
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	4798      	blx	r3
        writeSCS(nDat, nLen);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	4798      	blx	r3
 8000786:	e007      	b.n	8000798 <_ZN3SCS8writeBufEhhPhhh+0x124>
    } else {
        writeSCS(bBuf, 5);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f107 0114 	add.w	r1, r7, #20
 8000792:	2205      	movs	r2, #5
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	4798      	blx	r3
    }
    writeSCS((uint8_t)(~CheckSum));
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3308      	adds	r3, #8
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80007a4:	43d2      	mvns	r2, r2
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	4611      	mov	r1, r2
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	4798      	blx	r3
}
 80007ae:	bf00      	nop
 80007b0:	3728      	adds	r7, #40	@ 0x28
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	08005cb8 	.word	0x08005cb8
 80007bc:	08005cc8 	.word	0x08005cc8
 80007c0:	08005cd0 	.word	0x08005cd0

080007c4 <_ZN3SCS8genWriteEhhPhh>:

// Normal write command
// Servo ID, MemAddr memory table address, write data, write length
int SCS::genWrite(u8 ID, u8 MemAddr, u8 *nDat, u8 nLen)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	460b      	mov	r3, r1
 80007d0:	72fb      	strb	r3, [r7, #11]
 80007d2:	4613      	mov	r3, r2
 80007d4:	72bb      	strb	r3, [r7, #10]
	printf("[genWrite] ID: %d, Addr: %02x, Len: %d\r\n", ID, MemAddr, nLen);
 80007d6:	7af9      	ldrb	r1, [r7, #11]
 80007d8:	7aba      	ldrb	r2, [r7, #10]
 80007da:	7e3b      	ldrb	r3, [r7, #24]
 80007dc:	4811      	ldr	r0, [pc, #68]	@ (8000824 <_ZN3SCS8genWriteEhhPhh+0x60>)
 80007de:	f003 fdc5 	bl	800436c <iprintf>

	rFlushSCS();
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	330c      	adds	r3, #12
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	4798      	blx	r3
	writeBuf(ID, MemAddr, nDat, nLen, INST_WRITE);
 80007ee:	7aba      	ldrb	r2, [r7, #10]
 80007f0:	7af9      	ldrb	r1, [r7, #11]
 80007f2:	2303      	movs	r3, #3
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	7e3b      	ldrb	r3, [r7, #24]
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff ff39 	bl	8000674 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3310      	adds	r3, #16
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	4798      	blx	r3
	return Ack(ID);
 800080e:	7afb      	ldrb	r3, [r7, #11]
 8000810:	4619      	mov	r1, r3
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 f9fc 	bl	8000c10 <_ZN3SCS3AckEh>
 8000818:	4603      	mov	r3, r0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	08005cd8 	.word	0x08005cd8

08000828 <_ZN3SCS8regWriteEhhPhh>:

// Asynchronous write command
// Servo ID, MemAddr memory table address, write data, write length
int SCS::regWrite(u8 ID, u8 MemAddr, u8 *nDat, u8 nLen)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af02      	add	r7, sp, #8
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	460b      	mov	r3, r1
 8000834:	72fb      	strb	r3, [r7, #11]
 8000836:	4613      	mov	r3, r2
 8000838:	72bb      	strb	r3, [r7, #10]
	rFlushSCS();
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	330c      	adds	r3, #12
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	4798      	blx	r3
	writeBuf(ID, MemAddr, nDat, nLen, INST_REG_WRITE);
 8000846:	7aba      	ldrb	r2, [r7, #10]
 8000848:	7af9      	ldrb	r1, [r7, #11]
 800084a:	2304      	movs	r3, #4
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	7e3b      	ldrb	r3, [r7, #24]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f7ff ff0d 	bl	8000674 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3310      	adds	r3, #16
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	4798      	blx	r3
	return Ack(ID);
 8000866:	7afb      	ldrb	r3, [r7, #11]
 8000868:	4619      	mov	r1, r3
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f000 f9d0 	bl	8000c10 <_ZN3SCS3AckEh>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_ZN3SCS9syncWriteEPhhhS0_h>:
}

// Synchronous write command
// Servo ID[] array, IDN array length, MemAddr memory table address, write data, write length
void SCS::syncWrite(u8 ID[], u8 IDN, u8 MemAddr, u8 *nDat, u8 nLen)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b088      	sub	sp, #32
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	4611      	mov	r1, r2
 8000886:	461a      	mov	r2, r3
 8000888:	460b      	mov	r3, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
	rFlushSCS();
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	330c      	adds	r3, #12
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	4798      	blx	r3
	u8 mesLen = ((nLen+1)*IDN+4);
 800089c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008a0:	3301      	adds	r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	79fa      	ldrb	r2, [r7, #7]
 80008a6:	fb12 f303 	smulbb	r3, r2, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	3304      	adds	r3, #4
 80008ae:	773b      	strb	r3, [r7, #28]
	u8 Sum = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	77fb      	strb	r3, [r7, #31]
	u8 bBuf[7];
	bBuf[0] = 0xff;
 80008b4:	23ff      	movs	r3, #255	@ 0xff
 80008b6:	753b      	strb	r3, [r7, #20]
	bBuf[1] = 0xff;
 80008b8:	23ff      	movs	r3, #255	@ 0xff
 80008ba:	757b      	strb	r3, [r7, #21]
	bBuf[2] = 0xfe;
 80008bc:	23fe      	movs	r3, #254	@ 0xfe
 80008be:	75bb      	strb	r3, [r7, #22]
	bBuf[3] = mesLen;
 80008c0:	7f3b      	ldrb	r3, [r7, #28]
 80008c2:	75fb      	strb	r3, [r7, #23]
	bBuf[4] = INST_SYNC_WRITE;
 80008c4:	2383      	movs	r3, #131	@ 0x83
 80008c6:	763b      	strb	r3, [r7, #24]
	bBuf[5] = MemAddr;
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	767b      	strb	r3, [r7, #25]
	bBuf[6] = nLen;
 80008cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008d0:	76bb      	strb	r3, [r7, #26]
	writeSCS(bBuf, 7);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f107 0114 	add.w	r1, r7, #20
 80008dc:	2207      	movs	r2, #7
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	4798      	blx	r3

	Sum = 0xfe + mesLen + INST_SYNC_WRITE + MemAddr + nLen;
 80008e2:	7f3a      	ldrb	r2, [r7, #28]
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	4413      	add	r3, r2
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008ee:	4413      	add	r3, r2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	3b7f      	subs	r3, #127	@ 0x7f
 80008f4:	77fb      	strb	r3, [r7, #31]
	u8 i, j;
	for(i=0; i<IDN; i++){
 80008f6:	2300      	movs	r3, #0
 80008f8:	77bb      	strb	r3, [r7, #30]
 80008fa:	e03c      	b.n	8000976 <_ZN3SCS9syncWriteEPhhhS0_h+0xfc>
		writeSCS(ID[i]);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3308      	adds	r3, #8
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	7fba      	ldrb	r2, [r7, #30]
 8000906:	68b9      	ldr	r1, [r7, #8]
 8000908:	440a      	add	r2, r1
 800090a:	7812      	ldrb	r2, [r2, #0]
 800090c:	4611      	mov	r1, r2
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	4798      	blx	r3
		writeSCS(nDat+i*nLen, nLen);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	7fba      	ldrb	r2, [r7, #30]
 800091a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800091e:	fb01 f202 	mul.w	r2, r1, r2
 8000922:	4611      	mov	r1, r2
 8000924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000926:	4411      	add	r1, r2
 8000928:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800092c:	68f8      	ldr	r0, [r7, #12]
 800092e:	4798      	blx	r3
		Sum += ID[i];
 8000930:	7fbb      	ldrb	r3, [r7, #30]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	4413      	add	r3, r2
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	7ffb      	ldrb	r3, [r7, #31]
 800093a:	4413      	add	r3, r2
 800093c:	77fb      	strb	r3, [r7, #31]
		for(j=0; j<nLen; j++){
 800093e:	2300      	movs	r3, #0
 8000940:	777b      	strb	r3, [r7, #29]
 8000942:	e010      	b.n	8000966 <_ZN3SCS9syncWriteEPhhhS0_h+0xec>
			Sum += nDat[i*nLen+j];
 8000944:	7fbb      	ldrb	r3, [r7, #30]
 8000946:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800094a:	fb03 f202 	mul.w	r2, r3, r2
 800094e:	7f7b      	ldrb	r3, [r7, #29]
 8000950:	4413      	add	r3, r2
 8000952:	461a      	mov	r2, r3
 8000954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000956:	4413      	add	r3, r2
 8000958:	781a      	ldrb	r2, [r3, #0]
 800095a:	7ffb      	ldrb	r3, [r7, #31]
 800095c:	4413      	add	r3, r2
 800095e:	77fb      	strb	r3, [r7, #31]
		for(j=0; j<nLen; j++){
 8000960:	7f7b      	ldrb	r3, [r7, #29]
 8000962:	3301      	adds	r3, #1
 8000964:	777b      	strb	r3, [r7, #29]
 8000966:	7f7a      	ldrb	r2, [r7, #29]
 8000968:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800096c:	429a      	cmp	r2, r3
 800096e:	d3e9      	bcc.n	8000944 <_ZN3SCS9syncWriteEPhhhS0_h+0xca>
	for(i=0; i<IDN; i++){
 8000970:	7fbb      	ldrb	r3, [r7, #30]
 8000972:	3301      	adds	r3, #1
 8000974:	77bb      	strb	r3, [r7, #30]
 8000976:	7fba      	ldrb	r2, [r7, #30]
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	429a      	cmp	r2, r3
 800097c:	d3be      	bcc.n	80008fc <_ZN3SCS9syncWriteEPhhhS0_h+0x82>
		}
	}
	writeSCS(~Sum);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3308      	adds	r3, #8
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	7ffa      	ldrb	r2, [r7, #31]
 8000988:	43d2      	mvns	r2, r2
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	4611      	mov	r1, r2
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	4798      	blx	r3
	wFlushSCS();
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3310      	adds	r3, #16
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	4798      	blx	r3
}
 800099e:	bf00      	nop
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_ZN3SCS9writeByteEhhh>:

int SCS::writeByte(u8 ID, u8 MemAddr, u8 bDat)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b084      	sub	sp, #16
 80009aa:	af02      	add	r7, sp, #8
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	4608      	mov	r0, r1
 80009b0:	4611      	mov	r1, r2
 80009b2:	461a      	mov	r2, r3
 80009b4:	4603      	mov	r3, r0
 80009b6:	70fb      	strb	r3, [r7, #3]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70bb      	strb	r3, [r7, #2]
 80009bc:	4613      	mov	r3, r2
 80009be:	707b      	strb	r3, [r7, #1]
	rFlushSCS();
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	330c      	adds	r3, #12
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	4798      	blx	r3
	writeBuf(ID, MemAddr, &bDat, 1, INST_WRITE);
 80009cc:	1c7b      	adds	r3, r7, #1
 80009ce:	78ba      	ldrb	r2, [r7, #2]
 80009d0:	78f9      	ldrb	r1, [r7, #3]
 80009d2:	2003      	movs	r0, #3
 80009d4:	9001      	str	r0, [sp, #4]
 80009d6:	2001      	movs	r0, #1
 80009d8:	9000      	str	r0, [sp, #0]
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fe4a 	bl	8000674 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3310      	adds	r3, #16
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	4798      	blx	r3
	return Ack(ID);
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	4619      	mov	r1, r3
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f90d 	bl	8000c10 <_ZN3SCS3AckEh>
 80009f6:	4603      	mov	r3, r0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_ZN3SCS4ReadEhhPhh>:
}

// Read command
// Servo ID, MemAddr memory table address, return data nData, data length nLen
int SCS::Read(u8 ID, u8 MemAddr, u8 *nData, u8 nLen)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08b      	sub	sp, #44	@ 0x2c
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	72fb      	strb	r3, [r7, #11]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	72bb      	strb	r3, [r7, #10]
	rFlushSCS();
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	330c      	adds	r3, #12
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	4798      	blx	r3
	writeBuf(ID, MemAddr, &nLen, 1, INST_READ);
 8000a1e:	7aba      	ldrb	r2, [r7, #10]
 8000a20:	7af9      	ldrb	r1, [r7, #11]
 8000a22:	2302      	movs	r3, #2
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	2301      	movs	r3, #1
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fe20 	bl	8000674 <_ZN3SCS8writeBufEhhPhhh>
	wFlushSCS();
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3310      	adds	r3, #16
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	4798      	blx	r3
	if(!checkHead()){
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f000 f8b2 	bl	8000baa <_ZN3SCS9checkHeadEv>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	bf0c      	ite	eq
 8000a4c:	2301      	moveq	r3, #1
 8000a4e:	2300      	movne	r3, #0
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <_ZN3SCS4ReadEhhPhh+0x5a>
		return 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e061      	b.n	8000b1e <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	u8 bBuf[4];
	Error = 0;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	719a      	strb	r2, [r3, #6]
	if(readSCS(bBuf, 3)!=3){
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3304      	adds	r3, #4
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f107 0114 	add.w	r1, r7, #20
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	4798      	blx	r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	bf14      	ite	ne
 8000a78:	2301      	movne	r3, #1
 8000a7a:	2300      	moveq	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <_ZN3SCS4ReadEhhPhh+0x86>
		return 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e04b      	b.n	8000b1e <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	int Size = readSCS(nData, nLen);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	4798      	blx	r3
 8000a98:	61b8      	str	r0, [r7, #24]
	if(Size!=nLen){
 8000a9a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d001      	beq.n	8000aaa <_ZN3SCS4ReadEhhPhh+0xaa>
		return 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e039      	b.n	8000b1e <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	if(readSCS(bBuf+3, 1)!=1){
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3304      	adds	r3, #4
 8000ab0:	681c      	ldr	r4, [r3, #0]
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	3303      	adds	r3, #3
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	47a0      	blx	r4
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	bf14      	ite	ne
 8000ac6:	2301      	movne	r3, #1
 8000ac8:	2300      	moveq	r3, #0
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <_ZN3SCS4ReadEhhPhh+0xd4>
		return 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e024      	b.n	8000b1e <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	u8 calSum = bBuf[0]+bBuf[1]+bBuf[2];
 8000ad4:	7d3a      	ldrb	r2, [r7, #20]
 8000ad6:	7d7b      	ldrb	r3, [r7, #21]
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	7dbb      	ldrb	r3, [r7, #22]
 8000ade:	4413      	add	r3, r2
 8000ae0:	77fb      	strb	r3, [r7, #31]
	u8 i;
	for(i=0; i<Size; i++){
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	77bb      	strb	r3, [r7, #30]
 8000ae6:	e009      	b.n	8000afc <_ZN3SCS4ReadEhhPhh+0xfc>
		calSum += nData[i];
 8000ae8:	7fbb      	ldrb	r3, [r7, #30]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	4413      	add	r3, r2
 8000af4:	77fb      	strb	r3, [r7, #31]
	for(i=0; i<Size; i++){
 8000af6:	7fbb      	ldrb	r3, [r7, #30]
 8000af8:	3301      	adds	r3, #1
 8000afa:	77bb      	strb	r3, [r7, #30]
 8000afc:	7fbb      	ldrb	r3, [r7, #30]
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dcf1      	bgt.n	8000ae8 <_ZN3SCS4ReadEhhPhh+0xe8>
	}
	calSum = ~calSum;
 8000b04:	7ffb      	ldrb	r3, [r7, #31]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	77fb      	strb	r3, [r7, #31]
	if(calSum!=bBuf[3]){
 8000b0a:	7dfb      	ldrb	r3, [r7, #23]
 8000b0c:	7ffa      	ldrb	r2, [r7, #31]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d001      	beq.n	8000b16 <_ZN3SCS4ReadEhhPhh+0x116>
		return 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e003      	b.n	8000b1e <_ZN3SCS4ReadEhhPhh+0x11e>
	}
	Error = bBuf[2];
 8000b16:	7dba      	ldrb	r2, [r7, #22]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	719a      	strb	r2, [r3, #6]
	return Size;
 8000b1c:	69bb      	ldr	r3, [r7, #24]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}

08000b26 <_ZN3SCS8readByteEhh>:

// Read 1 byte, return -1 if timeout
int SCS::readByte(u8 ID, u8 MemAddr)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af02      	add	r7, sp, #8
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	70fb      	strb	r3, [r7, #3]
 8000b32:	4613      	mov	r3, r2
 8000b34:	70bb      	strb	r3, [r7, #2]
	u8 bDat;
	int Size = Read(ID, MemAddr, &bDat, 1);
 8000b36:	f107 030b 	add.w	r3, r7, #11
 8000b3a:	78ba      	ldrb	r2, [r7, #2]
 8000b3c:	78f9      	ldrb	r1, [r7, #3]
 8000b3e:	2001      	movs	r0, #1
 8000b40:	9000      	str	r0, [sp, #0]
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff5c 	bl	8000a00 <_ZN3SCS4ReadEhhPhh>
 8000b48:	60f8      	str	r0, [r7, #12]
	if(Size!=1){
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d002      	beq.n	8000b56 <_ZN3SCS8readByteEhh+0x30>
		return -1;
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	e000      	b.n	8000b58 <_ZN3SCS8readByteEhh+0x32>
	}else{
		return bDat;
 8000b56:	7afb      	ldrb	r3, [r7, #11]
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_ZN3SCS8readWordEhh>:

// Read 2 bytes, return -1 if timeout
int SCS::readWord(u8 ID, u8 MemAddr)
{	
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	70bb      	strb	r3, [r7, #2]
	u8 nDat[2];
	int Size;
	u16 wDat;
	Size = Read(ID, MemAddr, nDat, 2);
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	78ba      	ldrb	r2, [r7, #2]
 8000b76:	78f9      	ldrb	r1, [r7, #3]
 8000b78:	2002      	movs	r0, #2
 8000b7a:	9000      	str	r0, [sp, #0]
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff3f 	bl	8000a00 <_ZN3SCS4ReadEhhPhh>
 8000b82:	60f8      	str	r0, [r7, #12]
	if(Size!=2)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d002      	beq.n	8000b90 <_ZN3SCS8readWordEhh+0x30>
		return -1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	e008      	b.n	8000ba2 <_ZN3SCS8readWordEhh+0x42>
	wDat = SCS2Host(nDat[0], nDat[1]);
 8000b90:	7a3b      	ldrb	r3, [r7, #8]
 8000b92:	7a7a      	ldrb	r2, [r7, #9]
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff fd44 	bl	8000624 <_ZN3SCS8SCS2HostEhh>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	817b      	strh	r3, [r7, #10]
	return wDat;
 8000ba0:	897b      	ldrh	r3, [r7, #10]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_ZN3SCS9checkHeadEv>:
	Error = bBuf[2];
	return bBuf[0];
}

int SCS::checkHead()
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	u8 bDat;
	u8 bBuf[2] = {0, 0};
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	81bb      	strh	r3, [r7, #12]
	u8 Cnt = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]
	while(1){
		if(!readSCS(&bDat, 1)){
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f107 010e 	add.w	r1, r7, #14
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	4798      	blx	r3
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <_ZN3SCS9checkHeadEv+0x36>
			return 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e013      	b.n	8000c08 <_ZN3SCS9checkHeadEv+0x5e>
		}
		bBuf[1] = bBuf[0];
 8000be0:	7b3b      	ldrb	r3, [r7, #12]
 8000be2:	737b      	strb	r3, [r7, #13]
		bBuf[0] = bDat;
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	733b      	strb	r3, [r7, #12]
		if(bBuf[0]==0xff && bBuf[1]==0xff){
 8000be8:	7b3b      	ldrb	r3, [r7, #12]
 8000bea:	2bff      	cmp	r3, #255	@ 0xff
 8000bec:	d102      	bne.n	8000bf4 <_ZN3SCS9checkHeadEv+0x4a>
 8000bee:	7b7b      	ldrb	r3, [r7, #13]
 8000bf0:	2bff      	cmp	r3, #255	@ 0xff
 8000bf2:	d007      	beq.n	8000c04 <_ZN3SCS9checkHeadEv+0x5a>
			break;
		}
		Cnt++;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
		if(Cnt>10){
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	2b0a      	cmp	r3, #10
 8000bfe:	d9dc      	bls.n	8000bba <_ZN3SCS9checkHeadEv+0x10>
			return 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e001      	b.n	8000c08 <_ZN3SCS9checkHeadEv+0x5e>
			break;
 8000c04:	bf00      	nop
		}
	}
	return 1;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <_ZN3SCS3AckEh>:

int	SCS::Ack(u8 ID)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
	Error = 0;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	719a      	strb	r2, [r3, #6]
	if(ID!=0xfe && Level){
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c26:	d040      	beq.n	8000caa <_ZN3SCS3AckEh+0x9a>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	791b      	ldrb	r3, [r3, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d03c      	beq.n	8000caa <_ZN3SCS3AckEh+0x9a>
		if(!checkHead()){
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffba 	bl	8000baa <_ZN3SCS9checkHeadEv>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <_ZN3SCS3AckEh+0x3a>
			return 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e030      	b.n	8000cac <_ZN3SCS3AckEh+0x9c>
		}
		u8 bBuf[4];
		if(readSCS(bBuf, 4)!=4){
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f107 0108 	add.w	r1, r7, #8
 8000c56:	2204      	movs	r2, #4
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	4798      	blx	r3
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf14      	ite	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	2300      	moveq	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <_ZN3SCS3AckEh+0x60>
			return 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e01d      	b.n	8000cac <_ZN3SCS3AckEh+0x9c>
		}
		if(bBuf[0]!=ID){
 8000c70:	7a3b      	ldrb	r3, [r7, #8]
 8000c72:	78fa      	ldrb	r2, [r7, #3]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d001      	beq.n	8000c7c <_ZN3SCS3AckEh+0x6c>
			return 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e017      	b.n	8000cac <_ZN3SCS3AckEh+0x9c>
		}
		if(bBuf[1]!=2){
 8000c7c:	7a7b      	ldrb	r3, [r7, #9]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d001      	beq.n	8000c86 <_ZN3SCS3AckEh+0x76>
			return 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e012      	b.n	8000cac <_ZN3SCS3AckEh+0x9c>
		}
		u8 calSum = ~(bBuf[0]+bBuf[1]+bBuf[2]);
 8000c86:	7a3a      	ldrb	r2, [r7, #8]
 8000c88:	7a7b      	ldrb	r3, [r7, #9]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	7abb      	ldrb	r3, [r7, #10]
 8000c90:	4413      	add	r3, r2
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	73fb      	strb	r3, [r7, #15]
		if(calSum!=bBuf[3]){
 8000c98:	7afb      	ldrb	r3, [r7, #11]
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d001      	beq.n	8000ca4 <_ZN3SCS3AckEh+0x94>
			return 0;			
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e003      	b.n	8000cac <_ZN3SCS3AckEh+0x9c>
		}
		Error = bBuf[2];
 8000ca4:	7aba      	ldrb	r2, [r7, #10]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	719a      	strb	r2, [r3, #6]
	}
	return 1;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_ZN8SCSerial6getErrEv>:
public:
	unsigned long int IOTimeOut; // Input and output timeout
	UART_HandleTypeDef *pUart; // Serial port pointer
	int Err;
public:
	virtual int getErr(){  return Err;  }
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_ZN8SCSerialC1Ev>:
#include "SCSerial.h"

SCSerial::SCSerial(): SCS()
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fc68 	bl	80005ac <_ZN3SCSC1Ev>
 8000cdc:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <_ZN8SCSerialC1Ev+0x2c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	601a      	str	r2, [r3, #0]
{
	IOTimeOut = 100;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2264      	movs	r2, #100	@ 0x64
 8000ce6:	611a      	str	r2, [r3, #16]
	pUart = nullptr;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
}
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08005e28 	.word	0x08005e28

08000cfc <_ZN8SCSerial5beginEP20__UART_HandleTypeDef>:
	IOTimeOut = 100;
	pUart = nullptr;
}

void SCSerial::begin(UART_HandleTypeDef *huart)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
	pUart = huart;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	615a      	str	r2, [r3, #20]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_ZN8SCSerial7readSCSEPhi>:

int SCSerial::readSCS(unsigned char *nDat, int nLen)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	uint32_t startTick = HAL_GetTick();
 8000d24:	f001 f97a 	bl	800201c <HAL_GetTick>
 8000d28:	61b8      	str	r0, [r7, #24]
	int received = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]

	while ((HAL_GetTick() - startTick) < IOTimeOut) {
 8000d2e:	e01e      	b.n	8000d6e <_ZN8SCSerial7readSCSEPhi+0x56>
		uint8_t byte;
		if (HAL_UART_Receive(pUart, &byte, 1, 1) == HAL_OK) {
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6958      	ldr	r0, [r3, #20]
 8000d34:	f107 0117 	add.w	r1, r7, #23
 8000d38:	2301      	movs	r3, #1
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f002 fa2b 	bl	8003196 <HAL_UART_Receive>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf0c      	ite	eq
 8000d46:	2301      	moveq	r3, #1
 8000d48:	2300      	movne	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00e      	beq.n	8000d6e <_ZN8SCSerial7readSCSEPhi+0x56>
			if (nDat) nDat[received] = byte;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d004      	beq.n	8000d60 <_ZN8SCSerial7readSCSEPhi+0x48>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	7dfa      	ldrb	r2, [r7, #23]
 8000d5e:	701a      	strb	r2, [r3, #0]
			received++;
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	3301      	adds	r3, #1
 8000d64:	61fb      	str	r3, [r7, #28]
			if (received >= nLen) break;
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	da0e      	bge.n	8000d8c <_ZN8SCSerial7readSCSEPhi+0x74>
	while ((HAL_GetTick() - startTick) < IOTimeOut) {
 8000d6e:	f001 f955 	bl	800201c <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	1ad2      	subs	r2, r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	bf34      	ite	cc
 8000d80:	2301      	movcc	r3, #1
 8000d82:	2300      	movcs	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1d2      	bne.n	8000d30 <_ZN8SCSerial7readSCSEPhi+0x18>
 8000d8a:	e000      	b.n	8000d8e <_ZN8SCSerial7readSCSEPhi+0x76>
			if (received >= nLen) break;
 8000d8c:	bf00      	nop
		}
	}

	return received;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN8SCSerial8writeSCSEPhi>:

int SCSerial::writeSCS(unsigned char *nDat, int nLen)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	if (pUart == nullptr || nDat == nullptr) return 0;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <_ZN8SCSerial8writeSCSEPhi+0x1a>
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <_ZN8SCSerial8writeSCSEPhi+0x1e>
 8000db2:	2300      	movs	r3, #0
 8000db4:	e009      	b.n	8000dca <_ZN8SCSerial8writeSCSEPhi+0x32>
	HAL_UART_Transmit(pUart, nDat, nLen, HAL_MAX_DELAY);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6958      	ldr	r0, [r3, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	f002 f95c 	bl	8003080 <HAL_UART_Transmit>
	return nLen;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_ZN8SCSerial8writeSCSEh>:

int SCSerial::writeSCS(unsigned char bDat)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	70fb      	strb	r3, [r7, #3]
	if (pUart == nullptr) return 0;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <_ZN8SCSerial8writeSCSEh+0x18>
 8000de6:	2300      	movs	r3, #0
 8000de8:	e00e      	b.n	8000e08 <_ZN8SCSerial8writeSCSEh+0x36>
	return HAL_UART_Transmit(pUart, &bDat, 1, HAL_MAX_DELAY) == HAL_OK ? 1 : 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6958      	ldr	r0, [r3, #20]
 8000dee:	1cf9      	adds	r1, r7, #3
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	2201      	movs	r2, #1
 8000df6:	f002 f943 	bl	8003080 <HAL_UART_Transmit>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <_ZN8SCSerial8writeSCSEh+0x32>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <_ZN8SCSerial8writeSCSEh+0x34>
 8000e04:	2300      	movs	r3, #0
 8000e06:	bf00      	nop
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_ZN8SCSerial9rFlushSCSEv>:

void SCSerial::rFlushSCS()
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(pUart); // 수신 버퍼 플러시
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_ZN8SCSerial9wFlushSCSEv>:

void SCSerial::wFlushSCS()
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	// STM32 HAL은 전송 대기 없음
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_ZN7SMS_STSC1Ev>:
 */

#include "SMS_STS.h"
#include <cstdio>

SMS_STS::SMS_STS()
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff3e 	bl	8000ccc <_ZN8SCSerialC1Ev>
 8000e50:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <_ZN7SMS_STSC1Ev+0x28>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
{
	End = 0;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	715a      	strb	r2, [r3, #5]
}
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08005e48 	.word	0x08005e48

08000e6c <_ZN7SMS_STS10WritePosExEhsth>:
SMS_STS::SMS_STS(u8 End, u8 Level):SCSerial(End, Level)
{
}

int SMS_STS::WritePosEx(u8 ID, s16 Position, u16 Speed, u8 ACC)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af02      	add	r7, sp, #8
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	72fb      	strb	r3, [r7, #11]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	813b      	strh	r3, [r7, #8]
 8000e82:	4613      	mov	r3, r2
 8000e84:	80fb      	strh	r3, [r7, #6]
	if(Position<0){
 8000e86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da09      	bge.n	8000ea2 <_ZN7SMS_STS10WritePosExEhsth+0x36>
		Position = -Position;
 8000e8e:	893b      	ldrh	r3, [r7, #8]
 8000e90:	425b      	negs	r3, r3
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	813b      	strh	r3, [r7, #8]
		Position |= (1<<15);
 8000e96:	893b      	ldrh	r3, [r7, #8]
 8000e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ea0:	813b      	strh	r3, [r7, #8]
	}
	u8 bBuf[7];
	bBuf[0] = ACC;
 8000ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ea6:	753b      	strb	r3, [r7, #20]
	Host2SCS(bBuf+1, bBuf+2, Position);
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f107 0114 	add.w	r1, r7, #20
 8000eae:	3101      	adds	r1, #1
 8000eb0:	f107 0214 	add.w	r2, r7, #20
 8000eb4:	3202      	adds	r2, #2
 8000eb6:	893b      	ldrh	r3, [r7, #8]
 8000eb8:	f7ff fb8e 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+3, bBuf+4, 0);
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f107 0114 	add.w	r1, r7, #20
 8000ec2:	3103      	adds	r1, #3
 8000ec4:	f107 0214 	add.w	r2, r7, #20
 8000ec8:	3204      	adds	r2, #4
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f7ff fb84 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+5, bBuf+6, Speed);
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f107 0114 	add.w	r1, r7, #20
 8000ed6:	3105      	adds	r1, #5
 8000ed8:	f107 0214 	add.w	r2, r7, #20
 8000edc:	3206      	adds	r2, #6
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	f7ff fb7a 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	
	// 🟨 디버깅용 출력 추가
	printf("TX Buf: ");
 8000ee4:	4818      	ldr	r0, [pc, #96]	@ (8000f48 <_ZN7SMS_STS10WritePosExEhsth+0xdc>)
 8000ee6:	f003 fa41 	bl	800436c <iprintf>
	for (int i = 0; i < 7; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e00b      	b.n	8000f08 <_ZN7SMS_STS10WritePosExEhsth+0x9c>
	    printf("%02X ", bBuf[i]);
 8000ef0:	f107 0214 	add.w	r2, r7, #20
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4619      	mov	r1, r3
 8000efc:	4813      	ldr	r0, [pc, #76]	@ (8000f4c <_ZN7SMS_STS10WritePosExEhsth+0xe0>)
 8000efe:	f003 fa35 	bl	800436c <iprintf>
	for (int i = 0; i < 7; i++) {
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	ddf0      	ble.n	8000ef0 <_ZN7SMS_STS10WritePosExEhsth+0x84>
	}
	printf("\r\n");
 8000f0e:	4810      	ldr	r0, [pc, #64]	@ (8000f50 <_ZN7SMS_STS10WritePosExEhsth+0xe4>)
 8000f10:	f003 fa94 	bl	800443c <puts>

	printf("[WritePosEx] ID: %d, Pos: %d, Speed: %d, ACC: %d\r\n", ID, Position, Speed, ACC);
 8000f14:	7af9      	ldrb	r1, [r7, #11]
 8000f16:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f1a:	88f8      	ldrh	r0, [r7, #6]
 8000f1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	4603      	mov	r3, r0
 8000f24:	480b      	ldr	r0, [pc, #44]	@ (8000f54 <_ZN7SMS_STS10WritePosExEhsth+0xe8>)
 8000f26:	f003 fa21 	bl	800436c <iprintf>

	return genWrite(ID, SMS_STS_ACC, bBuf, 7);
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	7af9      	ldrb	r1, [r7, #11]
 8000f32:	2207      	movs	r2, #7
 8000f34:	9200      	str	r2, [sp, #0]
 8000f36:	2229      	movs	r2, #41	@ 0x29
 8000f38:	f7ff fc44 	bl	80007c4 <_ZN3SCS8genWriteEhhPhh>
 8000f3c:	4603      	mov	r3, r0


}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	08005d04 	.word	0x08005d04
 8000f4c:	08005d10 	.word	0x08005d10
 8000f50:	08005d18 	.word	0x08005d18
 8000f54:	08005d1c 	.word	0x08005d1c

08000f58 <_ZN7SMS_STS13RegWritePosExEhsth>:

int SMS_STS::RegWritePosEx(u8 ID, s16 Position, u16 Speed, u8 ACC)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	4608      	mov	r0, r1
 8000f62:	4611      	mov	r1, r2
 8000f64:	461a      	mov	r2, r3
 8000f66:	4603      	mov	r3, r0
 8000f68:	72fb      	strb	r3, [r7, #11]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	813b      	strh	r3, [r7, #8]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	80fb      	strh	r3, [r7, #6]
	if(Position<0){
 8000f72:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	da09      	bge.n	8000f8e <_ZN7SMS_STS13RegWritePosExEhsth+0x36>
		Position = -Position;
 8000f7a:	893b      	ldrh	r3, [r7, #8]
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	813b      	strh	r3, [r7, #8]
		Position |= (1<<15);
 8000f82:	893b      	ldrh	r3, [r7, #8]
 8000f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f8c:	813b      	strh	r3, [r7, #8]
	}
	u8 bBuf[7];
	bBuf[0] = ACC;
 8000f8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f92:	743b      	strb	r3, [r7, #16]
	Host2SCS(bBuf+1, bBuf+2, Position);
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f107 0110 	add.w	r1, r7, #16
 8000f9a:	3101      	adds	r1, #1
 8000f9c:	f107 0210 	add.w	r2, r7, #16
 8000fa0:	3202      	adds	r2, #2
 8000fa2:	893b      	ldrh	r3, [r7, #8]
 8000fa4:	f7ff fb18 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+3, bBuf+4, 0);
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f107 0110 	add.w	r1, r7, #16
 8000fae:	3103      	adds	r1, #3
 8000fb0:	f107 0210 	add.w	r2, r7, #16
 8000fb4:	3204      	adds	r2, #4
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f7ff fb0e 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	Host2SCS(bBuf+5, bBuf+6, Speed);
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f107 0110 	add.w	r1, r7, #16
 8000fc2:	3105      	adds	r1, #5
 8000fc4:	f107 0210 	add.w	r2, r7, #16
 8000fc8:	3206      	adds	r2, #6
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	f7ff fb04 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	
	printf("[RegWritePosEx] ID: %d, Pos: %d, Speed: %d, ACC: %d\r\n", ID, Position, Speed, ACC);
 8000fd0:	7af9      	ldrb	r1, [r7, #11]
 8000fd2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fd6:	88f8      	ldrh	r0, [r7, #6]
 8000fd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4808      	ldr	r0, [pc, #32]	@ (8001004 <_ZN7SMS_STS13RegWritePosExEhsth+0xac>)
 8000fe2:	f003 f9c3 	bl	800436c <iprintf>

	return regWrite(ID, SMS_STS_ACC, bBuf, 7);
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	7af9      	ldrb	r1, [r7, #11]
 8000fee:	2207      	movs	r2, #7
 8000ff0:	9200      	str	r2, [sp, #0]
 8000ff2:	2229      	movs	r2, #41	@ 0x29
 8000ff4:	f7ff fc18 	bl	8000828 <_ZN3SCS8regWriteEhhPhh>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	08005d50 	.word	0x08005d50

08001008 <_ZN7SMS_STS6ActionEv>:

void SMS_STS::Action()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    buf[0] = 0xFF;
 8001010:	23ff      	movs	r3, #255	@ 0xff
 8001012:	723b      	strb	r3, [r7, #8]
    buf[1] = 0xFF;
 8001014:	23ff      	movs	r3, #255	@ 0xff
 8001016:	727b      	strb	r3, [r7, #9]
    buf[2] = 0xFE;     // Broadcast ID
 8001018:	23fe      	movs	r3, #254	@ 0xfe
 800101a:	72bb      	strb	r3, [r7, #10]
    buf[3] = 0x02;     // Length
 800101c:	2302      	movs	r3, #2
 800101e:	72fb      	strb	r3, [r7, #11]
    buf[4] = 0x05;     // ACTION Command
 8001020:	2305      	movs	r3, #5
 8001022:	733b      	strb	r3, [r7, #12]
    buf[5] = ~(buf[2] + buf[3] + buf[4]) & 0xFF;  // Checksum
 8001024:	7aba      	ldrb	r2, [r7, #10]
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	4413      	add	r3, r2
 800102a:	b2da      	uxtb	r2, r3
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	b2db      	uxtb	r3, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	737b      	strb	r3, [r7, #13]

    writeSCS(buf, 6);  // 실제 UART 전송
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f107 0108 	add.w	r1, r7, #8
 8001044:	2206      	movs	r2, #6
 8001046:	4798      	blx	r3
    printf("[Action] sent\r\n");  // 디버그 로그
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <_ZN7SMS_STS6ActionEv+0x50>)
 800104a:	f003 f9f7 	bl	800443c <puts>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	08005d88 	.word	0x08005d88

0800105c <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_>:




void SMS_STS::SyncWritePosEx(u8 ID[], u8 IDN, s16 Position[], u16 Speed[], u8 ACC[])
{
 800105c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001060:	b08b      	sub	sp, #44	@ 0x2c
 8001062:	af02      	add	r7, sp, #8
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	4613      	mov	r3, r2
 800106c:	71fb      	strb	r3, [r7, #7]
        Host2SCS(offbuf+i*7+1, offbuf+i*7+2, Position[i]);
        Host2SCS(offbuf+i*7+3, offbuf+i*7+4, 0);
        Host2SCS(offbuf+i*7+5, offbuf+i*7+6, V);
    }
    syncWrite(ID, IDN, SMS_STS_ACC, offbuf, 7);
}
 800106e:	466b      	mov	r3, sp
 8001070:	461e      	mov	r6, r3
    u8 offbuf[7*IDN];
 8001072:	79fa      	ldrb	r2, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	1a99      	subs	r1, r3, r2
 800107a:	1e4b      	subs	r3, r1, #1
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	460a      	mov	r2, r1
 8001080:	2300      	movs	r3, #0
 8001082:	4690      	mov	r8, r2
 8001084:	4699      	mov	r9, r3
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800109a:	460a      	mov	r2, r1
 800109c:	2300      	movs	r3, #0
 800109e:	4614      	mov	r4, r2
 80010a0:	461d      	mov	r5, r3
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	00eb      	lsls	r3, r5, #3
 80010ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010b0:	00e2      	lsls	r2, r4, #3
 80010b2:	460b      	mov	r3, r1
 80010b4:	3307      	adds	r3, #7
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	ebad 0d03 	sub.w	sp, sp, r3
 80010be:	ab02      	add	r3, sp, #8
 80010c0:	3300      	adds	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
    for(u8 i = 0; i<IDN; i++){
 80010c4:	2300      	movs	r3, #0
 80010c6:	77fb      	strb	r3, [r7, #31]
 80010c8:	e087      	b.n	80011da <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0x17e>
		if(Position[i]<0){
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da1e      	bge.n	8001118 <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xbc>
			Position[i] = -Position[i];
 80010da:	7ffb      	ldrb	r3, [r7, #31]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	425b      	negs	r3, r3
 80010ea:	b299      	uxth	r1, r3
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	b20a      	sxth	r2, r1
 80010f6:	801a      	strh	r2, [r3, #0]
			Position[i] |= (1<<15);
 80010f8:	7ffb      	ldrb	r3, [r7, #31]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001104:	7ffa      	ldrb	r2, [r7, #31]
 8001106:	0052      	lsls	r2, r2, #1
 8001108:	6839      	ldr	r1, [r7, #0]
 800110a:	440a      	add	r2, r1
 800110c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001114:	b21b      	sxth	r3, r3
 8001116:	8013      	strh	r3, [r2, #0]
		if(Speed){
 8001118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xd0>
			V = Speed[i];
 800111e:	7ffb      	ldrb	r3, [r7, #31]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001124:	4413      	add	r3, r2
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	83bb      	strh	r3, [r7, #28]
 800112a:	e001      	b.n	8001130 <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xd4>
			V = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	83bb      	strh	r3, [r7, #28]
		if(ACC){
 8001130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00a      	beq.n	800114c <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xf0>
			offbuf[i*7] = ACC[i];
 8001136:	7ffb      	ldrb	r3, [r7, #31]
 8001138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800113a:	18d1      	adds	r1, r2, r3
 800113c:	7ffa      	ldrb	r2, [r7, #31]
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	7809      	ldrb	r1, [r1, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	54d1      	strb	r1, [r2, r3]
 800114a:	e006      	b.n	800115a <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0xfe>
			offbuf[i*7] = 0;
 800114c:	7ffa      	ldrb	r2, [r7, #31]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	2100      	movs	r1, #0
 8001158:	54d1      	strb	r1, [r2, r3]
        Host2SCS(offbuf+i*7+1, offbuf+i*7+2, Position[i]);
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	7ffa      	ldrb	r2, [r7, #31]
 800115e:	4613      	mov	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	3301      	adds	r3, #1
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	18d1      	adds	r1, r2, r3
 800116a:	7ffa      	ldrb	r2, [r7, #31]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	3302      	adds	r3, #2
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	18d4      	adds	r4, r2, r3
 8001178:	7ffb      	ldrb	r3, [r7, #31]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	4413      	add	r3, r2
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4622      	mov	r2, r4
 8001188:	f7ff fa26 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
        Host2SCS(offbuf+i*7+3, offbuf+i*7+4, 0);
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	7ffa      	ldrb	r2, [r7, #31]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	1a9b      	subs	r3, r3, r2
 8001196:	3303      	adds	r3, #3
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	18d1      	adds	r1, r2, r3
 800119c:	7ffa      	ldrb	r2, [r7, #31]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	3304      	adds	r3, #4
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	441a      	add	r2, r3
 80011aa:	2300      	movs	r3, #0
 80011ac:	f7ff fa14 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
        Host2SCS(offbuf+i*7+5, offbuf+i*7+6, V);
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	7ffa      	ldrb	r2, [r7, #31]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	3305      	adds	r3, #5
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	18d1      	adds	r1, r2, r3
 80011c0:	7ffa      	ldrb	r2, [r7, #31]
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	3306      	adds	r3, #6
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	441a      	add	r2, r3
 80011ce:	8bbb      	ldrh	r3, [r7, #28]
 80011d0:	f7ff fa02 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
    for(u8 i = 0; i<IDN; i++){
 80011d4:	7ffb      	ldrb	r3, [r7, #31]
 80011d6:	3301      	adds	r3, #1
 80011d8:	77fb      	strb	r3, [r7, #31]
 80011da:	7ffa      	ldrb	r2, [r7, #31]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	429a      	cmp	r2, r3
 80011e0:	f4ff af73 	bcc.w	80010ca <_ZN7SMS_STS14SyncWritePosExEPhhPsPtS0_+0x6e>
    syncWrite(ID, IDN, SMS_STS_ACC, offbuf, 7);
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	2307      	movs	r3, #7
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2329      	movs	r3, #41	@ 0x29
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	f7ff fb41 	bl	800087a <_ZN3SCS9syncWriteEPhhhS0_h>
 80011f8:	46b5      	mov	sp, r6
}
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	@ 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001204 <_ZN7SMS_STS9WheelModeEh>:

int SMS_STS::WheelMode(u8 ID)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SMS_STS_MODE, 1);		
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	78f9      	ldrb	r1, [r7, #3]
 8001214:	2301      	movs	r3, #1
 8001216:	2221      	movs	r2, #33	@ 0x21
 8001218:	f7ff fbc5 	bl	80009a6 <_ZN3SCS9writeByteEhhh>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_ZN7SMS_STS8WriteSpeEhsh>:

int SMS_STS::WriteSpe(u8 ID, s16 Speed, u8 ACC)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af02      	add	r7, sp, #8
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	4608      	mov	r0, r1
 8001230:	4611      	mov	r1, r2
 8001232:	461a      	mov	r2, r3
 8001234:	4603      	mov	r3, r0
 8001236:	70fb      	strb	r3, [r7, #3]
 8001238:	460b      	mov	r3, r1
 800123a:	803b      	strh	r3, [r7, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	70bb      	strb	r3, [r7, #2]
	if(Speed<0){
 8001240:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	da09      	bge.n	800125c <_ZN7SMS_STS8WriteSpeEhsh+0x36>
		Speed = -Speed;
 8001248:	883b      	ldrh	r3, [r7, #0]
 800124a:	425b      	negs	r3, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	803b      	strh	r3, [r7, #0]
		Speed |= (1<<15);
 8001250:	883b      	ldrh	r3, [r7, #0]
 8001252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800125a:	803b      	strh	r3, [r7, #0]
	}
	u8 bBuf[2];
	bBuf[0] = ACC;
 800125c:	78bb      	ldrb	r3, [r7, #2]
 800125e:	733b      	strb	r3, [r7, #12]
	genWrite(ID, SMS_STS_ACC, bBuf, 1);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	78f9      	ldrb	r1, [r7, #3]
 8001268:	2201      	movs	r2, #1
 800126a:	9200      	str	r2, [sp, #0]
 800126c:	2229      	movs	r2, #41	@ 0x29
 800126e:	f7ff faa9 	bl	80007c4 <_ZN3SCS8genWriteEhhPhh>
	Host2SCS(bBuf+0, bBuf+1, Speed);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f107 020c 	add.w	r2, r7, #12
 8001278:	3201      	adds	r2, #1
 800127a:	883b      	ldrh	r3, [r7, #0]
 800127c:	f107 010c 	add.w	r1, r7, #12
 8001280:	f7ff f9aa 	bl	80005d8 <_ZN3SCS8Host2SCSEPhS0_t>
	
	return genWrite(ID, SMS_STS_GOAL_SPEED_L, bBuf, 2);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	78f9      	ldrb	r1, [r7, #3]
 800128c:	2202      	movs	r2, #2
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	222e      	movs	r2, #46	@ 0x2e
 8001292:	f7ff fa97 	bl	80007c4 <_ZN3SCS8genWriteEhhPhh>
 8001296:	4603      	mov	r3, r0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN7SMS_STS12EnableTorqueEhh>:

int SMS_STS::EnableTorque(u8 ID, u8 Enable)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
 80012ac:	4613      	mov	r3, r2
 80012ae:	70bb      	strb	r3, [r7, #2]
	return writeByte(ID, SMS_STS_TORQUE_ENABLE, Enable);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	78bb      	ldrb	r3, [r7, #2]
 80012b4:	78f9      	ldrb	r1, [r7, #3]
 80012b6:	2228      	movs	r2, #40	@ 0x28
 80012b8:	f7ff fb75 	bl	80009a6 <_ZN3SCS9writeByteEhhh>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_ZN7SMS_STS11unLockEpromEh>:

int SMS_STS::unLockEprom(u8 ID)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SMS_STS_LOCK, 0);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	78f9      	ldrb	r1, [r7, #3]
 80012d6:	2300      	movs	r3, #0
 80012d8:	2237      	movs	r2, #55	@ 0x37
 80012da:	f7ff fb64 	bl	80009a6 <_ZN3SCS9writeByteEhhh>
 80012de:	4603      	mov	r3, r0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZN7SMS_STS9LockEpromEh>:

int SMS_STS::LockEprom(u8 ID)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SMS_STS_LOCK, 1);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	78f9      	ldrb	r1, [r7, #3]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2237      	movs	r2, #55	@ 0x37
 80012fc:	f7ff fb53 	bl	80009a6 <_ZN3SCS9writeByteEhhh>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_ZN7SMS_STS14CalibrationOfsEh>:

int SMS_STS::CalibrationOfs(u8 ID)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	70fb      	strb	r3, [r7, #3]
	return writeByte(ID, SMS_STS_TORQUE_ENABLE, 128);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	78f9      	ldrb	r1, [r7, #3]
 800131a:	2380      	movs	r3, #128	@ 0x80
 800131c:	2228      	movs	r2, #40	@ 0x28
 800131e:	f7ff fb42 	bl	80009a6 <_ZN3SCS9writeByteEhhh>
 8001322:	4603      	mov	r3, r0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN7SMS_STS8FeedBackEi>:

int SMS_STS::FeedBack(int ID)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af02      	add	r7, sp, #8
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	int nLen = Read(ID, SMS_STS_PRESENT_POSITION_L, Mem, sizeof(Mem));
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2d9      	uxtb	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	331c      	adds	r3, #28
 8001340:	220f      	movs	r2, #15
 8001342:	9200      	str	r2, [sp, #0]
 8001344:	2238      	movs	r2, #56	@ 0x38
 8001346:	f7ff fb5b 	bl	8000a00 <_ZN3SCS4ReadEhhPhh>
 800134a:	60f8      	str	r0, [r7, #12]
	if(nLen!=sizeof(Mem)){
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	d005      	beq.n	800135e <_ZN7SMS_STS8FeedBackEi+0x32>
		Err = 1;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	619a      	str	r2, [r3, #24]
		return -1;
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	e003      	b.n	8001366 <_ZN7SMS_STS8FeedBackEi+0x3a>
	}
	Err = 0;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
	return nLen;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_ZN7SMS_STS7ReadPosEi>:

int SMS_STS::ReadPos(int ID)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
	int Pos = -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d10c      	bne.n	80013a0 <_ZN7SMS_STS7ReadPosEi+0x32>
		Pos = Mem[SMS_STS_PRESENT_POSITION_H-SMS_STS_PRESENT_POSITION_L];
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7f5b      	ldrb	r3, [r3, #29]
 800138a:	60fb      	str	r3, [r7, #12]
		Pos <<= 8;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	60fb      	str	r3, [r7, #12]
		Pos |= Mem[SMS_STS_PRESENT_POSITION_L-SMS_STS_PRESENT_POSITION_L];
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7f1b      	ldrb	r3, [r3, #28]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e011      	b.n	80013c4 <_ZN7SMS_STS7ReadPosEi+0x56>
	}else{
		Err = 0;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
		Pos = readWord(ID, SMS_STS_PRESENT_POSITION_L);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	b2d1      	uxtb	r1, r2
 80013ac:	2238      	movs	r2, #56	@ 0x38
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fbd6 	bl	8000b60 <_ZN3SCS8readWordEhh>
 80013b4:	60f8      	str	r0, [r7, #12]
		if(Pos==-1){
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d102      	bne.n	80013c4 <_ZN7SMS_STS7ReadPosEi+0x56>
			Err = 1;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	619a      	str	r2, [r3, #24]
		}
	}
	if(!Err && (Pos&(1<<15))){
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d109      	bne.n	80013e0 <_ZN7SMS_STS7ReadPosEi+0x72>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <_ZN7SMS_STS7ReadPosEi+0x72>
		Pos = -(Pos&~(1<<15));
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80013dc:	425b      	negs	r3, r3
 80013de:	60fb      	str	r3, [r7, #12]
	}
	
	return Pos;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_ZN7SMS_STS9ReadSpeedEi>:

int SMS_STS::ReadSpeed(int ID)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
	int Speed = -1;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d10c      	bne.n	800141c <_ZN7SMS_STS9ReadSpeedEi+0x32>
		Speed = Mem[SMS_STS_PRESENT_SPEED_H-SMS_STS_PRESENT_POSITION_L];
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7fdb      	ldrb	r3, [r3, #31]
 8001406:	60fb      	str	r3, [r7, #12]
		Speed <<= 8;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	60fb      	str	r3, [r7, #12]
		Speed |= Mem[SMS_STS_PRESENT_SPEED_L-SMS_STS_PRESENT_POSITION_L];
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7f9b      	ldrb	r3, [r3, #30]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e014      	b.n	8001446 <_ZN7SMS_STS9ReadSpeedEi+0x5c>
	}else{
		Err = 0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
		Speed = readWord(ID, SMS_STS_PRESENT_SPEED_L);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	b2d1      	uxtb	r1, r2
 8001428:	223a      	movs	r2, #58	@ 0x3a
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fb98 	bl	8000b60 <_ZN3SCS8readWordEhh>
 8001430:	60f8      	str	r0, [r7, #12]
		if(Speed==-1){
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d105      	bne.n	8001446 <_ZN7SMS_STS9ReadSpeedEi+0x5c>
			Err = 1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	619a      	str	r2, [r3, #24]
			return -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	e00e      	b.n	8001464 <_ZN7SMS_STS9ReadSpeedEi+0x7a>
		}
	}
	if(!Err && (Speed&(1<<15))){
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <_ZN7SMS_STS9ReadSpeedEi+0x78>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <_ZN7SMS_STS9ReadSpeedEi+0x78>
		Speed = -(Speed&~(1<<15));
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800145e:	425b      	negs	r3, r3
 8001460:	60fb      	str	r3, [r7, #12]
	}	
	return Speed;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_ZN7SMS_STS8ReadLoadEi>:

int SMS_STS::ReadLoad(int ID)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	int Load = -1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001482:	d10e      	bne.n	80014a2 <_ZN7SMS_STS8ReadLoadEi+0x36>
		Load = Mem[SMS_STS_PRESENT_LOAD_H-SMS_STS_PRESENT_POSITION_L];
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800148a:	60fb      	str	r3, [r7, #12]
		Load <<= 8;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	60fb      	str	r3, [r7, #12]
		Load |= Mem[SMS_STS_PRESENT_LOAD_L-SMS_STS_PRESENT_POSITION_L];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001498:	461a      	mov	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	e011      	b.n	80014c6 <_ZN7SMS_STS8ReadLoadEi+0x5a>
	}else{
		Err = 0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
		Load = readWord(ID, SMS_STS_PRESENT_LOAD_L);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	b2d1      	uxtb	r1, r2
 80014ae:	223c      	movs	r2, #60	@ 0x3c
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fb55 	bl	8000b60 <_ZN3SCS8readWordEhh>
 80014b6:	60f8      	str	r0, [r7, #12]
		if(Load==-1){
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014be:	d102      	bne.n	80014c6 <_ZN7SMS_STS8ReadLoadEi+0x5a>
			Err = 1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	619a      	str	r2, [r3, #24]
		}
	}
	if(!Err && (Load&(1<<10))){
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <_ZN7SMS_STS8ReadLoadEi+0x76>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <_ZN7SMS_STS8ReadLoadEi+0x76>
		Load = -(Load&~(1<<10));
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80014de:	425b      	negs	r3, r3
 80014e0:	60fb      	str	r3, [r7, #12]
	}
	return Load;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_ZN7SMS_STS11ReadVoltageEi>:

int SMS_STS::ReadVoltage(int ID)
{	
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	int Voltage = -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001502:	d104      	bne.n	800150e <_ZN7SMS_STS11ReadVoltageEi+0x22>
		Voltage = Mem[SMS_STS_PRESENT_VOLTAGE-SMS_STS_PRESENT_POSITION_L];	
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e011      	b.n	8001532 <_ZN7SMS_STS11ReadVoltageEi+0x46>
	}else{
		Err = 0;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
		Voltage = readByte(ID, SMS_STS_PRESENT_VOLTAGE);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	b2d1      	uxtb	r1, r2
 800151a:	223e      	movs	r2, #62	@ 0x3e
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fb02 	bl	8000b26 <_ZN3SCS8readByteEhh>
 8001522:	60f8      	str	r0, [r7, #12]
		if(Voltage==-1){
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152a:	d102      	bne.n	8001532 <_ZN7SMS_STS11ReadVoltageEi+0x46>
			Err = 1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	619a      	str	r2, [r3, #24]
		}
	}
	return Voltage;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_ZN7SMS_STS10ReadTemperEi>:

int SMS_STS::ReadTemper(int ID)
{	
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	int Temper = -1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001552:	d104      	bne.n	800155e <_ZN7SMS_STS10ReadTemperEi+0x22>
		Temper = Mem[SMS_STS_PRESENT_TEMPERATURE-SMS_STS_PRESENT_POSITION_L];	
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e011      	b.n	8001582 <_ZN7SMS_STS10ReadTemperEi+0x46>
	}else{
		Err = 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
		Temper = readByte(ID, SMS_STS_PRESENT_TEMPERATURE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	b2d1      	uxtb	r1, r2
 800156a:	223f      	movs	r2, #63	@ 0x3f
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fada 	bl	8000b26 <_ZN3SCS8readByteEhh>
 8001572:	60f8      	str	r0, [r7, #12]
		if(Temper==-1){
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157a:	d102      	bne.n	8001582 <_ZN7SMS_STS10ReadTemperEi+0x46>
			Err = 1;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	619a      	str	r2, [r3, #24]
		}
	}
	return Temper;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZN7SMS_STS8ReadMoveEi>:

int SMS_STS::ReadMove(int ID)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	int Move = -1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a2:	d104      	bne.n	80015ae <_ZN7SMS_STS8ReadMoveEi+0x22>
		Move = Mem[SMS_STS_MOVING-SMS_STS_PRESENT_POSITION_L];	
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e011      	b.n	80015d2 <_ZN7SMS_STS8ReadMoveEi+0x46>
	}else{
		Err = 0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
		Move = readByte(ID, SMS_STS_MOVING);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	b2d1      	uxtb	r1, r2
 80015ba:	2242      	movs	r2, #66	@ 0x42
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fab2 	bl	8000b26 <_ZN3SCS8readByteEhh>
 80015c2:	60f8      	str	r0, [r7, #12]
		if(Move==-1){
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ca:	d102      	bne.n	80015d2 <_ZN7SMS_STS8ReadMoveEi+0x46>
			Err = 1;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	619a      	str	r2, [r3, #24]
		}
	}
	return Move;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZN7SMS_STS8ReadModeEi>:

int SMS_STS::ReadMode(int ID)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	int Mode = -1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f2:	d103      	bne.n	80015fc <_ZN7SMS_STS8ReadModeEi+0x20>
		Mode = Mem[SMS_STS_MODE-SMS_STS_PRESENT_POSITION_L];	
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	795b      	ldrb	r3, [r3, #5]
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e011      	b.n	8001620 <_ZN7SMS_STS8ReadModeEi+0x44>
	}else{
		Err = 0;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
		Mode = readByte(ID, SMS_STS_MODE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d1      	uxtb	r1, r2
 8001608:	2221      	movs	r2, #33	@ 0x21
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fa8b 	bl	8000b26 <_ZN3SCS8readByteEhh>
 8001610:	60f8      	str	r0, [r7, #12]
		if(Mode==-1){
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d102      	bne.n	8001620 <_ZN7SMS_STS8ReadModeEi+0x44>
			Err = 1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	619a      	str	r2, [r3, #24]
		}
	}
	return Mode;
 8001620:	68fb      	ldr	r3, [r7, #12]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_ZN7SMS_STS11ReadCurrentEi>:

int SMS_STS::ReadCurrent(int ID)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	int Current = -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	60fb      	str	r3, [r7, #12]
	if(ID==-1){
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d10e      	bne.n	8001660 <_ZN7SMS_STS11ReadCurrentEi+0x36>
		Current = Mem[SMS_STS_PRESENT_CURRENT_H-SMS_STS_PRESENT_POSITION_L];
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001648:	60fb      	str	r3, [r7, #12]
		Current <<= 8;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	60fb      	str	r3, [r7, #12]
		Current |= Mem[SMS_STS_PRESENT_CURRENT_L-SMS_STS_PRESENT_POSITION_L];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e014      	b.n	800168a <_ZN7SMS_STS11ReadCurrentEi+0x60>
	}else{
		Err = 0;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
		Current = readWord(ID, SMS_STS_PRESENT_CURRENT_L);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b2d1      	uxtb	r1, r2
 800166c:	2245      	movs	r2, #69	@ 0x45
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fa76 	bl	8000b60 <_ZN3SCS8readWordEhh>
 8001674:	60f8      	str	r0, [r7, #12]
		if(Current==-1){
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d105      	bne.n	800168a <_ZN7SMS_STS11ReadCurrentEi+0x60>
			Err = 1;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	619a      	str	r2, [r3, #24]
			return -1;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	e00e      	b.n	80016a8 <_ZN7SMS_STS11ReadCurrentEi+0x7e>
		}
	}
	if(!Err && (Current&(1<<15))){
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <_ZN7SMS_STS11ReadCurrentEi+0x7c>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <_ZN7SMS_STS11ReadCurrentEi+0x7c>
		Current = -(Current&~(1<<15));
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80016a2:	425b      	negs	r3, r3
 80016a4:	60fb      	str	r3, [r7, #12]
	}	
	return Current;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
extern "C" int main(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b6:	f000 fc4b 	bl	8001f50 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ba:	f000 f841 	bl	8001740 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016be:	f000 f8a7 	bl	8001810 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80016c2:	f000 fbc7 	bl	8001e54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80016c6:	f000 fbef 	bl	8001ea8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
   servo.begin(&huart2); // ← 실제 UART 핸들 등록
 80016ca:	4917      	ldr	r1, [pc, #92]	@ (8001728 <main+0x78>)
 80016cc:	4817      	ldr	r0, [pc, #92]	@ (800172c <main+0x7c>)
 80016ce:	f7ff fb15 	bl	8000cfc <_ZN8SCSerial5beginEP20__UART_HandleTypeDef>
   for (int i = 1; i <= 6; i++) {
 80016d2:	2301      	movs	r3, #1
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	e009      	b.n	80016ec <main+0x3c>
       servo.EnableTorque(i, 1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2201      	movs	r2, #1
 80016de:	4619      	mov	r1, r3
 80016e0:	4812      	ldr	r0, [pc, #72]	@ (800172c <main+0x7c>)
 80016e2:	f7ff fddd 	bl	80012a0 <_ZN7SMS_STS12EnableTorqueEhh>
   for (int i = 1; i <= 6; i++) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3301      	adds	r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	ddf2      	ble.n	80016d8 <main+0x28>
   }
   HAL_UART_Receive_IT(&huart3, &rx_byte, 1);  // 인터럽트 기반 수신 시작
 80016f2:	2201      	movs	r2, #1
 80016f4:	490e      	ldr	r1, [pc, #56]	@ (8001730 <main+0x80>)
 80016f6:	480f      	ldr	r0, [pc, #60]	@ (8001734 <main+0x84>)
 80016f8:	f001 fde4 	bl	80032c4 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (command_ready) {
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <main+0x88>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	bf14      	ite	ne
 8001706:	2301      	movne	r3, #1
 8001708:	2300      	moveq	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f5      	beq.n	80016fc <main+0x4c>
	    command_ready = 0;  // 플래그 클리어
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <main+0x88>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
	    process_command((char*)rx_buf);
 8001716:	4809      	ldr	r0, [pc, #36]	@ (800173c <main+0x8c>)
 8001718:	f000 f912 	bl	8001940 <_Z15process_commandPc>
	    memset(rx_buf, 0, sizeof(rx_buf));  // 버퍼 클리어
 800171c:	2280      	movs	r2, #128	@ 0x80
 800171e:	2100      	movs	r1, #0
 8001720:	4806      	ldr	r0, [pc, #24]	@ (800173c <main+0x8c>)
 8001722:	f002 ff99 	bl	8004658 <memset>
	if (command_ready) {
 8001726:	e7e9      	b.n	80016fc <main+0x4c>
 8001728:	20000138 	.word	0x20000138
 800172c:	20000084 	.word	0x20000084
 8001730:	20000131 	.word	0x20000131
 8001734:	20000180 	.word	0x20000180
 8001738:	20000132 	.word	0x20000132
 800173c:	200000b0 	.word	0x200000b0

08001740 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b094      	sub	sp, #80	@ 0x50
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2230      	movs	r2, #48	@ 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f002 ff82 	bl	8004658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <_Z18SystemClock_Configv+0xc8>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	4a26      	ldr	r2, [pc, #152]	@ (8001808 <_Z18SystemClock_Configv+0xc8>)
 800176e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	@ 0x40
 8001774:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <_Z18SystemClock_Configv+0xc8>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	4b21      	ldr	r3, [pc, #132]	@ (800180c <_Z18SystemClock_Configv+0xcc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a20      	ldr	r2, [pc, #128]	@ (800180c <_Z18SystemClock_Configv+0xcc>)
 800178a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <_Z18SystemClock_Configv+0xcc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179c:	2302      	movs	r3, #2
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a4:	2310      	movs	r3, #16
 80017a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 0320 	add.w	r3, r7, #32
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 ffbd 	bl	8002730 <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 80017c6:	f000 f93f 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ca:	230f      	movs	r3, #15
 80017cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fa1b 	bl	8002c20 <HAL_RCC_ClockConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf14      	ite	ne
 80017f0:	2301      	movne	r3, #1
 80017f2:	2300      	moveq	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80017fa:	f000 f925 	bl	8001a48 <Error_Handler>
  }
}
 80017fe:	bf00      	nop
 8001800:	3750      	adds	r7, #80	@ 0x50
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <_ZL12MX_GPIO_Initv+0x9c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a1f      	ldr	r2, [pc, #124]	@ (80018ac <_ZL12MX_GPIO_Initv+0x9c>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <_ZL12MX_GPIO_Initv+0x9c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <_ZL12MX_GPIO_Initv+0x9c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <_ZL12MX_GPIO_Initv+0x9c>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <_ZL12MX_GPIO_Initv+0x9c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <_ZL12MX_GPIO_Initv+0x9c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a11      	ldr	r2, [pc, #68]	@ (80018ac <_ZL12MX_GPIO_Initv+0x9c>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <_ZL12MX_GPIO_Initv+0x9c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001880:	480b      	ldr	r0, [pc, #44]	@ (80018b0 <_ZL12MX_GPIO_Initv+0xa0>)
 8001882:	f000 ff3b 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4619      	mov	r1, r3
 800189e:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <_ZL12MX_GPIO_Initv+0xa0>)
 80018a0:	f000 fd90 	bl	80023c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020c00 	.word	0x40020c00

080018b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	@ (8001928 <HAL_UART_RxCpltCallback+0x74>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12c      	bne.n	8001920 <HAL_UART_RxCpltCallback+0x6c>
        if (rx_byte == '\n' || rx_byte == '\r') {
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <HAL_UART_RxCpltCallback+0x78>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	d003      	beq.n	80018d6 <HAL_UART_RxCpltCallback+0x22>
 80018ce:	4b17      	ldr	r3, [pc, #92]	@ (800192c <HAL_UART_RxCpltCallback+0x78>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b0d      	cmp	r3, #13
 80018d4:	d10c      	bne.n	80018f0 <HAL_UART_RxCpltCallback+0x3c>
            rx_buf[rx_index] = '\0';
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <HAL_UART_RxCpltCallback+0x7c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_UART_RxCpltCallback+0x80>)
 80018de:	2100      	movs	r1, #0
 80018e0:	5499      	strb	r1, [r3, r2]
            command_ready = 1;  // ✅ 플래그만 세움
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <HAL_UART_RxCpltCallback+0x84>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <HAL_UART_RxCpltCallback+0x7c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e012      	b.n	8001916 <HAL_UART_RxCpltCallback+0x62>
        } else {
            if (rx_index < RX_BUF_SIZE - 1) {
 80018f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_UART_RxCpltCallback+0x7c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80018f6:	d80b      	bhi.n	8001910 <HAL_UART_RxCpltCallback+0x5c>
                rx_buf[rx_index++] = rx_byte;
 80018f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <HAL_UART_RxCpltCallback+0x7c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	b2d1      	uxtb	r1, r2
 8001900:	4a0b      	ldr	r2, [pc, #44]	@ (8001930 <HAL_UART_RxCpltCallback+0x7c>)
 8001902:	7011      	strb	r1, [r2, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_UART_RxCpltCallback+0x78>)
 8001908:	7819      	ldrb	r1, [r3, #0]
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_UART_RxCpltCallback+0x80>)
 800190c:	5499      	strb	r1, [r3, r2]
 800190e:	e002      	b.n	8001916 <HAL_UART_RxCpltCallback+0x62>
            } else {
                rx_index = 0;  // 오버플로우 방지
 8001910:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <HAL_UART_RxCpltCallback+0x7c>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);  // 다음 수신 대기
 8001916:	2201      	movs	r2, #1
 8001918:	4904      	ldr	r1, [pc, #16]	@ (800192c <HAL_UART_RxCpltCallback+0x78>)
 800191a:	4808      	ldr	r0, [pc, #32]	@ (800193c <HAL_UART_RxCpltCallback+0x88>)
 800191c:	f001 fcd2 	bl	80032c4 <HAL_UART_Receive_IT>
    }
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40004800 	.word	0x40004800
 800192c:	20000131 	.word	0x20000131
 8001930:	20000130 	.word	0x20000130
 8001934:	200000b0 	.word	0x200000b0
 8001938:	20000132 	.word	0x20000132
 800193c:	20000180 	.word	0x20000180

08001940 <_Z15process_commandPc>:


void process_command(char* raw_cmd) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b098      	sub	sp, #96	@ 0x60
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
    const int fixed_speed = 100;
 8001948:	2364      	movs	r3, #100	@ 0x64
 800194a:	64bb      	str	r3, [r7, #72]	@ 0x48
    const int fixed_acc = 50;
 800194c:	2332      	movs	r3, #50	@ 0x32
 800194e:	647b      	str	r3, [r7, #68]	@ 0x44

    ServoCommand commands[MAX_COMMANDS];
    int command_count = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	657b      	str	r3, [r7, #84]	@ 0x54

    for (char* token = strtok(raw_cmd, ",");
 8001954:	4936      	ldr	r1, [pc, #216]	@ (8001a30 <_Z15process_commandPc+0xf0>)
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f002 fe86 	bl	8004668 <strtok>
 800195c:	6538      	str	r0, [r7, #80]	@ 0x50
 800195e:	e032      	b.n	80019c6 <_Z15process_commandPc+0x86>
         token && command_count < MAX_COMMANDS;
         token = strtok(NULL, ","))
    {
        int id = 0, pos = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
        if (sscanf(token, "%d:%d", &id, &pos) == 2) {
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	f107 0210 	add.w	r2, r7, #16
 8001970:	4930      	ldr	r1, [pc, #192]	@ (8001a34 <_Z15process_commandPc+0xf4>)
 8001972:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001974:	f002 fd6a 	bl	800444c <siscanf>
 8001978:	4603      	mov	r3, r0
 800197a:	2b02      	cmp	r3, #2
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d015      	beq.n	80019b4 <_Z15process_commandPc+0x74>
            commands[command_count++] = (ServoCommand){id, pos};
 8001988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	657a      	str	r2, [r7, #84]	@ 0x54
 800198e:	6938      	ldr	r0, [r7, #16]
 8001990:	68f9      	ldr	r1, [r7, #12]
 8001992:	00da      	lsls	r2, r3, #3
 8001994:	3258      	adds	r2, #88	@ 0x58
 8001996:	443a      	add	r2, r7
 8001998:	f842 0c44 	str.w	r0, [r2, #-68]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	3358      	adds	r3, #88	@ 0x58
 80019a0:	443b      	add	r3, r7
 80019a2:	f843 1c40 	str.w	r1, [r3, #-64]
            printf("Parsed → ID=%d, POS=%d\r\n", id, pos);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4619      	mov	r1, r3
 80019ac:	4822      	ldr	r0, [pc, #136]	@ (8001a38 <_Z15process_commandPc+0xf8>)
 80019ae:	f002 fcdd 	bl	800436c <iprintf>
 80019b2:	e003      	b.n	80019bc <_Z15process_commandPc+0x7c>
        } else {
            printf("⚠️ Parse error: %s\r\n", token);
 80019b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80019b6:	4821      	ldr	r0, [pc, #132]	@ (8001a3c <_Z15process_commandPc+0xfc>)
 80019b8:	f002 fcd8 	bl	800436c <iprintf>
         token = strtok(NULL, ","))
 80019bc:	491c      	ldr	r1, [pc, #112]	@ (8001a30 <_Z15process_commandPc+0xf0>)
 80019be:	2000      	movs	r0, #0
 80019c0:	f002 fe52 	bl	8004668 <strtok>
 80019c4:	6538      	str	r0, [r7, #80]	@ 0x50
         token && command_count < MAX_COMMANDS;
 80019c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <_Z15process_commandPc+0x92>
 80019cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	ddc6      	ble.n	8001960 <_Z15process_commandPc+0x20>
        }
    }

    for (int i = 0; i < command_count; i++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019d6:	e019      	b.n	8001a0c <_Z15process_commandPc+0xcc>
        servo.RegWritePosEx(commands[i].id, commands[i].pos, fixed_speed, fixed_acc);
 80019d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	3358      	adds	r3, #88	@ 0x58
 80019de:	443b      	add	r3, r7
 80019e0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80019e4:	b2d9      	uxtb	r1, r3
 80019e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	3358      	adds	r3, #88	@ 0x58
 80019ec:	443b      	add	r3, r7
 80019ee:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	2332      	movs	r3, #50	@ 0x32
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2364      	movs	r3, #100	@ 0x64
 80019fa:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <_Z15process_commandPc+0x100>)
 80019fc:	f7ff faac 	bl	8000f58 <_ZN7SMS_STS13RegWritePosExEhsth>
        HAL_Delay(50);
 8001a00:	2032      	movs	r0, #50	@ 0x32
 8001a02:	f000 fb17 	bl	8002034 <HAL_Delay>
    for (int i = 0; i < command_count; i++) {
 8001a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a08:	3301      	adds	r3, #1
 8001a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbe1      	blt.n	80019d8 <_Z15process_commandPc+0x98>
    }

    HAL_Delay(100);
 8001a14:	2064      	movs	r0, #100	@ 0x64
 8001a16:	f000 fb0d 	bl	8002034 <HAL_Delay>
    printf("[ACT] Executing Action()\r\n");
 8001a1a:	480a      	ldr	r0, [pc, #40]	@ (8001a44 <_Z15process_commandPc+0x104>)
 8001a1c:	f002 fd0e 	bl	800443c <puts>
    servo.Action();
 8001a20:	4807      	ldr	r0, [pc, #28]	@ (8001a40 <_Z15process_commandPc+0x100>)
 8001a22:	f7ff faf1 	bl	8001008 <_ZN7SMS_STS6ActionEv>
}
 8001a26:	bf00      	nop
 8001a28:	3758      	adds	r7, #88	@ 0x58
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	08005d98 	.word	0x08005d98
 8001a34:	08005d9c 	.word	0x08005d9c
 8001a38:	08005da4 	.word	0x08005da4
 8001a3c:	08005dc0 	.word	0x08005dc0
 8001a40:	20000084 	.word	0x20000084
 8001a44:	08005ddc 	.word	0x08005ddc

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <Error_Handler+0x8>

08001a54 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
SMS_STS servo;
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <_Z41__static_initialization_and_destruction_0v+0x10>)
 8001a5a:	f7ff f9f1 	bl	8000e40 <_ZN7SMS_STSC1Ev>
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000084 	.word	0x20000084

08001a68 <_GLOBAL__sub_I_servo>:
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	f7ff fff2 	bl	8001a54 <_Z41__static_initialization_and_destruction_0v>
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <HAL_MspInit+0x58>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <HAL_MspInit+0x58>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_MspInit+0x58>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <HAL_MspInit+0x58>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <HAL_MspInit+0x58>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_MspInit+0x58>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2005      	movs	r0, #5
 8001ab8:	f000 fbbb 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001abc:	2005      	movs	r0, #5
 8001abe:	f000 fbd4 	bl	800226a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	@ 0x30
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a3a      	ldr	r2, [pc, #232]	@ (8001bd8 <HAL_UART_MspInit+0x108>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d134      	bne.n	8001b5c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	4b39      	ldr	r3, [pc, #228]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a38      	ldr	r2, [pc, #224]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b36      	ldr	r3, [pc, #216]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	4b32      	ldr	r3, [pc, #200]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a31      	ldr	r2, [pc, #196]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4826      	ldr	r0, [pc, #152]	@ (8001be0 <HAL_UART_MspInit+0x110>)
 8001b46:	f000 fc3d 	bl	80023c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2026      	movs	r0, #38	@ 0x26
 8001b50:	f000 fb6f 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b54:	2026      	movs	r0, #38	@ 0x26
 8001b56:	f000 fb88 	bl	800226a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b5a:	e039      	b.n	8001bd0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a20      	ldr	r2, [pc, #128]	@ (8001be4 <HAL_UART_MspInit+0x114>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d134      	bne.n	8001bd0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a14      	ldr	r2, [pc, #80]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_UART_MspInit+0x10c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b9e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480b      	ldr	r0, [pc, #44]	@ (8001be8 <HAL_UART_MspInit+0x118>)
 8001bbc:	f000 fc02 	bl	80023c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2027      	movs	r0, #39	@ 0x27
 8001bc6:	f000 fb34 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bca:	2027      	movs	r0, #39	@ 0x27
 8001bcc:	f000 fb4d 	bl	800226a <HAL_NVIC_EnableIRQ>
}
 8001bd0:	bf00      	nop
 8001bd2:	3730      	adds	r7, #48	@ 0x30
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40004400 	.word	0x40004400
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40004800 	.word	0x40004800
 8001be8:	40020400 	.word	0x40020400

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c42:	f000 f9d7 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <USART2_IRQHandler+0x10>)
 8001c5e:	f001 fb57 	bl	8003310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000138 	.word	0x20000138

08001c6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <USART3_IRQHandler+0x10>)
 8001c72:	f001 fb4d 	bl	8003310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000180 	.word	0x20000180

08001c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c9a:	f002 fd87 	bl	80047ac <__errno>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2216      	movs	r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_exit>:

void _exit (int status)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ffe7 	bl	8001c90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc2:	bf00      	nop
 8001cc4:	e7fd      	b.n	8001cc2 <_exit+0x12>

08001cc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e00a      	b.n	8001cee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd8:	f3af 8000 	nop.w
 8001cdc:	4601      	mov	r1, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	60ba      	str	r2, [r7, #8]
 8001ce4:	b2ca      	uxtb	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbf0      	blt.n	8001cd8 <_read+0x12>
  }

  return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e009      	b.n	8001d26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	60ba      	str	r2, [r7, #8]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f888 	bl	8001e30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbf1      	blt.n	8001d12 <_write+0x12>
  }
  return len;
 8001d2e:	687b      	ldr	r3, [r7, #4]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_close>:

int _close(int file)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d60:	605a      	str	r2, [r3, #4]
  return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_isatty>:

int _isatty(int file)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f002 fcec 	bl	80047ac <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20020000 	.word	0x20020000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000134 	.word	0x20000134
 8001e08:	20000318 	.word	0x20000318

08001e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__io_putchar>:
UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart3;


int __io_putchar(int ch)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001e38:	1d39      	adds	r1, r7, #4
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <__io_putchar+0x20>)
 8001e42:	f001 f91d 	bl	8003080 <HAL_UART_Transmit>
    return ch;
 8001e46:	687b      	ldr	r3, [r7, #4]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000180 	.word	0x20000180

08001e54 <MX_USART2_UART_Init>:

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001e58:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <MX_USART2_UART_Init+0x48>)
 8001e5a:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <MX_USART2_UART_Init+0x48>)
 8001e60:	4a10      	ldr	r2, [pc, #64]	@ (8001ea4 <MX_USART2_UART_Init+0x50>)
 8001e62:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e64:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <MX_USART2_UART_Init+0x48>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <MX_USART2_UART_Init+0x48>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e70:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <MX_USART2_UART_Init+0x48>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <MX_USART2_UART_Init+0x48>)
 8001e78:	220c      	movs	r2, #12
 8001e7a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7c:	4b07      	ldr	r3, [pc, #28]	@ (8001e9c <MX_USART2_UART_Init+0x48>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <MX_USART2_UART_Init+0x48>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	61da      	str	r2, [r3, #28]

  // Full-Duplex 초기화
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e88:	4804      	ldr	r0, [pc, #16]	@ (8001e9c <MX_USART2_UART_Init+0x48>)
 8001e8a:	f001 f8a9 	bl	8002fe0 <HAL_UART_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8001e94:	f7ff fdd8 	bl	8001a48 <Error_Handler>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000138 	.word	0x20000138
 8001ea0:	40004400 	.word	0x40004400
 8001ea4:	000f4240 	.word	0x000f4240

08001ea8 <MX_USART3_UART_Init>:

void MX_USART3_UART_Init(void)
 {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
   huart3.Instance = USART3;
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <MX_USART3_UART_Init+0x50>)
 8001eb0:	601a      	str	r2, [r3, #0]
   huart3.Init.BaudRate = 115200;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
   huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
   huart3.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
   huart3.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
   if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001ee0:	f001 f87e 	bl	8002fe0 <HAL_UART_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART3_UART_Init+0x46>
   {
     Error_Handler();
 8001eea:	f7ff fdad 	bl	8001a48 <Error_Handler>
    }
  }
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000180 	.word	0x20000180
 8001ef8:	40004800 	.word	0x40004800

08001efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f00:	f7ff ff84 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	@ (8001f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f002 fc45 	bl	80047b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2e:	f7ff fbbf 	bl	80016b0 <main>
  bx  lr    
 8001f32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f40:	080060d4 	.word	0x080060d4
  ldr r2, =_sbss
 8001f44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f48:	20000318 	.word	0x20000318

08001f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_Init+0x40>)
 8001f5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <HAL_Init+0x40>)
 8001f66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <HAL_Init+0x40>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 f94f 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fd76 	bl	8001a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023c00 	.word	0x40023c00

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f967 	bl	8002286 <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 f92f 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	@ (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008
 8002018:	200001c8 	.word	0x200001c8

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	200001c8 	.word	0x200001c8

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4907      	ldr	r1, [pc, #28]	@ (8002118 <__NVIC_EnableIRQ+0x38>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	@ (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff8e 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff29 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff3e 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff8e 	bl	8002170 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5d 	bl	800211c <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff31 	bl	80020e0 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa2 	bl	80021d8 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff feb6 	bl	800201c <HAL_GetTick>
 80022b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d008      	beq.n	80022d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2280      	movs	r2, #128	@ 0x80
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e052      	b.n	8002376 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0216 	bic.w	r2, r2, #22
 80022de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d103      	bne.n	8002300 <HAL_DMA_Abort+0x62>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0208 	bic.w	r2, r2, #8
 800230e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002320:	e013      	b.n	800234a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002322:	f7ff fe7b 	bl	800201c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b05      	cmp	r3, #5
 800232e:	d90c      	bls.n	800234a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2203      	movs	r2, #3
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e015      	b.n	8002376 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e4      	bne.n	8002322 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	223f      	movs	r2, #63	@ 0x3f
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d004      	beq.n	800239c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2280      	movs	r2, #128	@ 0x80
 8002396:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e00c      	b.n	80023b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2205      	movs	r2, #5
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e16b      	b.n	80026b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 815a 	bne.w	80026b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	2b02      	cmp	r3, #2
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d017      	beq.n	80024b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80b4 	beq.w	80026b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b60      	ldr	r3, [pc, #384]	@ (80026d0 <HAL_GPIO_Init+0x30c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a5f      	ldr	r2, [pc, #380]	@ (80026d0 <HAL_GPIO_Init+0x30c>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	4b5d      	ldr	r3, [pc, #372]	@ (80026d0 <HAL_GPIO_Init+0x30c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002566:	4a5b      	ldr	r2, [pc, #364]	@ (80026d4 <HAL_GPIO_Init+0x310>)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a52      	ldr	r2, [pc, #328]	@ (80026d8 <HAL_GPIO_Init+0x314>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d02b      	beq.n	80025ea <HAL_GPIO_Init+0x226>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a51      	ldr	r2, [pc, #324]	@ (80026dc <HAL_GPIO_Init+0x318>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d025      	beq.n	80025e6 <HAL_GPIO_Init+0x222>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a50      	ldr	r2, [pc, #320]	@ (80026e0 <HAL_GPIO_Init+0x31c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d01f      	beq.n	80025e2 <HAL_GPIO_Init+0x21e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4f      	ldr	r2, [pc, #316]	@ (80026e4 <HAL_GPIO_Init+0x320>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d019      	beq.n	80025de <HAL_GPIO_Init+0x21a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4e      	ldr	r2, [pc, #312]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_GPIO_Init+0x216>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4d      	ldr	r2, [pc, #308]	@ (80026ec <HAL_GPIO_Init+0x328>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00d      	beq.n	80025d6 <HAL_GPIO_Init+0x212>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4c      	ldr	r2, [pc, #304]	@ (80026f0 <HAL_GPIO_Init+0x32c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	@ (80026f4 <HAL_GPIO_Init+0x330>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_GPIO_Init+0x20a>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e00e      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025ce:	2308      	movs	r3, #8
 80025d0:	e00c      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025d2:	2306      	movs	r3, #6
 80025d4:	e00a      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025d6:	2305      	movs	r3, #5
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025da:	2304      	movs	r3, #4
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x228>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	@ (80026d4 <HAL_GPIO_Init+0x310>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b3b      	ldr	r3, [pc, #236]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a32      	ldr	r2, [pc, #200]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b30      	ldr	r3, [pc, #192]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b26      	ldr	r3, [pc, #152]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a12      	ldr	r2, [pc, #72]	@ (80026f8 <HAL_GPIO_Init+0x334>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f ae90 	bls.w	80023e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40021c00 	.word	0x40021c00
 80026f8:	40013c00 	.word	0x40013c00

080026fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
 8002708:	4613      	mov	r3, r2
 800270a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800270c:	787b      	ldrb	r3, [r7, #1]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002718:	e003      	b.n	8002722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e267      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d075      	beq.n	800283a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800274e:	4b88      	ldr	r3, [pc, #544]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b04      	cmp	r3, #4
 8002758:	d00c      	beq.n	8002774 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275a:	4b85      	ldr	r3, [pc, #532]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002762:	2b08      	cmp	r3, #8
 8002764:	d112      	bne.n	800278c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002766:	4b82      	ldr	r3, [pc, #520]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002772:	d10b      	bne.n	800278c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	4b7e      	ldr	r3, [pc, #504]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d05b      	beq.n	8002838 <HAL_RCC_OscConfig+0x108>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d157      	bne.n	8002838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e242      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002794:	d106      	bne.n	80027a4 <HAL_RCC_OscConfig+0x74>
 8002796:	4b76      	ldr	r3, [pc, #472]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a75      	ldr	r2, [pc, #468]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e01d      	b.n	80027e0 <HAL_RCC_OscConfig+0xb0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x98>
 80027ae:	4b70      	ldr	r3, [pc, #448]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6c      	ldr	r2, [pc, #432]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0xb0>
 80027c8:	4b69      	ldr	r3, [pc, #420]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a68      	ldr	r2, [pc, #416]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a65      	ldr	r2, [pc, #404]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7ff fc18 	bl	800201c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff fc14 	bl	800201c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e207      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0xc0>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fc04 	bl	800201c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7ff fc00 	bl	800201c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1f3      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	4b51      	ldr	r3, [pc, #324]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0xe8>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d063      	beq.n	800290e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002846:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	4b47      	ldr	r3, [pc, #284]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800285a:	2b08      	cmp	r3, #8
 800285c:	d11c      	bne.n	8002898 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285e:	4b44      	ldr	r3, [pc, #272]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x152>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1c7      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4937      	ldr	r1, [pc, #220]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	e03a      	b.n	800290e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a0:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <HAL_RCC_OscConfig+0x244>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7ff fbb9 	bl	800201c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7ff fbb5 	bl	800201c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1a8      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4925      	ldr	r1, [pc, #148]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <HAL_RCC_OscConfig+0x244>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff fb98 	bl	800201c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7ff fb94 	bl	800201c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e187      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d036      	beq.n	8002988 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_RCC_OscConfig+0x248>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7ff fb78 	bl	800201c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002930:	f7ff fb74 	bl	800201c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e167      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x200>
 800294e:	e01b      	b.n	8002988 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_RCC_OscConfig+0x248>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7ff fb61 	bl	800201c <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	e00e      	b.n	800297c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295e:	f7ff fb5d 	bl	800201c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d907      	bls.n	800297c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e150      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
 8002970:	40023800 	.word	0x40023800
 8002974:	42470000 	.word	0x42470000
 8002978:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ea      	bne.n	800295e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8097 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b81      	ldr	r3, [pc, #516]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b77      	ldr	r3, [pc, #476]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d2:	4b74      	ldr	r3, [pc, #464]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a73      	ldr	r2, [pc, #460]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7ff fb1d 	bl	800201c <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7ff fb19 	bl	800201c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e10c      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2ea>
 8002a0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	4a63      	ldr	r2, [pc, #396]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a18:	e01c      	b.n	8002a54 <HAL_RCC_OscConfig+0x324>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x30c>
 8002a22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0x324>
 8002a3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a57      	ldr	r2, [pc, #348]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	4b55      	ldr	r3, [pc, #340]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a54      	ldr	r2, [pc, #336]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7ff fade 	bl	800201c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7ff fada 	bl	800201c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0cb      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ee      	beq.n	8002a64 <HAL_RCC_OscConfig+0x334>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7ff fac8 	bl	800201c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7ff fac4 	bl	800201c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0b5      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ee      	bne.n	8002a90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab8:	4b39      	ldr	r3, [pc, #228]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	4a38      	ldr	r2, [pc, #224]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a1 	beq.w	8002c10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ace:	4b34      	ldr	r3, [pc, #208]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d05c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d141      	bne.n	8002b66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b31      	ldr	r3, [pc, #196]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff fa98 	bl	800201c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af0:	f7ff fa94 	bl	800201c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e087      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	019b      	lsls	r3, r3, #6
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	3b01      	subs	r3, #1
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	491b      	ldr	r1, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7ff fa6d 	bl	800201c <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b46:	f7ff fa69 	bl	800201c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e05c      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x416>
 8002b64:	e054      	b.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff fa56 	bl	800201c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7ff fa52 	bl	800201c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e045      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x444>
 8002b92:	e03d      	b.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e038      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_RCC_OscConfig+0x4ec>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d121      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11a      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002be2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d111      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0cc      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b68      	ldr	r3, [pc, #416]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d90c      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b65      	ldr	r3, [pc, #404]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a58      	ldr	r2, [pc, #352]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a52      	ldr	r2, [pc, #328]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d044      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d119      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b3f      	ldr	r3, [pc, #252]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	4b3b      	ldr	r3, [pc, #236]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e067      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b37      	ldr	r3, [pc, #220]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4934      	ldr	r1, [pc, #208]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7ff f984 	bl	800201c <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7ff f980 	bl	800201c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e04f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20c      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f821 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	490a      	ldr	r1, [pc, #40]	@ (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	5ccb      	ldrb	r3, [r1, r3]
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f8e4 	bl	8001f94 <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08005eac 	.word	0x08005eac
 8002de4:	20000000 	.word	0x20000000
 8002de8:	20000004 	.word	0x20000004

08002dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df0:	b090      	sub	sp, #64	@ 0x40
 8002df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e04:	4b59      	ldr	r3, [pc, #356]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d00d      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x40>
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	f200 80a1 	bhi.w	8002f58 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e1e:	e09b      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b53      	ldr	r3, [pc, #332]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e24:	e09b      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e26:	4b53      	ldr	r3, [pc, #332]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e2a:	e098      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e36:	4b4d      	ldr	r3, [pc, #308]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d028      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e42:	4b4a      	ldr	r3, [pc, #296]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	099b      	lsrs	r3, r3, #6
 8002e48:	2200      	movs	r2, #0
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e54:	2100      	movs	r1, #0
 8002e56:	4b47      	ldr	r3, [pc, #284]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e58:	fb03 f201 	mul.w	r2, r3, r1
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	fb00 f303 	mul.w	r3, r0, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	4a43      	ldr	r2, [pc, #268]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e66:	fba0 1202 	umull	r1, r2, r0, r2
 8002e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e6c:	460a      	mov	r2, r1
 8002e6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e72:	4413      	add	r3, r2
 8002e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e78:	2200      	movs	r2, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	61fa      	str	r2, [r7, #28]
 8002e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e86:	f7fd f9fb 	bl	8000280 <__aeabi_uldivmod>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4613      	mov	r3, r2
 8002e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e92:	e053      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e94:	4b35      	ldr	r3, [pc, #212]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	617a      	str	r2, [r7, #20]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ea6:	f04f 0b00 	mov.w	fp, #0
 8002eaa:	4652      	mov	r2, sl
 8002eac:	465b      	mov	r3, fp
 8002eae:	f04f 0000 	mov.w	r0, #0
 8002eb2:	f04f 0100 	mov.w	r1, #0
 8002eb6:	0159      	lsls	r1, r3, #5
 8002eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ebc:	0150      	lsls	r0, r2, #5
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	ebb2 080a 	subs.w	r8, r2, sl
 8002ec6:	eb63 090b 	sbc.w	r9, r3, fp
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ed6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002eda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ede:	ebb2 0408 	subs.w	r4, r2, r8
 8002ee2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	00eb      	lsls	r3, r5, #3
 8002ef0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef4:	00e2      	lsls	r2, r4, #3
 8002ef6:	4614      	mov	r4, r2
 8002ef8:	461d      	mov	r5, r3
 8002efa:	eb14 030a 	adds.w	r3, r4, sl
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	eb45 030b 	adc.w	r3, r5, fp
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f12:	4629      	mov	r1, r5
 8002f14:	028b      	lsls	r3, r1, #10
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	028a      	lsls	r2, r1, #10
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f26:	2200      	movs	r2, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	60fa      	str	r2, [r7, #12]
 8002f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f30:	f7fd f9a6 	bl	8000280 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	3301      	adds	r3, #1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002f4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f56:	e002      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3740      	adds	r7, #64	@ 0x40
 8002f64:	46bd      	mov	sp, r7
 8002f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	00f42400 	.word	0x00f42400
 8002f74:	017d7840 	.word	0x017d7840

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	@ (8002f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000

08002f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f94:	f7ff fff0 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	0a9b      	lsrs	r3, r3, #10
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	@ (8002fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	08005ebc 	.word	0x08005ebc

08002fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fbc:	f7ff ffdc 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0b5b      	lsrs	r3, r3, #13
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	@ (8002fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	08005ebc 	.word	0x08005ebc

08002fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e042      	b.n	8003078 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe fd62 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	@ 0x24
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fe6b 	bl	8003d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	@ 0x28
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b20      	cmp	r3, #32
 800309e:	d175      	bne.n	800318c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_UART_Transmit+0x2c>
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e06e      	b.n	800318e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2221      	movs	r2, #33	@ 0x21
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030be:	f7fe ffad 	bl	800201c <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d8:	d108      	bne.n	80030ec <HAL_UART_Transmit+0x6c>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e003      	b.n	80030f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030f4:	e02e      	b.n	8003154 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2180      	movs	r1, #128	@ 0x80
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fbcf 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e03a      	b.n	800318e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3302      	adds	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e007      	b.n	8003146 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	3301      	adds	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1cb      	bne.n	80030f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	2140      	movs	r1, #64	@ 0x40
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fb9b 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e006      	b.n	800318e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b08a      	sub	sp, #40	@ 0x28
 800319a:	af02      	add	r7, sp, #8
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	f040 8081 	bne.w	80032ba <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Receive+0x2e>
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e079      	b.n	80032bc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2222      	movs	r2, #34	@ 0x22
 80031d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031dc:	f7fe ff1e 	bl	800201c <HAL_GetTick>
 80031e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f6:	d108      	bne.n	800320a <HAL_UART_Receive+0x74>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	e003      	b.n	8003212 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003212:	e047      	b.n	80032a4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2200      	movs	r2, #0
 800321c:	2120      	movs	r1, #32
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fb40 	bl	80038a4 <UART_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e042      	b.n	80032bc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10c      	bne.n	8003256 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	b29b      	uxth	r3, r3
 8003244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003248:	b29a      	uxth	r2, r3
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	3302      	adds	r3, #2
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	e01f      	b.n	8003296 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800325e:	d007      	beq.n	8003270 <HAL_UART_Receive+0xda>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <HAL_UART_Receive+0xe8>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d106      	bne.n	800327e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e008      	b.n	8003290 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800328a:	b2da      	uxtb	r2, r3
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	3301      	adds	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1b2      	bne.n	8003214 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3720      	adds	r7, #32
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d112      	bne.n	8003304 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_UART_Receive_IT+0x26>
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00b      	b.n	8003306 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fb2b 	bl	8003956 <UART_Start_Receive_IT>
 8003300:	4603      	mov	r3, r0
 8003302:	e000      	b.n	8003306 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b0ba      	sub	sp, #232	@ 0xe8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800334e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_UART_IRQHandler+0x66>
 8003362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fc07 	bl	8003b82 <UART_Receive_IT>
      return;
 8003374:	e273      	b.n	800385e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80de 	beq.w	800353c <HAL_UART_IRQHandler+0x22c>
 8003380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800338c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003390:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80d1 	beq.w	800353c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800339a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_UART_IRQHandler+0xae>
 80033a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_UART_IRQHandler+0xd2>
 80033ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f043 0202 	orr.w	r2, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_UART_IRQHandler+0xf6>
 80033ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	f043 0204 	orr.w	r2, r3, #4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d011      	beq.n	8003436 <HAL_UART_IRQHandler+0x126>
 8003412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d105      	bne.n	800342a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800341e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	f043 0208 	orr.w	r2, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 820a 	beq.w	8003854 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_UART_IRQHandler+0x14e>
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fb92 	bl	8003b82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <HAL_UART_IRQHandler+0x17a>
 8003482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d04f      	beq.n	800352a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa9d 	bl	80039ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b40      	cmp	r3, #64	@ 0x40
 800349c:	d141      	bne.n	8003522 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3314      	adds	r3, #20
 80034c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1d9      	bne.n	800349e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d013      	beq.n	800351a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f6:	4a8a      	ldr	r2, [pc, #552]	@ (8003720 <HAL_UART_IRQHandler+0x410>)
 80034f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe ff3d 	bl	800237e <HAL_DMA_Abort_IT>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003514:	4610      	mov	r0, r2
 8003516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	e00e      	b.n	8003538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9ac 	bl	8003878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	e00a      	b.n	8003538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9a8 	bl	8003878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	e006      	b.n	8003538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9a4 	bl	8003878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003536:	e18d      	b.n	8003854 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003538:	bf00      	nop
    return;
 800353a:	e18b      	b.n	8003854 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	2b01      	cmp	r3, #1
 8003542:	f040 8167 	bne.w	8003814 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8160 	beq.w	8003814 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8159 	beq.w	8003814 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003582:	2b40      	cmp	r3, #64	@ 0x40
 8003584:	f040 80ce 	bne.w	8003724 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003594:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a9 	beq.w	80036f0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035a6:	429a      	cmp	r2, r3
 80035a8:	f080 80a2 	bcs.w	80036f0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035be:	f000 8088 	beq.w	80036d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	330c      	adds	r3, #12
 80035c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1d9      	bne.n	80035c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3314      	adds	r3, #20
 8003614:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800361e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003632:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003636:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800363a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e1      	bne.n	800360e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3314      	adds	r3, #20
 8003650:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800365a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800365c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3314      	adds	r3, #20
 800366a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800366e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003670:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003674:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800367c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e3      	bne.n	800364a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a2:	f023 0310 	bic.w	r3, r3, #16
 80036a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e3      	bne.n	8003690 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fde6 	bl	800229e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	4619      	mov	r1, r3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8cf 	bl	800388c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80036ee:	e0b3      	b.n	8003858 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036f8:	429a      	cmp	r2, r3
 80036fa:	f040 80ad 	bne.w	8003858 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003708:	f040 80a6 	bne.w	8003858 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003716:	4619      	mov	r1, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8b7 	bl	800388c <HAL_UARTEx_RxEventCallback>
      return;
 800371e:	e09b      	b.n	8003858 <HAL_UART_IRQHandler+0x548>
 8003720:	08003a91 	.word	0x08003a91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800372c:	b29b      	uxth	r3, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 808e 	beq.w	800385c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8089 	beq.w	800385c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800375a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800376e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003770:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003772:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800377c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e3      	bne.n	800374a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	623b      	str	r3, [r7, #32]
   return(result);
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e3      	bne.n	8003782 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0310 	bic.w	r3, r3, #16
 80037de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037ec:	61fa      	str	r2, [r7, #28]
 80037ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	617b      	str	r3, [r7, #20]
   return(result);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e3      	bne.n	80037c8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f83d 	bl	800388c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003812:	e023      	b.n	800385c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <HAL_UART_IRQHandler+0x524>
 8003820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f940 	bl	8003ab2 <UART_Transmit_IT>
    return;
 8003832:	e014      	b.n	800385e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <HAL_UART_IRQHandler+0x54e>
 8003840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f980 	bl	8003b52 <UART_EndTransmit_IT>
    return;
 8003852:	e004      	b.n	800385e <HAL_UART_IRQHandler+0x54e>
    return;
 8003854:	bf00      	nop
 8003856:	e002      	b.n	800385e <HAL_UART_IRQHandler+0x54e>
      return;
 8003858:	bf00      	nop
 800385a:	e000      	b.n	800385e <HAL_UART_IRQHandler+0x54e>
      return;
 800385c:	bf00      	nop
  }
}
 800385e:	37e8      	adds	r7, #232	@ 0xe8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b4:	e03b      	b.n	800392e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d037      	beq.n	800392e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	f7fe fbad 	bl	800201c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e03a      	b.n	800394e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d023      	beq.n	800392e <UART_WaitOnFlagUntilTimeout+0x8a>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b80      	cmp	r3, #128	@ 0x80
 80038ea:	d020      	beq.n	800392e <UART_WaitOnFlagUntilTimeout+0x8a>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b40      	cmp	r3, #64	@ 0x40
 80038f0:	d01d      	beq.n	800392e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d116      	bne.n	800392e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f857 	bl	80039ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2208      	movs	r2, #8
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e00f      	b.n	800394e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4013      	ands	r3, r2
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	429a      	cmp	r2, r3
 800394a:	d0b4      	beq.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	88fa      	ldrh	r2, [r7, #6]
 800396e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2222      	movs	r2, #34	@ 0x22
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800399a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0220 	orr.w	r2, r2, #32
 80039ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b095      	sub	sp, #84	@ 0x54
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80039f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e5      	bne.n	80039d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3314      	adds	r3, #20
 8003a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3314      	adds	r3, #20
 8003a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d119      	bne.n	8003a76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f023 0310 	bic.w	r3, r3, #16
 8003a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a62:	61ba      	str	r2, [r7, #24]
 8003a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6979      	ldr	r1, [r7, #20]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e5      	bne.n	8003a42 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a84:	bf00      	nop
 8003a86:	3754      	adds	r7, #84	@ 0x54
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fee7 	bl	8003878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b21      	cmp	r3, #33	@ 0x21
 8003ac4:	d13e      	bne.n	8003b44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ace:	d114      	bne.n	8003afa <UART_Transmit_IT+0x48>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d110      	bne.n	8003afa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	1c9a      	adds	r2, r3, #2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	621a      	str	r2, [r3, #32]
 8003af8:	e008      	b.n	8003b0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	1c59      	adds	r1, r3, #1
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6211      	str	r1, [r2, #32]
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10f      	bne.n	8003b40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fe76 	bl	8003864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b08c      	sub	sp, #48	@ 0x30
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b22      	cmp	r3, #34	@ 0x22
 8003b9c:	f040 80aa 	bne.w	8003cf4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba8:	d115      	bne.n	8003bd6 <UART_Receive_IT+0x54>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d111      	bne.n	8003bd6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	1c9a      	adds	r2, r3, #2
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bd4:	e024      	b.n	8003c20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be4:	d007      	beq.n	8003bf6 <UART_Receive_IT+0x74>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <UART_Receive_IT+0x82>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e008      	b.n	8003c16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d15d      	bne.n	8003cf0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0220 	bic.w	r2, r2, #32
 8003c42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d135      	bne.n	8003ce6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f023 0310 	bic.w	r3, r3, #16
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca0:	623a      	str	r2, [r7, #32]
 8003ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	69f9      	ldr	r1, [r7, #28]
 8003ca6:	6a3a      	ldr	r2, [r7, #32]
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d10a      	bne.n	8003cd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fdd4 	bl	800388c <HAL_UARTEx_RxEventCallback>
 8003ce4:	e002      	b.n	8003cec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fde4 	bl	80018b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e002      	b.n	8003cf6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3730      	adds	r7, #48	@ 0x30
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d04:	b0c0      	sub	sp, #256	@ 0x100
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1c:	68d9      	ldr	r1, [r3, #12]
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	ea40 0301 	orr.w	r3, r0, r1
 8003d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d58:	f021 010c 	bic.w	r1, r1, #12
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d66:	430b      	orrs	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7a:	6999      	ldr	r1, [r3, #24]
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	ea40 0301 	orr.w	r3, r0, r1
 8003d86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b8f      	ldr	r3, [pc, #572]	@ (8003fcc <UART_SetConfig+0x2cc>)
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d005      	beq.n	8003da0 <UART_SetConfig+0xa0>
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd0 <UART_SetConfig+0x2d0>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d104      	bne.n	8003daa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da0:	f7ff f90a 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8003da4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003da8:	e003      	b.n	8003db2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003daa:	f7ff f8f1 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 8003dae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dbc:	f040 810c 	bne.w	8003fd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	1891      	adds	r1, r2, r2
 8003dd8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dda:	415b      	adcs	r3, r3
 8003ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003de2:	4621      	mov	r1, r4
 8003de4:	eb12 0801 	adds.w	r8, r2, r1
 8003de8:	4629      	mov	r1, r5
 8003dea:	eb43 0901 	adc.w	r9, r3, r1
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e02:	4690      	mov	r8, r2
 8003e04:	4699      	mov	r9, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	eb18 0303 	adds.w	r3, r8, r3
 8003e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e10:	462b      	mov	r3, r5
 8003e12:	eb49 0303 	adc.w	r3, r9, r3
 8003e16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e2e:	460b      	mov	r3, r1
 8003e30:	18db      	adds	r3, r3, r3
 8003e32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e34:	4613      	mov	r3, r2
 8003e36:	eb42 0303 	adc.w	r3, r2, r3
 8003e3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e44:	f7fc fa1c 	bl	8000280 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4b61      	ldr	r3, [pc, #388]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	011c      	lsls	r4, r3, #4
 8003e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e70:	415b      	adcs	r3, r3
 8003e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e78:	4641      	mov	r1, r8
 8003e7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e7e:	4649      	mov	r1, r9
 8003e80:	eb43 0b01 	adc.w	fp, r3, r1
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e98:	4692      	mov	sl, r2
 8003e9a:	469b      	mov	fp, r3
 8003e9c:	4643      	mov	r3, r8
 8003e9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8003eac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ebc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	18db      	adds	r3, r3, r3
 8003ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eca:	4613      	mov	r3, r2
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003eda:	f7fc f9d1 	bl	8000280 <__aeabi_uldivmod>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2264      	movs	r2, #100	@ 0x64
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	1acb      	subs	r3, r1, r3
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003efa:	4b36      	ldr	r3, [pc, #216]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003efc:	fba3 2302 	umull	r2, r3, r3, r2
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f08:	441c      	add	r4, r3
 8003f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f24:	415b      	adcs	r3, r3
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	1851      	adds	r1, r2, r1
 8003f30:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f32:	4649      	mov	r1, r9
 8003f34:	414b      	adcs	r3, r1
 8003f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f44:	4659      	mov	r1, fp
 8003f46:	00cb      	lsls	r3, r1, #3
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4e:	4651      	mov	r1, sl
 8003f50:	00ca      	lsls	r2, r1, #3
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	4642      	mov	r2, r8
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f60:	464b      	mov	r3, r9
 8003f62:	460a      	mov	r2, r1
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f80:	460b      	mov	r3, r1
 8003f82:	18db      	adds	r3, r3, r3
 8003f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f86:	4613      	mov	r3, r2
 8003f88:	eb42 0303 	adc.w	r3, r2, r3
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f96:	f7fc f973 	bl	8000280 <__aeabi_uldivmod>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	2164      	movs	r1, #100	@ 0x64
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	3332      	adds	r3, #50	@ 0x32
 8003fb2:	4a08      	ldr	r2, [pc, #32]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	f003 0207 	and.w	r2, r3, #7
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4422      	add	r2, r4
 8003fc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fc8:	e106      	b.n	80041d8 <UART_SetConfig+0x4d8>
 8003fca:	bf00      	nop
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	40011400 	.word	0x40011400
 8003fd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fea:	4642      	mov	r2, r8
 8003fec:	464b      	mov	r3, r9
 8003fee:	1891      	adds	r1, r2, r2
 8003ff0:	6239      	str	r1, [r7, #32]
 8003ff2:	415b      	adcs	r3, r3
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	1854      	adds	r4, r2, r1
 8003ffe:	4649      	mov	r1, r9
 8004000:	eb43 0501 	adc.w	r5, r3, r1
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	00eb      	lsls	r3, r5, #3
 800400e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004012:	00e2      	lsls	r2, r4, #3
 8004014:	4614      	mov	r4, r2
 8004016:	461d      	mov	r5, r3
 8004018:	4643      	mov	r3, r8
 800401a:	18e3      	adds	r3, r4, r3
 800401c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004020:	464b      	mov	r3, r9
 8004022:	eb45 0303 	adc.w	r3, r5, r3
 8004026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004036:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004046:	4629      	mov	r1, r5
 8004048:	008b      	lsls	r3, r1, #2
 800404a:	4621      	mov	r1, r4
 800404c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004050:	4621      	mov	r1, r4
 8004052:	008a      	lsls	r2, r1, #2
 8004054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004058:	f7fc f912 	bl	8000280 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4b60      	ldr	r3, [pc, #384]	@ (80041e4 <UART_SetConfig+0x4e4>)
 8004062:	fba3 2302 	umull	r2, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	011c      	lsls	r4, r3, #4
 800406a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800406e:	2200      	movs	r2, #0
 8004070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004074:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	1891      	adds	r1, r2, r2
 8004082:	61b9      	str	r1, [r7, #24]
 8004084:	415b      	adcs	r3, r3
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408c:	4641      	mov	r1, r8
 800408e:	1851      	adds	r1, r2, r1
 8004090:	6139      	str	r1, [r7, #16]
 8004092:	4649      	mov	r1, r9
 8004094:	414b      	adcs	r3, r1
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040a4:	4659      	mov	r1, fp
 80040a6:	00cb      	lsls	r3, r1, #3
 80040a8:	4651      	mov	r1, sl
 80040aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ae:	4651      	mov	r1, sl
 80040b0:	00ca      	lsls	r2, r1, #3
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	4642      	mov	r2, r8
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040c0:	464b      	mov	r3, r9
 80040c2:	460a      	mov	r2, r1
 80040c4:	eb42 0303 	adc.w	r3, r2, r3
 80040c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040e4:	4649      	mov	r1, r9
 80040e6:	008b      	lsls	r3, r1, #2
 80040e8:	4641      	mov	r1, r8
 80040ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ee:	4641      	mov	r1, r8
 80040f0:	008a      	lsls	r2, r1, #2
 80040f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040f6:	f7fc f8c3 	bl	8000280 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	4b38      	ldr	r3, [pc, #224]	@ (80041e4 <UART_SetConfig+0x4e4>)
 8004102:	fba3 2301 	umull	r2, r3, r3, r1
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2264      	movs	r2, #100	@ 0x64
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	1acb      	subs	r3, r1, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	3332      	adds	r3, #50	@ 0x32
 8004114:	4a33      	ldr	r2, [pc, #204]	@ (80041e4 <UART_SetConfig+0x4e4>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004120:	441c      	add	r4, r3
 8004122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004126:	2200      	movs	r2, #0
 8004128:	673b      	str	r3, [r7, #112]	@ 0x70
 800412a:	677a      	str	r2, [r7, #116]	@ 0x74
 800412c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	1891      	adds	r1, r2, r2
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	415b      	adcs	r3, r3
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004140:	4641      	mov	r1, r8
 8004142:	1851      	adds	r1, r2, r1
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	4649      	mov	r1, r9
 8004148:	414b      	adcs	r3, r1
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004158:	4659      	mov	r1, fp
 800415a:	00cb      	lsls	r3, r1, #3
 800415c:	4651      	mov	r1, sl
 800415e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004162:	4651      	mov	r1, sl
 8004164:	00ca      	lsls	r2, r1, #3
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	4603      	mov	r3, r0
 800416c:	4642      	mov	r2, r8
 800416e:	189b      	adds	r3, r3, r2
 8004170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004172:	464b      	mov	r3, r9
 8004174:	460a      	mov	r2, r1
 8004176:	eb42 0303 	adc.w	r3, r2, r3
 800417a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	663b      	str	r3, [r7, #96]	@ 0x60
 8004186:	667a      	str	r2, [r7, #100]	@ 0x64
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004194:	4649      	mov	r1, r9
 8004196:	008b      	lsls	r3, r1, #2
 8004198:	4641      	mov	r1, r8
 800419a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800419e:	4641      	mov	r1, r8
 80041a0:	008a      	lsls	r2, r1, #2
 80041a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041a6:	f7fc f86b 	bl	8000280 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <UART_SetConfig+0x4e4>)
 80041b0:	fba3 1302 	umull	r1, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	2164      	movs	r1, #100	@ 0x64
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	3332      	adds	r3, #50	@ 0x32
 80041c2:	4a08      	ldr	r2, [pc, #32]	@ (80041e4 <UART_SetConfig+0x4e4>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4422      	add	r2, r4
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041de:	46bd      	mov	sp, r7
 80041e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e4:	51eb851f 	.word	0x51eb851f

080041e8 <std>:
 80041e8:	2300      	movs	r3, #0
 80041ea:	b510      	push	{r4, lr}
 80041ec:	4604      	mov	r4, r0
 80041ee:	e9c0 3300 	strd	r3, r3, [r0]
 80041f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041f6:	6083      	str	r3, [r0, #8]
 80041f8:	8181      	strh	r1, [r0, #12]
 80041fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80041fc:	81c2      	strh	r2, [r0, #14]
 80041fe:	6183      	str	r3, [r0, #24]
 8004200:	4619      	mov	r1, r3
 8004202:	2208      	movs	r2, #8
 8004204:	305c      	adds	r0, #92	@ 0x5c
 8004206:	f000 fa27 	bl	8004658 <memset>
 800420a:	4b0d      	ldr	r3, [pc, #52]	@ (8004240 <std+0x58>)
 800420c:	6263      	str	r3, [r4, #36]	@ 0x24
 800420e:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <std+0x5c>)
 8004210:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004212:	4b0d      	ldr	r3, [pc, #52]	@ (8004248 <std+0x60>)
 8004214:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004216:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <std+0x64>)
 8004218:	6323      	str	r3, [r4, #48]	@ 0x30
 800421a:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <std+0x68>)
 800421c:	6224      	str	r4, [r4, #32]
 800421e:	429c      	cmp	r4, r3
 8004220:	d006      	beq.n	8004230 <std+0x48>
 8004222:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004226:	4294      	cmp	r4, r2
 8004228:	d002      	beq.n	8004230 <std+0x48>
 800422a:	33d0      	adds	r3, #208	@ 0xd0
 800422c:	429c      	cmp	r4, r3
 800422e:	d105      	bne.n	800423c <std+0x54>
 8004230:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004238:	f000 bae2 	b.w	8004800 <__retarget_lock_init_recursive>
 800423c:	bd10      	pop	{r4, pc}
 800423e:	bf00      	nop
 8004240:	080044a5 	.word	0x080044a5
 8004244:	080044cb 	.word	0x080044cb
 8004248:	08004503 	.word	0x08004503
 800424c:	08004527 	.word	0x08004527
 8004250:	200001cc 	.word	0x200001cc

08004254 <stdio_exit_handler>:
 8004254:	4a02      	ldr	r2, [pc, #8]	@ (8004260 <stdio_exit_handler+0xc>)
 8004256:	4903      	ldr	r1, [pc, #12]	@ (8004264 <stdio_exit_handler+0x10>)
 8004258:	4803      	ldr	r0, [pc, #12]	@ (8004268 <stdio_exit_handler+0x14>)
 800425a:	f000 b869 	b.w	8004330 <_fwalk_sglue>
 800425e:	bf00      	nop
 8004260:	2000000c 	.word	0x2000000c
 8004264:	08005725 	.word	0x08005725
 8004268:	2000001c 	.word	0x2000001c

0800426c <cleanup_stdio>:
 800426c:	6841      	ldr	r1, [r0, #4]
 800426e:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <cleanup_stdio+0x34>)
 8004270:	4299      	cmp	r1, r3
 8004272:	b510      	push	{r4, lr}
 8004274:	4604      	mov	r4, r0
 8004276:	d001      	beq.n	800427c <cleanup_stdio+0x10>
 8004278:	f001 fa54 	bl	8005724 <_fflush_r>
 800427c:	68a1      	ldr	r1, [r4, #8]
 800427e:	4b09      	ldr	r3, [pc, #36]	@ (80042a4 <cleanup_stdio+0x38>)
 8004280:	4299      	cmp	r1, r3
 8004282:	d002      	beq.n	800428a <cleanup_stdio+0x1e>
 8004284:	4620      	mov	r0, r4
 8004286:	f001 fa4d 	bl	8005724 <_fflush_r>
 800428a:	68e1      	ldr	r1, [r4, #12]
 800428c:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <cleanup_stdio+0x3c>)
 800428e:	4299      	cmp	r1, r3
 8004290:	d004      	beq.n	800429c <cleanup_stdio+0x30>
 8004292:	4620      	mov	r0, r4
 8004294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004298:	f001 ba44 	b.w	8005724 <_fflush_r>
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	200001cc 	.word	0x200001cc
 80042a4:	20000234 	.word	0x20000234
 80042a8:	2000029c 	.word	0x2000029c

080042ac <global_stdio_init.part.0>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <global_stdio_init.part.0+0x30>)
 80042b0:	4c0b      	ldr	r4, [pc, #44]	@ (80042e0 <global_stdio_init.part.0+0x34>)
 80042b2:	4a0c      	ldr	r2, [pc, #48]	@ (80042e4 <global_stdio_init.part.0+0x38>)
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	4620      	mov	r0, r4
 80042b8:	2200      	movs	r2, #0
 80042ba:	2104      	movs	r1, #4
 80042bc:	f7ff ff94 	bl	80041e8 <std>
 80042c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042c4:	2201      	movs	r2, #1
 80042c6:	2109      	movs	r1, #9
 80042c8:	f7ff ff8e 	bl	80041e8 <std>
 80042cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042d0:	2202      	movs	r2, #2
 80042d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d6:	2112      	movs	r1, #18
 80042d8:	f7ff bf86 	b.w	80041e8 <std>
 80042dc:	20000304 	.word	0x20000304
 80042e0:	200001cc 	.word	0x200001cc
 80042e4:	08004255 	.word	0x08004255

080042e8 <__sfp_lock_acquire>:
 80042e8:	4801      	ldr	r0, [pc, #4]	@ (80042f0 <__sfp_lock_acquire+0x8>)
 80042ea:	f000 ba8a 	b.w	8004802 <__retarget_lock_acquire_recursive>
 80042ee:	bf00      	nop
 80042f0:	2000030d 	.word	0x2000030d

080042f4 <__sfp_lock_release>:
 80042f4:	4801      	ldr	r0, [pc, #4]	@ (80042fc <__sfp_lock_release+0x8>)
 80042f6:	f000 ba85 	b.w	8004804 <__retarget_lock_release_recursive>
 80042fa:	bf00      	nop
 80042fc:	2000030d 	.word	0x2000030d

08004300 <__sinit>:
 8004300:	b510      	push	{r4, lr}
 8004302:	4604      	mov	r4, r0
 8004304:	f7ff fff0 	bl	80042e8 <__sfp_lock_acquire>
 8004308:	6a23      	ldr	r3, [r4, #32]
 800430a:	b11b      	cbz	r3, 8004314 <__sinit+0x14>
 800430c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004310:	f7ff bff0 	b.w	80042f4 <__sfp_lock_release>
 8004314:	4b04      	ldr	r3, [pc, #16]	@ (8004328 <__sinit+0x28>)
 8004316:	6223      	str	r3, [r4, #32]
 8004318:	4b04      	ldr	r3, [pc, #16]	@ (800432c <__sinit+0x2c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f5      	bne.n	800430c <__sinit+0xc>
 8004320:	f7ff ffc4 	bl	80042ac <global_stdio_init.part.0>
 8004324:	e7f2      	b.n	800430c <__sinit+0xc>
 8004326:	bf00      	nop
 8004328:	0800426d 	.word	0x0800426d
 800432c:	20000304 	.word	0x20000304

08004330 <_fwalk_sglue>:
 8004330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004334:	4607      	mov	r7, r0
 8004336:	4688      	mov	r8, r1
 8004338:	4614      	mov	r4, r2
 800433a:	2600      	movs	r6, #0
 800433c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004340:	f1b9 0901 	subs.w	r9, r9, #1
 8004344:	d505      	bpl.n	8004352 <_fwalk_sglue+0x22>
 8004346:	6824      	ldr	r4, [r4, #0]
 8004348:	2c00      	cmp	r4, #0
 800434a:	d1f7      	bne.n	800433c <_fwalk_sglue+0xc>
 800434c:	4630      	mov	r0, r6
 800434e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004352:	89ab      	ldrh	r3, [r5, #12]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d907      	bls.n	8004368 <_fwalk_sglue+0x38>
 8004358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800435c:	3301      	adds	r3, #1
 800435e:	d003      	beq.n	8004368 <_fwalk_sglue+0x38>
 8004360:	4629      	mov	r1, r5
 8004362:	4638      	mov	r0, r7
 8004364:	47c0      	blx	r8
 8004366:	4306      	orrs	r6, r0
 8004368:	3568      	adds	r5, #104	@ 0x68
 800436a:	e7e9      	b.n	8004340 <_fwalk_sglue+0x10>

0800436c <iprintf>:
 800436c:	b40f      	push	{r0, r1, r2, r3}
 800436e:	b507      	push	{r0, r1, r2, lr}
 8004370:	4906      	ldr	r1, [pc, #24]	@ (800438c <iprintf+0x20>)
 8004372:	ab04      	add	r3, sp, #16
 8004374:	6808      	ldr	r0, [r1, #0]
 8004376:	f853 2b04 	ldr.w	r2, [r3], #4
 800437a:	6881      	ldr	r1, [r0, #8]
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	f000 fd5b 	bl	8004e38 <_vfiprintf_r>
 8004382:	b003      	add	sp, #12
 8004384:	f85d eb04 	ldr.w	lr, [sp], #4
 8004388:	b004      	add	sp, #16
 800438a:	4770      	bx	lr
 800438c:	20000018 	.word	0x20000018

08004390 <_puts_r>:
 8004390:	6a03      	ldr	r3, [r0, #32]
 8004392:	b570      	push	{r4, r5, r6, lr}
 8004394:	6884      	ldr	r4, [r0, #8]
 8004396:	4605      	mov	r5, r0
 8004398:	460e      	mov	r6, r1
 800439a:	b90b      	cbnz	r3, 80043a0 <_puts_r+0x10>
 800439c:	f7ff ffb0 	bl	8004300 <__sinit>
 80043a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043a2:	07db      	lsls	r3, r3, #31
 80043a4:	d405      	bmi.n	80043b2 <_puts_r+0x22>
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	0598      	lsls	r0, r3, #22
 80043aa:	d402      	bmi.n	80043b2 <_puts_r+0x22>
 80043ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ae:	f000 fa28 	bl	8004802 <__retarget_lock_acquire_recursive>
 80043b2:	89a3      	ldrh	r3, [r4, #12]
 80043b4:	0719      	lsls	r1, r3, #28
 80043b6:	d502      	bpl.n	80043be <_puts_r+0x2e>
 80043b8:	6923      	ldr	r3, [r4, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d135      	bne.n	800442a <_puts_r+0x9a>
 80043be:	4621      	mov	r1, r4
 80043c0:	4628      	mov	r0, r5
 80043c2:	f000 f8f3 	bl	80045ac <__swsetup_r>
 80043c6:	b380      	cbz	r0, 800442a <_puts_r+0x9a>
 80043c8:	f04f 35ff 	mov.w	r5, #4294967295
 80043cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043ce:	07da      	lsls	r2, r3, #31
 80043d0:	d405      	bmi.n	80043de <_puts_r+0x4e>
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	059b      	lsls	r3, r3, #22
 80043d6:	d402      	bmi.n	80043de <_puts_r+0x4e>
 80043d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043da:	f000 fa13 	bl	8004804 <__retarget_lock_release_recursive>
 80043de:	4628      	mov	r0, r5
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da04      	bge.n	80043f0 <_puts_r+0x60>
 80043e6:	69a2      	ldr	r2, [r4, #24]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	dc17      	bgt.n	800441c <_puts_r+0x8c>
 80043ec:	290a      	cmp	r1, #10
 80043ee:	d015      	beq.n	800441c <_puts_r+0x8c>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	6022      	str	r2, [r4, #0]
 80043f6:	7019      	strb	r1, [r3, #0]
 80043f8:	68a3      	ldr	r3, [r4, #8]
 80043fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043fe:	3b01      	subs	r3, #1
 8004400:	60a3      	str	r3, [r4, #8]
 8004402:	2900      	cmp	r1, #0
 8004404:	d1ed      	bne.n	80043e2 <_puts_r+0x52>
 8004406:	2b00      	cmp	r3, #0
 8004408:	da11      	bge.n	800442e <_puts_r+0x9e>
 800440a:	4622      	mov	r2, r4
 800440c:	210a      	movs	r1, #10
 800440e:	4628      	mov	r0, r5
 8004410:	f000 f88d 	bl	800452e <__swbuf_r>
 8004414:	3001      	adds	r0, #1
 8004416:	d0d7      	beq.n	80043c8 <_puts_r+0x38>
 8004418:	250a      	movs	r5, #10
 800441a:	e7d7      	b.n	80043cc <_puts_r+0x3c>
 800441c:	4622      	mov	r2, r4
 800441e:	4628      	mov	r0, r5
 8004420:	f000 f885 	bl	800452e <__swbuf_r>
 8004424:	3001      	adds	r0, #1
 8004426:	d1e7      	bne.n	80043f8 <_puts_r+0x68>
 8004428:	e7ce      	b.n	80043c8 <_puts_r+0x38>
 800442a:	3e01      	subs	r6, #1
 800442c:	e7e4      	b.n	80043f8 <_puts_r+0x68>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	6022      	str	r2, [r4, #0]
 8004434:	220a      	movs	r2, #10
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e7ee      	b.n	8004418 <_puts_r+0x88>
	...

0800443c <puts>:
 800443c:	4b02      	ldr	r3, [pc, #8]	@ (8004448 <puts+0xc>)
 800443e:	4601      	mov	r1, r0
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	f7ff bfa5 	b.w	8004390 <_puts_r>
 8004446:	bf00      	nop
 8004448:	20000018 	.word	0x20000018

0800444c <siscanf>:
 800444c:	b40e      	push	{r1, r2, r3}
 800444e:	b570      	push	{r4, r5, r6, lr}
 8004450:	b09d      	sub	sp, #116	@ 0x74
 8004452:	ac21      	add	r4, sp, #132	@ 0x84
 8004454:	2500      	movs	r5, #0
 8004456:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800445a:	f854 6b04 	ldr.w	r6, [r4], #4
 800445e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004462:	951b      	str	r5, [sp, #108]	@ 0x6c
 8004464:	9002      	str	r0, [sp, #8]
 8004466:	9006      	str	r0, [sp, #24]
 8004468:	f7fb feb2 	bl	80001d0 <strlen>
 800446c:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <siscanf+0x50>)
 800446e:	9003      	str	r0, [sp, #12]
 8004470:	9007      	str	r0, [sp, #28]
 8004472:	480b      	ldr	r0, [pc, #44]	@ (80044a0 <siscanf+0x54>)
 8004474:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004476:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800447a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800447e:	4632      	mov	r2, r6
 8004480:	4623      	mov	r3, r4
 8004482:	a902      	add	r1, sp, #8
 8004484:	6800      	ldr	r0, [r0, #0]
 8004486:	950f      	str	r5, [sp, #60]	@ 0x3c
 8004488:	9514      	str	r5, [sp, #80]	@ 0x50
 800448a:	9401      	str	r4, [sp, #4]
 800448c:	f000 fb34 	bl	8004af8 <__ssvfiscanf_r>
 8004490:	b01d      	add	sp, #116	@ 0x74
 8004492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004496:	b003      	add	sp, #12
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	080044c7 	.word	0x080044c7
 80044a0:	20000018 	.word	0x20000018

080044a4 <__sread>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	460c      	mov	r4, r1
 80044a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ac:	f000 f95a 	bl	8004764 <_read_r>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	bfab      	itete	ge
 80044b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044b6:	89a3      	ldrhlt	r3, [r4, #12]
 80044b8:	181b      	addge	r3, r3, r0
 80044ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044be:	bfac      	ite	ge
 80044c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044c2:	81a3      	strhlt	r3, [r4, #12]
 80044c4:	bd10      	pop	{r4, pc}

080044c6 <__seofread>:
 80044c6:	2000      	movs	r0, #0
 80044c8:	4770      	bx	lr

080044ca <__swrite>:
 80044ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ce:	461f      	mov	r7, r3
 80044d0:	898b      	ldrh	r3, [r1, #12]
 80044d2:	05db      	lsls	r3, r3, #23
 80044d4:	4605      	mov	r5, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	4616      	mov	r6, r2
 80044da:	d505      	bpl.n	80044e8 <__swrite+0x1e>
 80044dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e0:	2302      	movs	r3, #2
 80044e2:	2200      	movs	r2, #0
 80044e4:	f000 f92c 	bl	8004740 <_lseek_r>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	4632      	mov	r2, r6
 80044f6:	463b      	mov	r3, r7
 80044f8:	4628      	mov	r0, r5
 80044fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044fe:	f000 b943 	b.w	8004788 <_write_r>

08004502 <__sseek>:
 8004502:	b510      	push	{r4, lr}
 8004504:	460c      	mov	r4, r1
 8004506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450a:	f000 f919 	bl	8004740 <_lseek_r>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	bf15      	itete	ne
 8004514:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004516:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800451a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800451e:	81a3      	strheq	r3, [r4, #12]
 8004520:	bf18      	it	ne
 8004522:	81a3      	strhne	r3, [r4, #12]
 8004524:	bd10      	pop	{r4, pc}

08004526 <__sclose>:
 8004526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452a:	f000 b8f9 	b.w	8004720 <_close_r>

0800452e <__swbuf_r>:
 800452e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004530:	460e      	mov	r6, r1
 8004532:	4614      	mov	r4, r2
 8004534:	4605      	mov	r5, r0
 8004536:	b118      	cbz	r0, 8004540 <__swbuf_r+0x12>
 8004538:	6a03      	ldr	r3, [r0, #32]
 800453a:	b90b      	cbnz	r3, 8004540 <__swbuf_r+0x12>
 800453c:	f7ff fee0 	bl	8004300 <__sinit>
 8004540:	69a3      	ldr	r3, [r4, #24]
 8004542:	60a3      	str	r3, [r4, #8]
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	071a      	lsls	r2, r3, #28
 8004548:	d501      	bpl.n	800454e <__swbuf_r+0x20>
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	b943      	cbnz	r3, 8004560 <__swbuf_r+0x32>
 800454e:	4621      	mov	r1, r4
 8004550:	4628      	mov	r0, r5
 8004552:	f000 f82b 	bl	80045ac <__swsetup_r>
 8004556:	b118      	cbz	r0, 8004560 <__swbuf_r+0x32>
 8004558:	f04f 37ff 	mov.w	r7, #4294967295
 800455c:	4638      	mov	r0, r7
 800455e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	6922      	ldr	r2, [r4, #16]
 8004564:	1a98      	subs	r0, r3, r2
 8004566:	6963      	ldr	r3, [r4, #20]
 8004568:	b2f6      	uxtb	r6, r6
 800456a:	4283      	cmp	r3, r0
 800456c:	4637      	mov	r7, r6
 800456e:	dc05      	bgt.n	800457c <__swbuf_r+0x4e>
 8004570:	4621      	mov	r1, r4
 8004572:	4628      	mov	r0, r5
 8004574:	f001 f8d6 	bl	8005724 <_fflush_r>
 8004578:	2800      	cmp	r0, #0
 800457a:	d1ed      	bne.n	8004558 <__swbuf_r+0x2a>
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	3b01      	subs	r3, #1
 8004580:	60a3      	str	r3, [r4, #8]
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	6022      	str	r2, [r4, #0]
 8004588:	701e      	strb	r6, [r3, #0]
 800458a:	6962      	ldr	r2, [r4, #20]
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	429a      	cmp	r2, r3
 8004590:	d004      	beq.n	800459c <__swbuf_r+0x6e>
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	07db      	lsls	r3, r3, #31
 8004596:	d5e1      	bpl.n	800455c <__swbuf_r+0x2e>
 8004598:	2e0a      	cmp	r6, #10
 800459a:	d1df      	bne.n	800455c <__swbuf_r+0x2e>
 800459c:	4621      	mov	r1, r4
 800459e:	4628      	mov	r0, r5
 80045a0:	f001 f8c0 	bl	8005724 <_fflush_r>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d0d9      	beq.n	800455c <__swbuf_r+0x2e>
 80045a8:	e7d6      	b.n	8004558 <__swbuf_r+0x2a>
	...

080045ac <__swsetup_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4b29      	ldr	r3, [pc, #164]	@ (8004654 <__swsetup_r+0xa8>)
 80045b0:	4605      	mov	r5, r0
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	460c      	mov	r4, r1
 80045b6:	b118      	cbz	r0, 80045c0 <__swsetup_r+0x14>
 80045b8:	6a03      	ldr	r3, [r0, #32]
 80045ba:	b90b      	cbnz	r3, 80045c0 <__swsetup_r+0x14>
 80045bc:	f7ff fea0 	bl	8004300 <__sinit>
 80045c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045c4:	0719      	lsls	r1, r3, #28
 80045c6:	d422      	bmi.n	800460e <__swsetup_r+0x62>
 80045c8:	06da      	lsls	r2, r3, #27
 80045ca:	d407      	bmi.n	80045dc <__swsetup_r+0x30>
 80045cc:	2209      	movs	r2, #9
 80045ce:	602a      	str	r2, [r5, #0]
 80045d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295
 80045da:	e033      	b.n	8004644 <__swsetup_r+0x98>
 80045dc:	0758      	lsls	r0, r3, #29
 80045de:	d512      	bpl.n	8004606 <__swsetup_r+0x5a>
 80045e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045e2:	b141      	cbz	r1, 80045f6 <__swsetup_r+0x4a>
 80045e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045e8:	4299      	cmp	r1, r3
 80045ea:	d002      	beq.n	80045f2 <__swsetup_r+0x46>
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 f929 	bl	8004844 <_free_r>
 80045f2:	2300      	movs	r3, #0
 80045f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	2300      	movs	r3, #0
 8004600:	6063      	str	r3, [r4, #4]
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	f043 0308 	orr.w	r3, r3, #8
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	b94b      	cbnz	r3, 8004626 <__swsetup_r+0x7a>
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461c:	d003      	beq.n	8004626 <__swsetup_r+0x7a>
 800461e:	4621      	mov	r1, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f001 f8df 	bl	80057e4 <__smakebuf_r>
 8004626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800462a:	f013 0201 	ands.w	r2, r3, #1
 800462e:	d00a      	beq.n	8004646 <__swsetup_r+0x9a>
 8004630:	2200      	movs	r2, #0
 8004632:	60a2      	str	r2, [r4, #8]
 8004634:	6962      	ldr	r2, [r4, #20]
 8004636:	4252      	negs	r2, r2
 8004638:	61a2      	str	r2, [r4, #24]
 800463a:	6922      	ldr	r2, [r4, #16]
 800463c:	b942      	cbnz	r2, 8004650 <__swsetup_r+0xa4>
 800463e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004642:	d1c5      	bne.n	80045d0 <__swsetup_r+0x24>
 8004644:	bd38      	pop	{r3, r4, r5, pc}
 8004646:	0799      	lsls	r1, r3, #30
 8004648:	bf58      	it	pl
 800464a:	6962      	ldrpl	r2, [r4, #20]
 800464c:	60a2      	str	r2, [r4, #8]
 800464e:	e7f4      	b.n	800463a <__swsetup_r+0x8e>
 8004650:	2000      	movs	r0, #0
 8004652:	e7f7      	b.n	8004644 <__swsetup_r+0x98>
 8004654:	20000018 	.word	0x20000018

08004658 <memset>:
 8004658:	4402      	add	r2, r0
 800465a:	4603      	mov	r3, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	f803 1b01 	strb.w	r1, [r3], #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <strtok>:
 8004668:	4b16      	ldr	r3, [pc, #88]	@ (80046c4 <strtok+0x5c>)
 800466a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800466e:	681f      	ldr	r7, [r3, #0]
 8004670:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004672:	4605      	mov	r5, r0
 8004674:	460e      	mov	r6, r1
 8004676:	b9ec      	cbnz	r4, 80046b4 <strtok+0x4c>
 8004678:	2050      	movs	r0, #80	@ 0x50
 800467a:	f000 f92d 	bl	80048d8 <malloc>
 800467e:	4602      	mov	r2, r0
 8004680:	6478      	str	r0, [r7, #68]	@ 0x44
 8004682:	b920      	cbnz	r0, 800468e <strtok+0x26>
 8004684:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <strtok+0x60>)
 8004686:	4811      	ldr	r0, [pc, #68]	@ (80046cc <strtok+0x64>)
 8004688:	215b      	movs	r1, #91	@ 0x5b
 800468a:	f000 f8bd 	bl	8004808 <__assert_func>
 800468e:	e9c0 4400 	strd	r4, r4, [r0]
 8004692:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004696:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800469a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800469e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80046a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80046a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80046aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80046ae:	6184      	str	r4, [r0, #24]
 80046b0:	7704      	strb	r4, [r0, #28]
 80046b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80046b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046b6:	4631      	mov	r1, r6
 80046b8:	4628      	mov	r0, r5
 80046ba:	2301      	movs	r3, #1
 80046bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046c0:	f000 b806 	b.w	80046d0 <__strtok_r>
 80046c4:	20000018 	.word	0x20000018
 80046c8:	08005ec4 	.word	0x08005ec4
 80046cc:	08005edb 	.word	0x08005edb

080046d0 <__strtok_r>:
 80046d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d2:	4604      	mov	r4, r0
 80046d4:	b908      	cbnz	r0, 80046da <__strtok_r+0xa>
 80046d6:	6814      	ldr	r4, [r2, #0]
 80046d8:	b144      	cbz	r4, 80046ec <__strtok_r+0x1c>
 80046da:	4620      	mov	r0, r4
 80046dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80046e0:	460f      	mov	r7, r1
 80046e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80046e6:	b91e      	cbnz	r6, 80046f0 <__strtok_r+0x20>
 80046e8:	b965      	cbnz	r5, 8004704 <__strtok_r+0x34>
 80046ea:	6015      	str	r5, [r2, #0]
 80046ec:	2000      	movs	r0, #0
 80046ee:	e005      	b.n	80046fc <__strtok_r+0x2c>
 80046f0:	42b5      	cmp	r5, r6
 80046f2:	d1f6      	bne.n	80046e2 <__strtok_r+0x12>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f0      	bne.n	80046da <__strtok_r+0xa>
 80046f8:	6014      	str	r4, [r2, #0]
 80046fa:	7003      	strb	r3, [r0, #0]
 80046fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046fe:	461c      	mov	r4, r3
 8004700:	e00c      	b.n	800471c <__strtok_r+0x4c>
 8004702:	b91d      	cbnz	r5, 800470c <__strtok_r+0x3c>
 8004704:	4627      	mov	r7, r4
 8004706:	f814 3b01 	ldrb.w	r3, [r4], #1
 800470a:	460e      	mov	r6, r1
 800470c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004710:	42ab      	cmp	r3, r5
 8004712:	d1f6      	bne.n	8004702 <__strtok_r+0x32>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f2      	beq.n	80046fe <__strtok_r+0x2e>
 8004718:	2300      	movs	r3, #0
 800471a:	703b      	strb	r3, [r7, #0]
 800471c:	6014      	str	r4, [r2, #0]
 800471e:	e7ed      	b.n	80046fc <__strtok_r+0x2c>

08004720 <_close_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4d06      	ldr	r5, [pc, #24]	@ (800473c <_close_r+0x1c>)
 8004724:	2300      	movs	r3, #0
 8004726:	4604      	mov	r4, r0
 8004728:	4608      	mov	r0, r1
 800472a:	602b      	str	r3, [r5, #0]
 800472c:	f7fd fb04 	bl	8001d38 <_close>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d102      	bne.n	800473a <_close_r+0x1a>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b103      	cbz	r3, 800473a <_close_r+0x1a>
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	20000308 	.word	0x20000308

08004740 <_lseek_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d07      	ldr	r5, [pc, #28]	@ (8004760 <_lseek_r+0x20>)
 8004744:	4604      	mov	r4, r0
 8004746:	4608      	mov	r0, r1
 8004748:	4611      	mov	r1, r2
 800474a:	2200      	movs	r2, #0
 800474c:	602a      	str	r2, [r5, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	f7fd fb19 	bl	8001d86 <_lseek>
 8004754:	1c43      	adds	r3, r0, #1
 8004756:	d102      	bne.n	800475e <_lseek_r+0x1e>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	b103      	cbz	r3, 800475e <_lseek_r+0x1e>
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	bd38      	pop	{r3, r4, r5, pc}
 8004760:	20000308 	.word	0x20000308

08004764 <_read_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d07      	ldr	r5, [pc, #28]	@ (8004784 <_read_r+0x20>)
 8004768:	4604      	mov	r4, r0
 800476a:	4608      	mov	r0, r1
 800476c:	4611      	mov	r1, r2
 800476e:	2200      	movs	r2, #0
 8004770:	602a      	str	r2, [r5, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	f7fd faa7 	bl	8001cc6 <_read>
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	d102      	bne.n	8004782 <_read_r+0x1e>
 800477c:	682b      	ldr	r3, [r5, #0]
 800477e:	b103      	cbz	r3, 8004782 <_read_r+0x1e>
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	bd38      	pop	{r3, r4, r5, pc}
 8004784:	20000308 	.word	0x20000308

08004788 <_write_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4d07      	ldr	r5, [pc, #28]	@ (80047a8 <_write_r+0x20>)
 800478c:	4604      	mov	r4, r0
 800478e:	4608      	mov	r0, r1
 8004790:	4611      	mov	r1, r2
 8004792:	2200      	movs	r2, #0
 8004794:	602a      	str	r2, [r5, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	f7fd fab2 	bl	8001d00 <_write>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d102      	bne.n	80047a6 <_write_r+0x1e>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	b103      	cbz	r3, 80047a6 <_write_r+0x1e>
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	bd38      	pop	{r3, r4, r5, pc}
 80047a8:	20000308 	.word	0x20000308

080047ac <__errno>:
 80047ac:	4b01      	ldr	r3, [pc, #4]	@ (80047b4 <__errno+0x8>)
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000018 	.word	0x20000018

080047b8 <__libc_init_array>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	4d0d      	ldr	r5, [pc, #52]	@ (80047f0 <__libc_init_array+0x38>)
 80047bc:	4c0d      	ldr	r4, [pc, #52]	@ (80047f4 <__libc_init_array+0x3c>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	2600      	movs	r6, #0
 80047c4:	42a6      	cmp	r6, r4
 80047c6:	d109      	bne.n	80047dc <__libc_init_array+0x24>
 80047c8:	4d0b      	ldr	r5, [pc, #44]	@ (80047f8 <__libc_init_array+0x40>)
 80047ca:	4c0c      	ldr	r4, [pc, #48]	@ (80047fc <__libc_init_array+0x44>)
 80047cc:	f001 fa68 	bl	8005ca0 <_init>
 80047d0:	1b64      	subs	r4, r4, r5
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	2600      	movs	r6, #0
 80047d6:	42a6      	cmp	r6, r4
 80047d8:	d105      	bne.n	80047e6 <__libc_init_array+0x2e>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e0:	4798      	blx	r3
 80047e2:	3601      	adds	r6, #1
 80047e4:	e7ee      	b.n	80047c4 <__libc_init_array+0xc>
 80047e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ea:	4798      	blx	r3
 80047ec:	3601      	adds	r6, #1
 80047ee:	e7f2      	b.n	80047d6 <__libc_init_array+0x1e>
 80047f0:	080060c8 	.word	0x080060c8
 80047f4:	080060c8 	.word	0x080060c8
 80047f8:	080060c8 	.word	0x080060c8
 80047fc:	080060d0 	.word	0x080060d0

08004800 <__retarget_lock_init_recursive>:
 8004800:	4770      	bx	lr

08004802 <__retarget_lock_acquire_recursive>:
 8004802:	4770      	bx	lr

08004804 <__retarget_lock_release_recursive>:
 8004804:	4770      	bx	lr
	...

08004808 <__assert_func>:
 8004808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800480a:	4614      	mov	r4, r2
 800480c:	461a      	mov	r2, r3
 800480e:	4b09      	ldr	r3, [pc, #36]	@ (8004834 <__assert_func+0x2c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4605      	mov	r5, r0
 8004814:	68d8      	ldr	r0, [r3, #12]
 8004816:	b14c      	cbz	r4, 800482c <__assert_func+0x24>
 8004818:	4b07      	ldr	r3, [pc, #28]	@ (8004838 <__assert_func+0x30>)
 800481a:	9100      	str	r1, [sp, #0]
 800481c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004820:	4906      	ldr	r1, [pc, #24]	@ (800483c <__assert_func+0x34>)
 8004822:	462b      	mov	r3, r5
 8004824:	f000 ffa6 	bl	8005774 <fiprintf>
 8004828:	f001 f8cc 	bl	80059c4 <abort>
 800482c:	4b04      	ldr	r3, [pc, #16]	@ (8004840 <__assert_func+0x38>)
 800482e:	461c      	mov	r4, r3
 8004830:	e7f3      	b.n	800481a <__assert_func+0x12>
 8004832:	bf00      	nop
 8004834:	20000018 	.word	0x20000018
 8004838:	08005f35 	.word	0x08005f35
 800483c:	08005f42 	.word	0x08005f42
 8004840:	08005f70 	.word	0x08005f70

08004844 <_free_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4605      	mov	r5, r0
 8004848:	2900      	cmp	r1, #0
 800484a:	d041      	beq.n	80048d0 <_free_r+0x8c>
 800484c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004850:	1f0c      	subs	r4, r1, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	bfb8      	it	lt
 8004856:	18e4      	addlt	r4, r4, r3
 8004858:	f000 f8e8 	bl	8004a2c <__malloc_lock>
 800485c:	4a1d      	ldr	r2, [pc, #116]	@ (80048d4 <_free_r+0x90>)
 800485e:	6813      	ldr	r3, [r2, #0]
 8004860:	b933      	cbnz	r3, 8004870 <_free_r+0x2c>
 8004862:	6063      	str	r3, [r4, #4]
 8004864:	6014      	str	r4, [r2, #0]
 8004866:	4628      	mov	r0, r5
 8004868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800486c:	f000 b8e4 	b.w	8004a38 <__malloc_unlock>
 8004870:	42a3      	cmp	r3, r4
 8004872:	d908      	bls.n	8004886 <_free_r+0x42>
 8004874:	6820      	ldr	r0, [r4, #0]
 8004876:	1821      	adds	r1, r4, r0
 8004878:	428b      	cmp	r3, r1
 800487a:	bf01      	itttt	eq
 800487c:	6819      	ldreq	r1, [r3, #0]
 800487e:	685b      	ldreq	r3, [r3, #4]
 8004880:	1809      	addeq	r1, r1, r0
 8004882:	6021      	streq	r1, [r4, #0]
 8004884:	e7ed      	b.n	8004862 <_free_r+0x1e>
 8004886:	461a      	mov	r2, r3
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	b10b      	cbz	r3, 8004890 <_free_r+0x4c>
 800488c:	42a3      	cmp	r3, r4
 800488e:	d9fa      	bls.n	8004886 <_free_r+0x42>
 8004890:	6811      	ldr	r1, [r2, #0]
 8004892:	1850      	adds	r0, r2, r1
 8004894:	42a0      	cmp	r0, r4
 8004896:	d10b      	bne.n	80048b0 <_free_r+0x6c>
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	4401      	add	r1, r0
 800489c:	1850      	adds	r0, r2, r1
 800489e:	4283      	cmp	r3, r0
 80048a0:	6011      	str	r1, [r2, #0]
 80048a2:	d1e0      	bne.n	8004866 <_free_r+0x22>
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	6053      	str	r3, [r2, #4]
 80048aa:	4408      	add	r0, r1
 80048ac:	6010      	str	r0, [r2, #0]
 80048ae:	e7da      	b.n	8004866 <_free_r+0x22>
 80048b0:	d902      	bls.n	80048b8 <_free_r+0x74>
 80048b2:	230c      	movs	r3, #12
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	e7d6      	b.n	8004866 <_free_r+0x22>
 80048b8:	6820      	ldr	r0, [r4, #0]
 80048ba:	1821      	adds	r1, r4, r0
 80048bc:	428b      	cmp	r3, r1
 80048be:	bf04      	itt	eq
 80048c0:	6819      	ldreq	r1, [r3, #0]
 80048c2:	685b      	ldreq	r3, [r3, #4]
 80048c4:	6063      	str	r3, [r4, #4]
 80048c6:	bf04      	itt	eq
 80048c8:	1809      	addeq	r1, r1, r0
 80048ca:	6021      	streq	r1, [r4, #0]
 80048cc:	6054      	str	r4, [r2, #4]
 80048ce:	e7ca      	b.n	8004866 <_free_r+0x22>
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	bf00      	nop
 80048d4:	20000314 	.word	0x20000314

080048d8 <malloc>:
 80048d8:	4b02      	ldr	r3, [pc, #8]	@ (80048e4 <malloc+0xc>)
 80048da:	4601      	mov	r1, r0
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	f000 b825 	b.w	800492c <_malloc_r>
 80048e2:	bf00      	nop
 80048e4:	20000018 	.word	0x20000018

080048e8 <sbrk_aligned>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4e0f      	ldr	r6, [pc, #60]	@ (8004928 <sbrk_aligned+0x40>)
 80048ec:	460c      	mov	r4, r1
 80048ee:	6831      	ldr	r1, [r6, #0]
 80048f0:	4605      	mov	r5, r0
 80048f2:	b911      	cbnz	r1, 80048fa <sbrk_aligned+0x12>
 80048f4:	f001 f848 	bl	8005988 <_sbrk_r>
 80048f8:	6030      	str	r0, [r6, #0]
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f001 f843 	bl	8005988 <_sbrk_r>
 8004902:	1c43      	adds	r3, r0, #1
 8004904:	d103      	bne.n	800490e <sbrk_aligned+0x26>
 8004906:	f04f 34ff 	mov.w	r4, #4294967295
 800490a:	4620      	mov	r0, r4
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	1cc4      	adds	r4, r0, #3
 8004910:	f024 0403 	bic.w	r4, r4, #3
 8004914:	42a0      	cmp	r0, r4
 8004916:	d0f8      	beq.n	800490a <sbrk_aligned+0x22>
 8004918:	1a21      	subs	r1, r4, r0
 800491a:	4628      	mov	r0, r5
 800491c:	f001 f834 	bl	8005988 <_sbrk_r>
 8004920:	3001      	adds	r0, #1
 8004922:	d1f2      	bne.n	800490a <sbrk_aligned+0x22>
 8004924:	e7ef      	b.n	8004906 <sbrk_aligned+0x1e>
 8004926:	bf00      	nop
 8004928:	20000310 	.word	0x20000310

0800492c <_malloc_r>:
 800492c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004930:	1ccd      	adds	r5, r1, #3
 8004932:	f025 0503 	bic.w	r5, r5, #3
 8004936:	3508      	adds	r5, #8
 8004938:	2d0c      	cmp	r5, #12
 800493a:	bf38      	it	cc
 800493c:	250c      	movcc	r5, #12
 800493e:	2d00      	cmp	r5, #0
 8004940:	4606      	mov	r6, r0
 8004942:	db01      	blt.n	8004948 <_malloc_r+0x1c>
 8004944:	42a9      	cmp	r1, r5
 8004946:	d904      	bls.n	8004952 <_malloc_r+0x26>
 8004948:	230c      	movs	r3, #12
 800494a:	6033      	str	r3, [r6, #0]
 800494c:	2000      	movs	r0, #0
 800494e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a28 <_malloc_r+0xfc>
 8004956:	f000 f869 	bl	8004a2c <__malloc_lock>
 800495a:	f8d8 3000 	ldr.w	r3, [r8]
 800495e:	461c      	mov	r4, r3
 8004960:	bb44      	cbnz	r4, 80049b4 <_malloc_r+0x88>
 8004962:	4629      	mov	r1, r5
 8004964:	4630      	mov	r0, r6
 8004966:	f7ff ffbf 	bl	80048e8 <sbrk_aligned>
 800496a:	1c43      	adds	r3, r0, #1
 800496c:	4604      	mov	r4, r0
 800496e:	d158      	bne.n	8004a22 <_malloc_r+0xf6>
 8004970:	f8d8 4000 	ldr.w	r4, [r8]
 8004974:	4627      	mov	r7, r4
 8004976:	2f00      	cmp	r7, #0
 8004978:	d143      	bne.n	8004a02 <_malloc_r+0xd6>
 800497a:	2c00      	cmp	r4, #0
 800497c:	d04b      	beq.n	8004a16 <_malloc_r+0xea>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	4639      	mov	r1, r7
 8004982:	4630      	mov	r0, r6
 8004984:	eb04 0903 	add.w	r9, r4, r3
 8004988:	f000 fffe 	bl	8005988 <_sbrk_r>
 800498c:	4581      	cmp	r9, r0
 800498e:	d142      	bne.n	8004a16 <_malloc_r+0xea>
 8004990:	6821      	ldr	r1, [r4, #0]
 8004992:	1a6d      	subs	r5, r5, r1
 8004994:	4629      	mov	r1, r5
 8004996:	4630      	mov	r0, r6
 8004998:	f7ff ffa6 	bl	80048e8 <sbrk_aligned>
 800499c:	3001      	adds	r0, #1
 800499e:	d03a      	beq.n	8004a16 <_malloc_r+0xea>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	442b      	add	r3, r5
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	f8d8 3000 	ldr.w	r3, [r8]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	bb62      	cbnz	r2, 8004a08 <_malloc_r+0xdc>
 80049ae:	f8c8 7000 	str.w	r7, [r8]
 80049b2:	e00f      	b.n	80049d4 <_malloc_r+0xa8>
 80049b4:	6822      	ldr	r2, [r4, #0]
 80049b6:	1b52      	subs	r2, r2, r5
 80049b8:	d420      	bmi.n	80049fc <_malloc_r+0xd0>
 80049ba:	2a0b      	cmp	r2, #11
 80049bc:	d917      	bls.n	80049ee <_malloc_r+0xc2>
 80049be:	1961      	adds	r1, r4, r5
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	6025      	str	r5, [r4, #0]
 80049c4:	bf18      	it	ne
 80049c6:	6059      	strne	r1, [r3, #4]
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	bf08      	it	eq
 80049cc:	f8c8 1000 	streq.w	r1, [r8]
 80049d0:	5162      	str	r2, [r4, r5]
 80049d2:	604b      	str	r3, [r1, #4]
 80049d4:	4630      	mov	r0, r6
 80049d6:	f000 f82f 	bl	8004a38 <__malloc_unlock>
 80049da:	f104 000b 	add.w	r0, r4, #11
 80049de:	1d23      	adds	r3, r4, #4
 80049e0:	f020 0007 	bic.w	r0, r0, #7
 80049e4:	1ac2      	subs	r2, r0, r3
 80049e6:	bf1c      	itt	ne
 80049e8:	1a1b      	subne	r3, r3, r0
 80049ea:	50a3      	strne	r3, [r4, r2]
 80049ec:	e7af      	b.n	800494e <_malloc_r+0x22>
 80049ee:	6862      	ldr	r2, [r4, #4]
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	bf0c      	ite	eq
 80049f4:	f8c8 2000 	streq.w	r2, [r8]
 80049f8:	605a      	strne	r2, [r3, #4]
 80049fa:	e7eb      	b.n	80049d4 <_malloc_r+0xa8>
 80049fc:	4623      	mov	r3, r4
 80049fe:	6864      	ldr	r4, [r4, #4]
 8004a00:	e7ae      	b.n	8004960 <_malloc_r+0x34>
 8004a02:	463c      	mov	r4, r7
 8004a04:	687f      	ldr	r7, [r7, #4]
 8004a06:	e7b6      	b.n	8004976 <_malloc_r+0x4a>
 8004a08:	461a      	mov	r2, r3
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	d1fb      	bne.n	8004a08 <_malloc_r+0xdc>
 8004a10:	2300      	movs	r3, #0
 8004a12:	6053      	str	r3, [r2, #4]
 8004a14:	e7de      	b.n	80049d4 <_malloc_r+0xa8>
 8004a16:	230c      	movs	r3, #12
 8004a18:	6033      	str	r3, [r6, #0]
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f000 f80c 	bl	8004a38 <__malloc_unlock>
 8004a20:	e794      	b.n	800494c <_malloc_r+0x20>
 8004a22:	6005      	str	r5, [r0, #0]
 8004a24:	e7d6      	b.n	80049d4 <_malloc_r+0xa8>
 8004a26:	bf00      	nop
 8004a28:	20000314 	.word	0x20000314

08004a2c <__malloc_lock>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	@ (8004a34 <__malloc_lock+0x8>)
 8004a2e:	f7ff bee8 	b.w	8004802 <__retarget_lock_acquire_recursive>
 8004a32:	bf00      	nop
 8004a34:	2000030c 	.word	0x2000030c

08004a38 <__malloc_unlock>:
 8004a38:	4801      	ldr	r0, [pc, #4]	@ (8004a40 <__malloc_unlock+0x8>)
 8004a3a:	f7ff bee3 	b.w	8004804 <__retarget_lock_release_recursive>
 8004a3e:	bf00      	nop
 8004a40:	2000030c 	.word	0x2000030c

08004a44 <_sungetc_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	1c4b      	adds	r3, r1, #1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	d103      	bne.n	8004a54 <_sungetc_r+0x10>
 8004a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a50:	4628      	mov	r0, r5
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	8993      	ldrh	r3, [r2, #12]
 8004a56:	f023 0320 	bic.w	r3, r3, #32
 8004a5a:	8193      	strh	r3, [r2, #12]
 8004a5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a5e:	6852      	ldr	r2, [r2, #4]
 8004a60:	b2cd      	uxtb	r5, r1
 8004a62:	b18b      	cbz	r3, 8004a88 <_sungetc_r+0x44>
 8004a64:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004a66:	4293      	cmp	r3, r2
 8004a68:	dd08      	ble.n	8004a7c <_sungetc_r+0x38>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	6022      	str	r2, [r4, #0]
 8004a70:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	3301      	adds	r3, #1
 8004a78:	6063      	str	r3, [r4, #4]
 8004a7a:	e7e9      	b.n	8004a50 <_sungetc_r+0xc>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	f000 ff26 	bl	80058ce <__submore>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d0f1      	beq.n	8004a6a <_sungetc_r+0x26>
 8004a86:	e7e1      	b.n	8004a4c <_sungetc_r+0x8>
 8004a88:	6921      	ldr	r1, [r4, #16]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	b151      	cbz	r1, 8004aa4 <_sungetc_r+0x60>
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	d208      	bcs.n	8004aa4 <_sungetc_r+0x60>
 8004a92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004a96:	42a9      	cmp	r1, r5
 8004a98:	d104      	bne.n	8004aa4 <_sungetc_r+0x60>
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	3201      	adds	r2, #1
 8004a9e:	6023      	str	r3, [r4, #0]
 8004aa0:	6062      	str	r2, [r4, #4]
 8004aa2:	e7d5      	b.n	8004a50 <_sungetc_r+0xc>
 8004aa4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8004aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004aac:	6363      	str	r3, [r4, #52]	@ 0x34
 8004aae:	2303      	movs	r3, #3
 8004ab0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	2301      	movs	r3, #1
 8004abc:	e7dc      	b.n	8004a78 <_sungetc_r+0x34>

08004abe <__ssrefill_r>:
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004ac4:	b169      	cbz	r1, 8004ae2 <__ssrefill_r+0x24>
 8004ac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004aca:	4299      	cmp	r1, r3
 8004acc:	d001      	beq.n	8004ad2 <__ssrefill_r+0x14>
 8004ace:	f7ff feb9 	bl	8004844 <_free_r>
 8004ad2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ad4:	6063      	str	r3, [r4, #4]
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	6360      	str	r0, [r4, #52]	@ 0x34
 8004ada:	b113      	cbz	r3, 8004ae2 <__ssrefill_r+0x24>
 8004adc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6063      	str	r3, [r4, #4]
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	f043 0320 	orr.w	r3, r3, #32
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	e7f3      	b.n	8004ae0 <__ssrefill_r+0x22>

08004af8 <__ssvfiscanf_r>:
 8004af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	460c      	mov	r4, r1
 8004afe:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8004b02:	2100      	movs	r1, #0
 8004b04:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004b08:	49a6      	ldr	r1, [pc, #664]	@ (8004da4 <__ssvfiscanf_r+0x2ac>)
 8004b0a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004b0c:	f10d 0804 	add.w	r8, sp, #4
 8004b10:	49a5      	ldr	r1, [pc, #660]	@ (8004da8 <__ssvfiscanf_r+0x2b0>)
 8004b12:	4fa6      	ldr	r7, [pc, #664]	@ (8004dac <__ssvfiscanf_r+0x2b4>)
 8004b14:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004b18:	4606      	mov	r6, r0
 8004b1a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	f892 9000 	ldrb.w	r9, [r2]
 8004b22:	f1b9 0f00 	cmp.w	r9, #0
 8004b26:	f000 8158 	beq.w	8004dda <__ssvfiscanf_r+0x2e2>
 8004b2a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8004b2e:	f013 0308 	ands.w	r3, r3, #8
 8004b32:	f102 0501 	add.w	r5, r2, #1
 8004b36:	d019      	beq.n	8004b6c <__ssvfiscanf_r+0x74>
 8004b38:	6863      	ldr	r3, [r4, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	dd0f      	ble.n	8004b5e <__ssvfiscanf_r+0x66>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	5cba      	ldrb	r2, [r7, r2]
 8004b44:	0712      	lsls	r2, r2, #28
 8004b46:	d401      	bmi.n	8004b4c <__ssvfiscanf_r+0x54>
 8004b48:	462a      	mov	r2, r5
 8004b4a:	e7e8      	b.n	8004b1e <__ssvfiscanf_r+0x26>
 8004b4c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004b4e:	3201      	adds	r2, #1
 8004b50:	9245      	str	r2, [sp, #276]	@ 0x114
 8004b52:	6862      	ldr	r2, [r4, #4]
 8004b54:	3301      	adds	r3, #1
 8004b56:	3a01      	subs	r2, #1
 8004b58:	6062      	str	r2, [r4, #4]
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	e7ec      	b.n	8004b38 <__ssvfiscanf_r+0x40>
 8004b5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004b60:	4621      	mov	r1, r4
 8004b62:	4630      	mov	r0, r6
 8004b64:	4798      	blx	r3
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d0e9      	beq.n	8004b3e <__ssvfiscanf_r+0x46>
 8004b6a:	e7ed      	b.n	8004b48 <__ssvfiscanf_r+0x50>
 8004b6c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8004b70:	f040 8085 	bne.w	8004c7e <__ssvfiscanf_r+0x186>
 8004b74:	9341      	str	r3, [sp, #260]	@ 0x104
 8004b76:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004b78:	7853      	ldrb	r3, [r2, #1]
 8004b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b7c:	bf02      	ittt	eq
 8004b7e:	2310      	moveq	r3, #16
 8004b80:	1c95      	addeq	r5, r2, #2
 8004b82:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004b84:	220a      	movs	r2, #10
 8004b86:	46aa      	mov	sl, r5
 8004b88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004b8c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	d91e      	bls.n	8004bd2 <__ssvfiscanf_r+0xda>
 8004b94:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8004db0 <__ssvfiscanf_r+0x2b8>
 8004b98:	2203      	movs	r2, #3
 8004b9a:	4658      	mov	r0, fp
 8004b9c:	f7fb fb20 	bl	80001e0 <memchr>
 8004ba0:	b138      	cbz	r0, 8004bb2 <__ssvfiscanf_r+0xba>
 8004ba2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004ba4:	eba0 000b 	sub.w	r0, r0, fp
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4083      	lsls	r3, r0
 8004bac:	4313      	orrs	r3, r2
 8004bae:	9341      	str	r3, [sp, #260]	@ 0x104
 8004bb0:	4655      	mov	r5, sl
 8004bb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004bb6:	2b78      	cmp	r3, #120	@ 0x78
 8004bb8:	d806      	bhi.n	8004bc8 <__ssvfiscanf_r+0xd0>
 8004bba:	2b57      	cmp	r3, #87	@ 0x57
 8004bbc:	d810      	bhi.n	8004be0 <__ssvfiscanf_r+0xe8>
 8004bbe:	2b25      	cmp	r3, #37	@ 0x25
 8004bc0:	d05d      	beq.n	8004c7e <__ssvfiscanf_r+0x186>
 8004bc2:	d857      	bhi.n	8004c74 <__ssvfiscanf_r+0x17c>
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d075      	beq.n	8004cb4 <__ssvfiscanf_r+0x1bc>
 8004bc8:	2303      	movs	r3, #3
 8004bca:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004bcc:	230a      	movs	r3, #10
 8004bce:	9342      	str	r3, [sp, #264]	@ 0x108
 8004bd0:	e088      	b.n	8004ce4 <__ssvfiscanf_r+0x1ec>
 8004bd2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004bd4:	fb02 1103 	mla	r1, r2, r3, r1
 8004bd8:	3930      	subs	r1, #48	@ 0x30
 8004bda:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004bdc:	4655      	mov	r5, sl
 8004bde:	e7d2      	b.n	8004b86 <__ssvfiscanf_r+0x8e>
 8004be0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004be4:	2a20      	cmp	r2, #32
 8004be6:	d8ef      	bhi.n	8004bc8 <__ssvfiscanf_r+0xd0>
 8004be8:	a101      	add	r1, pc, #4	@ (adr r1, 8004bf0 <__ssvfiscanf_r+0xf8>)
 8004bea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004cc3 	.word	0x08004cc3
 8004bf4:	08004bc9 	.word	0x08004bc9
 8004bf8:	08004bc9 	.word	0x08004bc9
 8004bfc:	08004d1d 	.word	0x08004d1d
 8004c00:	08004bc9 	.word	0x08004bc9
 8004c04:	08004bc9 	.word	0x08004bc9
 8004c08:	08004bc9 	.word	0x08004bc9
 8004c0c:	08004bc9 	.word	0x08004bc9
 8004c10:	08004bc9 	.word	0x08004bc9
 8004c14:	08004bc9 	.word	0x08004bc9
 8004c18:	08004bc9 	.word	0x08004bc9
 8004c1c:	08004d33 	.word	0x08004d33
 8004c20:	08004d19 	.word	0x08004d19
 8004c24:	08004c7b 	.word	0x08004c7b
 8004c28:	08004c7b 	.word	0x08004c7b
 8004c2c:	08004c7b 	.word	0x08004c7b
 8004c30:	08004bc9 	.word	0x08004bc9
 8004c34:	08004cd5 	.word	0x08004cd5
 8004c38:	08004bc9 	.word	0x08004bc9
 8004c3c:	08004bc9 	.word	0x08004bc9
 8004c40:	08004bc9 	.word	0x08004bc9
 8004c44:	08004bc9 	.word	0x08004bc9
 8004c48:	08004d43 	.word	0x08004d43
 8004c4c:	08004cdd 	.word	0x08004cdd
 8004c50:	08004cbb 	.word	0x08004cbb
 8004c54:	08004bc9 	.word	0x08004bc9
 8004c58:	08004bc9 	.word	0x08004bc9
 8004c5c:	08004d3f 	.word	0x08004d3f
 8004c60:	08004bc9 	.word	0x08004bc9
 8004c64:	08004d19 	.word	0x08004d19
 8004c68:	08004bc9 	.word	0x08004bc9
 8004c6c:	08004bc9 	.word	0x08004bc9
 8004c70:	08004cc3 	.word	0x08004cc3
 8004c74:	3b45      	subs	r3, #69	@ 0x45
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d8a6      	bhi.n	8004bc8 <__ssvfiscanf_r+0xd0>
 8004c7a:	2305      	movs	r3, #5
 8004c7c:	e031      	b.n	8004ce2 <__ssvfiscanf_r+0x1ea>
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dd0d      	ble.n	8004ca0 <__ssvfiscanf_r+0x1a8>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	781a      	ldrb	r2, [r3, #0]
 8004c88:	454a      	cmp	r2, r9
 8004c8a:	f040 80a6 	bne.w	8004dda <__ssvfiscanf_r+0x2e2>
 8004c8e:	3301      	adds	r3, #1
 8004c90:	6862      	ldr	r2, [r4, #4]
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004c96:	3a01      	subs	r2, #1
 8004c98:	3301      	adds	r3, #1
 8004c9a:	6062      	str	r2, [r4, #4]
 8004c9c:	9345      	str	r3, [sp, #276]	@ 0x114
 8004c9e:	e753      	b.n	8004b48 <__ssvfiscanf_r+0x50>
 8004ca0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	4798      	blx	r3
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d0eb      	beq.n	8004c84 <__ssvfiscanf_r+0x18c>
 8004cac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f040 808b 	bne.w	8004dca <__ssvfiscanf_r+0x2d2>
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	e08b      	b.n	8004dd2 <__ssvfiscanf_r+0x2da>
 8004cba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004cbc:	f042 0220 	orr.w	r2, r2, #32
 8004cc0:	9241      	str	r2, [sp, #260]	@ 0x104
 8004cc2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc8:	9241      	str	r2, [sp, #260]	@ 0x104
 8004cca:	2210      	movs	r2, #16
 8004ccc:	2b6e      	cmp	r3, #110	@ 0x6e
 8004cce:	9242      	str	r2, [sp, #264]	@ 0x108
 8004cd0:	d902      	bls.n	8004cd8 <__ssvfiscanf_r+0x1e0>
 8004cd2:	e005      	b.n	8004ce0 <__ssvfiscanf_r+0x1e8>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9342      	str	r3, [sp, #264]	@ 0x108
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e002      	b.n	8004ce2 <__ssvfiscanf_r+0x1ea>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	9342      	str	r3, [sp, #264]	@ 0x108
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004ce4:	6863      	ldr	r3, [r4, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	dd39      	ble.n	8004d5e <__ssvfiscanf_r+0x266>
 8004cea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004cec:	0659      	lsls	r1, r3, #25
 8004cee:	d404      	bmi.n	8004cfa <__ssvfiscanf_r+0x202>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	5cba      	ldrb	r2, [r7, r2]
 8004cf6:	0712      	lsls	r2, r2, #28
 8004cf8:	d438      	bmi.n	8004d6c <__ssvfiscanf_r+0x274>
 8004cfa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	dc47      	bgt.n	8004d90 <__ssvfiscanf_r+0x298>
 8004d00:	466b      	mov	r3, sp
 8004d02:	4622      	mov	r2, r4
 8004d04:	a941      	add	r1, sp, #260	@ 0x104
 8004d06:	4630      	mov	r0, r6
 8004d08:	f000 fb3a 	bl	8005380 <_scanf_chars>
 8004d0c:	2801      	cmp	r0, #1
 8004d0e:	d064      	beq.n	8004dda <__ssvfiscanf_r+0x2e2>
 8004d10:	2802      	cmp	r0, #2
 8004d12:	f47f af19 	bne.w	8004b48 <__ssvfiscanf_r+0x50>
 8004d16:	e7c9      	b.n	8004cac <__ssvfiscanf_r+0x1b4>
 8004d18:	220a      	movs	r2, #10
 8004d1a:	e7d7      	b.n	8004ccc <__ssvfiscanf_r+0x1d4>
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f000 fd9c 	bl	800585c <__sccl>
 8004d24:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d2a:	9341      	str	r3, [sp, #260]	@ 0x104
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e7d7      	b.n	8004ce2 <__ssvfiscanf_r+0x1ea>
 8004d32:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d38:	9341      	str	r3, [sp, #260]	@ 0x104
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e7d1      	b.n	8004ce2 <__ssvfiscanf_r+0x1ea>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e7cf      	b.n	8004ce2 <__ssvfiscanf_r+0x1ea>
 8004d42:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004d44:	06c3      	lsls	r3, r0, #27
 8004d46:	f53f aeff 	bmi.w	8004b48 <__ssvfiscanf_r+0x50>
 8004d4a:	9b00      	ldr	r3, [sp, #0]
 8004d4c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004d4e:	1d19      	adds	r1, r3, #4
 8004d50:	9100      	str	r1, [sp, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	07c0      	lsls	r0, r0, #31
 8004d56:	bf4c      	ite	mi
 8004d58:	801a      	strhmi	r2, [r3, #0]
 8004d5a:	601a      	strpl	r2, [r3, #0]
 8004d5c:	e6f4      	b.n	8004b48 <__ssvfiscanf_r+0x50>
 8004d5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004d60:	4621      	mov	r1, r4
 8004d62:	4630      	mov	r0, r6
 8004d64:	4798      	blx	r3
 8004d66:	2800      	cmp	r0, #0
 8004d68:	d0bf      	beq.n	8004cea <__ssvfiscanf_r+0x1f2>
 8004d6a:	e79f      	b.n	8004cac <__ssvfiscanf_r+0x1b4>
 8004d6c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004d6e:	3201      	adds	r2, #1
 8004d70:	9245      	str	r2, [sp, #276]	@ 0x114
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	3a01      	subs	r2, #1
 8004d76:	2a00      	cmp	r2, #0
 8004d78:	6062      	str	r2, [r4, #4]
 8004d7a:	dd02      	ble.n	8004d82 <__ssvfiscanf_r+0x28a>
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	6023      	str	r3, [r4, #0]
 8004d80:	e7b6      	b.n	8004cf0 <__ssvfiscanf_r+0x1f8>
 8004d82:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004d84:	4621      	mov	r1, r4
 8004d86:	4630      	mov	r0, r6
 8004d88:	4798      	blx	r3
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d0b0      	beq.n	8004cf0 <__ssvfiscanf_r+0x1f8>
 8004d8e:	e78d      	b.n	8004cac <__ssvfiscanf_r+0x1b4>
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	dc0f      	bgt.n	8004db4 <__ssvfiscanf_r+0x2bc>
 8004d94:	466b      	mov	r3, sp
 8004d96:	4622      	mov	r2, r4
 8004d98:	a941      	add	r1, sp, #260	@ 0x104
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f000 fb4a 	bl	8005434 <_scanf_i>
 8004da0:	e7b4      	b.n	8004d0c <__ssvfiscanf_r+0x214>
 8004da2:	bf00      	nop
 8004da4:	08004a45 	.word	0x08004a45
 8004da8:	08004abf 	.word	0x08004abf
 8004dac:	08005fc0 	.word	0x08005fc0
 8004db0:	08005f71 	.word	0x08005f71
 8004db4:	4b0a      	ldr	r3, [pc, #40]	@ (8004de0 <__ssvfiscanf_r+0x2e8>)
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f43f aec6 	beq.w	8004b48 <__ssvfiscanf_r+0x50>
 8004dbc:	466b      	mov	r3, sp
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	a941      	add	r1, sp, #260	@ 0x104
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	f3af 8000 	nop.w
 8004dc8:	e7a0      	b.n	8004d0c <__ssvfiscanf_r+0x214>
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	065b      	lsls	r3, r3, #25
 8004dce:	f53f af71 	bmi.w	8004cb4 <__ssvfiscanf_r+0x1bc>
 8004dd2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8004dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dda:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004ddc:	e7f9      	b.n	8004dd2 <__ssvfiscanf_r+0x2da>
 8004dde:	bf00      	nop
 8004de0:	00000000 	.word	0x00000000

08004de4 <__sfputc_r>:
 8004de4:	6893      	ldr	r3, [r2, #8]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	b410      	push	{r4}
 8004dec:	6093      	str	r3, [r2, #8]
 8004dee:	da08      	bge.n	8004e02 <__sfputc_r+0x1e>
 8004df0:	6994      	ldr	r4, [r2, #24]
 8004df2:	42a3      	cmp	r3, r4
 8004df4:	db01      	blt.n	8004dfa <__sfputc_r+0x16>
 8004df6:	290a      	cmp	r1, #10
 8004df8:	d103      	bne.n	8004e02 <__sfputc_r+0x1e>
 8004dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dfe:	f7ff bb96 	b.w	800452e <__swbuf_r>
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	1c58      	adds	r0, r3, #1
 8004e06:	6010      	str	r0, [r2, #0]
 8004e08:	7019      	strb	r1, [r3, #0]
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <__sfputs_r>:
 8004e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e14:	4606      	mov	r6, r0
 8004e16:	460f      	mov	r7, r1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	18d5      	adds	r5, r2, r3
 8004e1c:	42ac      	cmp	r4, r5
 8004e1e:	d101      	bne.n	8004e24 <__sfputs_r+0x12>
 8004e20:	2000      	movs	r0, #0
 8004e22:	e007      	b.n	8004e34 <__sfputs_r+0x22>
 8004e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e28:	463a      	mov	r2, r7
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7ff ffda 	bl	8004de4 <__sfputc_r>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d1f3      	bne.n	8004e1c <__sfputs_r+0xa>
 8004e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e38 <_vfiprintf_r>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	460d      	mov	r5, r1
 8004e3e:	b09d      	sub	sp, #116	@ 0x74
 8004e40:	4614      	mov	r4, r2
 8004e42:	4698      	mov	r8, r3
 8004e44:	4606      	mov	r6, r0
 8004e46:	b118      	cbz	r0, 8004e50 <_vfiprintf_r+0x18>
 8004e48:	6a03      	ldr	r3, [r0, #32]
 8004e4a:	b90b      	cbnz	r3, 8004e50 <_vfiprintf_r+0x18>
 8004e4c:	f7ff fa58 	bl	8004300 <__sinit>
 8004e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e52:	07d9      	lsls	r1, r3, #31
 8004e54:	d405      	bmi.n	8004e62 <_vfiprintf_r+0x2a>
 8004e56:	89ab      	ldrh	r3, [r5, #12]
 8004e58:	059a      	lsls	r2, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_vfiprintf_r+0x2a>
 8004e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e5e:	f7ff fcd0 	bl	8004802 <__retarget_lock_acquire_recursive>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	071b      	lsls	r3, r3, #28
 8004e66:	d501      	bpl.n	8004e6c <_vfiprintf_r+0x34>
 8004e68:	692b      	ldr	r3, [r5, #16]
 8004e6a:	b99b      	cbnz	r3, 8004e94 <_vfiprintf_r+0x5c>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f7ff fb9c 	bl	80045ac <__swsetup_r>
 8004e74:	b170      	cbz	r0, 8004e94 <_vfiprintf_r+0x5c>
 8004e76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e78:	07dc      	lsls	r4, r3, #31
 8004e7a:	d504      	bpl.n	8004e86 <_vfiprintf_r+0x4e>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	b01d      	add	sp, #116	@ 0x74
 8004e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	0598      	lsls	r0, r3, #22
 8004e8a:	d4f7      	bmi.n	8004e7c <_vfiprintf_r+0x44>
 8004e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e8e:	f7ff fcb9 	bl	8004804 <__retarget_lock_release_recursive>
 8004e92:	e7f3      	b.n	8004e7c <_vfiprintf_r+0x44>
 8004e94:	2300      	movs	r3, #0
 8004e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e98:	2320      	movs	r3, #32
 8004e9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea2:	2330      	movs	r3, #48	@ 0x30
 8004ea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005054 <_vfiprintf_r+0x21c>
 8004ea8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004eac:	f04f 0901 	mov.w	r9, #1
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	469a      	mov	sl, r3
 8004eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb8:	b10a      	cbz	r2, 8004ebe <_vfiprintf_r+0x86>
 8004eba:	2a25      	cmp	r2, #37	@ 0x25
 8004ebc:	d1f9      	bne.n	8004eb2 <_vfiprintf_r+0x7a>
 8004ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec2:	d00b      	beq.n	8004edc <_vfiprintf_r+0xa4>
 8004ec4:	465b      	mov	r3, fp
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7ff ffa1 	bl	8004e12 <__sfputs_r>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f000 80a7 	beq.w	8005024 <_vfiprintf_r+0x1ec>
 8004ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ed8:	445a      	add	r2, fp
 8004eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8004edc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 809f 	beq.w	8005024 <_vfiprintf_r+0x1ec>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ef0:	f10a 0a01 	add.w	sl, sl, #1
 8004ef4:	9304      	str	r3, [sp, #16]
 8004ef6:	9307      	str	r3, [sp, #28]
 8004ef8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004efe:	4654      	mov	r4, sl
 8004f00:	2205      	movs	r2, #5
 8004f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f06:	4853      	ldr	r0, [pc, #332]	@ (8005054 <_vfiprintf_r+0x21c>)
 8004f08:	f7fb f96a 	bl	80001e0 <memchr>
 8004f0c:	9a04      	ldr	r2, [sp, #16]
 8004f0e:	b9d8      	cbnz	r0, 8004f48 <_vfiprintf_r+0x110>
 8004f10:	06d1      	lsls	r1, r2, #27
 8004f12:	bf44      	itt	mi
 8004f14:	2320      	movmi	r3, #32
 8004f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f1a:	0713      	lsls	r3, r2, #28
 8004f1c:	bf44      	itt	mi
 8004f1e:	232b      	movmi	r3, #43	@ 0x2b
 8004f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f24:	f89a 3000 	ldrb.w	r3, [sl]
 8004f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f2a:	d015      	beq.n	8004f58 <_vfiprintf_r+0x120>
 8004f2c:	9a07      	ldr	r2, [sp, #28]
 8004f2e:	4654      	mov	r4, sl
 8004f30:	2000      	movs	r0, #0
 8004f32:	f04f 0c0a 	mov.w	ip, #10
 8004f36:	4621      	mov	r1, r4
 8004f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f3c:	3b30      	subs	r3, #48	@ 0x30
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	d94b      	bls.n	8004fda <_vfiprintf_r+0x1a2>
 8004f42:	b1b0      	cbz	r0, 8004f72 <_vfiprintf_r+0x13a>
 8004f44:	9207      	str	r2, [sp, #28]
 8004f46:	e014      	b.n	8004f72 <_vfiprintf_r+0x13a>
 8004f48:	eba0 0308 	sub.w	r3, r0, r8
 8004f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f50:	4313      	orrs	r3, r2
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	46a2      	mov	sl, r4
 8004f56:	e7d2      	b.n	8004efe <_vfiprintf_r+0xc6>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	1d19      	adds	r1, r3, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	9103      	str	r1, [sp, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bfbb      	ittet	lt
 8004f64:	425b      	neglt	r3, r3
 8004f66:	f042 0202 	orrlt.w	r2, r2, #2
 8004f6a:	9307      	strge	r3, [sp, #28]
 8004f6c:	9307      	strlt	r3, [sp, #28]
 8004f6e:	bfb8      	it	lt
 8004f70:	9204      	strlt	r2, [sp, #16]
 8004f72:	7823      	ldrb	r3, [r4, #0]
 8004f74:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f76:	d10a      	bne.n	8004f8e <_vfiprintf_r+0x156>
 8004f78:	7863      	ldrb	r3, [r4, #1]
 8004f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f7c:	d132      	bne.n	8004fe4 <_vfiprintf_r+0x1ac>
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	9203      	str	r2, [sp, #12]
 8004f86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f8a:	3402      	adds	r4, #2
 8004f8c:	9305      	str	r3, [sp, #20]
 8004f8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005064 <_vfiprintf_r+0x22c>
 8004f92:	7821      	ldrb	r1, [r4, #0]
 8004f94:	2203      	movs	r2, #3
 8004f96:	4650      	mov	r0, sl
 8004f98:	f7fb f922 	bl	80001e0 <memchr>
 8004f9c:	b138      	cbz	r0, 8004fae <_vfiprintf_r+0x176>
 8004f9e:	9b04      	ldr	r3, [sp, #16]
 8004fa0:	eba0 000a 	sub.w	r0, r0, sl
 8004fa4:	2240      	movs	r2, #64	@ 0x40
 8004fa6:	4082      	lsls	r2, r0
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	3401      	adds	r4, #1
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb2:	4829      	ldr	r0, [pc, #164]	@ (8005058 <_vfiprintf_r+0x220>)
 8004fb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fb8:	2206      	movs	r2, #6
 8004fba:	f7fb f911 	bl	80001e0 <memchr>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d03f      	beq.n	8005042 <_vfiprintf_r+0x20a>
 8004fc2:	4b26      	ldr	r3, [pc, #152]	@ (800505c <_vfiprintf_r+0x224>)
 8004fc4:	bb1b      	cbnz	r3, 800500e <_vfiprintf_r+0x1d6>
 8004fc6:	9b03      	ldr	r3, [sp, #12]
 8004fc8:	3307      	adds	r3, #7
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	3308      	adds	r3, #8
 8004fd0:	9303      	str	r3, [sp, #12]
 8004fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fd4:	443b      	add	r3, r7
 8004fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fd8:	e76a      	b.n	8004eb0 <_vfiprintf_r+0x78>
 8004fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fde:	460c      	mov	r4, r1
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	e7a8      	b.n	8004f36 <_vfiprintf_r+0xfe>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	3401      	adds	r4, #1
 8004fe8:	9305      	str	r3, [sp, #20]
 8004fea:	4619      	mov	r1, r3
 8004fec:	f04f 0c0a 	mov.w	ip, #10
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ff6:	3a30      	subs	r2, #48	@ 0x30
 8004ff8:	2a09      	cmp	r2, #9
 8004ffa:	d903      	bls.n	8005004 <_vfiprintf_r+0x1cc>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0c6      	beq.n	8004f8e <_vfiprintf_r+0x156>
 8005000:	9105      	str	r1, [sp, #20]
 8005002:	e7c4      	b.n	8004f8e <_vfiprintf_r+0x156>
 8005004:	fb0c 2101 	mla	r1, ip, r1, r2
 8005008:	4604      	mov	r4, r0
 800500a:	2301      	movs	r3, #1
 800500c:	e7f0      	b.n	8004ff0 <_vfiprintf_r+0x1b8>
 800500e:	ab03      	add	r3, sp, #12
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	462a      	mov	r2, r5
 8005014:	4b12      	ldr	r3, [pc, #72]	@ (8005060 <_vfiprintf_r+0x228>)
 8005016:	a904      	add	r1, sp, #16
 8005018:	4630      	mov	r0, r6
 800501a:	f3af 8000 	nop.w
 800501e:	4607      	mov	r7, r0
 8005020:	1c78      	adds	r0, r7, #1
 8005022:	d1d6      	bne.n	8004fd2 <_vfiprintf_r+0x19a>
 8005024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005026:	07d9      	lsls	r1, r3, #31
 8005028:	d405      	bmi.n	8005036 <_vfiprintf_r+0x1fe>
 800502a:	89ab      	ldrh	r3, [r5, #12]
 800502c:	059a      	lsls	r2, r3, #22
 800502e:	d402      	bmi.n	8005036 <_vfiprintf_r+0x1fe>
 8005030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005032:	f7ff fbe7 	bl	8004804 <__retarget_lock_release_recursive>
 8005036:	89ab      	ldrh	r3, [r5, #12]
 8005038:	065b      	lsls	r3, r3, #25
 800503a:	f53f af1f 	bmi.w	8004e7c <_vfiprintf_r+0x44>
 800503e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005040:	e71e      	b.n	8004e80 <_vfiprintf_r+0x48>
 8005042:	ab03      	add	r3, sp, #12
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	462a      	mov	r2, r5
 8005048:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <_vfiprintf_r+0x228>)
 800504a:	a904      	add	r1, sp, #16
 800504c:	4630      	mov	r0, r6
 800504e:	f000 f879 	bl	8005144 <_printf_i>
 8005052:	e7e4      	b.n	800501e <_vfiprintf_r+0x1e6>
 8005054:	08005f75 	.word	0x08005f75
 8005058:	08005f7b 	.word	0x08005f7b
 800505c:	00000000 	.word	0x00000000
 8005060:	08004e13 	.word	0x08004e13
 8005064:	08005f71 	.word	0x08005f71

08005068 <_printf_common>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	4616      	mov	r6, r2
 800506e:	4698      	mov	r8, r3
 8005070:	688a      	ldr	r2, [r1, #8]
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005078:	4293      	cmp	r3, r2
 800507a:	bfb8      	it	lt
 800507c:	4613      	movlt	r3, r2
 800507e:	6033      	str	r3, [r6, #0]
 8005080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005084:	4607      	mov	r7, r0
 8005086:	460c      	mov	r4, r1
 8005088:	b10a      	cbz	r2, 800508e <_printf_common+0x26>
 800508a:	3301      	adds	r3, #1
 800508c:	6033      	str	r3, [r6, #0]
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	0699      	lsls	r1, r3, #26
 8005092:	bf42      	ittt	mi
 8005094:	6833      	ldrmi	r3, [r6, #0]
 8005096:	3302      	addmi	r3, #2
 8005098:	6033      	strmi	r3, [r6, #0]
 800509a:	6825      	ldr	r5, [r4, #0]
 800509c:	f015 0506 	ands.w	r5, r5, #6
 80050a0:	d106      	bne.n	80050b0 <_printf_common+0x48>
 80050a2:	f104 0a19 	add.w	sl, r4, #25
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	6832      	ldr	r2, [r6, #0]
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	dc26      	bgt.n	80050fe <_printf_common+0x96>
 80050b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	3b00      	subs	r3, #0
 80050b8:	bf18      	it	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	0692      	lsls	r2, r2, #26
 80050be:	d42b      	bmi.n	8005118 <_printf_common+0xb0>
 80050c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050c4:	4641      	mov	r1, r8
 80050c6:	4638      	mov	r0, r7
 80050c8:	47c8      	blx	r9
 80050ca:	3001      	adds	r0, #1
 80050cc:	d01e      	beq.n	800510c <_printf_common+0xa4>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	6922      	ldr	r2, [r4, #16]
 80050d2:	f003 0306 	and.w	r3, r3, #6
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	bf02      	ittt	eq
 80050da:	68e5      	ldreq	r5, [r4, #12]
 80050dc:	6833      	ldreq	r3, [r6, #0]
 80050de:	1aed      	subeq	r5, r5, r3
 80050e0:	68a3      	ldr	r3, [r4, #8]
 80050e2:	bf0c      	ite	eq
 80050e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e8:	2500      	movne	r5, #0
 80050ea:	4293      	cmp	r3, r2
 80050ec:	bfc4      	itt	gt
 80050ee:	1a9b      	subgt	r3, r3, r2
 80050f0:	18ed      	addgt	r5, r5, r3
 80050f2:	2600      	movs	r6, #0
 80050f4:	341a      	adds	r4, #26
 80050f6:	42b5      	cmp	r5, r6
 80050f8:	d11a      	bne.n	8005130 <_printf_common+0xc8>
 80050fa:	2000      	movs	r0, #0
 80050fc:	e008      	b.n	8005110 <_printf_common+0xa8>
 80050fe:	2301      	movs	r3, #1
 8005100:	4652      	mov	r2, sl
 8005102:	4641      	mov	r1, r8
 8005104:	4638      	mov	r0, r7
 8005106:	47c8      	blx	r9
 8005108:	3001      	adds	r0, #1
 800510a:	d103      	bne.n	8005114 <_printf_common+0xac>
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005114:	3501      	adds	r5, #1
 8005116:	e7c6      	b.n	80050a6 <_printf_common+0x3e>
 8005118:	18e1      	adds	r1, r4, r3
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	2030      	movs	r0, #48	@ 0x30
 800511e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005122:	4422      	add	r2, r4
 8005124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800512c:	3302      	adds	r3, #2
 800512e:	e7c7      	b.n	80050c0 <_printf_common+0x58>
 8005130:	2301      	movs	r3, #1
 8005132:	4622      	mov	r2, r4
 8005134:	4641      	mov	r1, r8
 8005136:	4638      	mov	r0, r7
 8005138:	47c8      	blx	r9
 800513a:	3001      	adds	r0, #1
 800513c:	d0e6      	beq.n	800510c <_printf_common+0xa4>
 800513e:	3601      	adds	r6, #1
 8005140:	e7d9      	b.n	80050f6 <_printf_common+0x8e>
	...

08005144 <_printf_i>:
 8005144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005148:	7e0f      	ldrb	r7, [r1, #24]
 800514a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800514c:	2f78      	cmp	r7, #120	@ 0x78
 800514e:	4691      	mov	r9, r2
 8005150:	4680      	mov	r8, r0
 8005152:	460c      	mov	r4, r1
 8005154:	469a      	mov	sl, r3
 8005156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800515a:	d807      	bhi.n	800516c <_printf_i+0x28>
 800515c:	2f62      	cmp	r7, #98	@ 0x62
 800515e:	d80a      	bhi.n	8005176 <_printf_i+0x32>
 8005160:	2f00      	cmp	r7, #0
 8005162:	f000 80d1 	beq.w	8005308 <_printf_i+0x1c4>
 8005166:	2f58      	cmp	r7, #88	@ 0x58
 8005168:	f000 80b8 	beq.w	80052dc <_printf_i+0x198>
 800516c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005174:	e03a      	b.n	80051ec <_printf_i+0xa8>
 8005176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800517a:	2b15      	cmp	r3, #21
 800517c:	d8f6      	bhi.n	800516c <_printf_i+0x28>
 800517e:	a101      	add	r1, pc, #4	@ (adr r1, 8005184 <_printf_i+0x40>)
 8005180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005184:	080051dd 	.word	0x080051dd
 8005188:	080051f1 	.word	0x080051f1
 800518c:	0800516d 	.word	0x0800516d
 8005190:	0800516d 	.word	0x0800516d
 8005194:	0800516d 	.word	0x0800516d
 8005198:	0800516d 	.word	0x0800516d
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	0800516d 	.word	0x0800516d
 80051a4:	0800516d 	.word	0x0800516d
 80051a8:	0800516d 	.word	0x0800516d
 80051ac:	0800516d 	.word	0x0800516d
 80051b0:	080052ef 	.word	0x080052ef
 80051b4:	0800521b 	.word	0x0800521b
 80051b8:	080052a9 	.word	0x080052a9
 80051bc:	0800516d 	.word	0x0800516d
 80051c0:	0800516d 	.word	0x0800516d
 80051c4:	08005311 	.word	0x08005311
 80051c8:	0800516d 	.word	0x0800516d
 80051cc:	0800521b 	.word	0x0800521b
 80051d0:	0800516d 	.word	0x0800516d
 80051d4:	0800516d 	.word	0x0800516d
 80051d8:	080052b1 	.word	0x080052b1
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	1d1a      	adds	r2, r3, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6032      	str	r2, [r6, #0]
 80051e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051ec:	2301      	movs	r3, #1
 80051ee:	e09c      	b.n	800532a <_printf_i+0x1e6>
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	1d19      	adds	r1, r3, #4
 80051f6:	6031      	str	r1, [r6, #0]
 80051f8:	0606      	lsls	r6, r0, #24
 80051fa:	d501      	bpl.n	8005200 <_printf_i+0xbc>
 80051fc:	681d      	ldr	r5, [r3, #0]
 80051fe:	e003      	b.n	8005208 <_printf_i+0xc4>
 8005200:	0645      	lsls	r5, r0, #25
 8005202:	d5fb      	bpl.n	80051fc <_printf_i+0xb8>
 8005204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005208:	2d00      	cmp	r5, #0
 800520a:	da03      	bge.n	8005214 <_printf_i+0xd0>
 800520c:	232d      	movs	r3, #45	@ 0x2d
 800520e:	426d      	negs	r5, r5
 8005210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005214:	4858      	ldr	r0, [pc, #352]	@ (8005378 <_printf_i+0x234>)
 8005216:	230a      	movs	r3, #10
 8005218:	e011      	b.n	800523e <_printf_i+0xfa>
 800521a:	6821      	ldr	r1, [r4, #0]
 800521c:	6833      	ldr	r3, [r6, #0]
 800521e:	0608      	lsls	r0, r1, #24
 8005220:	f853 5b04 	ldr.w	r5, [r3], #4
 8005224:	d402      	bmi.n	800522c <_printf_i+0xe8>
 8005226:	0649      	lsls	r1, r1, #25
 8005228:	bf48      	it	mi
 800522a:	b2ad      	uxthmi	r5, r5
 800522c:	2f6f      	cmp	r7, #111	@ 0x6f
 800522e:	4852      	ldr	r0, [pc, #328]	@ (8005378 <_printf_i+0x234>)
 8005230:	6033      	str	r3, [r6, #0]
 8005232:	bf14      	ite	ne
 8005234:	230a      	movne	r3, #10
 8005236:	2308      	moveq	r3, #8
 8005238:	2100      	movs	r1, #0
 800523a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800523e:	6866      	ldr	r6, [r4, #4]
 8005240:	60a6      	str	r6, [r4, #8]
 8005242:	2e00      	cmp	r6, #0
 8005244:	db05      	blt.n	8005252 <_printf_i+0x10e>
 8005246:	6821      	ldr	r1, [r4, #0]
 8005248:	432e      	orrs	r6, r5
 800524a:	f021 0104 	bic.w	r1, r1, #4
 800524e:	6021      	str	r1, [r4, #0]
 8005250:	d04b      	beq.n	80052ea <_printf_i+0x1a6>
 8005252:	4616      	mov	r6, r2
 8005254:	fbb5 f1f3 	udiv	r1, r5, r3
 8005258:	fb03 5711 	mls	r7, r3, r1, r5
 800525c:	5dc7      	ldrb	r7, [r0, r7]
 800525e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005262:	462f      	mov	r7, r5
 8005264:	42bb      	cmp	r3, r7
 8005266:	460d      	mov	r5, r1
 8005268:	d9f4      	bls.n	8005254 <_printf_i+0x110>
 800526a:	2b08      	cmp	r3, #8
 800526c:	d10b      	bne.n	8005286 <_printf_i+0x142>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	07df      	lsls	r7, r3, #31
 8005272:	d508      	bpl.n	8005286 <_printf_i+0x142>
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	6861      	ldr	r1, [r4, #4]
 8005278:	4299      	cmp	r1, r3
 800527a:	bfde      	ittt	le
 800527c:	2330      	movle	r3, #48	@ 0x30
 800527e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005282:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005286:	1b92      	subs	r2, r2, r6
 8005288:	6122      	str	r2, [r4, #16]
 800528a:	f8cd a000 	str.w	sl, [sp]
 800528e:	464b      	mov	r3, r9
 8005290:	aa03      	add	r2, sp, #12
 8005292:	4621      	mov	r1, r4
 8005294:	4640      	mov	r0, r8
 8005296:	f7ff fee7 	bl	8005068 <_printf_common>
 800529a:	3001      	adds	r0, #1
 800529c:	d14a      	bne.n	8005334 <_printf_i+0x1f0>
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	b004      	add	sp, #16
 80052a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	f043 0320 	orr.w	r3, r3, #32
 80052ae:	6023      	str	r3, [r4, #0]
 80052b0:	4832      	ldr	r0, [pc, #200]	@ (800537c <_printf_i+0x238>)
 80052b2:	2778      	movs	r7, #120	@ 0x78
 80052b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	6831      	ldr	r1, [r6, #0]
 80052bc:	061f      	lsls	r7, r3, #24
 80052be:	f851 5b04 	ldr.w	r5, [r1], #4
 80052c2:	d402      	bmi.n	80052ca <_printf_i+0x186>
 80052c4:	065f      	lsls	r7, r3, #25
 80052c6:	bf48      	it	mi
 80052c8:	b2ad      	uxthmi	r5, r5
 80052ca:	6031      	str	r1, [r6, #0]
 80052cc:	07d9      	lsls	r1, r3, #31
 80052ce:	bf44      	itt	mi
 80052d0:	f043 0320 	orrmi.w	r3, r3, #32
 80052d4:	6023      	strmi	r3, [r4, #0]
 80052d6:	b11d      	cbz	r5, 80052e0 <_printf_i+0x19c>
 80052d8:	2310      	movs	r3, #16
 80052da:	e7ad      	b.n	8005238 <_printf_i+0xf4>
 80052dc:	4826      	ldr	r0, [pc, #152]	@ (8005378 <_printf_i+0x234>)
 80052de:	e7e9      	b.n	80052b4 <_printf_i+0x170>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	f023 0320 	bic.w	r3, r3, #32
 80052e6:	6023      	str	r3, [r4, #0]
 80052e8:	e7f6      	b.n	80052d8 <_printf_i+0x194>
 80052ea:	4616      	mov	r6, r2
 80052ec:	e7bd      	b.n	800526a <_printf_i+0x126>
 80052ee:	6833      	ldr	r3, [r6, #0]
 80052f0:	6825      	ldr	r5, [r4, #0]
 80052f2:	6961      	ldr	r1, [r4, #20]
 80052f4:	1d18      	adds	r0, r3, #4
 80052f6:	6030      	str	r0, [r6, #0]
 80052f8:	062e      	lsls	r6, r5, #24
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	d501      	bpl.n	8005302 <_printf_i+0x1be>
 80052fe:	6019      	str	r1, [r3, #0]
 8005300:	e002      	b.n	8005308 <_printf_i+0x1c4>
 8005302:	0668      	lsls	r0, r5, #25
 8005304:	d5fb      	bpl.n	80052fe <_printf_i+0x1ba>
 8005306:	8019      	strh	r1, [r3, #0]
 8005308:	2300      	movs	r3, #0
 800530a:	6123      	str	r3, [r4, #16]
 800530c:	4616      	mov	r6, r2
 800530e:	e7bc      	b.n	800528a <_printf_i+0x146>
 8005310:	6833      	ldr	r3, [r6, #0]
 8005312:	1d1a      	adds	r2, r3, #4
 8005314:	6032      	str	r2, [r6, #0]
 8005316:	681e      	ldr	r6, [r3, #0]
 8005318:	6862      	ldr	r2, [r4, #4]
 800531a:	2100      	movs	r1, #0
 800531c:	4630      	mov	r0, r6
 800531e:	f7fa ff5f 	bl	80001e0 <memchr>
 8005322:	b108      	cbz	r0, 8005328 <_printf_i+0x1e4>
 8005324:	1b80      	subs	r0, r0, r6
 8005326:	6060      	str	r0, [r4, #4]
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	2300      	movs	r3, #0
 800532e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005332:	e7aa      	b.n	800528a <_printf_i+0x146>
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	4632      	mov	r2, r6
 8005338:	4649      	mov	r1, r9
 800533a:	4640      	mov	r0, r8
 800533c:	47d0      	blx	sl
 800533e:	3001      	adds	r0, #1
 8005340:	d0ad      	beq.n	800529e <_printf_i+0x15a>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	079b      	lsls	r3, r3, #30
 8005346:	d413      	bmi.n	8005370 <_printf_i+0x22c>
 8005348:	68e0      	ldr	r0, [r4, #12]
 800534a:	9b03      	ldr	r3, [sp, #12]
 800534c:	4298      	cmp	r0, r3
 800534e:	bfb8      	it	lt
 8005350:	4618      	movlt	r0, r3
 8005352:	e7a6      	b.n	80052a2 <_printf_i+0x15e>
 8005354:	2301      	movs	r3, #1
 8005356:	4632      	mov	r2, r6
 8005358:	4649      	mov	r1, r9
 800535a:	4640      	mov	r0, r8
 800535c:	47d0      	blx	sl
 800535e:	3001      	adds	r0, #1
 8005360:	d09d      	beq.n	800529e <_printf_i+0x15a>
 8005362:	3501      	adds	r5, #1
 8005364:	68e3      	ldr	r3, [r4, #12]
 8005366:	9903      	ldr	r1, [sp, #12]
 8005368:	1a5b      	subs	r3, r3, r1
 800536a:	42ab      	cmp	r3, r5
 800536c:	dcf2      	bgt.n	8005354 <_printf_i+0x210>
 800536e:	e7eb      	b.n	8005348 <_printf_i+0x204>
 8005370:	2500      	movs	r5, #0
 8005372:	f104 0619 	add.w	r6, r4, #25
 8005376:	e7f5      	b.n	8005364 <_printf_i+0x220>
 8005378:	08005f82 	.word	0x08005f82
 800537c:	08005f93 	.word	0x08005f93

08005380 <_scanf_chars>:
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005384:	4615      	mov	r5, r2
 8005386:	688a      	ldr	r2, [r1, #8]
 8005388:	4680      	mov	r8, r0
 800538a:	460c      	mov	r4, r1
 800538c:	b932      	cbnz	r2, 800539c <_scanf_chars+0x1c>
 800538e:	698a      	ldr	r2, [r1, #24]
 8005390:	2a00      	cmp	r2, #0
 8005392:	bf14      	ite	ne
 8005394:	f04f 32ff 	movne.w	r2, #4294967295
 8005398:	2201      	moveq	r2, #1
 800539a:	608a      	str	r2, [r1, #8]
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005430 <_scanf_chars+0xb0>
 80053a2:	06d1      	lsls	r1, r2, #27
 80053a4:	bf5f      	itttt	pl
 80053a6:	681a      	ldrpl	r2, [r3, #0]
 80053a8:	1d11      	addpl	r1, r2, #4
 80053aa:	6019      	strpl	r1, [r3, #0]
 80053ac:	6816      	ldrpl	r6, [r2, #0]
 80053ae:	2700      	movs	r7, #0
 80053b0:	69a0      	ldr	r0, [r4, #24]
 80053b2:	b188      	cbz	r0, 80053d8 <_scanf_chars+0x58>
 80053b4:	2801      	cmp	r0, #1
 80053b6:	d107      	bne.n	80053c8 <_scanf_chars+0x48>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	6963      	ldr	r3, [r4, #20]
 80053be:	5c9b      	ldrb	r3, [r3, r2]
 80053c0:	b953      	cbnz	r3, 80053d8 <_scanf_chars+0x58>
 80053c2:	2f00      	cmp	r7, #0
 80053c4:	d031      	beq.n	800542a <_scanf_chars+0xaa>
 80053c6:	e022      	b.n	800540e <_scanf_chars+0x8e>
 80053c8:	2802      	cmp	r0, #2
 80053ca:	d120      	bne.n	800540e <_scanf_chars+0x8e>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80053d4:	071b      	lsls	r3, r3, #28
 80053d6:	d41a      	bmi.n	800540e <_scanf_chars+0x8e>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	06da      	lsls	r2, r3, #27
 80053dc:	bf5e      	ittt	pl
 80053de:	682b      	ldrpl	r3, [r5, #0]
 80053e0:	781b      	ldrbpl	r3, [r3, #0]
 80053e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80053e6:	682a      	ldr	r2, [r5, #0]
 80053e8:	686b      	ldr	r3, [r5, #4]
 80053ea:	3201      	adds	r2, #1
 80053ec:	602a      	str	r2, [r5, #0]
 80053ee:	68a2      	ldr	r2, [r4, #8]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	3a01      	subs	r2, #1
 80053f4:	606b      	str	r3, [r5, #4]
 80053f6:	3701      	adds	r7, #1
 80053f8:	60a2      	str	r2, [r4, #8]
 80053fa:	b142      	cbz	r2, 800540e <_scanf_chars+0x8e>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dcd7      	bgt.n	80053b0 <_scanf_chars+0x30>
 8005400:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005404:	4629      	mov	r1, r5
 8005406:	4640      	mov	r0, r8
 8005408:	4798      	blx	r3
 800540a:	2800      	cmp	r0, #0
 800540c:	d0d0      	beq.n	80053b0 <_scanf_chars+0x30>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f013 0310 	ands.w	r3, r3, #16
 8005414:	d105      	bne.n	8005422 <_scanf_chars+0xa2>
 8005416:	68e2      	ldr	r2, [r4, #12]
 8005418:	3201      	adds	r2, #1
 800541a:	60e2      	str	r2, [r4, #12]
 800541c:	69a2      	ldr	r2, [r4, #24]
 800541e:	b102      	cbz	r2, 8005422 <_scanf_chars+0xa2>
 8005420:	7033      	strb	r3, [r6, #0]
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	443b      	add	r3, r7
 8005426:	6123      	str	r3, [r4, #16]
 8005428:	2000      	movs	r0, #0
 800542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800542e:	bf00      	nop
 8005430:	08005fc0 	.word	0x08005fc0

08005434 <_scanf_i>:
 8005434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005438:	4698      	mov	r8, r3
 800543a:	4b74      	ldr	r3, [pc, #464]	@ (800560c <_scanf_i+0x1d8>)
 800543c:	460c      	mov	r4, r1
 800543e:	4682      	mov	sl, r0
 8005440:	4616      	mov	r6, r2
 8005442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005446:	b087      	sub	sp, #28
 8005448:	ab03      	add	r3, sp, #12
 800544a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800544e:	4b70      	ldr	r3, [pc, #448]	@ (8005610 <_scanf_i+0x1dc>)
 8005450:	69a1      	ldr	r1, [r4, #24]
 8005452:	4a70      	ldr	r2, [pc, #448]	@ (8005614 <_scanf_i+0x1e0>)
 8005454:	2903      	cmp	r1, #3
 8005456:	bf08      	it	eq
 8005458:	461a      	moveq	r2, r3
 800545a:	68a3      	ldr	r3, [r4, #8]
 800545c:	9201      	str	r2, [sp, #4]
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005464:	bf88      	it	hi
 8005466:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800546a:	4627      	mov	r7, r4
 800546c:	bf82      	ittt	hi
 800546e:	eb03 0905 	addhi.w	r9, r3, r5
 8005472:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005476:	60a3      	strhi	r3, [r4, #8]
 8005478:	f857 3b1c 	ldr.w	r3, [r7], #28
 800547c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005480:	bf98      	it	ls
 8005482:	f04f 0900 	movls.w	r9, #0
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	463d      	mov	r5, r7
 800548a:	f04f 0b00 	mov.w	fp, #0
 800548e:	6831      	ldr	r1, [r6, #0]
 8005490:	ab03      	add	r3, sp, #12
 8005492:	7809      	ldrb	r1, [r1, #0]
 8005494:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005498:	2202      	movs	r2, #2
 800549a:	f7fa fea1 	bl	80001e0 <memchr>
 800549e:	b328      	cbz	r0, 80054ec <_scanf_i+0xb8>
 80054a0:	f1bb 0f01 	cmp.w	fp, #1
 80054a4:	d159      	bne.n	800555a <_scanf_i+0x126>
 80054a6:	6862      	ldr	r2, [r4, #4]
 80054a8:	b92a      	cbnz	r2, 80054b6 <_scanf_i+0x82>
 80054aa:	6822      	ldr	r2, [r4, #0]
 80054ac:	2108      	movs	r1, #8
 80054ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054b2:	6061      	str	r1, [r4, #4]
 80054b4:	6022      	str	r2, [r4, #0]
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80054bc:	6022      	str	r2, [r4, #0]
 80054be:	68a2      	ldr	r2, [r4, #8]
 80054c0:	1e51      	subs	r1, r2, #1
 80054c2:	60a1      	str	r1, [r4, #8]
 80054c4:	b192      	cbz	r2, 80054ec <_scanf_i+0xb8>
 80054c6:	6832      	ldr	r2, [r6, #0]
 80054c8:	1c51      	adds	r1, r2, #1
 80054ca:	6031      	str	r1, [r6, #0]
 80054cc:	7812      	ldrb	r2, [r2, #0]
 80054ce:	f805 2b01 	strb.w	r2, [r5], #1
 80054d2:	6872      	ldr	r2, [r6, #4]
 80054d4:	3a01      	subs	r2, #1
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	6072      	str	r2, [r6, #4]
 80054da:	dc07      	bgt.n	80054ec <_scanf_i+0xb8>
 80054dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80054e0:	4631      	mov	r1, r6
 80054e2:	4650      	mov	r0, sl
 80054e4:	4790      	blx	r2
 80054e6:	2800      	cmp	r0, #0
 80054e8:	f040 8085 	bne.w	80055f6 <_scanf_i+0x1c2>
 80054ec:	f10b 0b01 	add.w	fp, fp, #1
 80054f0:	f1bb 0f03 	cmp.w	fp, #3
 80054f4:	d1cb      	bne.n	800548e <_scanf_i+0x5a>
 80054f6:	6863      	ldr	r3, [r4, #4]
 80054f8:	b90b      	cbnz	r3, 80054fe <_scanf_i+0xca>
 80054fa:	230a      	movs	r3, #10
 80054fc:	6063      	str	r3, [r4, #4]
 80054fe:	6863      	ldr	r3, [r4, #4]
 8005500:	4945      	ldr	r1, [pc, #276]	@ (8005618 <_scanf_i+0x1e4>)
 8005502:	6960      	ldr	r0, [r4, #20]
 8005504:	1ac9      	subs	r1, r1, r3
 8005506:	f000 f9a9 	bl	800585c <__sccl>
 800550a:	f04f 0b00 	mov.w	fp, #0
 800550e:	68a3      	ldr	r3, [r4, #8]
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d03d      	beq.n	8005592 <_scanf_i+0x15e>
 8005516:	6831      	ldr	r1, [r6, #0]
 8005518:	6960      	ldr	r0, [r4, #20]
 800551a:	f891 c000 	ldrb.w	ip, [r1]
 800551e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005522:	2800      	cmp	r0, #0
 8005524:	d035      	beq.n	8005592 <_scanf_i+0x15e>
 8005526:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800552a:	d124      	bne.n	8005576 <_scanf_i+0x142>
 800552c:	0510      	lsls	r0, r2, #20
 800552e:	d522      	bpl.n	8005576 <_scanf_i+0x142>
 8005530:	f10b 0b01 	add.w	fp, fp, #1
 8005534:	f1b9 0f00 	cmp.w	r9, #0
 8005538:	d003      	beq.n	8005542 <_scanf_i+0x10e>
 800553a:	3301      	adds	r3, #1
 800553c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005540:	60a3      	str	r3, [r4, #8]
 8005542:	6873      	ldr	r3, [r6, #4]
 8005544:	3b01      	subs	r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	6073      	str	r3, [r6, #4]
 800554a:	dd1b      	ble.n	8005584 <_scanf_i+0x150>
 800554c:	6833      	ldr	r3, [r6, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	6033      	str	r3, [r6, #0]
 8005552:	68a3      	ldr	r3, [r4, #8]
 8005554:	3b01      	subs	r3, #1
 8005556:	60a3      	str	r3, [r4, #8]
 8005558:	e7d9      	b.n	800550e <_scanf_i+0xda>
 800555a:	f1bb 0f02 	cmp.w	fp, #2
 800555e:	d1ae      	bne.n	80054be <_scanf_i+0x8a>
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005566:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800556a:	d1c4      	bne.n	80054f6 <_scanf_i+0xc2>
 800556c:	2110      	movs	r1, #16
 800556e:	6061      	str	r1, [r4, #4]
 8005570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005574:	e7a2      	b.n	80054bc <_scanf_i+0x88>
 8005576:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800557a:	6022      	str	r2, [r4, #0]
 800557c:	780b      	ldrb	r3, [r1, #0]
 800557e:	f805 3b01 	strb.w	r3, [r5], #1
 8005582:	e7de      	b.n	8005542 <_scanf_i+0x10e>
 8005584:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005588:	4631      	mov	r1, r6
 800558a:	4650      	mov	r0, sl
 800558c:	4798      	blx	r3
 800558e:	2800      	cmp	r0, #0
 8005590:	d0df      	beq.n	8005552 <_scanf_i+0x11e>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	05d9      	lsls	r1, r3, #23
 8005596:	d50d      	bpl.n	80055b4 <_scanf_i+0x180>
 8005598:	42bd      	cmp	r5, r7
 800559a:	d909      	bls.n	80055b0 <_scanf_i+0x17c>
 800559c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80055a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055a4:	4632      	mov	r2, r6
 80055a6:	4650      	mov	r0, sl
 80055a8:	4798      	blx	r3
 80055aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80055ae:	464d      	mov	r5, r9
 80055b0:	42bd      	cmp	r5, r7
 80055b2:	d028      	beq.n	8005606 <_scanf_i+0x1d2>
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	f012 0210 	ands.w	r2, r2, #16
 80055ba:	d113      	bne.n	80055e4 <_scanf_i+0x1b0>
 80055bc:	702a      	strb	r2, [r5, #0]
 80055be:	6863      	ldr	r3, [r4, #4]
 80055c0:	9e01      	ldr	r6, [sp, #4]
 80055c2:	4639      	mov	r1, r7
 80055c4:	4650      	mov	r0, sl
 80055c6:	47b0      	blx	r6
 80055c8:	f8d8 3000 	ldr.w	r3, [r8]
 80055cc:	6821      	ldr	r1, [r4, #0]
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	f8c8 2000 	str.w	r2, [r8]
 80055d4:	f011 0f20 	tst.w	r1, #32
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	d00f      	beq.n	80055fc <_scanf_i+0x1c8>
 80055dc:	6018      	str	r0, [r3, #0]
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60e3      	str	r3, [r4, #12]
 80055e4:	6923      	ldr	r3, [r4, #16]
 80055e6:	1bed      	subs	r5, r5, r7
 80055e8:	445d      	add	r5, fp
 80055ea:	442b      	add	r3, r5
 80055ec:	6123      	str	r3, [r4, #16]
 80055ee:	2000      	movs	r0, #0
 80055f0:	b007      	add	sp, #28
 80055f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f6:	f04f 0b00 	mov.w	fp, #0
 80055fa:	e7ca      	b.n	8005592 <_scanf_i+0x15e>
 80055fc:	07ca      	lsls	r2, r1, #31
 80055fe:	bf4c      	ite	mi
 8005600:	8018      	strhmi	r0, [r3, #0]
 8005602:	6018      	strpl	r0, [r3, #0]
 8005604:	e7eb      	b.n	80055de <_scanf_i+0x1aa>
 8005606:	2001      	movs	r0, #1
 8005608:	e7f2      	b.n	80055f0 <_scanf_i+0x1bc>
 800560a:	bf00      	nop
 800560c:	08005df8 	.word	0x08005df8
 8005610:	08005b25 	.word	0x08005b25
 8005614:	08005c05 	.word	0x08005c05
 8005618:	08005fb4 	.word	0x08005fb4

0800561c <__sflush_r>:
 800561c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	0716      	lsls	r6, r2, #28
 8005626:	4605      	mov	r5, r0
 8005628:	460c      	mov	r4, r1
 800562a:	d454      	bmi.n	80056d6 <__sflush_r+0xba>
 800562c:	684b      	ldr	r3, [r1, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	dc02      	bgt.n	8005638 <__sflush_r+0x1c>
 8005632:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	dd48      	ble.n	80056ca <__sflush_r+0xae>
 8005638:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800563a:	2e00      	cmp	r6, #0
 800563c:	d045      	beq.n	80056ca <__sflush_r+0xae>
 800563e:	2300      	movs	r3, #0
 8005640:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005644:	682f      	ldr	r7, [r5, #0]
 8005646:	6a21      	ldr	r1, [r4, #32]
 8005648:	602b      	str	r3, [r5, #0]
 800564a:	d030      	beq.n	80056ae <__sflush_r+0x92>
 800564c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	0759      	lsls	r1, r3, #29
 8005652:	d505      	bpl.n	8005660 <__sflush_r+0x44>
 8005654:	6863      	ldr	r3, [r4, #4]
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800565a:	b10b      	cbz	r3, 8005660 <__sflush_r+0x44>
 800565c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005664:	6a21      	ldr	r1, [r4, #32]
 8005666:	4628      	mov	r0, r5
 8005668:	47b0      	blx	r6
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	d106      	bne.n	800567e <__sflush_r+0x62>
 8005670:	6829      	ldr	r1, [r5, #0]
 8005672:	291d      	cmp	r1, #29
 8005674:	d82b      	bhi.n	80056ce <__sflush_r+0xb2>
 8005676:	4a2a      	ldr	r2, [pc, #168]	@ (8005720 <__sflush_r+0x104>)
 8005678:	40ca      	lsrs	r2, r1
 800567a:	07d6      	lsls	r6, r2, #31
 800567c:	d527      	bpl.n	80056ce <__sflush_r+0xb2>
 800567e:	2200      	movs	r2, #0
 8005680:	6062      	str	r2, [r4, #4]
 8005682:	04d9      	lsls	r1, r3, #19
 8005684:	6922      	ldr	r2, [r4, #16]
 8005686:	6022      	str	r2, [r4, #0]
 8005688:	d504      	bpl.n	8005694 <__sflush_r+0x78>
 800568a:	1c42      	adds	r2, r0, #1
 800568c:	d101      	bne.n	8005692 <__sflush_r+0x76>
 800568e:	682b      	ldr	r3, [r5, #0]
 8005690:	b903      	cbnz	r3, 8005694 <__sflush_r+0x78>
 8005692:	6560      	str	r0, [r4, #84]	@ 0x54
 8005694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005696:	602f      	str	r7, [r5, #0]
 8005698:	b1b9      	cbz	r1, 80056ca <__sflush_r+0xae>
 800569a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800569e:	4299      	cmp	r1, r3
 80056a0:	d002      	beq.n	80056a8 <__sflush_r+0x8c>
 80056a2:	4628      	mov	r0, r5
 80056a4:	f7ff f8ce 	bl	8004844 <_free_r>
 80056a8:	2300      	movs	r3, #0
 80056aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80056ac:	e00d      	b.n	80056ca <__sflush_r+0xae>
 80056ae:	2301      	movs	r3, #1
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b0      	blx	r6
 80056b4:	4602      	mov	r2, r0
 80056b6:	1c50      	adds	r0, r2, #1
 80056b8:	d1c9      	bne.n	800564e <__sflush_r+0x32>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0c6      	beq.n	800564e <__sflush_r+0x32>
 80056c0:	2b1d      	cmp	r3, #29
 80056c2:	d001      	beq.n	80056c8 <__sflush_r+0xac>
 80056c4:	2b16      	cmp	r3, #22
 80056c6:	d11e      	bne.n	8005706 <__sflush_r+0xea>
 80056c8:	602f      	str	r7, [r5, #0]
 80056ca:	2000      	movs	r0, #0
 80056cc:	e022      	b.n	8005714 <__sflush_r+0xf8>
 80056ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056d2:	b21b      	sxth	r3, r3
 80056d4:	e01b      	b.n	800570e <__sflush_r+0xf2>
 80056d6:	690f      	ldr	r7, [r1, #16]
 80056d8:	2f00      	cmp	r7, #0
 80056da:	d0f6      	beq.n	80056ca <__sflush_r+0xae>
 80056dc:	0793      	lsls	r3, r2, #30
 80056de:	680e      	ldr	r6, [r1, #0]
 80056e0:	bf08      	it	eq
 80056e2:	694b      	ldreq	r3, [r1, #20]
 80056e4:	600f      	str	r7, [r1, #0]
 80056e6:	bf18      	it	ne
 80056e8:	2300      	movne	r3, #0
 80056ea:	eba6 0807 	sub.w	r8, r6, r7
 80056ee:	608b      	str	r3, [r1, #8]
 80056f0:	f1b8 0f00 	cmp.w	r8, #0
 80056f4:	dde9      	ble.n	80056ca <__sflush_r+0xae>
 80056f6:	6a21      	ldr	r1, [r4, #32]
 80056f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056fa:	4643      	mov	r3, r8
 80056fc:	463a      	mov	r2, r7
 80056fe:	4628      	mov	r0, r5
 8005700:	47b0      	blx	r6
 8005702:	2800      	cmp	r0, #0
 8005704:	dc08      	bgt.n	8005718 <__sflush_r+0xfc>
 8005706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800570e:	81a3      	strh	r3, [r4, #12]
 8005710:	f04f 30ff 	mov.w	r0, #4294967295
 8005714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005718:	4407      	add	r7, r0
 800571a:	eba8 0800 	sub.w	r8, r8, r0
 800571e:	e7e7      	b.n	80056f0 <__sflush_r+0xd4>
 8005720:	20400001 	.word	0x20400001

08005724 <_fflush_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	690b      	ldr	r3, [r1, #16]
 8005728:	4605      	mov	r5, r0
 800572a:	460c      	mov	r4, r1
 800572c:	b913      	cbnz	r3, 8005734 <_fflush_r+0x10>
 800572e:	2500      	movs	r5, #0
 8005730:	4628      	mov	r0, r5
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	b118      	cbz	r0, 800573e <_fflush_r+0x1a>
 8005736:	6a03      	ldr	r3, [r0, #32]
 8005738:	b90b      	cbnz	r3, 800573e <_fflush_r+0x1a>
 800573a:	f7fe fde1 	bl	8004300 <__sinit>
 800573e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f3      	beq.n	800572e <_fflush_r+0xa>
 8005746:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005748:	07d0      	lsls	r0, r2, #31
 800574a:	d404      	bmi.n	8005756 <_fflush_r+0x32>
 800574c:	0599      	lsls	r1, r3, #22
 800574e:	d402      	bmi.n	8005756 <_fflush_r+0x32>
 8005750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005752:	f7ff f856 	bl	8004802 <__retarget_lock_acquire_recursive>
 8005756:	4628      	mov	r0, r5
 8005758:	4621      	mov	r1, r4
 800575a:	f7ff ff5f 	bl	800561c <__sflush_r>
 800575e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005760:	07da      	lsls	r2, r3, #31
 8005762:	4605      	mov	r5, r0
 8005764:	d4e4      	bmi.n	8005730 <_fflush_r+0xc>
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	059b      	lsls	r3, r3, #22
 800576a:	d4e1      	bmi.n	8005730 <_fflush_r+0xc>
 800576c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800576e:	f7ff f849 	bl	8004804 <__retarget_lock_release_recursive>
 8005772:	e7dd      	b.n	8005730 <_fflush_r+0xc>

08005774 <fiprintf>:
 8005774:	b40e      	push	{r1, r2, r3}
 8005776:	b503      	push	{r0, r1, lr}
 8005778:	4601      	mov	r1, r0
 800577a:	ab03      	add	r3, sp, #12
 800577c:	4805      	ldr	r0, [pc, #20]	@ (8005794 <fiprintf+0x20>)
 800577e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005782:	6800      	ldr	r0, [r0, #0]
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	f7ff fb57 	bl	8004e38 <_vfiprintf_r>
 800578a:	b002      	add	sp, #8
 800578c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005790:	b003      	add	sp, #12
 8005792:	4770      	bx	lr
 8005794:	20000018 	.word	0x20000018

08005798 <__swhatbuf_r>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	460c      	mov	r4, r1
 800579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a0:	2900      	cmp	r1, #0
 80057a2:	b096      	sub	sp, #88	@ 0x58
 80057a4:	4615      	mov	r5, r2
 80057a6:	461e      	mov	r6, r3
 80057a8:	da0d      	bge.n	80057c6 <__swhatbuf_r+0x2e>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057b0:	f04f 0100 	mov.w	r1, #0
 80057b4:	bf14      	ite	ne
 80057b6:	2340      	movne	r3, #64	@ 0x40
 80057b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057bc:	2000      	movs	r0, #0
 80057be:	6031      	str	r1, [r6, #0]
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	b016      	add	sp, #88	@ 0x58
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	466a      	mov	r2, sp
 80057c8:	f000 f8bc 	bl	8005944 <_fstat_r>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	dbec      	blt.n	80057aa <__swhatbuf_r+0x12>
 80057d0:	9901      	ldr	r1, [sp, #4]
 80057d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057da:	4259      	negs	r1, r3
 80057dc:	4159      	adcs	r1, r3
 80057de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057e2:	e7eb      	b.n	80057bc <__swhatbuf_r+0x24>

080057e4 <__smakebuf_r>:
 80057e4:	898b      	ldrh	r3, [r1, #12]
 80057e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e8:	079d      	lsls	r5, r3, #30
 80057ea:	4606      	mov	r6, r0
 80057ec:	460c      	mov	r4, r1
 80057ee:	d507      	bpl.n	8005800 <__smakebuf_r+0x1c>
 80057f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	6123      	str	r3, [r4, #16]
 80057f8:	2301      	movs	r3, #1
 80057fa:	6163      	str	r3, [r4, #20]
 80057fc:	b003      	add	sp, #12
 80057fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005800:	ab01      	add	r3, sp, #4
 8005802:	466a      	mov	r2, sp
 8005804:	f7ff ffc8 	bl	8005798 <__swhatbuf_r>
 8005808:	9f00      	ldr	r7, [sp, #0]
 800580a:	4605      	mov	r5, r0
 800580c:	4639      	mov	r1, r7
 800580e:	4630      	mov	r0, r6
 8005810:	f7ff f88c 	bl	800492c <_malloc_r>
 8005814:	b948      	cbnz	r0, 800582a <__smakebuf_r+0x46>
 8005816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800581a:	059a      	lsls	r2, r3, #22
 800581c:	d4ee      	bmi.n	80057fc <__smakebuf_r+0x18>
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	f043 0302 	orr.w	r3, r3, #2
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	e7e2      	b.n	80057f0 <__smakebuf_r+0xc>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	6020      	str	r0, [r4, #0]
 800582e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005832:	81a3      	strh	r3, [r4, #12]
 8005834:	9b01      	ldr	r3, [sp, #4]
 8005836:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800583a:	b15b      	cbz	r3, 8005854 <__smakebuf_r+0x70>
 800583c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005840:	4630      	mov	r0, r6
 8005842:	f000 f891 	bl	8005968 <_isatty_r>
 8005846:	b128      	cbz	r0, 8005854 <__smakebuf_r+0x70>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	431d      	orrs	r5, r3
 8005858:	81a5      	strh	r5, [r4, #12]
 800585a:	e7cf      	b.n	80057fc <__smakebuf_r+0x18>

0800585c <__sccl>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	780b      	ldrb	r3, [r1, #0]
 8005860:	4604      	mov	r4, r0
 8005862:	2b5e      	cmp	r3, #94	@ 0x5e
 8005864:	bf0b      	itete	eq
 8005866:	784b      	ldrbeq	r3, [r1, #1]
 8005868:	1c4a      	addne	r2, r1, #1
 800586a:	1c8a      	addeq	r2, r1, #2
 800586c:	2100      	movne	r1, #0
 800586e:	bf08      	it	eq
 8005870:	2101      	moveq	r1, #1
 8005872:	3801      	subs	r0, #1
 8005874:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005878:	f800 1f01 	strb.w	r1, [r0, #1]!
 800587c:	42a8      	cmp	r0, r5
 800587e:	d1fb      	bne.n	8005878 <__sccl+0x1c>
 8005880:	b90b      	cbnz	r3, 8005886 <__sccl+0x2a>
 8005882:	1e50      	subs	r0, r2, #1
 8005884:	bd70      	pop	{r4, r5, r6, pc}
 8005886:	f081 0101 	eor.w	r1, r1, #1
 800588a:	54e1      	strb	r1, [r4, r3]
 800588c:	4610      	mov	r0, r2
 800588e:	4602      	mov	r2, r0
 8005890:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005894:	2d2d      	cmp	r5, #45	@ 0x2d
 8005896:	d005      	beq.n	80058a4 <__sccl+0x48>
 8005898:	2d5d      	cmp	r5, #93	@ 0x5d
 800589a:	d016      	beq.n	80058ca <__sccl+0x6e>
 800589c:	2d00      	cmp	r5, #0
 800589e:	d0f1      	beq.n	8005884 <__sccl+0x28>
 80058a0:	462b      	mov	r3, r5
 80058a2:	e7f2      	b.n	800588a <__sccl+0x2e>
 80058a4:	7846      	ldrb	r6, [r0, #1]
 80058a6:	2e5d      	cmp	r6, #93	@ 0x5d
 80058a8:	d0fa      	beq.n	80058a0 <__sccl+0x44>
 80058aa:	42b3      	cmp	r3, r6
 80058ac:	dcf8      	bgt.n	80058a0 <__sccl+0x44>
 80058ae:	3002      	adds	r0, #2
 80058b0:	461a      	mov	r2, r3
 80058b2:	3201      	adds	r2, #1
 80058b4:	4296      	cmp	r6, r2
 80058b6:	54a1      	strb	r1, [r4, r2]
 80058b8:	dcfb      	bgt.n	80058b2 <__sccl+0x56>
 80058ba:	1af2      	subs	r2, r6, r3
 80058bc:	3a01      	subs	r2, #1
 80058be:	1c5d      	adds	r5, r3, #1
 80058c0:	42b3      	cmp	r3, r6
 80058c2:	bfa8      	it	ge
 80058c4:	2200      	movge	r2, #0
 80058c6:	18ab      	adds	r3, r5, r2
 80058c8:	e7e1      	b.n	800588e <__sccl+0x32>
 80058ca:	4610      	mov	r0, r2
 80058cc:	e7da      	b.n	8005884 <__sccl+0x28>

080058ce <__submore>:
 80058ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	460c      	mov	r4, r1
 80058d4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80058d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058da:	4299      	cmp	r1, r3
 80058dc:	d11d      	bne.n	800591a <__submore+0x4c>
 80058de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058e2:	f7ff f823 	bl	800492c <_malloc_r>
 80058e6:	b918      	cbnz	r0, 80058f0 <__submore+0x22>
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80058f6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80058fa:	6360      	str	r0, [r4, #52]	@ 0x34
 80058fc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005900:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005904:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005908:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800590c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005910:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005914:	6020      	str	r0, [r4, #0]
 8005916:	2000      	movs	r0, #0
 8005918:	e7e8      	b.n	80058ec <__submore+0x1e>
 800591a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800591c:	0077      	lsls	r7, r6, #1
 800591e:	463a      	mov	r2, r7
 8005920:	f000 f857 	bl	80059d2 <_realloc_r>
 8005924:	4605      	mov	r5, r0
 8005926:	2800      	cmp	r0, #0
 8005928:	d0de      	beq.n	80058e8 <__submore+0x1a>
 800592a:	eb00 0806 	add.w	r8, r0, r6
 800592e:	4601      	mov	r1, r0
 8005930:	4632      	mov	r2, r6
 8005932:	4640      	mov	r0, r8
 8005934:	f000 f838 	bl	80059a8 <memcpy>
 8005938:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800593c:	f8c4 8000 	str.w	r8, [r4]
 8005940:	e7e9      	b.n	8005916 <__submore+0x48>
	...

08005944 <_fstat_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4d07      	ldr	r5, [pc, #28]	@ (8005964 <_fstat_r+0x20>)
 8005948:	2300      	movs	r3, #0
 800594a:	4604      	mov	r4, r0
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	602b      	str	r3, [r5, #0]
 8005952:	f7fc f9fd 	bl	8001d50 <_fstat>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	d102      	bne.n	8005960 <_fstat_r+0x1c>
 800595a:	682b      	ldr	r3, [r5, #0]
 800595c:	b103      	cbz	r3, 8005960 <_fstat_r+0x1c>
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	bd38      	pop	{r3, r4, r5, pc}
 8005962:	bf00      	nop
 8005964:	20000308 	.word	0x20000308

08005968 <_isatty_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4d06      	ldr	r5, [pc, #24]	@ (8005984 <_isatty_r+0x1c>)
 800596c:	2300      	movs	r3, #0
 800596e:	4604      	mov	r4, r0
 8005970:	4608      	mov	r0, r1
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	f7fc f9fc 	bl	8001d70 <_isatty>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d102      	bne.n	8005982 <_isatty_r+0x1a>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	b103      	cbz	r3, 8005982 <_isatty_r+0x1a>
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	20000308 	.word	0x20000308

08005988 <_sbrk_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	4d06      	ldr	r5, [pc, #24]	@ (80059a4 <_sbrk_r+0x1c>)
 800598c:	2300      	movs	r3, #0
 800598e:	4604      	mov	r4, r0
 8005990:	4608      	mov	r0, r1
 8005992:	602b      	str	r3, [r5, #0]
 8005994:	f7fc fa04 	bl	8001da0 <_sbrk>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_sbrk_r+0x1a>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_sbrk_r+0x1a>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	20000308 	.word	0x20000308

080059a8 <memcpy>:
 80059a8:	440a      	add	r2, r1
 80059aa:	4291      	cmp	r1, r2
 80059ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80059b0:	d100      	bne.n	80059b4 <memcpy+0xc>
 80059b2:	4770      	bx	lr
 80059b4:	b510      	push	{r4, lr}
 80059b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059be:	4291      	cmp	r1, r2
 80059c0:	d1f9      	bne.n	80059b6 <memcpy+0xe>
 80059c2:	bd10      	pop	{r4, pc}

080059c4 <abort>:
 80059c4:	b508      	push	{r3, lr}
 80059c6:	2006      	movs	r0, #6
 80059c8:	f000 f946 	bl	8005c58 <raise>
 80059cc:	2001      	movs	r0, #1
 80059ce:	f7fc f96f 	bl	8001cb0 <_exit>

080059d2 <_realloc_r>:
 80059d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d6:	4607      	mov	r7, r0
 80059d8:	4614      	mov	r4, r2
 80059da:	460d      	mov	r5, r1
 80059dc:	b921      	cbnz	r1, 80059e8 <_realloc_r+0x16>
 80059de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059e2:	4611      	mov	r1, r2
 80059e4:	f7fe bfa2 	b.w	800492c <_malloc_r>
 80059e8:	b92a      	cbnz	r2, 80059f6 <_realloc_r+0x24>
 80059ea:	f7fe ff2b 	bl	8004844 <_free_r>
 80059ee:	4625      	mov	r5, r4
 80059f0:	4628      	mov	r0, r5
 80059f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f6:	f000 f94b 	bl	8005c90 <_malloc_usable_size_r>
 80059fa:	4284      	cmp	r4, r0
 80059fc:	4606      	mov	r6, r0
 80059fe:	d802      	bhi.n	8005a06 <_realloc_r+0x34>
 8005a00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a04:	d8f4      	bhi.n	80059f0 <_realloc_r+0x1e>
 8005a06:	4621      	mov	r1, r4
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f7fe ff8f 	bl	800492c <_malloc_r>
 8005a0e:	4680      	mov	r8, r0
 8005a10:	b908      	cbnz	r0, 8005a16 <_realloc_r+0x44>
 8005a12:	4645      	mov	r5, r8
 8005a14:	e7ec      	b.n	80059f0 <_realloc_r+0x1e>
 8005a16:	42b4      	cmp	r4, r6
 8005a18:	4622      	mov	r2, r4
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	bf28      	it	cs
 8005a1e:	4632      	movcs	r2, r6
 8005a20:	f7ff ffc2 	bl	80059a8 <memcpy>
 8005a24:	4629      	mov	r1, r5
 8005a26:	4638      	mov	r0, r7
 8005a28:	f7fe ff0c 	bl	8004844 <_free_r>
 8005a2c:	e7f1      	b.n	8005a12 <_realloc_r+0x40>
	...

08005a30 <_strtol_l.isra.0>:
 8005a30:	2b24      	cmp	r3, #36	@ 0x24
 8005a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a36:	4686      	mov	lr, r0
 8005a38:	4690      	mov	r8, r2
 8005a3a:	d801      	bhi.n	8005a40 <_strtol_l.isra.0+0x10>
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d106      	bne.n	8005a4e <_strtol_l.isra.0+0x1e>
 8005a40:	f7fe feb4 	bl	80047ac <__errno>
 8005a44:	2316      	movs	r3, #22
 8005a46:	6003      	str	r3, [r0, #0]
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4e:	4834      	ldr	r0, [pc, #208]	@ (8005b20 <_strtol_l.isra.0+0xf0>)
 8005a50:	460d      	mov	r5, r1
 8005a52:	462a      	mov	r2, r5
 8005a54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a58:	5d06      	ldrb	r6, [r0, r4]
 8005a5a:	f016 0608 	ands.w	r6, r6, #8
 8005a5e:	d1f8      	bne.n	8005a52 <_strtol_l.isra.0+0x22>
 8005a60:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a62:	d110      	bne.n	8005a86 <_strtol_l.isra.0+0x56>
 8005a64:	782c      	ldrb	r4, [r5, #0]
 8005a66:	2601      	movs	r6, #1
 8005a68:	1c95      	adds	r5, r2, #2
 8005a6a:	f033 0210 	bics.w	r2, r3, #16
 8005a6e:	d115      	bne.n	8005a9c <_strtol_l.isra.0+0x6c>
 8005a70:	2c30      	cmp	r4, #48	@ 0x30
 8005a72:	d10d      	bne.n	8005a90 <_strtol_l.isra.0+0x60>
 8005a74:	782a      	ldrb	r2, [r5, #0]
 8005a76:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a7a:	2a58      	cmp	r2, #88	@ 0x58
 8005a7c:	d108      	bne.n	8005a90 <_strtol_l.isra.0+0x60>
 8005a7e:	786c      	ldrb	r4, [r5, #1]
 8005a80:	3502      	adds	r5, #2
 8005a82:	2310      	movs	r3, #16
 8005a84:	e00a      	b.n	8005a9c <_strtol_l.isra.0+0x6c>
 8005a86:	2c2b      	cmp	r4, #43	@ 0x2b
 8005a88:	bf04      	itt	eq
 8005a8a:	782c      	ldrbeq	r4, [r5, #0]
 8005a8c:	1c95      	addeq	r5, r2, #2
 8005a8e:	e7ec      	b.n	8005a6a <_strtol_l.isra.0+0x3a>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f6      	bne.n	8005a82 <_strtol_l.isra.0+0x52>
 8005a94:	2c30      	cmp	r4, #48	@ 0x30
 8005a96:	bf14      	ite	ne
 8005a98:	230a      	movne	r3, #10
 8005a9a:	2308      	moveq	r3, #8
 8005a9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005aa0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	fbbc f9f3 	udiv	r9, ip, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	fb03 ca19 	mls	sl, r3, r9, ip
 8005ab0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005ab4:	2f09      	cmp	r7, #9
 8005ab6:	d80f      	bhi.n	8005ad8 <_strtol_l.isra.0+0xa8>
 8005ab8:	463c      	mov	r4, r7
 8005aba:	42a3      	cmp	r3, r4
 8005abc:	dd1b      	ble.n	8005af6 <_strtol_l.isra.0+0xc6>
 8005abe:	1c57      	adds	r7, r2, #1
 8005ac0:	d007      	beq.n	8005ad2 <_strtol_l.isra.0+0xa2>
 8005ac2:	4581      	cmp	r9, r0
 8005ac4:	d314      	bcc.n	8005af0 <_strtol_l.isra.0+0xc0>
 8005ac6:	d101      	bne.n	8005acc <_strtol_l.isra.0+0x9c>
 8005ac8:	45a2      	cmp	sl, r4
 8005aca:	db11      	blt.n	8005af0 <_strtol_l.isra.0+0xc0>
 8005acc:	fb00 4003 	mla	r0, r0, r3, r4
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ad6:	e7eb      	b.n	8005ab0 <_strtol_l.isra.0+0x80>
 8005ad8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005adc:	2f19      	cmp	r7, #25
 8005ade:	d801      	bhi.n	8005ae4 <_strtol_l.isra.0+0xb4>
 8005ae0:	3c37      	subs	r4, #55	@ 0x37
 8005ae2:	e7ea      	b.n	8005aba <_strtol_l.isra.0+0x8a>
 8005ae4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005ae8:	2f19      	cmp	r7, #25
 8005aea:	d804      	bhi.n	8005af6 <_strtol_l.isra.0+0xc6>
 8005aec:	3c57      	subs	r4, #87	@ 0x57
 8005aee:	e7e4      	b.n	8005aba <_strtol_l.isra.0+0x8a>
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	e7ed      	b.n	8005ad2 <_strtol_l.isra.0+0xa2>
 8005af6:	1c53      	adds	r3, r2, #1
 8005af8:	d108      	bne.n	8005b0c <_strtol_l.isra.0+0xdc>
 8005afa:	2322      	movs	r3, #34	@ 0x22
 8005afc:	f8ce 3000 	str.w	r3, [lr]
 8005b00:	4660      	mov	r0, ip
 8005b02:	f1b8 0f00 	cmp.w	r8, #0
 8005b06:	d0a0      	beq.n	8005a4a <_strtol_l.isra.0+0x1a>
 8005b08:	1e69      	subs	r1, r5, #1
 8005b0a:	e006      	b.n	8005b1a <_strtol_l.isra.0+0xea>
 8005b0c:	b106      	cbz	r6, 8005b10 <_strtol_l.isra.0+0xe0>
 8005b0e:	4240      	negs	r0, r0
 8005b10:	f1b8 0f00 	cmp.w	r8, #0
 8005b14:	d099      	beq.n	8005a4a <_strtol_l.isra.0+0x1a>
 8005b16:	2a00      	cmp	r2, #0
 8005b18:	d1f6      	bne.n	8005b08 <_strtol_l.isra.0+0xd8>
 8005b1a:	f8c8 1000 	str.w	r1, [r8]
 8005b1e:	e794      	b.n	8005a4a <_strtol_l.isra.0+0x1a>
 8005b20:	08005fc0 	.word	0x08005fc0

08005b24 <_strtol_r>:
 8005b24:	f7ff bf84 	b.w	8005a30 <_strtol_l.isra.0>

08005b28 <_strtoul_l.isra.0>:
 8005b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b2c:	4e34      	ldr	r6, [pc, #208]	@ (8005c00 <_strtoul_l.isra.0+0xd8>)
 8005b2e:	4686      	mov	lr, r0
 8005b30:	460d      	mov	r5, r1
 8005b32:	4628      	mov	r0, r5
 8005b34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b38:	5d37      	ldrb	r7, [r6, r4]
 8005b3a:	f017 0708 	ands.w	r7, r7, #8
 8005b3e:	d1f8      	bne.n	8005b32 <_strtoul_l.isra.0+0xa>
 8005b40:	2c2d      	cmp	r4, #45	@ 0x2d
 8005b42:	d110      	bne.n	8005b66 <_strtoul_l.isra.0+0x3e>
 8005b44:	782c      	ldrb	r4, [r5, #0]
 8005b46:	2701      	movs	r7, #1
 8005b48:	1c85      	adds	r5, r0, #2
 8005b4a:	f033 0010 	bics.w	r0, r3, #16
 8005b4e:	d115      	bne.n	8005b7c <_strtoul_l.isra.0+0x54>
 8005b50:	2c30      	cmp	r4, #48	@ 0x30
 8005b52:	d10d      	bne.n	8005b70 <_strtoul_l.isra.0+0x48>
 8005b54:	7828      	ldrb	r0, [r5, #0]
 8005b56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005b5a:	2858      	cmp	r0, #88	@ 0x58
 8005b5c:	d108      	bne.n	8005b70 <_strtoul_l.isra.0+0x48>
 8005b5e:	786c      	ldrb	r4, [r5, #1]
 8005b60:	3502      	adds	r5, #2
 8005b62:	2310      	movs	r3, #16
 8005b64:	e00a      	b.n	8005b7c <_strtoul_l.isra.0+0x54>
 8005b66:	2c2b      	cmp	r4, #43	@ 0x2b
 8005b68:	bf04      	itt	eq
 8005b6a:	782c      	ldrbeq	r4, [r5, #0]
 8005b6c:	1c85      	addeq	r5, r0, #2
 8005b6e:	e7ec      	b.n	8005b4a <_strtoul_l.isra.0+0x22>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f6      	bne.n	8005b62 <_strtoul_l.isra.0+0x3a>
 8005b74:	2c30      	cmp	r4, #48	@ 0x30
 8005b76:	bf14      	ite	ne
 8005b78:	230a      	movne	r3, #10
 8005b7a:	2308      	moveq	r3, #8
 8005b7c:	f04f 38ff 	mov.w	r8, #4294967295
 8005b80:	2600      	movs	r6, #0
 8005b82:	fbb8 f8f3 	udiv	r8, r8, r3
 8005b86:	fb03 f908 	mul.w	r9, r3, r8
 8005b8a:	ea6f 0909 	mvn.w	r9, r9
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005b94:	f1bc 0f09 	cmp.w	ip, #9
 8005b98:	d810      	bhi.n	8005bbc <_strtoul_l.isra.0+0x94>
 8005b9a:	4664      	mov	r4, ip
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	dd1e      	ble.n	8005bde <_strtoul_l.isra.0+0xb6>
 8005ba0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005ba4:	d007      	beq.n	8005bb6 <_strtoul_l.isra.0+0x8e>
 8005ba6:	4580      	cmp	r8, r0
 8005ba8:	d316      	bcc.n	8005bd8 <_strtoul_l.isra.0+0xb0>
 8005baa:	d101      	bne.n	8005bb0 <_strtoul_l.isra.0+0x88>
 8005bac:	45a1      	cmp	r9, r4
 8005bae:	db13      	blt.n	8005bd8 <_strtoul_l.isra.0+0xb0>
 8005bb0:	fb00 4003 	mla	r0, r0, r3, r4
 8005bb4:	2601      	movs	r6, #1
 8005bb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bba:	e7e9      	b.n	8005b90 <_strtoul_l.isra.0+0x68>
 8005bbc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005bc0:	f1bc 0f19 	cmp.w	ip, #25
 8005bc4:	d801      	bhi.n	8005bca <_strtoul_l.isra.0+0xa2>
 8005bc6:	3c37      	subs	r4, #55	@ 0x37
 8005bc8:	e7e8      	b.n	8005b9c <_strtoul_l.isra.0+0x74>
 8005bca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005bce:	f1bc 0f19 	cmp.w	ip, #25
 8005bd2:	d804      	bhi.n	8005bde <_strtoul_l.isra.0+0xb6>
 8005bd4:	3c57      	subs	r4, #87	@ 0x57
 8005bd6:	e7e1      	b.n	8005b9c <_strtoul_l.isra.0+0x74>
 8005bd8:	f04f 36ff 	mov.w	r6, #4294967295
 8005bdc:	e7eb      	b.n	8005bb6 <_strtoul_l.isra.0+0x8e>
 8005bde:	1c73      	adds	r3, r6, #1
 8005be0:	d106      	bne.n	8005bf0 <_strtoul_l.isra.0+0xc8>
 8005be2:	2322      	movs	r3, #34	@ 0x22
 8005be4:	f8ce 3000 	str.w	r3, [lr]
 8005be8:	4630      	mov	r0, r6
 8005bea:	b932      	cbnz	r2, 8005bfa <_strtoul_l.isra.0+0xd2>
 8005bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bf0:	b107      	cbz	r7, 8005bf4 <_strtoul_l.isra.0+0xcc>
 8005bf2:	4240      	negs	r0, r0
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	d0f9      	beq.n	8005bec <_strtoul_l.isra.0+0xc4>
 8005bf8:	b106      	cbz	r6, 8005bfc <_strtoul_l.isra.0+0xd4>
 8005bfa:	1e69      	subs	r1, r5, #1
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	e7f5      	b.n	8005bec <_strtoul_l.isra.0+0xc4>
 8005c00:	08005fc0 	.word	0x08005fc0

08005c04 <_strtoul_r>:
 8005c04:	f7ff bf90 	b.w	8005b28 <_strtoul_l.isra.0>

08005c08 <_raise_r>:
 8005c08:	291f      	cmp	r1, #31
 8005c0a:	b538      	push	{r3, r4, r5, lr}
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	d904      	bls.n	8005c1c <_raise_r+0x14>
 8005c12:	2316      	movs	r3, #22
 8005c14:	6003      	str	r3, [r0, #0]
 8005c16:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005c1e:	b112      	cbz	r2, 8005c26 <_raise_r+0x1e>
 8005c20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c24:	b94b      	cbnz	r3, 8005c3a <_raise_r+0x32>
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f830 	bl	8005c8c <_getpid_r>
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	4601      	mov	r1, r0
 8005c30:	4628      	mov	r0, r5
 8005c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c36:	f000 b817 	b.w	8005c68 <_kill_r>
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d00a      	beq.n	8005c54 <_raise_r+0x4c>
 8005c3e:	1c59      	adds	r1, r3, #1
 8005c40:	d103      	bne.n	8005c4a <_raise_r+0x42>
 8005c42:	2316      	movs	r3, #22
 8005c44:	6003      	str	r3, [r0, #0]
 8005c46:	2001      	movs	r0, #1
 8005c48:	e7e7      	b.n	8005c1a <_raise_r+0x12>
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c50:	4620      	mov	r0, r4
 8005c52:	4798      	blx	r3
 8005c54:	2000      	movs	r0, #0
 8005c56:	e7e0      	b.n	8005c1a <_raise_r+0x12>

08005c58 <raise>:
 8005c58:	4b02      	ldr	r3, [pc, #8]	@ (8005c64 <raise+0xc>)
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	f7ff bfd3 	b.w	8005c08 <_raise_r>
 8005c62:	bf00      	nop
 8005c64:	20000018 	.word	0x20000018

08005c68 <_kill_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d07      	ldr	r5, [pc, #28]	@ (8005c88 <_kill_r+0x20>)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4604      	mov	r4, r0
 8005c70:	4608      	mov	r0, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	602b      	str	r3, [r5, #0]
 8005c76:	f7fc f80b 	bl	8001c90 <_kill>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	d102      	bne.n	8005c84 <_kill_r+0x1c>
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	b103      	cbz	r3, 8005c84 <_kill_r+0x1c>
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	20000308 	.word	0x20000308

08005c8c <_getpid_r>:
 8005c8c:	f7fb bff8 	b.w	8001c80 <_getpid>

08005c90 <_malloc_usable_size_r>:
 8005c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c94:	1f18      	subs	r0, r3, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bfbc      	itt	lt
 8005c9a:	580b      	ldrlt	r3, [r1, r0]
 8005c9c:	18c0      	addlt	r0, r0, r3
 8005c9e:	4770      	bx	lr

08005ca0 <_init>:
 8005ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca2:	bf00      	nop
 8005ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca6:	bc08      	pop	{r3}
 8005ca8:	469e      	mov	lr, r3
 8005caa:	4770      	bx	lr

08005cac <_fini>:
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cae:	bf00      	nop
 8005cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb2:	bc08      	pop	{r3}
 8005cb4:	469e      	mov	lr, r3
 8005cb6:	4770      	bx	lr
